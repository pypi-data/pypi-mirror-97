Metadata-Version: 2.1
Name: LiteSQL
Version: 2.0
Summary: Библиотека для легкого использования БД!
Home-page: UNKNOWN
Author-email: ma_mush@mail.ru
License: UNKNOWN
Description: 
        # LiteSQL 
        База данных? Без проблем!
        
        # РЕКОМЕНДУЮ ЧИТАТЬ НА GITHUB
        https://github.com/Ma-Mush/LiteSQL
        
        # КРАТКАЯ ДОКУМЕНТАЦИЯ
        Привет! Эта библиотека создана для простого и быстрого создания и редактирования базы данных формата SQL.
         Библиотека основана на sqlite3
        
        Pypi - https://pypi.org/project/LiteSQL
        
        ## Импорты
        Рекомендуем использовать from LiteSQL import lsql (он будет рассмотрен тут), но есть и другие варианты импорта.
        
        ## _=lsql()(file_name)
        Открывает файл БД если он существует, либо создает его и открывет (Имя файла писать без .bd)
        
        file_name - имя файла без .bd
        ## _.create(names, table="albums")
        Создает столбцы таблицы
        
        Название  | Что это?
        ------------- | -------------
        names | строка в виде названий столбцов через ", ", например "Имя, Улица"
        table | название подтаблицы, по умолчанию albums (не спрашивайте почему) - больше не буду про него писать
        
        ## _.insert_data(data_mass, len_title, table="albums")
        Вставляет данные в таблицу по строкам с помощью массива
        
        Название  | Что это?
        ------------- | -------------
        data_mass | массив с кортежами через запятую (если их несколько), например [("Вася", "Покровская")] для одного заполнения одной строки из 2 столбцов или [("Петя", "Ленина"), ("Лена", "Уфимская")] для заполнения сразу 2-х строчек из 2-х столбцов.
        len_title | число столбцов в БД (да, я не мог сделать функцию, которая это определяет)
        
        ## _.edit_data(title_last, last, title_new, new, table="albums")
        Изменяет данные в конкретной ячейке таблицы
        Название  | Что это?
        ------------- | -------------
        title_last | название столбца поиска 
        last | данные, которые мы ищем в конкретном столбце для выявления строки (строк)
        (предыдущие 2 | всего лишь находят строку, в которой надо что-то изменить, но никак не влияют на изменение)
        title_new | название столбца, данные в котором надо изменить 
        new | данные, которые нужно вписать в ячейку конкретного столбца этой строки
        
        ## _.delete_data(name, title_name, table="albums")
        Удаление строки (строк), где присутсвует конкретное имя в конкретном столбце
        
        Название  | Что это?
        ------------- | -------------
        name | данные, которые мы ищем в конкретном столбце для последующего удаления найденой строки
        title_name | столбец для поиска данных
        
        ## _.select_data(name, title, row_factor=False, table="albums")
        Поиск и возврат данных в переменную по данным и столбцу
        
        Название  | Что это?
        ------------- | -------------
        name | данные, которые мы ищем в конкретном столбце для вывода строки
        title | название столбца поиска
        row_factor | тип вывода данных, по умолчанию выключен и выводится в формате fetchone, если передать True - вернется в fetchall
        
        ## _.select_data_with_sort(type_sort, name, title_name, table="albums")
        Тоже самое, что и с _.select_data, но с сортировкой. name можно придать None, и тогда вернется только столбик
        
        Название  | Что это?
        ------------- | -------------
        type_sort | тип сортировки (подробнее в документации sqlite3)
        name | данные, которые мы ищем в конкретном столбце для вывода строки
        title | название столбца поиска
        
        ## _.search(type_search, name_search, table="albums")
        Поиск данных в БД и возврат их в переменную
        
        Название  | Что это?
        ------------- | -------------
        type_search | тип поиска (например - title - столбцы)
        name_search | имя, которое мы ищем (в том числе с помощью неопределенности - например % может искать любое количество любых символов в имени, даже 0), например "у%ица"
        
        ## _.get_all_data(table="albums")
        Возвращает всю таблицу.
        
        ## _.get_cursor()
        Вернет вам курсор для ваших запросов)
        
        ## _.get_connect()
        Вернет вам коннект с бд для ваших запросов)
        
        # Примеры
        ```python
        from LiteSQL.LiteSQL.__init__ import lsql
        sql = lsql('test_LiteSQL1111') #Соединяемся с БД по имени test_LiteSQL.bd
        sql.create('id, hash') #Создаем 2 столбца - id и hash
        sql.insert_data([('234', '234'), ('3234235', '134234234')], 2) #Добавляем данные
        a = sql.select_data('234', 'id') #Ищем строку, в которой id = '234'
        print(a) #Результат - [('234', '234')]
        sql.edit_data('id', '234', 'hash', '1234') #Изменяем данные - там, где id = 234, теперь hash = 1234
        a = sql.select_data('234', 'id') #Ищем строку, в которой id = '234'
        print(a) #Результат - [('234', '1234')]
        b = sql.search('id', '3234235') #Поиск строк 
        print(b) #Результат - [('3234235', '134234234')]
        a = sql.select_data_with_sort('rowid', None, 'id') #Сортировка строк по возрастанию данных в id
        print(a) #Результат - [(1, '234', '1234'), (2, '3234235', '134234234')]
        a = sql.get_all_data() #Вернем всю таблицу?
        print(a) #Результат - [('234', '234'), ('3234235', '134234234')]
        ```
        
        # Контакты
        
        Что-то не работает, есть вопросы, пожелания? Пиши - vk.com/maks.mushtriev2, t.me/Error_mak25
        
        Мой блог - vk.com/mamush_blog
        
        Донат - vk.cc/az7BQK (Киви)
        
        
        # Удачи!
        
Platform: UNKNOWN
Requires-Python: >=3.6
Description-Content-Type: text/markdown
