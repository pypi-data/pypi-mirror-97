# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusDbPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusDbPy')
    _VisusDbPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusDbPy', [dirname(__file__)])
        except ImportError:
            import _VisusDbPy
            return _VisusDbPy
        try:
            _mod = imp.load_module('_VisusDbPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusDbPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusDbPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusDbPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusDbPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusDbPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusDbPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusDbPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusDbPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusDbPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusDbPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusDbPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusDbPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusDbPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusDbPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusDbPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusDbPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusDbPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusDbPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusDbPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusDbPy.SHARED_PTR_DISOWN
import VisusKernelPy

def LoadDataset(url):
	from OpenVisus.dataset import PyDataset
	return PyDataset(LoadDatasetCpp(url))

def LoadIdxDataset(url):
	return LoadDataset(url)

class DbModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DbModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DbModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusDbPy.DbModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusDbPy.DbModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusDbPy.DbModule_bAttached_get, _VisusDbPy.DbModule_bAttached_set)
    if _newclass:
        detach = staticmethod(_VisusDbPy.DbModule_detach)
    else:
        detach = _VisusDbPy.DbModule_detach
    if _newclass:
        attach = staticmethod(_VisusDbPy.DbModule_attach)
    else:
        attach = _VisusDbPy.DbModule_attach

    def __init__(self):
        this = _VisusDbPy.new_DbModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_DbModule
    __del__ = lambda self: None
DbModule_swigregister = _VisusDbPy.DbModule_swigregister
DbModule_swigregister(DbModule)
cvar = _VisusDbPy.cvar

def DbModule_detach():
    return _VisusDbPy.DbModule_detach()
DbModule_detach = _VisusDbPy.DbModule_detach

def DbModule_attach():
    return _VisusDbPy.DbModule_attach()
DbModule_attach = _VisusDbPy.DbModule_attach

class Access(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Access, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Access, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusDbPy.Access_name_set
    __swig_getmethods__["name"] = _VisusDbPy.Access_name_get
    if _newclass:
        name = _swig_property(_VisusDbPy.Access_name_get, _VisusDbPy.Access_name_set)
    __swig_setmethods__["can_read"] = _VisusDbPy.Access_can_read_set
    __swig_getmethods__["can_read"] = _VisusDbPy.Access_can_read_get
    if _newclass:
        can_read = _swig_property(_VisusDbPy.Access_can_read_get, _VisusDbPy.Access_can_read_set)
    __swig_setmethods__["can_write"] = _VisusDbPy.Access_can_write_set
    __swig_getmethods__["can_write"] = _VisusDbPy.Access_can_write_get
    if _newclass:
        can_write = _swig_property(_VisusDbPy.Access_can_write_get, _VisusDbPy.Access_can_write_set)
    __swig_setmethods__["bitsperblock"] = _VisusDbPy.Access_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _VisusDbPy.Access_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_VisusDbPy.Access_bitsperblock_get, _VisusDbPy.Access_bitsperblock_set)
    __swig_setmethods__["statistics"] = _VisusDbPy.Access_statistics_set
    __swig_getmethods__["statistics"] = _VisusDbPy.Access_statistics_get
    if _newclass:
        statistics = _swig_property(_VisusDbPy.Access_statistics_get, _VisusDbPy.Access_statistics_set)
    __swig_setmethods__["bVerbose"] = _VisusDbPy.Access_bVerbose_set
    __swig_getmethods__["bVerbose"] = _VisusDbPy.Access_bVerbose_get
    if _newclass:
        bVerbose = _swig_property(_VisusDbPy.Access_bVerbose_get, _VisusDbPy.Access_bVerbose_set)
    __swig_setmethods__["bDisableWriteLocks"] = _VisusDbPy.Access_bDisableWriteLocks_set
    __swig_getmethods__["bDisableWriteLocks"] = _VisusDbPy.Access_bDisableWriteLocks_get
    if _newclass:
        bDisableWriteLocks = _swig_property(_VisusDbPy.Access_bDisableWriteLocks_get, _VisusDbPy.Access_bDisableWriteLocks_set)
    __swig_destroy__ = _VisusDbPy.delete_Access
    __del__ = lambda self: None

    def disableWriteLock(self):
        return _VisusDbPy.Access_disableWriteLock(self)

    def getSamplesPerBlock(self):
        return _VisusDbPy.Access_getSamplesPerBlock(self)

    def getFilename(self, *args):
        return _VisusDbPy.Access_getFilename(self, *args)

    def getStartAddress(self, block_id):
        return _VisusDbPy.Access_getStartAddress(self, block_id)

    def getEndAddress(self, block_id):
        return _VisusDbPy.Access_getEndAddress(self, block_id)

    def getMode(self):
        return _VisusDbPy.Access_getMode(self)

    def isWriting(self):
        return _VisusDbPy.Access_isWriting(self)

    def isReading(self):
        return _VisusDbPy.Access_isReading(self)

    def beginIO(self, mode):
        return _VisusDbPy.Access_beginIO(self, mode)

    def endIO(self):
        return _VisusDbPy.Access_endIO(self)

    def readBlock(self, query):
        return _VisusDbPy.Access_readBlock(self, query)

    def writeBlock(self, query):
        return _VisusDbPy.Access_writeBlock(self, query)

    def beginRead(self):
        return _VisusDbPy.Access_beginRead(self)

    def endRead(self):
        return _VisusDbPy.Access_endRead(self)

    def beginWrite(self):
        return _VisusDbPy.Access_beginWrite(self)

    def endWrite(self):
        return _VisusDbPy.Access_endWrite(self)

    def acquireWriteLock(self, query):
        return _VisusDbPy.Access_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _VisusDbPy.Access_releaseWriteLock(self, query)

    def resetStatistics(self):
        return _VisusDbPy.Access_resetStatistics(self)

    def printStatistics(self):
        return _VisusDbPy.Access_printStatistics(self)

    def write(self, ar):
        return _VisusDbPy.Access_write(self, ar)

    def read(self, ar):
        return _VisusDbPy.Access_read(self, ar)

    def readOk(self, query):
        return _VisusDbPy.Access_readOk(self, query)

    def readFailed(self, query):
        return _VisusDbPy.Access_readFailed(self, query)

    def writeOk(self, query):
        return _VisusDbPy.Access_writeOk(self, query)

    def writeFailed(self, query):
        return _VisusDbPy.Access_writeFailed(self, query)
Access_swigregister = _VisusDbPy.Access_swigregister
Access_swigregister(Access)
Access.DefaultChMod = _VisusDbPy.cvar.Access_DefaultChMod

class LogicSamples(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LogicSamples, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LogicSamples, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logic_box"] = _VisusDbPy.LogicSamples_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.LogicSamples_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.LogicSamples_logic_box_get, _VisusDbPy.LogicSamples_logic_box_set)
    __swig_setmethods__["nsamples"] = _VisusDbPy.LogicSamples_nsamples_set
    __swig_getmethods__["nsamples"] = _VisusDbPy.LogicSamples_nsamples_get
    if _newclass:
        nsamples = _swig_property(_VisusDbPy.LogicSamples_nsamples_get, _VisusDbPy.LogicSamples_nsamples_set)
    __swig_setmethods__["delta"] = _VisusDbPy.LogicSamples_delta_set
    __swig_getmethods__["delta"] = _VisusDbPy.LogicSamples_delta_get
    if _newclass:
        delta = _swig_property(_VisusDbPy.LogicSamples_delta_get, _VisusDbPy.LogicSamples_delta_set)
    __swig_setmethods__["shift"] = _VisusDbPy.LogicSamples_shift_set
    __swig_getmethods__["shift"] = _VisusDbPy.LogicSamples_shift_get
    if _newclass:
        shift = _swig_property(_VisusDbPy.LogicSamples_shift_get, _VisusDbPy.LogicSamples_shift_set)

    def __init__(self, *args):
        this = _VisusDbPy.new_LogicSamples(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusDbPy.LogicSamples_invalid)
    else:
        invalid = _VisusDbPy.LogicSamples_invalid

    def valid(self):
        return _VisusDbPy.LogicSamples_valid(self)

    def __eq__(self, other):
        return _VisusDbPy.LogicSamples___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.LogicSamples___ne__(self, other)

    def pixelToLogic(self, value):
        return _VisusDbPy.LogicSamples_pixelToLogic(self, value)

    def logicToPixel(self, value):
        return _VisusDbPy.LogicSamples_logicToPixel(self, value)

    def alignBox(self, value):
        return _VisusDbPy.LogicSamples_alignBox(self, value)
    __swig_destroy__ = _VisusDbPy.delete_LogicSamples
    __del__ = lambda self: None
LogicSamples_swigregister = _VisusDbPy.LogicSamples_swigregister
LogicSamples_swigregister(LogicSamples)

def LogicSamples_invalid():
    return _VisusDbPy.LogicSamples_invalid()
LogicSamples_invalid = _VisusDbPy.LogicSamples_invalid

class Query(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Query, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Query, name)
    __repr__ = _swig_repr
    QueryCreated = _VisusDbPy.Query_QueryCreated
    QueryRunning = _VisusDbPy.Query_QueryRunning
    QueryFailed = _VisusDbPy.Query_QueryFailed
    QueryOk = _VisusDbPy.Query_QueryOk
    __swig_setmethods__["dataset"] = _VisusDbPy.Query_dataset_set
    __swig_getmethods__["dataset"] = _VisusDbPy.Query_dataset_get
    if _newclass:
        dataset = _swig_property(_VisusDbPy.Query_dataset_get, _VisusDbPy.Query_dataset_set)
    __swig_setmethods__["mode"] = _VisusDbPy.Query_mode_set
    __swig_getmethods__["mode"] = _VisusDbPy.Query_mode_get
    if _newclass:
        mode = _swig_property(_VisusDbPy.Query_mode_get, _VisusDbPy.Query_mode_set)
    __swig_setmethods__["field"] = _VisusDbPy.Query_field_set
    __swig_getmethods__["field"] = _VisusDbPy.Query_field_get
    if _newclass:
        field = _swig_property(_VisusDbPy.Query_field_get, _VisusDbPy.Query_field_set)
    __swig_setmethods__["time"] = _VisusDbPy.Query_time_set
    __swig_getmethods__["time"] = _VisusDbPy.Query_time_get
    if _newclass:
        time = _swig_property(_VisusDbPy.Query_time_get, _VisusDbPy.Query_time_set)
    __swig_setmethods__["aborted"] = _VisusDbPy.Query_aborted_set
    __swig_getmethods__["aborted"] = _VisusDbPy.Query_aborted_get
    if _newclass:
        aborted = _swig_property(_VisusDbPy.Query_aborted_get, _VisusDbPy.Query_aborted_set)
    __swig_setmethods__["buffer"] = _VisusDbPy.Query_buffer_set
    __swig_getmethods__["buffer"] = _VisusDbPy.Query_buffer_get
    if _newclass:
        buffer = _swig_property(_VisusDbPy.Query_buffer_get, _VisusDbPy.Query_buffer_set)
    __swig_setmethods__["status"] = _VisusDbPy.Query_status_set
    __swig_getmethods__["status"] = _VisusDbPy.Query_status_get
    if _newclass:
        status = _swig_property(_VisusDbPy.Query_status_get, _VisusDbPy.Query_status_set)
    __swig_setmethods__["errormsg"] = _VisusDbPy.Query_errormsg_set
    __swig_getmethods__["errormsg"] = _VisusDbPy.Query_errormsg_get
    if _newclass:
        errormsg = _swig_property(_VisusDbPy.Query_errormsg_get, _VisusDbPy.Query_errormsg_set)
    __swig_setmethods__["done"] = _VisusDbPy.Query_done_set
    __swig_getmethods__["done"] = _VisusDbPy.Query_done_get
    if _newclass:
        done = _swig_property(_VisusDbPy.Query_done_get, _VisusDbPy.Query_done_set)

    def __init__(self):
        this = _VisusDbPy.new_Query()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_Query
    __del__ = lambda self: None

    def getStatus(self):
        return _VisusDbPy.Query_getStatus(self)

    def setStatus(self, value):
        return _VisusDbPy.Query_setStatus(self, value)

    def ok(self):
        return _VisusDbPy.Query_ok(self)

    def failed(self):
        return _VisusDbPy.Query_failed(self)

    def isRunning(self):
        return _VisusDbPy.Query_isRunning(self)

    def setRunning(self):
        return _VisusDbPy.Query_setRunning(self)

    def setOk(self):
        return _VisusDbPy.Query_setOk(self)

    def setFailed(self, *args):
        return _VisusDbPy.Query_setFailed(self, *args)
Query_swigregister = _VisusDbPy.Query_swigregister
Query_swigregister(Query)

class BlockQueryGlobalStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockQueryGlobalStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlockQueryGlobalStats, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusDbPy.new_BlockQueryGlobalStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resetStats(self):
        return _VisusDbPy.BlockQueryGlobalStats_resetStats(self)

    def getNumRead(self):
        return _VisusDbPy.BlockQueryGlobalStats_getNumRead(self)

    def getNumWrite(self):
        return _VisusDbPy.BlockQueryGlobalStats_getNumWrite(self)
    __swig_destroy__ = _VisusDbPy.delete_BlockQueryGlobalStats
    __del__ = lambda self: None
BlockQueryGlobalStats_swigregister = _VisusDbPy.BlockQueryGlobalStats_swigregister
BlockQueryGlobalStats_swigregister(BlockQueryGlobalStats)

class BlockQuery(Query):
    __swig_setmethods__ = {}
    for _s in [Query]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlockQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Query]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BlockQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["blockid"] = _VisusDbPy.BlockQuery_blockid_set
    __swig_getmethods__["blockid"] = _VisusDbPy.BlockQuery_blockid_get
    if _newclass:
        blockid = _swig_property(_VisusDbPy.BlockQuery_blockid_get, _VisusDbPy.BlockQuery_blockid_set)
    __swig_setmethods__["H"] = _VisusDbPy.BlockQuery_H_set
    __swig_getmethods__["H"] = _VisusDbPy.BlockQuery_H_get
    if _newclass:
        H = _swig_property(_VisusDbPy.BlockQuery_H_get, _VisusDbPy.BlockQuery_H_set)
    __swig_setmethods__["logic_samples"] = _VisusDbPy.BlockQuery_logic_samples_set
    __swig_getmethods__["logic_samples"] = _VisusDbPy.BlockQuery_logic_samples_get
    if _newclass:
        logic_samples = _swig_property(_VisusDbPy.BlockQuery_logic_samples_get, _VisusDbPy.BlockQuery_logic_samples_set)

    def __init__(self):
        this = _VisusDbPy.new_BlockQuery()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        global_stats = staticmethod(_VisusDbPy.BlockQuery_global_stats)
    else:
        global_stats = _VisusDbPy.BlockQuery_global_stats
    if _newclass:
        readBlockEvent = staticmethod(_VisusDbPy.BlockQuery_readBlockEvent)
    else:
        readBlockEvent = _VisusDbPy.BlockQuery_readBlockEvent
    if _newclass:
        writeBlockEvent = staticmethod(_VisusDbPy.BlockQuery_writeBlockEvent)
    else:
        writeBlockEvent = _VisusDbPy.BlockQuery_writeBlockEvent

    def getNumberOfSamples(self):
        return _VisusDbPy.BlockQuery_getNumberOfSamples(self)

    def getByteSize(self):
        return _VisusDbPy.BlockQuery_getByteSize(self)

    def getLogicBox(self):
        return _VisusDbPy.BlockQuery_getLogicBox(self)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.BlockQuery_allocateBufferIfNeeded(self)
    __swig_destroy__ = _VisusDbPy.delete_BlockQuery
    __del__ = lambda self: None
BlockQuery_swigregister = _VisusDbPy.BlockQuery_swigregister
BlockQuery_swigregister(BlockQuery)

def BlockQuery_global_stats():
    return _VisusDbPy.BlockQuery_global_stats()
BlockQuery_global_stats = _VisusDbPy.BlockQuery_global_stats

def BlockQuery_readBlockEvent():
    return _VisusDbPy.BlockQuery_readBlockEvent()
BlockQuery_readBlockEvent = _VisusDbPy.BlockQuery_readBlockEvent

def BlockQuery_writeBlockEvent():
    return _VisusDbPy.BlockQuery_writeBlockEvent()
BlockQuery_writeBlockEvent = _VisusDbPy.BlockQuery_writeBlockEvent

QueryGuessProgression = _VisusDbPy.QueryGuessProgression
QueryNoProgression = _VisusDbPy.QueryNoProgression
QueryDefaultQuality = _VisusDbPy.QueryDefaultQuality
class BoxQuery(Query):
    __swig_setmethods__ = {}
    for _s in [Query]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Query]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, BoxQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logic_box"] = _VisusDbPy.BoxQuery_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.BoxQuery_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.BoxQuery_logic_box_get, _VisusDbPy.BoxQuery_logic_box_set)
    __swig_setmethods__["logic_samples"] = _VisusDbPy.BoxQuery_logic_samples_set
    __swig_getmethods__["logic_samples"] = _VisusDbPy.BoxQuery_logic_samples_get
    if _newclass:
        logic_samples = _swig_property(_VisusDbPy.BoxQuery_logic_samples_get, _VisusDbPy.BoxQuery_logic_samples_set)
    __swig_setmethods__["start_resolution"] = _VisusDbPy.BoxQuery_start_resolution_set
    __swig_getmethods__["start_resolution"] = _VisusDbPy.BoxQuery_start_resolution_get
    if _newclass:
        start_resolution = _swig_property(_VisusDbPy.BoxQuery_start_resolution_get, _VisusDbPy.BoxQuery_start_resolution_set)
    __swig_setmethods__["cur_resolution"] = _VisusDbPy.BoxQuery_cur_resolution_set
    __swig_getmethods__["cur_resolution"] = _VisusDbPy.BoxQuery_cur_resolution_get
    if _newclass:
        cur_resolution = _swig_property(_VisusDbPy.BoxQuery_cur_resolution_get, _VisusDbPy.BoxQuery_cur_resolution_set)
    __swig_setmethods__["end_resolution"] = _VisusDbPy.BoxQuery_end_resolution_set
    __swig_getmethods__["end_resolution"] = _VisusDbPy.BoxQuery_end_resolution_get
    if _newclass:
        end_resolution = _swig_property(_VisusDbPy.BoxQuery_end_resolution_get, _VisusDbPy.BoxQuery_end_resolution_set)
    __swig_setmethods__["end_resolutions"] = _VisusDbPy.BoxQuery_end_resolutions_set
    __swig_getmethods__["end_resolutions"] = _VisusDbPy.BoxQuery_end_resolutions_get
    if _newclass:
        end_resolutions = _swig_property(_VisusDbPy.BoxQuery_end_resolutions_get, _VisusDbPy.BoxQuery_end_resolutions_set)

    def __init__(self):
        this = _VisusDbPy.new_BoxQuery()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def canExecute(self):
        return _VisusDbPy.BoxQuery_canExecute(self)

    def getNumberOfSamples(self):
        return _VisusDbPy.BoxQuery_getNumberOfSamples(self)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.BoxQuery_allocateBufferIfNeeded(self)

    def getByteSize(self):
        return _VisusDbPy.BoxQuery_getByteSize(self)

    def getCurrentResolution(self):
        return _VisusDbPy.BoxQuery_getCurrentResolution(self)

    def setCurrentResolution(self, value):
        return _VisusDbPy.BoxQuery_setCurrentResolution(self, value)

    def getEndResolution(self):
        return _VisusDbPy.BoxQuery_getEndResolution(self)

    def setResolutionRange(self, A, B):
        return _VisusDbPy.BoxQuery_setResolutionRange(self, A, B)

    def disableFilters(self):
        return _VisusDbPy.BoxQuery_disableFilters(self)

    def enableFilters(self):
        return _VisusDbPy.BoxQuery_enableFilters(self)
    __swig_destroy__ = _VisusDbPy.delete_BoxQuery
    __del__ = lambda self: None
BoxQuery_swigregister = _VisusDbPy.BoxQuery_swigregister
BoxQuery_swigregister(BoxQuery)

class PointQuery(Query):
    __swig_setmethods__ = {}
    for _s in [Query]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointQuery, name, value)
    __swig_getmethods__ = {}
    for _s in [Query]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, PointQuery, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logic_position"] = _VisusDbPy.PointQuery_logic_position_set
    __swig_getmethods__["logic_position"] = _VisusDbPy.PointQuery_logic_position_get
    if _newclass:
        logic_position = _swig_property(_VisusDbPy.PointQuery_logic_position_get, _VisusDbPy.PointQuery_logic_position_set)
    __swig_setmethods__["npoints"] = _VisusDbPy.PointQuery_npoints_set
    __swig_getmethods__["npoints"] = _VisusDbPy.PointQuery_npoints_get
    if _newclass:
        npoints = _swig_property(_VisusDbPy.PointQuery_npoints_get, _VisusDbPy.PointQuery_npoints_set)
    __swig_setmethods__["points"] = _VisusDbPy.PointQuery_points_set
    __swig_getmethods__["points"] = _VisusDbPy.PointQuery_points_get
    if _newclass:
        points = _swig_property(_VisusDbPy.PointQuery_points_get, _VisusDbPy.PointQuery_points_set)
    __swig_setmethods__["start_resolution"] = _VisusDbPy.PointQuery_start_resolution_set
    __swig_getmethods__["start_resolution"] = _VisusDbPy.PointQuery_start_resolution_get
    if _newclass:
        start_resolution = _swig_property(_VisusDbPy.PointQuery_start_resolution_get, _VisusDbPy.PointQuery_start_resolution_set)
    __swig_setmethods__["cur_resolution"] = _VisusDbPy.PointQuery_cur_resolution_set
    __swig_getmethods__["cur_resolution"] = _VisusDbPy.PointQuery_cur_resolution_get
    if _newclass:
        cur_resolution = _swig_property(_VisusDbPy.PointQuery_cur_resolution_get, _VisusDbPy.PointQuery_cur_resolution_set)
    __swig_setmethods__["end_resolution"] = _VisusDbPy.PointQuery_end_resolution_set
    __swig_getmethods__["end_resolution"] = _VisusDbPy.PointQuery_end_resolution_get
    if _newclass:
        end_resolution = _swig_property(_VisusDbPy.PointQuery_end_resolution_get, _VisusDbPy.PointQuery_end_resolution_set)
    __swig_setmethods__["end_resolutions"] = _VisusDbPy.PointQuery_end_resolutions_set
    __swig_getmethods__["end_resolutions"] = _VisusDbPy.PointQuery_end_resolutions_get
    if _newclass:
        end_resolutions = _swig_property(_VisusDbPy.PointQuery_end_resolutions_get, _VisusDbPy.PointQuery_end_resolutions_set)
    __swig_setmethods__["offsets"] = _VisusDbPy.PointQuery_offsets_set
    __swig_getmethods__["offsets"] = _VisusDbPy.PointQuery_offsets_get
    if _newclass:
        offsets = _swig_property(_VisusDbPy.PointQuery_offsets_get, _VisusDbPy.PointQuery_offsets_set)

    def __init__(self):
        this = _VisusDbPy.new_PointQuery()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumberOfPoints(self):
        return _VisusDbPy.PointQuery_getNumberOfPoints(self)

    def getByteSize(self):
        return _VisusDbPy.PointQuery_getByteSize(self)

    def setPoints(self, nsamples):
        return _VisusDbPy.PointQuery_setPoints(self, nsamples)

    def getCurrentResolution(self):
        return _VisusDbPy.PointQuery_getCurrentResolution(self)

    def setCurrentResolution(self, value):
        return _VisusDbPy.PointQuery_setCurrentResolution(self, value)

    def getEndResolution(self):
        return _VisusDbPy.PointQuery_getEndResolution(self)
    __swig_destroy__ = _VisusDbPy.delete_PointQuery
    __del__ = lambda self: None
PointQuery_swigregister = _VisusDbPy.PointQuery_swigregister
PointQuery_swigregister(PointQuery)

class IdxFile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IdxFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["version"] = _VisusDbPy.IdxFile_version_set
    __swig_getmethods__["version"] = _VisusDbPy.IdxFile_version_get
    if _newclass:
        version = _swig_property(_VisusDbPy.IdxFile_version_get, _VisusDbPy.IdxFile_version_set)
    __swig_setmethods__["bitmask"] = _VisusDbPy.IdxFile_bitmask_set
    __swig_getmethods__["bitmask"] = _VisusDbPy.IdxFile_bitmask_get
    if _newclass:
        bitmask = _swig_property(_VisusDbPy.IdxFile_bitmask_get, _VisusDbPy.IdxFile_bitmask_set)
    __swig_setmethods__["logic_box"] = _VisusDbPy.IdxFile_logic_box_set
    __swig_getmethods__["logic_box"] = _VisusDbPy.IdxFile_logic_box_get
    if _newclass:
        logic_box = _swig_property(_VisusDbPy.IdxFile_logic_box_get, _VisusDbPy.IdxFile_logic_box_set)
    __swig_setmethods__["bounds"] = _VisusDbPy.IdxFile_bounds_set
    __swig_getmethods__["bounds"] = _VisusDbPy.IdxFile_bounds_get
    if _newclass:
        bounds = _swig_property(_VisusDbPy.IdxFile_bounds_get, _VisusDbPy.IdxFile_bounds_set)
    __swig_setmethods__["fields"] = _VisusDbPy.IdxFile_fields_set
    __swig_getmethods__["fields"] = _VisusDbPy.IdxFile_fields_get
    if _newclass:
        fields = _swig_property(_VisusDbPy.IdxFile_fields_get, _VisusDbPy.IdxFile_fields_set)
    __swig_setmethods__["timesteps"] = _VisusDbPy.IdxFile_timesteps_set
    __swig_getmethods__["timesteps"] = _VisusDbPy.IdxFile_timesteps_get
    if _newclass:
        timesteps = _swig_property(_VisusDbPy.IdxFile_timesteps_get, _VisusDbPy.IdxFile_timesteps_set)
    __swig_setmethods__["bitsperblock"] = _VisusDbPy.IdxFile_bitsperblock_set
    __swig_getmethods__["bitsperblock"] = _VisusDbPy.IdxFile_bitsperblock_get
    if _newclass:
        bitsperblock = _swig_property(_VisusDbPy.IdxFile_bitsperblock_get, _VisusDbPy.IdxFile_bitsperblock_set)
    __swig_setmethods__["blocksperfile"] = _VisusDbPy.IdxFile_blocksperfile_set
    __swig_getmethods__["blocksperfile"] = _VisusDbPy.IdxFile_blocksperfile_get
    if _newclass:
        blocksperfile = _swig_property(_VisusDbPy.IdxFile_blocksperfile_get, _VisusDbPy.IdxFile_blocksperfile_set)
    __swig_setmethods__["block_interleaving"] = _VisusDbPy.IdxFile_block_interleaving_set
    __swig_getmethods__["block_interleaving"] = _VisusDbPy.IdxFile_block_interleaving_get
    if _newclass:
        block_interleaving = _swig_property(_VisusDbPy.IdxFile_block_interleaving_get, _VisusDbPy.IdxFile_block_interleaving_set)
    __swig_setmethods__["filename_template"] = _VisusDbPy.IdxFile_filename_template_set
    __swig_getmethods__["filename_template"] = _VisusDbPy.IdxFile_filename_template_get
    if _newclass:
        filename_template = _swig_property(_VisusDbPy.IdxFile_filename_template_get, _VisusDbPy.IdxFile_filename_template_set)
    __swig_setmethods__["time_template"] = _VisusDbPy.IdxFile_time_template_set
    __swig_getmethods__["time_template"] = _VisusDbPy.IdxFile_time_template_get
    if _newclass:
        time_template = _swig_property(_VisusDbPy.IdxFile_time_template_get, _VisusDbPy.IdxFile_time_template_set)
    __swig_setmethods__["missing_blocks"] = _VisusDbPy.IdxFile_missing_blocks_set
    __swig_getmethods__["missing_blocks"] = _VisusDbPy.IdxFile_missing_blocks_get
    if _newclass:
        missing_blocks = _swig_property(_VisusDbPy.IdxFile_missing_blocks_get, _VisusDbPy.IdxFile_missing_blocks_set)

    def __init__(self, version_=0):
        this = _VisusDbPy.new_IdxFile(version_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def load(self, *args):
        return _VisusDbPy.IdxFile_load(self, *args)

    def save(self, filename):
        return _VisusDbPy.IdxFile_save(self, filename)
    if _newclass:
        parseFields = staticmethod(_VisusDbPy.IdxFile_parseFields)
    else:
        parseFields = _VisusDbPy.IdxFile_parseFields

    def getBlockPositionInFile(self, blockid):
        return _VisusDbPy.IdxFile_getBlockPositionInFile(self, blockid)

    def getFirstBlockInFile(self, blockid):
        return _VisusDbPy.IdxFile_getFirstBlockInFile(self, blockid)

    def guessFilenameTemplate(self, url):
        return _VisusDbPy.IdxFile_guessFilenameTemplate(self, url)

    def validate(self, url):
        return _VisusDbPy.IdxFile_validate(self, url)

    def read(self, ar):
        return _VisusDbPy.IdxFile_read(self, ar)

    def write(self, ar):
        return _VisusDbPy.IdxFile_write(self, ar)

    def toString(self):
        return _VisusDbPy.IdxFile_toString(self)

    def readFromOldFormat(self, content):
        return _VisusDbPy.IdxFile_readFromOldFormat(self, content)

    def writeToOldFormat(self):
        return _VisusDbPy.IdxFile_writeToOldFormat(self)
    __swig_destroy__ = _VisusDbPy.delete_IdxFile
    __del__ = lambda self: None
IdxFile_swigregister = _VisusDbPy.IdxFile_swigregister
IdxFile_swigregister(IdxFile)

def IdxFile_parseFields(content):
    return _VisusDbPy.IdxFile_parseFields(content)
IdxFile_parseFields = _VisusDbPy.IdxFile_parseFields

class DatasetBitmask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetBitmask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetBitmask, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusDbPy.new_DatasetBitmask()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusDbPy.DatasetBitmask_fromString)
    else:
        fromString = _VisusDbPy.DatasetBitmask_fromString
    if _newclass:
        guess = staticmethod(_VisusDbPy.DatasetBitmask_guess)
    else:
        guess = _VisusDbPy.DatasetBitmask_guess
    if _newclass:
        invalid = staticmethod(_VisusDbPy.DatasetBitmask_invalid)
    else:
        invalid = _VisusDbPy.DatasetBitmask_invalid

    def empty(self):
        return _VisusDbPy.DatasetBitmask_empty(self)

    def valid(self):
        return _VisusDbPy.DatasetBitmask_valid(self)

    def getMaxResolution(self):
        return _VisusDbPy.DatasetBitmask_getMaxResolution(self)

    def getPointDim(self):
        return _VisusDbPy.DatasetBitmask_getPointDim(self)

    def getPow2Dims(self):
        return _VisusDbPy.DatasetBitmask_getPow2Dims(self)

    def getPow2Box(self):
        return _VisusDbPy.DatasetBitmask_getPow2Box(self)

    def __getitem__(self, I):
        return _VisusDbPy.DatasetBitmask___getitem__(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetBitmask___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetBitmask___ne__(self, other)

    def deinterleave(self, z, max_resolution):
        return _VisusDbPy.DatasetBitmask_deinterleave(self, z, max_resolution)

    def toString(self):
        return _VisusDbPy.DatasetBitmask_toString(self)
    if _newclass:
        add = staticmethod(_VisusDbPy.DatasetBitmask_add)
    else:
        add = _VisusDbPy.DatasetBitmask_add
    __swig_destroy__ = _VisusDbPy.delete_DatasetBitmask
    __del__ = lambda self: None
DatasetBitmask_swigregister = _VisusDbPy.DatasetBitmask_swigregister
DatasetBitmask_swigregister(DatasetBitmask)

def DatasetBitmask_fromString(pattern):
    return _VisusDbPy.DatasetBitmask_fromString(pattern)
DatasetBitmask_fromString = _VisusDbPy.DatasetBitmask_fromString

def DatasetBitmask_guess(first_letter, dims, makeRegularAsSoonAsPossible=True):
    return _VisusDbPy.DatasetBitmask_guess(first_letter, dims, makeRegularAsSoonAsPossible)
DatasetBitmask_guess = _VisusDbPy.DatasetBitmask_guess

def DatasetBitmask_invalid():
    return _VisusDbPy.DatasetBitmask_invalid()
DatasetBitmask_invalid = _VisusDbPy.DatasetBitmask_invalid

def DatasetBitmask_add(a, b):
    return _VisusDbPy.DatasetBitmask_add(a, b)
DatasetBitmask_add = _VisusDbPy.DatasetBitmask_add

class DatasetTimesteps(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetTimesteps, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetTimesteps, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusDbPy.new_DatasetTimesteps(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_DatasetTimesteps
    __del__ = lambda self: None
    if _newclass:
        star = staticmethod(_VisusDbPy.DatasetTimesteps_star)
    else:
        star = _VisusDbPy.DatasetTimesteps_star

    def clear(self):
        return _VisusDbPy.DatasetTimesteps_clear(self)

    def empty(self):
        return _VisusDbPy.DatasetTimesteps_empty(self)

    def size(self):
        return _VisusDbPy.DatasetTimesteps_size(self)

    def getAt(self, I):
        return _VisusDbPy.DatasetTimesteps_getAt(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetTimesteps___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetTimesteps___ne__(self, other)

    def containsTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_containsTimestep(self, t)

    def addTimesteps(self, *args):
        return _VisusDbPy.DatasetTimesteps_addTimesteps(self, *args)

    def addTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_addTimestep(self, t)

    def getDefault(self):
        return _VisusDbPy.DatasetTimesteps_getDefault(self)

    def getMin(self):
        return _VisusDbPy.DatasetTimesteps_getMin(self)

    def getMax(self):
        return _VisusDbPy.DatasetTimesteps_getMax(self)

    def getRange(self):
        return _VisusDbPy.DatasetTimesteps_getRange(self)

    def asVector(self):
        return _VisusDbPy.DatasetTimesteps_asVector(self)

    def toString(self):
        return _VisusDbPy.DatasetTimesteps_toString(self)

    def write(self, ar):
        return _VisusDbPy.DatasetTimesteps_write(self, ar)

    def read(self, ar):
        return _VisusDbPy.DatasetTimesteps_read(self, ar)
DatasetTimesteps_swigregister = _VisusDbPy.DatasetTimesteps_swigregister
DatasetTimesteps_swigregister(DatasetTimesteps)

def DatasetTimesteps_star():
    return _VisusDbPy.DatasetTimesteps_star()
DatasetTimesteps_star = _VisusDbPy.DatasetTimesteps_star

class KdQueryMode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KdQueryMode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KdQueryMode, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NotSpecified = _VisusDbPy.KdQueryMode_NotSpecified
    UseBlockQuery = _VisusDbPy.KdQueryMode_UseBlockQuery
    UseBoxQuery = _VisusDbPy.KdQueryMode_UseBoxQuery
    if _newclass:
        fromString = staticmethod(_VisusDbPy.KdQueryMode_fromString)
    else:
        fromString = _VisusDbPy.KdQueryMode_fromString
    if _newclass:
        toString = staticmethod(_VisusDbPy.KdQueryMode_toString)
    else:
        toString = _VisusDbPy.KdQueryMode_toString
    __swig_destroy__ = _VisusDbPy.delete_KdQueryMode
    __del__ = lambda self: None
KdQueryMode_swigregister = _VisusDbPy.KdQueryMode_swigregister
KdQueryMode_swigregister(KdQueryMode)

def KdQueryMode_fromString(value):
    return _VisusDbPy.KdQueryMode_fromString(value)
KdQueryMode_fromString = _VisusDbPy.KdQueryMode_fromString

def KdQueryMode_toString(value):
    return _VisusDbPy.KdQueryMode_toString(value)
KdQueryMode_toString = _VisusDbPy.KdQueryMode_toString

class Dataset(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dataset, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dataset, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["idxfile"] = _VisusDbPy.Dataset_idxfile_set
    __swig_getmethods__["idxfile"] = _VisusDbPy.Dataset_idxfile_get
    if _newclass:
        idxfile = _swig_property(_VisusDbPy.Dataset_idxfile_get, _VisusDbPy.Dataset_idxfile_set)
    __swig_setmethods__["color"] = _VisusDbPy.Dataset_color_set
    __swig_getmethods__["color"] = _VisusDbPy.Dataset_color_get
    if _newclass:
        color = _swig_property(_VisusDbPy.Dataset_color_get, _VisusDbPy.Dataset_color_set)
    __swig_setmethods__["logic_to_LOGIC"] = _VisusDbPy.Dataset_logic_to_LOGIC_set
    __swig_getmethods__["logic_to_LOGIC"] = _VisusDbPy.Dataset_logic_to_LOGIC_get
    if _newclass:
        logic_to_LOGIC = _swig_property(_VisusDbPy.Dataset_logic_to_LOGIC_get, _VisusDbPy.Dataset_logic_to_LOGIC_set)
    __swig_setmethods__["annotations"] = _VisusDbPy.Dataset_annotations_set
    __swig_getmethods__["annotations"] = _VisusDbPy.Dataset_annotations_get
    if _newclass:
        annotations = _swig_property(_VisusDbPy.Dataset_annotations_get, _VisusDbPy.Dataset_annotations_set)
    __swig_setmethods__["level_samples"] = _VisusDbPy.Dataset_level_samples_set
    __swig_getmethods__["level_samples"] = _VisusDbPy.Dataset_level_samples_get
    if _newclass:
        level_samples = _swig_property(_VisusDbPy.Dataset_level_samples_get, _VisusDbPy.Dataset_level_samples_set)
    __swig_setmethods__["block_samples"] = _VisusDbPy.Dataset_block_samples_set
    __swig_getmethods__["block_samples"] = _VisusDbPy.Dataset_block_samples_get
    if _newclass:
        block_samples = _swig_property(_VisusDbPy.Dataset_block_samples_get, _VisusDbPy.Dataset_block_samples_set)
    __swig_destroy__ = _VisusDbPy.delete_Dataset
    __del__ = lambda self: None

    def getDatasetTypeName(self):
        return _VisusDbPy.Dataset_getDatasetTypeName(self)

    def getPointDim(self):
        return _VisusDbPy.Dataset_getPointDim(self)

    def getBitmask(self):
        return _VisusDbPy.Dataset_getBitmask(self)

    def blocksFullRes(self):
        return _VisusDbPy.Dataset_blocksFullRes(self)

    def isServerMode(self):
        return _VisusDbPy.Dataset_isServerMode(self)

    def setServerMode(self, value):
        return _VisusDbPy.Dataset_setServerMode(self, value)

    def getTimesteps(self):
        return _VisusDbPy.Dataset_getTimesteps(self)

    def setTimesteps(self, value):
        return _VisusDbPy.Dataset_setTimesteps(self, value)

    def getTime(self):
        return _VisusDbPy.Dataset_getTime(self)

    def getAccessConfigs(self):
        return _VisusDbPy.Dataset_getAccessConfigs(self)

    def getDefaultAccessConfig(self):
        return _VisusDbPy.Dataset_getDefaultAccessConfig(self)

    def getKdQueryMode(self):
        return _VisusDbPy.Dataset_getKdQueryMode(self)

    def setKdQueryMode(self, value):
        return _VisusDbPy.Dataset_setKdQueryMode(self, value)

    def getDatasetBody(self):
        return _VisusDbPy.Dataset_getDatasetBody(self)

    def setDatasetBody(self, value):
        return _VisusDbPy.Dataset_setDatasetBody(self, value)

    def getUrl(self):
        return _VisusDbPy.Dataset_getUrl(self)

    def getDefaultBitsPerBlock(self):
        return _VisusDbPy.Dataset_getDefaultBitsPerBlock(self)

    def setDefaultBitsPerBlock(self, value):
        return _VisusDbPy.Dataset_setDefaultBitsPerBlock(self, value)

    def getMaxResolution(self):
        return _VisusDbPy.Dataset_getMaxResolution(self)

    def getTotalNumberOfBlocks(self):
        return _VisusDbPy.Dataset_getTotalNumberOfBlocks(self)

    def setEnableAnnotations(self, value):
        return _VisusDbPy.Dataset_setEnableAnnotations(self, value)

    def getEnableAnnotations(self):
        return _VisusDbPy.Dataset_getEnableAnnotations(self)

    def getLogicBox(self):
        return _VisusDbPy.Dataset_getLogicBox(self)

    def setLogicBox(self, value):
        return _VisusDbPy.Dataset_setLogicBox(self, value)

    def getDatasetBounds(self):
        return _VisusDbPy.Dataset_getDatasetBounds(self)

    def setDatasetBounds(self, value):
        return _VisusDbPy.Dataset_setDatasetBounds(self, value)

    def logicToPhysic(self, *args):
        return _VisusDbPy.Dataset_logicToPhysic(self, *args)

    def physicToLogic(self, *args):
        return _VisusDbPy.Dataset_physicToLogic(self, *args)

    def logicToScreen(self, physic_to_screen):
        return _VisusDbPy.Dataset_logicToScreen(self, physic_to_screen)

    def physicToScreen(self, logic_to_screen):
        return _VisusDbPy.Dataset_physicToScreen(self, logic_to_screen)

    def getFields(self):
        return _VisusDbPy.Dataset_getFields(self)

    def getField(self, *args):
        return _VisusDbPy.Dataset_getField(self, *args)

    def getFieldEx(self, name):
        return _VisusDbPy.Dataset_getFieldEx(self, name)

    def addField(self, *args):
        return _VisusDbPy.Dataset_addField(self, *args)

    def clearFields(self):
        return _VisusDbPy.Dataset_clearFields(self)

    def createAccess(self, *args):
        return _VisusDbPy.Dataset_createAccess(self, *args)

    def createAccessForBlockQuery(self, *args):
        return _VisusDbPy.Dataset_createAccessForBlockQuery(self, *args)

    def createBlockQuery(self, *args):
        return _VisusDbPy.Dataset_createBlockQuery(self, *args)

    def getBlockQuerySamples(self, blockid, H):
        return _VisusDbPy.Dataset_getBlockQuerySamples(self, blockid, H)

    def executeBlockQuery(self, access, query):
        return _VisusDbPy.Dataset_executeBlockQuery(self, access, query)

    def executeBlockQueryAndWait(self, access, query):
        return _VisusDbPy.Dataset_executeBlockQueryAndWait(self, access, query)

    def convertBlockQueryToRowMajor(self, block_query):
        return _VisusDbPy.Dataset_convertBlockQueryToRowMajor(self, block_query)

    def createEquivalentBoxQuery(self, mode, block_query):
        return _VisusDbPy.Dataset_createEquivalentBoxQuery(self, mode, block_query)

    def createBoxQuery(self, *args):
        return _VisusDbPy.Dataset_createBoxQuery(self, *args)

    def createBlockQueriesForBoxQuery(self, query):
        return _VisusDbPy.Dataset_createBlockQueriesForBoxQuery(self, query)

    def guessBoxQueryEndResolution(self, logic_to_screen, logic_position):
        return _VisusDbPy.Dataset_guessBoxQueryEndResolution(self, logic_to_screen, logic_position)

    def beginBoxQuery(self, query):
        return _VisusDbPy.Dataset_beginBoxQuery(self, query)

    def nextBoxQuery(self, query):
        return _VisusDbPy.Dataset_nextBoxQuery(self, query)

    def executeBoxQuery(self, access, query):
        return _VisusDbPy.Dataset_executeBoxQuery(self, access, query)

    def mergeBoxQueryWithBlockQuery(self, query, block_query):
        return _VisusDbPy.Dataset_mergeBoxQueryWithBlockQuery(self, query, block_query)

    def setBoxQueryEndResolution(self, query, value):
        return _VisusDbPy.Dataset_setBoxQueryEndResolution(self, query, value)

    def createBoxQueryRequest(self, query):
        return _VisusDbPy.Dataset_createBoxQueryRequest(self, query)

    def executeBoxQueryOnServer(self, query):
        return _VisusDbPy.Dataset_executeBoxQueryOnServer(self, query)

    def createPointQuery(self, *args):
        return _VisusDbPy.Dataset_createPointQuery(self, *args)

    def createBlockQueriesForPointQuery(self, query):
        return _VisusDbPy.Dataset_createBlockQueriesForPointQuery(self, query)

    def guessPointQueryEndResolution(self, logic_to_screen, logic_position):
        return _VisusDbPy.Dataset_guessPointQueryEndResolution(self, logic_to_screen, logic_position)

    def guessPointQueryNumberOfSamples(self, logic_to_screen, logic_position, end_resolution):
        return _VisusDbPy.Dataset_guessPointQueryNumberOfSamples(self, logic_to_screen, logic_position, end_resolution)

    def beginPointQuery(self, query):
        return _VisusDbPy.Dataset_beginPointQuery(self, query)

    def executePointQuery(self, access, query):
        return _VisusDbPy.Dataset_executePointQuery(self, access, query)

    def mergePointQueryWithBlockQuery(self, query, block_query):
        return _VisusDbPy.Dataset_mergePointQueryWithBlockQuery(self, query, block_query)

    def nextPointQuery(self, query):
        return _VisusDbPy.Dataset_nextPointQuery(self, query)

    def createPointQueryRequest(self, query):
        return _VisusDbPy.Dataset_createPointQueryRequest(self, query)

    def executePointQueryOnServer(self, query):
        return _VisusDbPy.Dataset_executePointQueryOnServer(self, query)

    def adjustBoxQueryFilterBox(self, query, filter, box, H):
        return _VisusDbPy.Dataset_adjustBoxQueryFilterBox(self, query, filter, box, H)

    def createFilter(self, field):
        return _VisusDbPy.Dataset_createFilter(self, field)

    def computeFilter(self, *args):
        return _VisusDbPy.Dataset_computeFilter(self, *args)

    def executeBlockQuerWithFilters(self, access, query, filter):
        return _VisusDbPy.Dataset_executeBlockQuerWithFilters(self, access, query, filter)
    if _newclass:
        insertSamples = staticmethod(_VisusDbPy.Dataset_insertSamples)
    else:
        insertSamples = _VisusDbPy.Dataset_insertSamples

    def compressDataset(self, *args):
        return _VisusDbPy.Dataset_compressDataset(self, *args)

    def readDatasetFromArchive(self, ar):
        return _VisusDbPy.Dataset_readDatasetFromArchive(self, ar)
Dataset_swigregister = _VisusDbPy.Dataset_swigregister
Dataset_swigregister(Dataset)

def Dataset_insertSamples(Wsamples, Wbuffer, Rsamples, Rbuffer, aborted):
    return _VisusDbPy.Dataset_insertSamples(Wsamples, Wbuffer, Rsamples, Rbuffer, aborted)
Dataset_insertSamples = _VisusDbPy.Dataset_insertSamples

class DatasetFactory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DatasetFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DatasetFactory, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusDbPy.DatasetFactory_getSingleton)
    else:
        getSingleton = _VisusDbPy.DatasetFactory_getSingleton
    if _newclass:
        setSingleton = staticmethod(_VisusDbPy.DatasetFactory_setSingleton)
    else:
        setSingleton = _VisusDbPy.DatasetFactory_setSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusDbPy.DatasetFactory_allocSingleton)
    else:
        allocSingleton = _VisusDbPy.DatasetFactory_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusDbPy.DatasetFactory_releaseSingleton)
    else:
        releaseSingleton = _VisusDbPy.DatasetFactory_releaseSingleton

    def registerDatasetType(self, TypeName, createInstance):
        return _VisusDbPy.DatasetFactory_registerDatasetType(self, TypeName, createInstance)

    def createInstance(self, TypeName):
        return _VisusDbPy.DatasetFactory_createInstance(self, TypeName)
    __swig_destroy__ = _VisusDbPy.delete_DatasetFactory
    __del__ = lambda self: None
DatasetFactory_swigregister = _VisusDbPy.DatasetFactory_swigregister
DatasetFactory_swigregister(DatasetFactory)

def DatasetFactory_getSingleton():
    return _VisusDbPy.DatasetFactory_getSingleton()
DatasetFactory_getSingleton = _VisusDbPy.DatasetFactory_getSingleton

def DatasetFactory_setSingleton(value):
    return _VisusDbPy.DatasetFactory_setSingleton(value)
DatasetFactory_setSingleton = _VisusDbPy.DatasetFactory_setSingleton

def DatasetFactory_allocSingleton():
    return _VisusDbPy.DatasetFactory_allocSingleton()
DatasetFactory_allocSingleton = _VisusDbPy.DatasetFactory_allocSingleton

def DatasetFactory_releaseSingleton():
    return _VisusDbPy.DatasetFactory_releaseSingleton()
DatasetFactory_releaseSingleton = _VisusDbPy.DatasetFactory_releaseSingleton


def FindDatasetConfig(ar, url):
    return _VisusDbPy.FindDatasetConfig(ar, url)
FindDatasetConfig = _VisusDbPy.FindDatasetConfig

def LoadDatasetEx(ar):
    return _VisusDbPy.LoadDatasetEx(ar)
LoadDatasetEx = _VisusDbPy.LoadDatasetEx

def LoadDatasetCpp(url):
    return _VisusDbPy.LoadDatasetCpp(url)
LoadDatasetCpp = _VisusDbPy.LoadDatasetCpp
class ModVisus(VisusKernelPy.NetServerModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.NetServerModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ModVisus, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.NetServerModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ModVisus, name)
    __repr__ = _swig_repr
    __swig_setmethods__["default_public"] = _VisusDbPy.ModVisus_default_public_set
    __swig_getmethods__["default_public"] = _VisusDbPy.ModVisus_default_public_get
    if _newclass:
        default_public = _swig_property(_VisusDbPy.ModVisus_default_public_get, _VisusDbPy.ModVisus_default_public_set)

    def __init__(self):
        this = _VisusDbPy.new_ModVisus()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_ModVisus
    __del__ = lambda self: None

    def configureDatasets(self, *args):
        return _VisusDbPy.ModVisus_configureDatasets(self, *args)

    def handleRequest(self, request):
        return _VisusDbPy.ModVisus_handleRequest(self, request)
ModVisus_swigregister = _VisusDbPy.ModVisus_swigregister
ModVisus_swigregister(ModVisus)

class IdxDataset(Dataset):
    __swig_setmethods__ = {}
    for _s in [Dataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [Dataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxDataset, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusDbPy.new_IdxDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_IdxDataset
    __del__ = lambda self: None
    if _newclass:
        castFrom = staticmethod(_VisusDbPy.IdxDataset_castFrom)
    else:
        castFrom = _VisusDbPy.IdxDataset_castFrom

    def getDatasetTypeName(self):
        return _VisusDbPy.IdxDataset_getDatasetTypeName(self)

    def createBlockQueriesForBoxQuery(self, query):
        return _VisusDbPy.IdxDataset_createBlockQueriesForBoxQuery(self, query)

    def mergeBoxQueryWithBlockQuery(self, query, block_query):
        return _VisusDbPy.IdxDataset_mergeBoxQueryWithBlockQuery(self, query, block_query)

    def createBlockQueriesForPointQuery(self, query):
        return _VisusDbPy.IdxDataset_createBlockQueriesForPointQuery(self, query)

    def readDatasetFromArchive(self, ar):
        return _VisusDbPy.IdxDataset_readDatasetFromArchive(self, ar)
IdxDataset_swigregister = _VisusDbPy.IdxDataset_swigregister
IdxDataset_swigregister(IdxDataset)

def IdxDataset_castFrom(db):
    return _VisusDbPy.IdxDataset_castFrom(db)
IdxDataset_castFrom = _VisusDbPy.IdxDataset_castFrom


def SelfTestIdx(max_seconds=300):
    return _VisusDbPy.SelfTestIdx(max_seconds)
SelfTestIdx = _VisusDbPy.SelfTestIdx
class IdxDiskAccess(Access):
    __swig_setmethods__ = {}
    for _s in [Access]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxDiskAccess, name, value)
    __swig_getmethods__ = {}
    for _s in [Access]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxDiskAccess, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_IdxDiskAccess
    __del__ = lambda self: None
    if _newclass:
        create = staticmethod(_VisusDbPy.IdxDiskAccess_create)
    else:
        create = _VisusDbPy.IdxDiskAccess_create

    def disableAsync(self):
        return _VisusDbPy.IdxDiskAccess_disableAsync(self)

    def disableWriteLock(self):
        return _VisusDbPy.IdxDiskAccess_disableWriteLock(self)

    def getFilename(self, field, time, blockid):
        return _VisusDbPy.IdxDiskAccess_getFilename(self, field, time, blockid)

    def beginIO(self, mode):
        return _VisusDbPy.IdxDiskAccess_beginIO(self, mode)

    def readBlock(self, query):
        return _VisusDbPy.IdxDiskAccess_readBlock(self, query)

    def writeBlock(self, query):
        return _VisusDbPy.IdxDiskAccess_writeBlock(self, query)

    def endIO(self):
        return _VisusDbPy.IdxDiskAccess_endIO(self)

    def acquireWriteLock(self, query):
        return _VisusDbPy.IdxDiskAccess_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _VisusDbPy.IdxDiskAccess_releaseWriteLock(self, query)
IdxDiskAccess_swigregister = _VisusDbPy.IdxDiskAccess_swigregister
IdxDiskAccess_swigregister(IdxDiskAccess)

def IdxDiskAccess_create(dataset):
    return _VisusDbPy.IdxDiskAccess_create(dataset)
IdxDiskAccess_create = _VisusDbPy.IdxDiskAccess_create

class IdxMultipleDataset(IdxDataset):
    __swig_setmethods__ = {}
    for _s in [IdxDataset]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IdxMultipleDataset, name, value)
    __swig_getmethods__ = {}
    for _s in [IdxDataset]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, IdxMultipleDataset, name)
    __repr__ = _swig_repr
    DebugSaveImages = _VisusDbPy.IdxMultipleDataset_DebugSaveImages
    DebugSkipReading = _VisusDbPy.IdxMultipleDataset_DebugSkipReading
    DebugAll = _VisusDbPy.IdxMultipleDataset_DebugAll
    __swig_setmethods__["debug_mode"] = _VisusDbPy.IdxMultipleDataset_debug_mode_set
    __swig_getmethods__["debug_mode"] = _VisusDbPy.IdxMultipleDataset_debug_mode_get
    if _newclass:
        debug_mode = _swig_property(_VisusDbPy.IdxMultipleDataset_debug_mode_get, _VisusDbPy.IdxMultipleDataset_debug_mode_set)
    __swig_setmethods__["down_datasets"] = _VisusDbPy.IdxMultipleDataset_down_datasets_set
    __swig_getmethods__["down_datasets"] = _VisusDbPy.IdxMultipleDataset_down_datasets_get
    if _newclass:
        down_datasets = _swig_property(_VisusDbPy.IdxMultipleDataset_down_datasets_get, _VisusDbPy.IdxMultipleDataset_down_datasets_set)

    def __init__(self):
        this = _VisusDbPy.new_IdxMultipleDataset()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusDbPy.delete_IdxMultipleDataset
    __del__ = lambda self: None
    if _newclass:
        castFrom = staticmethod(_VisusDbPy.IdxMultipleDataset_castFrom)
    else:
        castFrom = _VisusDbPy.IdxMultipleDataset_castFrom

    def getDatasetTypeName(self):
        return _VisusDbPy.IdxMultipleDataset_getDatasetTypeName(self)

    def getChild(self, name):
        return _VisusDbPy.IdxMultipleDataset_getChild(self, name)

    def getFirstChild(self):
        return _VisusDbPy.IdxMultipleDataset_getFirstChild(self)

    def addChild(self, name, value):
        return _VisusDbPy.IdxMultipleDataset_addChild(self, name, value)

    def getFieldEx(self, name):
        return _VisusDbPy.IdxMultipleDataset_getFieldEx(self, name)

    def beginBoxQuery(self, query):
        return _VisusDbPy.IdxMultipleDataset_beginBoxQuery(self, query)

    def nextBoxQuery(self, QUERY):
        return _VisusDbPy.IdxMultipleDataset_nextBoxQuery(self, QUERY)

    def executeBoxQuery(self, ACCESS, QUERY):
        return _VisusDbPy.IdxMultipleDataset_executeBoxQuery(self, ACCESS, QUERY)
    if _newclass:
        getInputName = staticmethod(_VisusDbPy.IdxMultipleDataset_getInputName)
    else:
        getInputName = _VisusDbPy.IdxMultipleDataset_getInputName

    def executeDownQuery(self, QUERY, ACCESS, dataset_name, fieldname):
        return _VisusDbPy.IdxMultipleDataset_executeDownQuery(self, QUERY, ACCESS, dataset_name, fieldname)

    def computeOuput(self, QUERY, ACCESS, aborted, CODE):
        return _VisusDbPy.IdxMultipleDataset_computeOuput(self, QUERY, ACCESS, aborted, CODE)

    def readDatasetFromArchive(self, ar):
        return _VisusDbPy.IdxMultipleDataset_readDatasetFromArchive(self, ar)
IdxMultipleDataset_swigregister = _VisusDbPy.IdxMultipleDataset_swigregister
IdxMultipleDataset_swigregister(IdxMultipleDataset)

def IdxMultipleDataset_castFrom(db):
    return _VisusDbPy.IdxMultipleDataset_castFrom(db)
IdxMultipleDataset_castFrom = _VisusDbPy.IdxMultipleDataset_castFrom

def IdxMultipleDataset_getInputName(dataset_name, fieldname):
    return _VisusDbPy.IdxMultipleDataset_getInputName(dataset_name, fieldname)
IdxMultipleDataset_getInputName = _VisusDbPy.IdxMultipleDataset_getInputName

class VisusConvert(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusConvert, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusConvert, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusDbPy.new_VisusConvert()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getHelp(self):
        return _VisusDbPy.VisusConvert_getHelp(self)

    def runFromArgs(self, args):
        return _VisusDbPy.VisusConvert_runFromArgs(self, args)
    __swig_destroy__ = _VisusDbPy.delete_VisusConvert
    __del__ = lambda self: None
VisusConvert_swigregister = _VisusDbPy.VisusConvert_swigregister
VisusConvert_swigregister(VisusConvert)

# This file is compatible with both classic and new-style classes.


