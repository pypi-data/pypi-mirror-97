# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusNodesPy
else:
    import _VisusNodesPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusNodesPy.delete_SwigPyIterator

    def value(self):
        return _VisusNodesPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusNodesPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusNodesPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusNodesPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusNodesPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusNodesPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusNodesPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusNodesPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusNodesPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusNodesPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusNodesPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusNodesPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusNodesPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusNodesPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusNodesPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusNodesPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusNodesPy:
_VisusNodesPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusNodesPy.SHARED_PTR_DISOWN
import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
class NodesModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusNodesPy.NodesModule_bAttached_get, _VisusNodesPy.NodesModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusNodesPy.NodesModule_attach()

    @staticmethod
    def detach():
        return _VisusNodesPy.NodesModule_detach()

    def __init__(self):
        _VisusNodesPy.NodesModule_swiginit(self, _VisusNodesPy.new_NodesModule())
    __swig_destroy__ = _VisusNodesPy.delete_NodesModule

# Register NodesModule in _VisusNodesPy:
_VisusNodesPy.NodesModule_swigregister(NodesModule)
cvar = _VisusNodesPy.cvar

def NodesModule_attach():
    return _VisusNodesPy.NodesModule_attach()

def NodesModule_detach():
    return _VisusNodesPy.NodesModule_detach()

class FieldNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusNodesPy.FieldNode_swiginit(self, _VisusNodesPy.new_FieldNode())
    __swig_destroy__ = _VisusNodesPy.delete_FieldNode

    def getTypeName(self):
        return _VisusNodesPy.FieldNode_getTypeName(self)

    def getFieldName(self):
        return _VisusNodesPy.FieldNode_getFieldName(self)

    def setFieldName(self, value):
        return _VisusNodesPy.FieldNode_setFieldName(self, value)

    def execute(self, ar):
        return _VisusNodesPy.FieldNode_execute(self, ar)

    def write(self, ar):
        return _VisusNodesPy.FieldNode_write(self, ar)

    def read(self, ar):
        return _VisusNodesPy.FieldNode_read(self, ar)

# Register FieldNode in _VisusNodesPy:
_VisusNodesPy.FieldNode_swigregister(FieldNode)

class ModelViewNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusNodesPy.ModelViewNode_swiginit(self, _VisusNodesPy.new_ModelViewNode())
    __swig_destroy__ = _VisusNodesPy.delete_ModelViewNode

    def getTypeName(self):
        return _VisusNodesPy.ModelViewNode_getTypeName(self)

    def getModelView(self):
        return _VisusNodesPy.ModelViewNode_getModelView(self)

    def setModelView(self, value):
        return _VisusNodesPy.ModelViewNode_setModelView(self, value)

    def execute(self, ar):
        return _VisusNodesPy.ModelViewNode_execute(self, ar)

    def write(self, ar):
        return _VisusNodesPy.ModelViewNode_write(self, ar)

    def read(self, ar):
        return _VisusNodesPy.ModelViewNode_read(self, ar)

    @staticmethod
    def castFrom(obj):
        return _VisusNodesPy.ModelViewNode_castFrom(obj)

# Register ModelViewNode in _VisusNodesPy:
_VisusNodesPy.ModelViewNode_swigregister(ModelViewNode)

def ModelViewNode_castFrom(obj):
    return _VisusNodesPy.ModelViewNode_castFrom(obj)

class PaletteNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusNodesPy.PaletteNode_swiginit(self, _VisusNodesPy.new_PaletteNode(*args))
    __swig_destroy__ = _VisusNodesPy.delete_PaletteNode

    def getTypeName(self):
        return _VisusNodesPy.PaletteNode_getTypeName(self)

    def getPalette(self):
        return _VisusNodesPy.PaletteNode_getPalette(self)

    def setPalette(self, value):
        return _VisusNodesPy.PaletteNode_setPalette(self, value)

    def areStatisticsEnabled(self):
        return _VisusNodesPy.PaletteNode_areStatisticsEnabled(self)

    def processInput(self):
        return _VisusNodesPy.PaletteNode_processInput(self)

    def enterInDataflow(self):
        return _VisusNodesPy.PaletteNode_enterInDataflow(self)

    def exitFromDataflow(self):
        return _VisusNodesPy.PaletteNode_exitFromDataflow(self)

    def execute(self, ar):
        return _VisusNodesPy.PaletteNode_execute(self, ar)

    def write(self, ar):
        return _VisusNodesPy.PaletteNode_write(self, ar)

    def read(self, ar):
        return _VisusNodesPy.PaletteNode_read(self, ar)

    @staticmethod
    def castFrom(obj):
        return _VisusNodesPy.PaletteNode_castFrom(obj)

# Register PaletteNode in _VisusNodesPy:
_VisusNodesPy.PaletteNode_swigregister(PaletteNode)

def PaletteNode_castFrom(obj):
    return _VisusNodesPy.PaletteNode_castFrom(obj)

class BasePaletteNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newStatsAvailable(self, stats):
        return _VisusNodesPy.BasePaletteNodeView_newStatsAvailable(self, stats)
    __swig_destroy__ = _VisusNodesPy.delete_BasePaletteNodeView

# Register BasePaletteNodeView in _VisusNodesPy:
_VisusNodesPy.BasePaletteNodeView_swigregister(BasePaletteNodeView)

class StatisticsNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusNodesPy.StatisticsNode_swiginit(self, _VisusNodesPy.new_StatisticsNode())
    __swig_destroy__ = _VisusNodesPy.delete_StatisticsNode

    def getTypeName(self):
        return _VisusNodesPy.StatisticsNode_getTypeName(self)

    def processInput(self):
        return _VisusNodesPy.StatisticsNode_processInput(self)

    @staticmethod
    def castFrom(obj):
        return _VisusNodesPy.StatisticsNode_castFrom(obj)

# Register StatisticsNode in _VisusNodesPy:
_VisusNodesPy.StatisticsNode_swigregister(StatisticsNode)

def StatisticsNode_castFrom(obj):
    return _VisusNodesPy.StatisticsNode_castFrom(obj)

class BaseStatisticsNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def newStatsAvailable(self, stats):
        return _VisusNodesPy.BaseStatisticsNodeView_newStatsAvailable(self, stats)
    __swig_destroy__ = _VisusNodesPy.delete_BaseStatisticsNodeView

# Register BaseStatisticsNodeView in _VisusNodesPy:
_VisusNodesPy.BaseStatisticsNodeView_swigregister(BaseStatisticsNodeView)

class TimeNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusNodesPy.TimeNode_swiginit(self, _VisusNodesPy.new_TimeNode(*args))
    __swig_destroy__ = _VisusNodesPy.delete_TimeNode

    def getTypeName(self):
        return _VisusNodesPy.TimeNode_getTypeName(self)

    def getCurrentTime(self):
        return _VisusNodesPy.TimeNode_getCurrentTime(self)

    def setCurrentTime(self, value, bPublish=True):
        return _VisusNodesPy.TimeNode_setCurrentTime(self, value, bPublish)

    def getTimesteps(self):
        return _VisusNodesPy.TimeNode_getTimesteps(self)

    def getUserRange(self):
        return _VisusNodesPy.TimeNode_getUserRange(self)

    def setUserRange(self, value):
        return _VisusNodesPy.TimeNode_setUserRange(self, value)

    def getPlayMsec(self):
        return _VisusNodesPy.TimeNode_getPlayMsec(self)

    def setPlayMsec(self, value):
        return _VisusNodesPy.TimeNode_setPlayMsec(self, value)

    def enterInDataflow(self):
        return _VisusNodesPy.TimeNode_enterInDataflow(self)

    def exitFromDataflow(self):
        return _VisusNodesPy.TimeNode_exitFromDataflow(self)

    def doPublish(self, *args):
        return _VisusNodesPy.TimeNode_doPublish(self, *args)

    @staticmethod
    def castFrom(obj):
        return _VisusNodesPy.TimeNode_castFrom(obj)

    def execute(self, ar):
        return _VisusNodesPy.TimeNode_execute(self, ar)

    def write(self, ar):
        return _VisusNodesPy.TimeNode_write(self, ar)

    def read(self, ar):
        return _VisusNodesPy.TimeNode_read(self, ar)

# Register TimeNode in _VisusNodesPy:
_VisusNodesPy.TimeNode_swigregister(TimeNode)

def TimeNode_castFrom(obj):
    return _VisusNodesPy.TimeNode_castFrom(obj)

class DatasetNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusNodesPy.DatasetNode_swiginit(self, _VisusNodesPy.new_DatasetNode())
    __swig_destroy__ = _VisusNodesPy.delete_DatasetNode

    def getTypeName(self):
        return _VisusNodesPy.DatasetNode_getTypeName(self)

    def getDataset(self):
        return _VisusNodesPy.DatasetNode_getDataset(self)

    def setDataset(self, dataset, bPublish=True):
        return _VisusNodesPy.DatasetNode_setDataset(self, dataset, bPublish)

    def processInput(self):
        return _VisusNodesPy.DatasetNode_processInput(self)

    def enterInDataflow(self):
        return _VisusNodesPy.DatasetNode_enterInDataflow(self)

    def exitFromDataflow(self):
        return _VisusNodesPy.DatasetNode_exitFromDataflow(self)

    def getLogicBox(self):
        return _VisusNodesPy.DatasetNode_getLogicBox(self)

    def getBounds(self):
        return _VisusNodesPy.DatasetNode_getBounds(self)

    def showBounds(self):
        return _VisusNodesPy.DatasetNode_showBounds(self)

    def setShowBounds(self, value):
        return _VisusNodesPy.DatasetNode_setShowBounds(self, value)

    @staticmethod
    def castFrom(obj):
        return _VisusNodesPy.DatasetNode_castFrom(obj)

    def execute(self, ar):
        return _VisusNodesPy.DatasetNode_execute(self, ar)

    def write(self, ar):
        return _VisusNodesPy.DatasetNode_write(self, ar)

    def read(self, ar):
        return _VisusNodesPy.DatasetNode_read(self, ar)

# Register DatasetNode in _VisusNodesPy:
_VisusNodesPy.DatasetNode_swigregister(DatasetNode)

def DatasetNode_castFrom(obj):
    return _VisusNodesPy.DatasetNode_castFrom(obj)

class QueryNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusNodesPy.QueryNode_swiginit(self, _VisusNodesPy.new_QueryNode())
    __swig_destroy__ = _VisusNodesPy.delete_QueryNode

    def getTypeName(self):
        return _VisusNodesPy.QueryNode_getTypeName(self)

    def getDataset(self):
        return _VisusNodesPy.QueryNode_getDataset(self)

    def getDatasetNode(self):
        return _VisusNodesPy.QueryNode_getDatasetNode(self)

    def getField(self):
        return _VisusNodesPy.QueryNode_getField(self)

    def getTime(self):
        return _VisusNodesPy.QueryNode_getTime(self)

    def processInput(self):
        return _VisusNodesPy.QueryNode_processInput(self)

    def isVerbose(self):
        return _VisusNodesPy.QueryNode_isVerbose(self)

    def setVerbose(self, value):
        return _VisusNodesPy.QueryNode_setVerbose(self, value)

    def getAccessIndex(self):
        return _VisusNodesPy.QueryNode_getAccessIndex(self)

    def setAccessIndex(self, value):
        return _VisusNodesPy.QueryNode_setAccessIndex(self, value)

    def setAccess(self, value):
        return _VisusNodesPy.QueryNode_setAccess(self, value)

    def getProgression(self):
        return _VisusNodesPy.QueryNode_getProgression(self)

    def setProgression(self, value):
        return _VisusNodesPy.QueryNode_setProgression(self, value)

    def getQuality(self):
        return _VisusNodesPy.QueryNode_getQuality(self)

    def setQuality(self, value):
        return _VisusNodesPy.QueryNode_setQuality(self, value)

    def getBounds(self):
        return _VisusNodesPy.QueryNode_getBounds(self)

    def setBounds(self, value):
        return _VisusNodesPy.QueryNode_setBounds(self, value)

    def getQueryBounds(self):
        return _VisusNodesPy.QueryNode_getQueryBounds(self)

    def setQueryBounds(self, value):
        return _VisusNodesPy.QueryNode_setQueryBounds(self, value)

    def getQueryLogicPosition(self):
        return _VisusNodesPy.QueryNode_getQueryLogicPosition(self)

    def nodeToScreen(self):
        return _VisusNodesPy.QueryNode_nodeToScreen(self)

    def logicToScreen(self):
        return _VisusNodesPy.QueryNode_logicToScreen(self)

    def setNodeToScreen(self, value):
        return _VisusNodesPy.QueryNode_setNodeToScreen(self, value)

    def isViewDependentEnabled(self):
        return _VisusNodesPy.QueryNode_isViewDependentEnabled(self)

    def setViewDependentEnabled(self, value):
        return _VisusNodesPy.QueryNode_setViewDependentEnabled(self, value)

    def exitFromDataflow(self):
        return _VisusNodesPy.QueryNode_exitFromDataflow(self)

    @staticmethod
    def castFrom(obj):
        return _VisusNodesPy.QueryNode_castFrom(obj)

    def execute(self, ar):
        return _VisusNodesPy.QueryNode_execute(self, ar)

    def write(self, ar):
        return _VisusNodesPy.QueryNode_write(self, ar)

    def read(self, ar):
        return _VisusNodesPy.QueryNode_read(self, ar)

# Register QueryNode in _VisusNodesPy:
_VisusNodesPy.QueryNode_swigregister(QueryNode)

def QueryNode_castFrom(obj):
    return _VisusNodesPy.QueryNode_castFrom(obj)

class KdQueryNode(QueryNode):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusNodesPy.KdQueryNode_swiginit(self, _VisusNodesPy.new_KdQueryNode())
    __swig_destroy__ = _VisusNodesPy.delete_KdQueryNode

    def getTypeName(self):
        return _VisusNodesPy.KdQueryNode_getTypeName(self)

    def processInput(self):
        return _VisusNodesPy.KdQueryNode_processInput(self)

# Register KdQueryNode in _VisusNodesPy:
_VisusNodesPy.KdQueryNode_swigregister(KdQueryNode)



