# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




this_dir=os.path.dirname(os.path.realpath(__file__))

import PyQt5

qt5_candidates=[os.path.join(os.path.dirname(PyQt5.__file__),"Qt")]

# see https://stackoverflow.com/questions/47608532/how-to-detect-from-within-python-whether-packages-are-managed-with-conda
is_conda = os.path.exists(os.path.join(sys.prefix, 'conda-meta', 'history'))
if is_conda:
	qt5_candidates.append(os.path.join(os.environ['CONDA_PREFIX'],"Library"))

QT5_DIR=None
for it in qt5_candidates:

	if not os.path.isdir(it):  
		continue

	QT5_DIR=it
	print("QT5_DIR", QT5_DIR)

# for windows I need to tell how to find Qt
	if WIN32:
		AddSysPath(os.path.join(QT5_DIR,"bin"))

# I need to tell where to found Qt plugins
	os.environ["QT_PLUGIN_PATH"]= os.path.join(QT5_DIR, "plugins")

	break

if QT5_DIR is None:
	print("Cannot find QT5_DIR, OpenVisus GUI is probably going to crash")



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusGuiPy
else:
    import _VisusGuiPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_SwigPyIterator

    def value(self):
        return _VisusGuiPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusGuiPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusGuiPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusGuiPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusGuiPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusGuiPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusGuiPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusGuiPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusGuiPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusGuiPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusGuiPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusGuiPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusGuiPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusGuiPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusGuiPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusGuiPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusGuiPy:
_VisusGuiPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusGuiPy.SHARED_PTR_DISOWN
import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
import VisusNodesPy
class GuiModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusGuiPy.GuiModule_bAttached_get, _VisusGuiPy.GuiModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusGuiPy.GuiModule_attach()

    @staticmethod
    def detach():
        return _VisusGuiPy.GuiModule_detach()

    def __init__(self):
        _VisusGuiPy.GuiModule_swiginit(self, _VisusGuiPy.new_GuiModule())
    __swig_destroy__ = _VisusGuiPy.delete_GuiModule

# Register GuiModule in _VisusGuiPy:
_VisusGuiPy.GuiModule_swigregister(GuiModule)
cvar = _VisusGuiPy.cvar

def GuiModule_attach():
    return _VisusGuiPy.GuiModule_attach()

def GuiModule_detach():
    return _VisusGuiPy.GuiModule_detach()

class GLObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_GLObject

    def glRender(self, gl):
        return _VisusGuiPy.GLObject_glRender(self, gl)

    def glGetRenderQueue(self):
        return _VisusGuiPy.GLObject_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _VisusGuiPy.GLObject_glSetRenderQueue(self, value)

    def glMousePressEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _VisusGuiPy.GLObject_glWheelEvent(self, map, evt)

# Register GLObject in _VisusGuiPy:
_VisusGuiPy.GLObject_swigregister(GLObject)

class GLBatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertices = property(_VisusGuiPy.GLBatch_vertices_get, _VisusGuiPy.GLBatch_vertices_set)
    normals = property(_VisusGuiPy.GLBatch_normals_get, _VisusGuiPy.GLBatch_normals_set)
    colors = property(_VisusGuiPy.GLBatch_colors_get, _VisusGuiPy.GLBatch_colors_set)
    texcoords = property(_VisusGuiPy.GLBatch_texcoords_get, _VisusGuiPy.GLBatch_texcoords_set)

    def getNumberOfVertices(self):
        return _VisusGuiPy.GLBatch_getNumberOfVertices(self)

    def __init__(self):
        _VisusGuiPy.GLBatch_swiginit(self, _VisusGuiPy.new_GLBatch())
    __swig_destroy__ = _VisusGuiPy.delete_GLBatch

# Register GLBatch in _VisusGuiPy:
_VisusGuiPy.GLBatch_swigregister(GLBatch)

class GLMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLMesh_swiginit(self, _VisusGuiPy.new_GLMesh())

    def begin(self, primitive, vertices_per_batch=0):
        return _VisusGuiPy.GLMesh_begin(self, primitive, vertices_per_batch)

    def end(self):
        return _VisusGuiPy.GLMesh_end(self)

    def color(self, *args):
        return _VisusGuiPy.GLMesh_color(self, *args)

    def vertex(self, *args):
        return _VisusGuiPy.GLMesh_vertex(self, *args)

    def normal(self, *args):
        return _VisusGuiPy.GLMesh_normal(self, *args)

    def texcoord2(self, *args):
        return _VisusGuiPy.GLMesh_texcoord2(self, *args)

    def texcoord3(self, *args):
        return _VisusGuiPy.GLMesh_texcoord3(self, *args)

    def hasColorAttribute(self):
        return _VisusGuiPy.GLMesh_hasColorAttribute(self)

    @staticmethod
    def LineLoop(*args):
        return _VisusGuiPy.GLMesh_LineLoop(*args)

    @staticmethod
    def LineStrip(*args):
        return _VisusGuiPy.GLMesh_LineStrip(*args)

    @staticmethod
    def Quad(*args):
        return _VisusGuiPy.GLMesh_Quad(*args)

    @staticmethod
    def Polygon(points, bNormal=False):
        return _VisusGuiPy.GLMesh_Polygon(points, bNormal)

    @staticmethod
    def Lines(*args):
        return _VisusGuiPy.GLMesh_Lines(*args)

    @staticmethod
    def WireBox(*args):
        return _VisusGuiPy.GLMesh_WireBox(*args)

    @staticmethod
    def SolidBox(*args):
        return _VisusGuiPy.GLMesh_SolidBox(*args)

    @staticmethod
    def WireCircle(N=32):
        return _VisusGuiPy.GLMesh_WireCircle(N)

    @staticmethod
    def SolidCircle(N=32):
        return _VisusGuiPy.GLMesh_SolidCircle(N)

    @staticmethod
    def SolidSphere(N=32):
        return _VisusGuiPy.GLMesh_SolidSphere(N)

    @staticmethod
    def ColoredAxis(box):
        return _VisusGuiPy.GLMesh_ColoredAxis(box)

    @staticmethod
    def ViewDependentUnitVolume(frustum, nslices):
        return _VisusGuiPy.GLMesh_ViewDependentUnitVolume(frustum, nslices)

    @staticmethod
    def AxisAlignedUnitVolume(*args):
        return _VisusGuiPy.GLMesh_AxisAlignedUnitVolume(*args)
    __swig_destroy__ = _VisusGuiPy.delete_GLMesh

# Register GLMesh in _VisusGuiPy:
_VisusGuiPy.GLMesh_swigregister(GLMesh)

def GLMesh_LineLoop(*args):
    return _VisusGuiPy.GLMesh_LineLoop(*args)

def GLMesh_LineStrip(*args):
    return _VisusGuiPy.GLMesh_LineStrip(*args)

def GLMesh_Quad(*args):
    return _VisusGuiPy.GLMesh_Quad(*args)

def GLMesh_Polygon(points, bNormal=False):
    return _VisusGuiPy.GLMesh_Polygon(points, bNormal)

def GLMesh_Lines(*args):
    return _VisusGuiPy.GLMesh_Lines(*args)

def GLMesh_WireBox(*args):
    return _VisusGuiPy.GLMesh_WireBox(*args)

def GLMesh_SolidBox(*args):
    return _VisusGuiPy.GLMesh_SolidBox(*args)

def GLMesh_WireCircle(N=32):
    return _VisusGuiPy.GLMesh_WireCircle(N)

def GLMesh_SolidCircle(N=32):
    return _VisusGuiPy.GLMesh_SolidCircle(N)

def GLMesh_SolidSphere(N=32):
    return _VisusGuiPy.GLMesh_SolidSphere(N)

def GLMesh_ColoredAxis(box):
    return _VisusGuiPy.GLMesh_ColoredAxis(box)

def GLMesh_ViewDependentUnitVolume(frustum, nslices):
    return _VisusGuiPy.GLMesh_ViewDependentUnitVolume(frustum, nslices)

def GLMesh_AxisAlignedUnitVolume(*args):
    return _VisusGuiPy.GLMesh_AxisAlignedUnitVolume(*args)

class GLModelview(GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_VisusGuiPy.GLModelview_T_get, _VisusGuiPy.GLModelview_T_set)

    def __init__(self, *args):
        _VisusGuiPy.GLModelview_swiginit(self, _VisusGuiPy.new_GLModelview(*args))
    __swig_destroy__ = _VisusGuiPy.delete_GLModelview

    def glRender(self, gl):
        return _VisusGuiPy.GLModelview_glRender(self, gl)

# Register GLModelview in _VisusGuiPy:
_VisusGuiPy.GLModelview_swigregister(GLModelview)

class GLPhongObject(GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    line_width = property(_VisusGuiPy.GLPhongObject_line_width_get, _VisusGuiPy.GLPhongObject_line_width_set)
    color = property(_VisusGuiPy.GLPhongObject_color_get, _VisusGuiPy.GLPhongObject_color_set)
    texture = property(_VisusGuiPy.GLPhongObject_texture_get, _VisusGuiPy.GLPhongObject_texture_set)
    mesh = property(_VisusGuiPy.GLPhongObject_mesh_get, _VisusGuiPy.GLPhongObject_mesh_set)

    def __init__(self, *args):
        _VisusGuiPy.GLPhongObject_swiginit(self, _VisusGuiPy.new_GLPhongObject(*args))
    __swig_destroy__ = _VisusGuiPy.delete_GLPhongObject

    def glRender(self, gl):
        return _VisusGuiPy.GLPhongObject_glRender(self, gl)

# Register GLPhongObject in _VisusGuiPy:
_VisusGuiPy.GLPhongObject_swigregister(GLPhongObject)

class GLSharedContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _VisusGuiPy.GLSharedContext_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _VisusGuiPy.GLSharedContext_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _VisusGuiPy.GLSharedContext_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _VisusGuiPy.GLSharedContext_releaseSingleton()
    __swig_destroy__ = _VisusGuiPy.delete_GLSharedContext

    def makeCurrent(self):
        return _VisusGuiPy.GLSharedContext_makeCurrent(self)

    def doneCurrent(self):
        return _VisusGuiPy.GLSharedContext_doneCurrent(self)

# Register GLSharedContext in _VisusGuiPy:
_VisusGuiPy.GLSharedContext_swigregister(GLSharedContext)

def GLSharedContext_getSingleton():
    return _VisusGuiPy.GLSharedContext_getSingleton()

def GLSharedContext_setSingleton(value):
    return _VisusGuiPy.GLSharedContext_setSingleton(value)

def GLSharedContext_allocSingleton():
    return _VisusGuiPy.GLSharedContext_allocSingleton()

def GLSharedContext_releaseSingleton():
    return _VisusGuiPy.GLSharedContext_releaseSingleton()

class GLNeedContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLNeedContext_swiginit(self, _VisusGuiPy.new_GLNeedContext())
    __swig_destroy__ = _VisusGuiPy.delete_GLNeedContext

    def __structure_derefence_op__(self):
        return _VisusGuiPy.GLNeedContext___structure_derefence_op__(self)

# Register GLNeedContext in _VisusGuiPy:
_VisusGuiPy.GLNeedContext_swigregister(GLNeedContext)

class GLDoWithContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _VisusGuiPy.GLDoWithContext_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _VisusGuiPy.GLDoWithContext_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _VisusGuiPy.GLDoWithContext_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _VisusGuiPy.GLDoWithContext_releaseSingleton()

    def push_back(self, fn):
        return _VisusGuiPy.GLDoWithContext_push_back(self, fn)
    __swig_destroy__ = _VisusGuiPy.delete_GLDoWithContext

# Register GLDoWithContext in _VisusGuiPy:
_VisusGuiPy.GLDoWithContext_swigregister(GLDoWithContext)

def GLDoWithContext_getSingleton():
    return _VisusGuiPy.GLDoWithContext_getSingleton()

def GLDoWithContext_setSingleton(value):
    return _VisusGuiPy.GLDoWithContext_setSingleton(value)

def GLDoWithContext_allocSingleton():
    return _VisusGuiPy.GLDoWithContext_allocSingleton()

def GLDoWithContext_releaseSingleton():
    return _VisusGuiPy.GLDoWithContext_releaseSingleton()

class GLCanvas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLCanvas_swiginit(self, _VisusGuiPy.new_GLCanvas())
    __swig_destroy__ = _VisusGuiPy.delete_GLCanvas

    def flushGLErrors(self, bVerbose=False):
        return _VisusGuiPy.GLCanvas_flushGLErrors(self, bVerbose)

    def glRenderEvent(self, gl):
        return _VisusGuiPy.GLCanvas_glRenderEvent(self, gl)

    def glResizeEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glResizeEvent(self, evt)

    def glKeyPressEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glKeyPressEvent(self, evt)

    def glMousePressEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMousePressEvent(self, evt)

    def glMouseMoveEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMouseMoveEvent(self, evt)

    def glMouseReleaseEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glMouseReleaseEvent(self, evt)

    def glWheelEvent(self, evt):
        return _VisusGuiPy.GLCanvas_glWheelEvent(self, evt)

    def initializeGL(self):
        return _VisusGuiPy.GLCanvas_initializeGL(self)

    def postRedisplay(self, fps=30):
        return _VisusGuiPy.GLCanvas_postRedisplay(self, fps)

    def glClearColor(self, *args):
        return _VisusGuiPy.GLCanvas_glClearColor(self, *args)

    def getShader(self):
        return _VisusGuiPy.GLCanvas_getShader(self)

    def setShader(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setShader(self, value, bForce)

    def setUniform(self, *args):
        return _VisusGuiPy.GLCanvas_setUniform(self, *args)

    def setUniformColor(self, uniform, color):
        return _VisusGuiPy.GLCanvas_setUniformColor(self, uniform, color)

    def setUniformPlane(self, uniform, h):
        return _VisusGuiPy.GLCanvas_setUniformPlane(self, uniform, h)

    def setUniformMatrix(self, uniform, T):
        return _VisusGuiPy.GLCanvas_setUniformMatrix(self, uniform, T)

    def pushClippingBox(self, *args):
        return _VisusGuiPy.GLCanvas_pushClippingBox(self, *args)

    def popClippingBox(self):
        return _VisusGuiPy.GLCanvas_popClippingBox(self)

    def hasClippingBox(self):
        return _VisusGuiPy.GLCanvas_hasClippingBox(self)

    def setUniformMaterial(self, shader, material):
        return _VisusGuiPy.GLCanvas_setUniformMaterial(self, shader, material)

    def setUniformLight(self, shader, light_pos):
        return _VisusGuiPy.GLCanvas_setUniformLight(self, shader, light_pos)

    def getViewport(self):
        return _VisusGuiPy.GLCanvas_getViewport(self)

    def setViewport(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setViewport(self, value, bForce)

    def pushViewport(self):
        return _VisusGuiPy.GLCanvas_pushViewport(self)

    def popViewport(self):
        return _VisusGuiPy.GLCanvas_popViewport(self)

    def getProjection(self):
        return _VisusGuiPy.GLCanvas_getProjection(self)

    def setProjection(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setProjection(self, value, bForce)

    def pushProjection(self):
        return _VisusGuiPy.GLCanvas_pushProjection(self)

    def popProjection(self):
        return _VisusGuiPy.GLCanvas_popProjection(self)

    def loadProjection(self, value):
        return _VisusGuiPy.GLCanvas_loadProjection(self, value)

    def multProjection(self, value):
        return _VisusGuiPy.GLCanvas_multProjection(self, value)

    def getModelview(self):
        return _VisusGuiPy.GLCanvas_getModelview(self)

    def setModelview(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setModelview(self, value, bForce)

    def loadModelview(self, value):
        return _VisusGuiPy.GLCanvas_loadModelview(self, value)

    def multModelview(self, value):
        return _VisusGuiPy.GLCanvas_multModelview(self, value)

    def pushModelview(self):
        return _VisusGuiPy.GLCanvas_pushModelview(self)

    def popModelview(self):
        return _VisusGuiPy.GLCanvas_popModelview(self)

    def getFrustum(self):
        return _VisusGuiPy.GLCanvas_getFrustum(self)

    def setFrustum(self, value):
        return _VisusGuiPy.GLCanvas_setFrustum(self, value)

    def pushFrustum(self):
        return _VisusGuiPy.GLCanvas_pushFrustum(self)

    def popFrustum(self):
        return _VisusGuiPy.GLCanvas_popFrustum(self)

    def setHud(self):
        return _VisusGuiPy.GLCanvas_setHud(self)

    def getPointSize(self):
        return _VisusGuiPy.GLCanvas_getPointSize(self)

    def setPointSize(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setPointSize(self, value, bForce)

    def pushPointSize(self, value):
        return _VisusGuiPy.GLCanvas_pushPointSize(self, value)

    def popPointSize(self):
        return _VisusGuiPy.GLCanvas_popPointSize(self)

    def getLineWidth(self):
        return _VisusGuiPy.GLCanvas_getLineWidth(self)

    def setLineWidth(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setLineWidth(self, value, bForce)

    def pushLineWidth(self, value):
        return _VisusGuiPy.GLCanvas_pushLineWidth(self, value)

    def popLineWidth(self):
        return _VisusGuiPy.GLCanvas_popLineWidth(self)

    def getBlend(self):
        return _VisusGuiPy.GLCanvas_getBlend(self)

    def setBlend(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setBlend(self, value, bForce)

    def pushBlend(self, value):
        return _VisusGuiPy.GLCanvas_pushBlend(self, value)

    def popBlend(self):
        return _VisusGuiPy.GLCanvas_popBlend(self)

    def getDepthTest(self):
        return _VisusGuiPy.GLCanvas_getDepthTest(self)

    def setDepthTest(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthTest(self, value, bForce)

    def pushDepthTest(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthTest(self, value)

    def popDepthTest(self):
        return _VisusGuiPy.GLCanvas_popDepthTest(self)

    def getDepthMask(self):
        return _VisusGuiPy.GLCanvas_getDepthMask(self)

    def setDepthMask(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthMask(self, value, bForce)

    def pushDepthMask(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthMask(self, value)

    def popDepthMask(self):
        return _VisusGuiPy.GLCanvas_popDepthMask(self)

    def getDepthFunc(self):
        return _VisusGuiPy.GLCanvas_getDepthFunc(self)

    def setDepthFunc(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setDepthFunc(self, value, bForce)

    def pushDepthFunc(self, value):
        return _VisusGuiPy.GLCanvas_pushDepthFunc(self, value)

    def popDepthFunc(self):
        return _VisusGuiPy.GLCanvas_popDepthFunc(self)

    def getCullFace(self):
        return _VisusGuiPy.GLCanvas_getCullFace(self)

    def setCullFace(self, value, bForce=False):
        return _VisusGuiPy.GLCanvas_setCullFace(self, value, bForce)

    def pushCullFace(self, value):
        return _VisusGuiPy.GLCanvas_pushCullFace(self, value)

    def popCullFace(self):
        return _VisusGuiPy.GLCanvas_popCullFace(self)

    def setTextureInSlot(self, slot, sampler, texture):
        return _VisusGuiPy.GLCanvas_setTextureInSlot(self, slot, sampler, texture)

    def setTexture(self, sampler, value):
        return _VisusGuiPy.GLCanvas_setTexture(self, sampler, value)

    def glRenderMesh(self, mesh):
        return _VisusGuiPy.GLCanvas_glRenderMesh(self, mesh)

    def glRenderScreenText(self, x, y, s, color):
        return _VisusGuiPy.GLCanvas_glRenderScreenText(self, x, y, s, color)

    def paintGL(self):
        return _VisusGuiPy.GLCanvas_paintGL(self)

# Register GLCanvas in _VisusGuiPy:
_VisusGuiPy.GLCanvas_swigregister(GLCanvas)

class GLOrthoParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    left = property(_VisusGuiPy.GLOrthoParams_left_get, _VisusGuiPy.GLOrthoParams_left_set)
    right = property(_VisusGuiPy.GLOrthoParams_right_get, _VisusGuiPy.GLOrthoParams_right_set)
    bottom = property(_VisusGuiPy.GLOrthoParams_bottom_get, _VisusGuiPy.GLOrthoParams_bottom_set)
    top = property(_VisusGuiPy.GLOrthoParams_top_get, _VisusGuiPy.GLOrthoParams_top_set)
    zNear = property(_VisusGuiPy.GLOrthoParams_zNear_get, _VisusGuiPy.GLOrthoParams_zNear_set)
    zFar = property(_VisusGuiPy.GLOrthoParams_zFar_get, _VisusGuiPy.GLOrthoParams_zFar_set)

    def __init__(self, left_=0, right_=0, bottom_=0, top_=0, zNear_=0, zFar_=0):
        _VisusGuiPy.GLOrthoParams_swiginit(self, _VisusGuiPy.new_GLOrthoParams(left_, right_, bottom_, top_, zNear_, zFar_))

    @staticmethod
    def fromString(s):
        return _VisusGuiPy.GLOrthoParams_fromString(s)

    @staticmethod
    def fromCenterAndSize(center, size):
        return _VisusGuiPy.GLOrthoParams_fromCenterAndSize(center, size)

    def __mul__(self, value):
        return _VisusGuiPy.GLOrthoParams___mul__(self, value)

    def __add__(self, other):
        return _VisusGuiPy.GLOrthoParams___add__(self, other)

    def __sub__(self, other):
        return _VisusGuiPy.GLOrthoParams___sub__(self, other)

    def toVector(self):
        return _VisusGuiPy.GLOrthoParams_toVector(self)

    def __eq__(self, other):
        return _VisusGuiPy.GLOrthoParams___eq__(self, other)

    def __ne__(self, other):
        return _VisusGuiPy.GLOrthoParams___ne__(self, other)

    def getWidth(self):
        return _VisusGuiPy.GLOrthoParams_getWidth(self)

    def getHeight(self):
        return _VisusGuiPy.GLOrthoParams_getHeight(self)

    def getDepth(self):
        return _VisusGuiPy.GLOrthoParams_getDepth(self)

    def getSize(self):
        return _VisusGuiPy.GLOrthoParams_getSize(self)

    def getCenter(self):
        return _VisusGuiPy.GLOrthoParams_getCenter(self)

    def translated(self, *args):
        return _VisusGuiPy.GLOrthoParams_translated(self, *args)

    def scaled(self, vs):
        return _VisusGuiPy.GLOrthoParams_scaled(self, vs)

    def scaledAroundCenter(self, vs, center):
        return _VisusGuiPy.GLOrthoParams_scaledAroundCenter(self, vs, center)

    def withAspectRatio(self, ratio):
        return _VisusGuiPy.GLOrthoParams_withAspectRatio(self, ratio)

    def split(self, r):
        return _VisusGuiPy.GLOrthoParams_split(self, r)

    def toString(self):
        return _VisusGuiPy.GLOrthoParams_toString(self)

    def write(self, ar):
        return _VisusGuiPy.GLOrthoParams_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLOrthoParams_read(self, ar)
    __swig_destroy__ = _VisusGuiPy.delete_GLOrthoParams

# Register GLOrthoParams in _VisusGuiPy:
_VisusGuiPy.GLOrthoParams_swigregister(GLOrthoParams)

def GLOrthoParams_fromString(s):
    return _VisusGuiPy.GLOrthoParams_fromString(s)

def GLOrthoParams_fromCenterAndSize(center, size):
    return _VisusGuiPy.GLOrthoParams_fromCenterAndSize(center, size)

class GLCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusGuiPy.delete_GLCamera

    @staticmethod
    def decode(ar):
        return _VisusGuiPy.GLCamera_decode(ar)

    def getLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLCamera_getLookAt(self, pos, center, vup)

    def getTypeName(self):
        return _VisusGuiPy.GLCamera_getTypeName(self)

    def mirror(self, ref):
        return _VisusGuiPy.GLCamera_mirror(self, ref)

    def guessPosition(self, box, ref=-1):
        return _VisusGuiPy.GLCamera_guessPosition(self, box, ref)

    def splitFrustum(self, value):
        return _VisusGuiPy.GLCamera_splitFrustum(self, value)

    def glRender(self, gl):
        return _VisusGuiPy.GLCamera_glRender(self, gl)

    def glMousePressEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glMousePressEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glMouseMoveEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glMouseReleaseEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _VisusGuiPy.GLCamera_glKeyPressEvent(self, evt, viewport)

    def getCurrentFrustum(self, viewport):
        return _VisusGuiPy.GLCamera_getCurrentFrustum(self, viewport)

    def getFinalFrustum(self, viewport):
        return _VisusGuiPy.GLCamera_getFinalFrustum(self, viewport)

    def beginTransaction(self):
        return _VisusGuiPy.GLCamera_beginTransaction(self)

    def endTransaction(self):
        return _VisusGuiPy.GLCamera_endTransaction(self)

    def write(self, ar):
        return _VisusGuiPy.GLCamera_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLCamera_read(self, ar)

# Register GLCamera in _VisusGuiPy:
_VisusGuiPy.GLCamera_swigregister(GLCamera)

def GLCamera_decode(ar):
    return _VisusGuiPy.GLCamera_decode(ar)

class GLOrthoCamera(GLCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, default_scale=1.3):
        _VisusGuiPy.GLOrthoCamera_swiginit(self, _VisusGuiPy.new_GLOrthoCamera(default_scale))
    __swig_destroy__ = _VisusGuiPy.delete_GLOrthoCamera

    def getTypeName(self):
        return _VisusGuiPy.GLOrthoCamera_getTypeName(self)

    def getPos(self):
        return _VisusGuiPy.GLOrthoCamera_getPos(self)

    def getCenter(self):
        return _VisusGuiPy.GLOrthoCamera_getCenter(self)

    def getVup(self):
        return _VisusGuiPy.GLOrthoCamera_getVup(self)

    def getLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLOrthoCamera_getLookAt(self, pos, center, vup)

    def setLookAt(self, pos, center, vup, rotation=0.0):
        return _VisusGuiPy.GLOrthoCamera_setLookAt(self, pos, center, vup, rotation)

    def guessPosition(self, bound, ref=-1):
        return _VisusGuiPy.GLOrthoCamera_guessPosition(self, bound, ref)

    def splitFrustum(self, r):
        return _VisusGuiPy.GLOrthoCamera_splitFrustum(self, r)

    def setDisableRotation(self, value):
        return _VisusGuiPy.GLOrthoCamera_setDisableRotation(self, value)

    def isRotationDisabled(self):
        return _VisusGuiPy.GLOrthoCamera_isRotationDisabled(self)

    def getMaxZoom(self):
        return _VisusGuiPy.GLOrthoCamera_getMaxZoom(self)

    def setMaxZoom(self, value):
        return _VisusGuiPy.GLOrthoCamera_setMaxZoom(self, value)

    def getMinZoom(self):
        return _VisusGuiPy.GLOrthoCamera_getMinZoom(self)

    def setMinZoom(self, value):
        return _VisusGuiPy.GLOrthoCamera_setMinZoom(self, value)

    def mirror(self, ref):
        return _VisusGuiPy.GLOrthoCamera_mirror(self, ref)

    def translate(self, vt):
        return _VisusGuiPy.GLOrthoCamera_translate(self, vt)

    def moveLeft(self):
        return _VisusGuiPy.GLOrthoCamera_moveLeft(self)

    def moveRight(self):
        return _VisusGuiPy.GLOrthoCamera_moveRight(self)

    def moveUp(self):
        return _VisusGuiPy.GLOrthoCamera_moveUp(self)

    def moveDown(self):
        return _VisusGuiPy.GLOrthoCamera_moveDown(self)

    def scale(self, *args):
        return _VisusGuiPy.GLOrthoCamera_scale(self, *args)

    def zoomIn(self):
        return _VisusGuiPy.GLOrthoCamera_zoomIn(self)

    def zoomOut(self):
        return _VisusGuiPy.GLOrthoCamera_zoomOut(self)

    def getOrthoParams(self):
        return _VisusGuiPy.GLOrthoCamera_getOrthoParams(self)

    def setOrthoParams(self, value, smooth=0):
        return _VisusGuiPy.GLOrthoCamera_setOrthoParams(self, value, smooth)

    def getDefaultSmooth(self):
        return _VisusGuiPy.GLOrthoCamera_getDefaultSmooth(self)

    def setDefaultSmooth(self, value):
        return _VisusGuiPy.GLOrthoCamera_setDefaultSmooth(self, value)

    def toggleDefaultSmooth(self):
        return _VisusGuiPy.GLOrthoCamera_toggleDefaultSmooth(self)

    def getCurrentFrustum(self, viewport):
        return _VisusGuiPy.GLOrthoCamera_getCurrentFrustum(self, viewport)

    def getFinalFrustum(self, viewport):
        return _VisusGuiPy.GLOrthoCamera_getFinalFrustum(self, viewport)

    def glMousePressEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glMousePressEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glMouseReleaseEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glMouseMoveEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _VisusGuiPy.GLOrthoCamera_glKeyPressEvent(self, evt, viewport)

    def execute(self, ar):
        return _VisusGuiPy.GLOrthoCamera_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.GLOrthoCamera_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLOrthoCamera_read(self, ar)

# Register GLOrthoCamera in _VisusGuiPy:
_VisusGuiPy.GLOrthoCamera_swigregister(GLOrthoCamera)

class GLLookAtCamera(GLCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.GLLookAtCamera_swiginit(self, _VisusGuiPy.new_GLLookAtCamera())
    __swig_destroy__ = _VisusGuiPy.delete_GLLookAtCamera

    def getTypeName(self):
        return _VisusGuiPy.GLLookAtCamera_getTypeName(self)

    def guessPosition(self, value, ref=-1):
        return _VisusGuiPy.GLLookAtCamera_guessPosition(self, value, ref)

    def splitFrustum(self, value):
        return _VisusGuiPy.GLLookAtCamera_splitFrustum(self, value)

    def setPos(self, value):
        return _VisusGuiPy.GLLookAtCamera_setPos(self, value)

    def setCenter(self, value):
        return _VisusGuiPy.GLLookAtCamera_setCenter(self, value)

    def setVup(self, value):
        return _VisusGuiPy.GLLookAtCamera_setVup(self, value)

    def getCenterOfRotation(self):
        return _VisusGuiPy.GLLookAtCamera_getCenterOfRotation(self)

    def setCenterOfRotation(self, value):
        return _VisusGuiPy.GLLookAtCamera_setCenterOfRotation(self, value)

    def setRotation(self, value):
        return _VisusGuiPy.GLLookAtCamera_setRotation(self, value)

    def getRotation(self):
        return _VisusGuiPy.GLLookAtCamera_getRotation(self)

    def getFov(self):
        return _VisusGuiPy.GLLookAtCamera_getFov(self)

    def setFov(self, value):
        return _VisusGuiPy.GLLookAtCamera_setFov(self, value)

    def getZNear(self):
        return _VisusGuiPy.GLLookAtCamera_getZNear(self)

    def setZNear(self, value):
        return _VisusGuiPy.GLLookAtCamera_setZNear(self, value)

    def getZFar(self):
        return _VisusGuiPy.GLLookAtCamera_getZFar(self)

    def setZFar(self, value):
        return _VisusGuiPy.GLLookAtCamera_setZFar(self, value)

    def getPos(self):
        return _VisusGuiPy.GLLookAtCamera_getPos(self)

    def getCenter(self):
        return _VisusGuiPy.GLLookAtCamera_getCenter(self)

    def getVup(self):
        return _VisusGuiPy.GLLookAtCamera_getVup(self)

    def getLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLLookAtCamera_getLookAt(self, pos, center, vup)

    def setLookAt(self, pos, center, vup):
        return _VisusGuiPy.GLLookAtCamera_setLookAt(self, pos, center, vup)

    def getProjection(self, viewport):
        return _VisusGuiPy.GLLookAtCamera_getProjection(self, viewport)

    def getModelview(self):
        return _VisusGuiPy.GLLookAtCamera_getModelview(self)

    def getFinalFrustum(self, viewport):
        return _VisusGuiPy.GLLookAtCamera_getFinalFrustum(self, viewport)

    def getCurrentFrustum(self, viewport):
        return _VisusGuiPy.GLLookAtCamera_getCurrentFrustum(self, viewport)

    def glMousePressEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glMousePressEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glMouseMoveEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glMouseReleaseEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _VisusGuiPy.GLLookAtCamera_glKeyPressEvent(self, evt, viewport)

    def execute(self, ar):
        return _VisusGuiPy.GLLookAtCamera_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.GLLookAtCamera_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLLookAtCamera_read(self, ar)

# Register GLLookAtCamera in _VisusGuiPy:
_VisusGuiPy.GLLookAtCamera_swigregister(GLLookAtCamera)

class GLCameraNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusGuiPy.GLCameraNode_swiginit(self, _VisusGuiPy.new_GLCameraNode(*args))
    __swig_destroy__ = _VisusGuiPy.delete_GLCameraNode

    def getTypeName(self):
        return _VisusGuiPy.GLCameraNode_getTypeName(self)

    def getGLCamera(self):
        return _VisusGuiPy.GLCameraNode_getGLCamera(self)

    def setGLCamera(self, glcamera):
        return _VisusGuiPy.GLCameraNode_setGLCamera(self, glcamera)

    def execute(self, ar):
        return _VisusGuiPy.GLCameraNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.GLCameraNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.GLCameraNode_read(self, ar)

# Register GLCameraNode in _VisusGuiPy:
_VisusGuiPy.GLCameraNode_swigregister(GLCameraNode)

class GLCameraNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        _VisusGuiPy.GLCameraNodeView_swiginit(self, _VisusGuiPy.new_GLCameraNodeView(model))
    __swig_destroy__ = _VisusGuiPy.delete_GLCameraNodeView

    def bindModel(self, model):
        return _VisusGuiPy.GLCameraNodeView_bindModel(self, model)

# Register GLCameraNodeView in _VisusGuiPy:
_VisusGuiPy.GLCameraNodeView_swigregister(GLCameraNodeView)

class IsoContour(GLMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    field = property(_VisusGuiPy.IsoContour_field_get, _VisusGuiPy.IsoContour_field_set)
    second_field = property(_VisusGuiPy.IsoContour_second_field_get, _VisusGuiPy.IsoContour_second_field_set)
    range = property(_VisusGuiPy.IsoContour_range_get, _VisusGuiPy.IsoContour_range_set)
    voxel_used = property(_VisusGuiPy.IsoContour_voxel_used_get, _VisusGuiPy.IsoContour_voxel_used_set)

    def __init__(self):
        _VisusGuiPy.IsoContour_swiginit(self, _VisusGuiPy.new_IsoContour())
    __swig_destroy__ = _VisusGuiPy.delete_IsoContour

# Register IsoContour in _VisusGuiPy:
_VisusGuiPy.IsoContour_swigregister(IsoContour)

class MarchingCube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_VisusGuiPy.MarchingCube_data_get, _VisusGuiPy.MarchingCube_data_set)
    isovalue = property(_VisusGuiPy.MarchingCube_isovalue_get, _VisusGuiPy.MarchingCube_isovalue_set)
    enable_vortex_used = property(_VisusGuiPy.MarchingCube_enable_vortex_used_get, _VisusGuiPy.MarchingCube_enable_vortex_used_set)
    vertices_per_batch = property(_VisusGuiPy.MarchingCube_vertices_per_batch_get, _VisusGuiPy.MarchingCube_vertices_per_batch_set)
    aborted = property(_VisusGuiPy.MarchingCube_aborted_get, _VisusGuiPy.MarchingCube_aborted_set)

    def __init__(self, *args):
        _VisusGuiPy.MarchingCube_swiginit(self, _VisusGuiPy.new_MarchingCube(*args))

    def run(self):
        return _VisusGuiPy.MarchingCube_run(self)
    __swig_destroy__ = _VisusGuiPy.delete_MarchingCube

# Register MarchingCube in _VisusGuiPy:
_VisusGuiPy.MarchingCube_swigregister(MarchingCube)

class IsoContourNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.IsoContourNode_swiginit(self, _VisusGuiPy.new_IsoContourNode())
    __swig_destroy__ = _VisusGuiPy.delete_IsoContourNode

    def getTypeName(self):
        return _VisusGuiPy.IsoContourNode_getTypeName(self)

    def processInput(self):
        return _VisusGuiPy.IsoContourNode_processInput(self)

    def getLastFieldRange(self):
        return _VisusGuiPy.IsoContourNode_getLastFieldRange(self)

    def setField(self, value):
        return _VisusGuiPy.IsoContourNode_setField(self, value)

    def getIsoValue(self):
        return _VisusGuiPy.IsoContourNode_getIsoValue(self)

    def setIsoValue(self, value):
        return _VisusGuiPy.IsoContourNode_setIsoValue(self, value)

    def createEditor(self):
        return _VisusGuiPy.IsoContourNode_createEditor(self)

    def execute(self, ar):
        return _VisusGuiPy.IsoContourNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.IsoContourNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.IsoContourNode_read(self, ar)

# Register IsoContourNode in _VisusGuiPy:
_VisusGuiPy.IsoContourNode_swigregister(IsoContourNode)

class IsoContourRenderNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.IsoContourRenderNode_swiginit(self, _VisusGuiPy.new_IsoContourRenderNode())
    __swig_destroy__ = _VisusGuiPy.delete_IsoContourRenderNode

    def getTypeName(self):
        return _VisusGuiPy.IsoContourRenderNode_getTypeName(self)

    def glRender(self, gl):
        return _VisusGuiPy.IsoContourRenderNode_glRender(self, gl)

    def getBounds(self):
        return _VisusGuiPy.IsoContourRenderNode_getBounds(self)

    def getMaterial(self):
        return _VisusGuiPy.IsoContourRenderNode_getMaterial(self)

    def setMaterial(self, new_value):
        return _VisusGuiPy.IsoContourRenderNode_setMaterial(self, new_value)

    def getPalette(self):
        return _VisusGuiPy.IsoContourRenderNode_getPalette(self)

    def setPalette(self, value):
        return _VisusGuiPy.IsoContourRenderNode_setPalette(self, value)

    def getMesh(self):
        return _VisusGuiPy.IsoContourRenderNode_getMesh(self)

    def setMesh(self, value):
        return _VisusGuiPy.IsoContourRenderNode_setMesh(self, value)

    def processInput(self):
        return _VisusGuiPy.IsoContourRenderNode_processInput(self)

    def createEditor(self):
        return _VisusGuiPy.IsoContourRenderNode_createEditor(self)

    @staticmethod
    def allocShaders():
        return _VisusGuiPy.IsoContourRenderNode_allocShaders()

    @staticmethod
    def releaseShaders():
        return _VisusGuiPy.IsoContourRenderNode_releaseShaders()

    def execute(self, ar):
        return _VisusGuiPy.IsoContourRenderNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.IsoContourRenderNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.IsoContourRenderNode_read(self, ar)

# Register IsoContourRenderNode in _VisusGuiPy:
_VisusGuiPy.IsoContourRenderNode_swigregister(IsoContourRenderNode)

def IsoContourRenderNode_allocShaders():
    return _VisusGuiPy.IsoContourRenderNode_allocShaders()

def IsoContourRenderNode_releaseShaders():
    return _VisusGuiPy.IsoContourRenderNode_releaseShaders()

class RenderArrayNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pimpl = property(_VisusGuiPy.RenderArrayNode_pimpl_get, _VisusGuiPy.RenderArrayNode_pimpl_set)
    bFastRendering = property(_VisusGuiPy.RenderArrayNode_bFastRendering_get, _VisusGuiPy.RenderArrayNode_bFastRendering_set)
    opacity = property(_VisusGuiPy.RenderArrayNode_opacity_get, _VisusGuiPy.RenderArrayNode_opacity_set)

    def __init__(self):
        _VisusGuiPy.RenderArrayNode_swiginit(self, _VisusGuiPy.new_RenderArrayNode())
    __swig_destroy__ = _VisusGuiPy.delete_RenderArrayNode

    def getTypeName(self):
        return _VisusGuiPy.RenderArrayNode_getTypeName(self)

    def getData(self):
        return _VisusGuiPy.RenderArrayNode_getData(self)

    def setData(self, *args):
        return _VisusGuiPy.RenderArrayNode_setData(self, *args)

    def getDataDimension(self):
        return _VisusGuiPy.RenderArrayNode_getDataDimension(self)

    def getDataBounds(self):
        return _VisusGuiPy.RenderArrayNode_getDataBounds(self)

    def getBounds(self):
        return _VisusGuiPy.RenderArrayNode_getBounds(self)

    def getLightingMaterial(self):
        return _VisusGuiPy.RenderArrayNode_getLightingMaterial(self)

    def setLightingMaterial(self, value):
        return _VisusGuiPy.RenderArrayNode_setLightingMaterial(self, value)

    def lightingEnabled(self):
        return _VisusGuiPy.RenderArrayNode_lightingEnabled(self)

    def setLightingEnabled(self, value):
        return _VisusGuiPy.RenderArrayNode_setLightingEnabled(self, value)

    def getPalette(self):
        return _VisusGuiPy.RenderArrayNode_getPalette(self)

    def paletteEnabled(self):
        return _VisusGuiPy.RenderArrayNode_paletteEnabled(self)

    def setPaletteEnabled(self, value):
        return _VisusGuiPy.RenderArrayNode_setPaletteEnabled(self, value)

    def useViewDirection(self):
        return _VisusGuiPy.RenderArrayNode_useViewDirection(self)

    def setUseViewDirection(self, value):
        return _VisusGuiPy.RenderArrayNode_setUseViewDirection(self, value)

    def maxNumSlices(self):
        return _VisusGuiPy.RenderArrayNode_maxNumSlices(self)

    def setMaxNumSlices(self, value):
        return _VisusGuiPy.RenderArrayNode_setMaxNumSlices(self, value)

    def minifyFilter(self):
        return _VisusGuiPy.RenderArrayNode_minifyFilter(self)

    def setMinifyFilter(self, value):
        return _VisusGuiPy.RenderArrayNode_setMinifyFilter(self, value)

    def magnifyFilter(self):
        return _VisusGuiPy.RenderArrayNode_magnifyFilter(self)

    def setMagnifyFilter(self, value):
        return _VisusGuiPy.RenderArrayNode_setMagnifyFilter(self, value)

    def getRenderType(self):
        return _VisusGuiPy.RenderArrayNode_getRenderType(self)

    def setRenderType(self, value):
        return _VisusGuiPy.RenderArrayNode_setRenderType(self, value)

    def glRender(self, gl):
        return _VisusGuiPy.RenderArrayNode_glRender(self, gl)

    def processInput(self):
        return _VisusGuiPy.RenderArrayNode_processInput(self)

    def createEditor(self):
        return _VisusGuiPy.RenderArrayNode_createEditor(self)

    @staticmethod
    def allocShaders():
        return _VisusGuiPy.RenderArrayNode_allocShaders()

    @staticmethod
    def releaseShaders():
        return _VisusGuiPy.RenderArrayNode_releaseShaders()

    def execute(self, ar):
        return _VisusGuiPy.RenderArrayNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.RenderArrayNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.RenderArrayNode_read(self, ar)

# Register RenderArrayNode in _VisusGuiPy:
_VisusGuiPy.RenderArrayNode_swigregister(RenderArrayNode)

def RenderArrayNode_allocShaders():
    return _VisusGuiPy.RenderArrayNode_allocShaders()

def RenderArrayNode_releaseShaders():
    return _VisusGuiPy.RenderArrayNode_releaseShaders()

class KdRenderArrayNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusGuiPy.KdRenderArrayNode_swiginit(self, _VisusGuiPy.new_KdRenderArrayNode())
    __swig_destroy__ = _VisusGuiPy.delete_KdRenderArrayNode

    def getTypeName(self):
        return _VisusGuiPy.KdRenderArrayNode_getTypeName(self)

    def getKdArray(self):
        return _VisusGuiPy.KdRenderArrayNode_getKdArray(self)

    def getBounds(self):
        return _VisusGuiPy.KdRenderArrayNode_getBounds(self)

    def processInput(self):
        return _VisusGuiPy.KdRenderArrayNode_processInput(self)

    def glRender(self, gl):
        return _VisusGuiPy.KdRenderArrayNode_glRender(self, gl)

    def createEditor(self):
        return _VisusGuiPy.KdRenderArrayNode_createEditor(self)

    @staticmethod
    def allocShaders():
        return _VisusGuiPy.KdRenderArrayNode_allocShaders()

    @staticmethod
    def releaseShaders():
        return _VisusGuiPy.KdRenderArrayNode_releaseShaders()

# Register KdRenderArrayNode in _VisusGuiPy:
_VisusGuiPy.KdRenderArrayNode_swigregister(KdRenderArrayNode)

def KdRenderArrayNode_allocShaders():
    return _VisusGuiPy.KdRenderArrayNode_allocShaders()

def KdRenderArrayNode_releaseShaders():
    return _VisusGuiPy.KdRenderArrayNode_releaseShaders()

class ScriptingNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ScriptingNode:
            _self = None
        else:
            _self = self
        _VisusGuiPy.ScriptingNode_swiginit(self, _VisusGuiPy.new_ScriptingNode(_self, ))
    __swig_destroy__ = _VisusGuiPy.delete_ScriptingNode

    def getTypeName(self):
        return _VisusGuiPy.ScriptingNode_getTypeName(self)

    def getCode(self):
        return _VisusGuiPy.ScriptingNode_getCode(self)

    def setCode(self, code, bForce=False):
        return _VisusGuiPy.ScriptingNode_setCode(self, code, bForce)

    def processInput(self):
        return _VisusGuiPy.ScriptingNode_processInput(self)

    def getBounds(self):
        return _VisusGuiPy.ScriptingNode_getBounds(self)

    def setBounds(self, value):
        return _VisusGuiPy.ScriptingNode_setBounds(self, value)

    @staticmethod
    def castFrom(obj):
        return _VisusGuiPy.ScriptingNode_castFrom(obj)

    def modelChanged(self):
        return _VisusGuiPy.ScriptingNode_modelChanged(self)

    def createEditor(self):
        return _VisusGuiPy.ScriptingNode_createEditor(self)

    def glGetRenderQueue(self):
        return _VisusGuiPy.ScriptingNode_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _VisusGuiPy.ScriptingNode_glSetRenderQueue(self, value)

    def glMousePressEvent(self, map, evt):
        return _VisusGuiPy.ScriptingNode_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _VisusGuiPy.ScriptingNode_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _VisusGuiPy.ScriptingNode_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _VisusGuiPy.ScriptingNode_glWheelEvent(self, map, evt)

    def glRender(self, gl):
        return _VisusGuiPy.ScriptingNode_glRender(self, gl)

    def execute(self, ar):
        return _VisusGuiPy.ScriptingNode_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.ScriptingNode_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.ScriptingNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _VisusGuiPy.disown_ScriptingNode(self)
        return weakref.proxy(self)

# Register ScriptingNode in _VisusGuiPy:
_VisusGuiPy.ScriptingNode_swigregister(ScriptingNode)

def ScriptingNode_castFrom(obj):
    return _VisusGuiPy.ScriptingNode_castFrom(obj)

class ViewerPreferences(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    title = property(_VisusGuiPy.ViewerPreferences_title_get, _VisusGuiPy.ViewerPreferences_title_set)
    bShowTitleBar = property(_VisusGuiPy.ViewerPreferences_bShowTitleBar_get, _VisusGuiPy.ViewerPreferences_bShowTitleBar_set)
    bShowToolbar = property(_VisusGuiPy.ViewerPreferences_bShowToolbar_get, _VisusGuiPy.ViewerPreferences_bShowToolbar_set)
    bShowTreeView = property(_VisusGuiPy.ViewerPreferences_bShowTreeView_get, _VisusGuiPy.ViewerPreferences_bShowTreeView_set)
    bShowDataflow = property(_VisusGuiPy.ViewerPreferences_bShowDataflow_get, _VisusGuiPy.ViewerPreferences_bShowDataflow_set)
    bShowLogs = property(_VisusGuiPy.ViewerPreferences_bShowLogs_get, _VisusGuiPy.ViewerPreferences_bShowLogs_set)
    bShowLogos = property(_VisusGuiPy.ViewerPreferences_bShowLogos_get, _VisusGuiPy.ViewerPreferences_bShowLogos_set)
    screen_bounds = property(_VisusGuiPy.ViewerPreferences_screen_bounds_get, _VisusGuiPy.ViewerPreferences_screen_bounds_set)

    def __init__(self):
        _VisusGuiPy.ViewerPreferences_swiginit(self, _VisusGuiPy.new_ViewerPreferences())

    def write(self, ar):
        return _VisusGuiPy.ViewerPreferences_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.ViewerPreferences_read(self, ar)
    __swig_destroy__ = _VisusGuiPy.delete_ViewerPreferences

# Register ViewerPreferences in _VisusGuiPy:
_VisusGuiPy.ViewerPreferences_swigregister(ViewerPreferences)

class ViewerAutoRefresh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enabled = property(_VisusGuiPy.ViewerAutoRefresh_enabled_get, _VisusGuiPy.ViewerAutoRefresh_enabled_set)
    msec = property(_VisusGuiPy.ViewerAutoRefresh_msec_get, _VisusGuiPy.ViewerAutoRefresh_msec_set)

    def __init__(self):
        _VisusGuiPy.ViewerAutoRefresh_swiginit(self, _VisusGuiPy.new_ViewerAutoRefresh())
    __swig_destroy__ = _VisusGuiPy.delete_ViewerAutoRefresh

# Register ViewerAutoRefresh in _VisusGuiPy:
_VisusGuiPy.ViewerAutoRefresh_swigregister(ViewerAutoRefresh)

class ViewerToolBarTab(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_VisusGuiPy.ViewerToolBarTab_name_get, _VisusGuiPy.ViewerToolBarTab_name_set)

    def __init__(self, name_):
        _VisusGuiPy.ViewerToolBarTab_swiginit(self, _VisusGuiPy.new_ViewerToolBarTab(name_))
    __swig_destroy__ = _VisusGuiPy.delete_ViewerToolBarTab

    @staticmethod
    def createButton(*args):
        return _VisusGuiPy.ViewerToolBarTab_createButton(*args)

    def addAction(self, action):
        return _VisusGuiPy.ViewerToolBarTab_addAction(self, action)

    def addMenu(self, icon, name, menu):
        return _VisusGuiPy.ViewerToolBarTab_addMenu(self, icon, name, menu)

    def addBlueMenu(self, icon, name, menu):
        return _VisusGuiPy.ViewerToolBarTab_addBlueMenu(self, icon, name, menu)

# Register ViewerToolBarTab in _VisusGuiPy:
_VisusGuiPy.ViewerToolBarTab_swigregister(ViewerToolBarTab)

def ViewerToolBarTab_createButton(*args):
    return _VisusGuiPy.ViewerToolBarTab_createButton(*args)

class ViewerToolBar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file_menu = property(_VisusGuiPy.ViewerToolBar_file_menu_get, _VisusGuiPy.ViewerToolBar_file_menu_set)
    bookmarks_button = property(_VisusGuiPy.ViewerToolBar_bookmarks_button_get, _VisusGuiPy.ViewerToolBar_bookmarks_button_set)
    tabs = property(_VisusGuiPy.ViewerToolBar_tabs_get, _VisusGuiPy.ViewerToolBar_tabs_set)

    def __init__(self):
        _VisusGuiPy.ViewerToolBar_swiginit(self, _VisusGuiPy.new_ViewerToolBar())

    def addTab(self, tab, name):
        return _VisusGuiPy.ViewerToolBar_addTab(self, tab, name)
    __swig_destroy__ = _VisusGuiPy.delete_ViewerToolBar

# Register ViewerToolBar in _VisusGuiPy:
_VisusGuiPy.ViewerToolBar_swigregister(ViewerToolBar)

class ViewerLogo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filename = property(_VisusGuiPy.ViewerLogo_filename_get, _VisusGuiPy.ViewerLogo_filename_set)
    pos = property(_VisusGuiPy.ViewerLogo_pos_get, _VisusGuiPy.ViewerLogo_pos_set)
    opacity = property(_VisusGuiPy.ViewerLogo_opacity_get, _VisusGuiPy.ViewerLogo_opacity_set)
    border = property(_VisusGuiPy.ViewerLogo_border_get, _VisusGuiPy.ViewerLogo_border_set)
    tex = property(_VisusGuiPy.ViewerLogo_tex_get, _VisusGuiPy.ViewerLogo_tex_set)

    def __init__(self):
        _VisusGuiPy.ViewerLogo_swiginit(self, _VisusGuiPy.new_ViewerLogo())
    __swig_destroy__ = _VisusGuiPy.delete_ViewerLogo

# Register ViewerLogo in _VisusGuiPy:
_VisusGuiPy.ViewerLogo_swigregister(ViewerLogo)

class Viewer(VisusDataflowPy.DataflowListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Viewer:
            _self = None
        else:
            _self = self
        _VisusGuiPy.Viewer_swiginit(self, _VisusGuiPy.new_Viewer(_self, *args))
    __swig_destroy__ = _VisusGuiPy.delete_Viewer

    def getTypeName(self):
        return _VisusGuiPy.Viewer_getTypeName(self)

    def configureFromArgs(self, args):
        return _VisusGuiPy.Viewer_configureFromArgs(self, args)

    def c_ptr(self):
        return _VisusGuiPy.Viewer_c_ptr(self)

    def printInfo(self, msg):
        return _VisusGuiPy.Viewer_printInfo(self, msg)

    def showLicences(self):
        return _VisusGuiPy.Viewer_showLicences(self)

    def getDataflow(self):
        return _VisusGuiPy.Viewer_getDataflow(self)

    def getGLCanvas(self):
        return _VisusGuiPy.Viewer_getGLCanvas(self)

    def getGLCamera(self):
        return _VisusGuiPy.Viewer_getGLCamera(self)

    def getDataset(self):
        return _VisusGuiPy.Viewer_getDataset(self)

    def getTreeView(self):
        return _VisusGuiPy.Viewer_getTreeView(self)

    def getFrameView(self):
        return _VisusGuiPy.Viewer_getFrameView(self)

    def getLog(self):
        return _VisusGuiPy.Viewer_getLog(self)

    def addDockWidget(self, *args):
        return _VisusGuiPy.Viewer_addDockWidget(self, *args)

    def showNodeContextMenu(self, node):
        return _VisusGuiPy.Viewer_showNodeContextMenu(self, node)

    def showWidget(self, *args):
        return _VisusGuiPy.Viewer_showWidget(self, *args)

    def setBackgroundColor(self, value):
        return _VisusGuiPy.Viewer_setBackgroundColor(self, value)

    def openFile(self, filename, parent=None):
        return _VisusGuiPy.Viewer_openFile(self, filename, parent)

    def openUrl(self, url, parent=None):
        return _VisusGuiPy.Viewer_openUrl(self, url, parent)

    def saveFile(self, filename, bSaveHistory=False):
        return _VisusGuiPy.Viewer_saveFile(self, filename, bSaveHistory)

    def postRedisplay(self):
        return _VisusGuiPy.Viewer_postRedisplay(self)

    def playFile(self, filename):
        return _VisusGuiPy.Viewer_playFile(self, filename)

    def takeSnapshot(self, *args):
        return _VisusGuiPy.Viewer_takeSnapshot(self, *args)

    def editNode(self, node=None):
        return _VisusGuiPy.Viewer_editNode(self, node)

    def beginFreeTransform(self, *args):
        return _VisusGuiPy.Viewer_beginFreeTransform(self, *args)

    def endFreeTransform(self):
        return _VisusGuiPy.Viewer_endFreeTransform(self)

    def refreshActions(self):
        return _VisusGuiPy.Viewer_refreshActions(self)

    def idle(self):
        return _VisusGuiPy.Viewer_idle(self)

    def modelChanged(self):
        return _VisusGuiPy.Viewer_modelChanged(self)

    def enableSaveSession(self):
        return _VisusGuiPy.Viewer_enableSaveSession(self)

    def dataflowBeforeProcessInput(self, node):
        return _VisusGuiPy.Viewer_dataflowBeforeProcessInput(self, node)

    def dataflowAfterProcessInput(self, node):
        return _VisusGuiPy.Viewer_dataflowAfterProcessInput(self, node)

    def getRoot(self):
        return _VisusGuiPy.Viewer_getRoot(self)

    def getUUID(self, node):
        return _VisusGuiPy.Viewer_getUUID(self, node)

    def getNodes(self):
        return _VisusGuiPy.Viewer_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _VisusGuiPy.Viewer_findNodeByUUID(self, uuid)

    def findPick(self, node, screen_point, bRecursive, distance=None):
        return _VisusGuiPy.Viewer_findPick(self, node, screen_point, bRecursive, distance)

    def computeNodeBounds(self, node):
        return _VisusGuiPy.Viewer_computeNodeBounds(self, node)

    def getWorldDimension(self):
        return _VisusGuiPy.Viewer_getWorldDimension(self)

    def getWorldBox(self):
        return _VisusGuiPy.Viewer_getWorldBox(self)

    def computeQueryBoundsInDatasetCoordinates(self, query_node):
        return _VisusGuiPy.Viewer_computeQueryBoundsInDatasetCoordinates(self, query_node)

    def computeNodeToScreen(self, frustum, node):
        return _VisusGuiPy.Viewer_computeNodeToScreen(self, frustum, node)

    def attachGLCamera(self, value):
        return _VisusGuiPy.Viewer_attachGLCamera(self, value)

    def detachGLCamera(self):
        return _VisusGuiPy.Viewer_detachGLCamera(self)

    def glGetRenderQueue(self, node):
        return _VisusGuiPy.Viewer_glGetRenderQueue(self, node)

    def glCameraChangeEvent(self):
        return _VisusGuiPy.Viewer_glCameraChangeEvent(self)

    def glCanvasResizeEvent(self, evt):
        return _VisusGuiPy.Viewer_glCanvasResizeEvent(self, evt)

    def glCanvasMousePressEvent(self, evt):
        return _VisusGuiPy.Viewer_glCanvasMousePressEvent(self, evt)

    def glCanvasMouseMoveEvent(self, evt):
        return _VisusGuiPy.Viewer_glCanvasMouseMoveEvent(self, evt)

    def glCanvasMouseReleaseEvent(self, evt):
        return _VisusGuiPy.Viewer_glCanvasMouseReleaseEvent(self, evt)

    def glCanvasWheelEvent(self, evt):
        return _VisusGuiPy.Viewer_glCanvasWheelEvent(self, evt)

    def keyPressEvent(self, evt):
        return _VisusGuiPy.Viewer_keyPressEvent(self, evt)

    def glRender(self, gl):
        return _VisusGuiPy.Viewer_glRender(self, gl)

    def glRenderNodes(self, gl):
        return _VisusGuiPy.Viewer_glRenderNodes(self, gl)

    def glRenderSelection(self, gl):
        return _VisusGuiPy.Viewer_glRenderSelection(self, gl)

    def glRenderGestures(self, gl):
        return _VisusGuiPy.Viewer_glRenderGestures(self, gl)

    def glRenderLogos(self, gl):
        return _VisusGuiPy.Viewer_glRenderLogos(self, gl)

    def clearAll(self):
        return _VisusGuiPy.Viewer_clearAll(self)

    def dropProcessing(self):
        return _VisusGuiPy.Viewer_dropProcessing(self)

    def getAutoRefresh(self):
        return _VisusGuiPy.Viewer_getAutoRefresh(self)

    def setAutoRefresh(self, value):
        return _VisusGuiPy.Viewer_setAutoRefresh(self, value)

    def getSelection(self):
        return _VisusGuiPy.Viewer_getSelection(self)

    def setSelection(self, node):
        return _VisusGuiPy.Viewer_setSelection(self, node)

    def dropSelection(self):
        return _VisusGuiPy.Viewer_dropSelection(self)

    def setMinimal(self):
        return _VisusGuiPy.Viewer_setMinimal(self)

    def setNodeName(self, node, value):
        return _VisusGuiPy.Viewer_setNodeName(self, node, value)

    def setNodeVisible(self, node, value):
        return _VisusGuiPy.Viewer_setNodeVisible(self, node, value)

    def addNode(self, *args):
        return _VisusGuiPy.Viewer_addNode(self, *args)

    def removeNode(self, node):
        return _VisusGuiPy.Viewer_removeNode(self, node)

    def moveNode(self, dst, src, index=-1):
        return _VisusGuiPy.Viewer_moveNode(self, dst, src, index)

    def connectNodes(self, *args):
        return _VisusGuiPy.Viewer_connectNodes(self, *args)

    def disconnectNodes(self, _from, oport_name, iport_name, to):
        return _VisusGuiPy.Viewer_disconnectNodes(self, _from, oport_name, iport_name, to)

    def autoConnectNodes(self):
        return _VisusGuiPy.Viewer_autoConnectNodes(self)

    def isMouseDragging(self):
        return _VisusGuiPy.Viewer_isMouseDragging(self)

    def setMouseDragging(self, value):
        return _VisusGuiPy.Viewer_setMouseDragging(self, value)

    def scheduleMouseDragging(self, value, msec):
        return _VisusGuiPy.Viewer_scheduleMouseDragging(self, value, msec)

    def reloadVisusConfig(self, bChooseAFile=False):
        return _VisusGuiPy.Viewer_reloadVisusConfig(self, bChooseAFile)

    def setPreferences(self, value):
        return _VisusGuiPy.Viewer_setPreferences(self, value)

    def open(self, url, parent=None):
        return _VisusGuiPy.Viewer_open(self, url, parent)

    def save(self, filename, bSaveHistory=False):
        return _VisusGuiPy.Viewer_save(self, filename, bSaveHistory)

    def setDataflow(self, dataflow):
        return _VisusGuiPy.Viewer_setDataflow(self, dataflow)

    def refreshNode(self, node=None):
        return _VisusGuiPy.Viewer_refreshNode(self, node)

    def refreshAll(self):
        return _VisusGuiPy.Viewer_refreshAll(self)

    def guessGLCameraPosition(self, ref_=-1):
        return _VisusGuiPy.Viewer_guessGLCameraPosition(self, ref_)

    def mirrorGLCamera(self, ref=0):
        return _VisusGuiPy.Viewer_mirrorGLCamera(self, ref)

    def addWorld(self, uuid):
        return _VisusGuiPy.Viewer_addWorld(self, uuid)

    def addDataset(self, uuid, parent, url):
        return _VisusGuiPy.Viewer_addDataset(self, uuid, parent, url)

    def addGLCamera(self, *args):
        return _VisusGuiPy.Viewer_addGLCamera(self, *args)

    def addVolume(self, *args):
        return _VisusGuiPy.Viewer_addVolume(self, *args)

    def addSlice(self, *args):
        return _VisusGuiPy.Viewer_addSlice(self, *args)

    def setFieldName(self, value):
        return _VisusGuiPy.Viewer_setFieldName(self, value)

    def addKdQuery(self, *args):
        return _VisusGuiPy.Viewer_addKdQuery(self, *args)

    def addIsoContour(self, *args):
        return _VisusGuiPy.Viewer_addIsoContour(self, *args)

    def addScripting(self, uuid, parent):
        return _VisusGuiPy.Viewer_addScripting(self, uuid, parent)

    def setScriptingCode(self, value):
        return _VisusGuiPy.Viewer_setScriptingCode(self, value)

    def addStatistics(self, uuid, parent):
        return _VisusGuiPy.Viewer_addStatistics(self, uuid, parent)

    def addRender(self, *args):
        return _VisusGuiPy.Viewer_addRender(self, *args)

    def addKdRender(self, *args):
        return _VisusGuiPy.Viewer_addKdRender(self, *args)

    def addGroup(self, *args):
        return _VisusGuiPy.Viewer_addGroup(self, *args)

    def addModelView(self, uuid, parent, insert=False):
        return _VisusGuiPy.Viewer_addModelView(self, uuid, parent, insert)

    def addPalette(self, uuid, parent, palette):
        return _VisusGuiPy.Viewer_addPalette(self, uuid, parent, palette)

    def execute(self, ar):
        return _VisusGuiPy.Viewer_execute(self, ar)

    def write(self, ar):
        return _VisusGuiPy.Viewer_write(self, ar)

    def read(self, ar):
        return _VisusGuiPy.Viewer_read(self, ar)

    def addNetRcv(self, port):
        return _VisusGuiPy.Viewer_addNetRcv(self, port)

    def addNetSnd(self, *args):
        return _VisusGuiPy.Viewer_addNetSnd(self, *args)

    def postFlushMessages(self):
        return _VisusGuiPy.Viewer_postFlushMessages(self)
    def __disown__(self):
        self.this.disown()
        _VisusGuiPy.disown_Viewer(self)
        return weakref.proxy(self)

# Register Viewer in _VisusGuiPy:
_VisusGuiPy.Viewer_swigregister(Viewer)


def ToCppQtWidget(obj):
    return _VisusGuiPy.ToCppQtWidget(obj)

def FromCppQtWidget(widget):
    return _VisusGuiPy.FromCppQtWidget(widget)


