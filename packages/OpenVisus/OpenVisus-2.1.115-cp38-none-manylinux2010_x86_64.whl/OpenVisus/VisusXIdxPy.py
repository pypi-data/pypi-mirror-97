# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusXIdxPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusXIdxPy')
    _VisusXIdxPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusXIdxPy', [dirname(__file__)])
        except ImportError:
            import _VisusXIdxPy
            return _VisusXIdxPy
        try:
            _mod = imp.load_module('_VisusXIdxPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusXIdxPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusXIdxPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusXIdxPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusXIdxPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusXIdxPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusXIdxPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusXIdxPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusXIdxPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusXIdxPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusXIdxPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusXIdxPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusXIdxPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusXIdxPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusXIdxPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusXIdxPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusXIdxPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusXIdxPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusXIdxPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusXIdxPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusXIdxPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusXIdxPy.SHARED_PTR_DISOWN
import VisusKernelPy
class XIdxModule(VisusKernelPy.VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XIdxModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusKernelPy.VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XIdxModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusXIdxPy.XIdxModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusXIdxPy.XIdxModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusXIdxPy.XIdxModule_bAttached_get, _VisusXIdxPy.XIdxModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusXIdxPy.XIdxModule_attach)
    else:
        attach = _VisusXIdxPy.XIdxModule_attach
    if _newclass:
        detach = staticmethod(_VisusXIdxPy.XIdxModule_detach)
    else:
        detach = _VisusXIdxPy.XIdxModule_detach

    def __init__(self):
        this = _VisusXIdxPy.new_XIdxModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_XIdxModule
    __del__ = lambda self: None
XIdxModule_swigregister = _VisusXIdxPy.XIdxModule_swigregister
XIdxModule_swigregister(XIdxModule)
cvar = _VisusXIdxPy.cvar

def XIdxModule_attach():
    return _VisusXIdxPy.XIdxModule_attach()
XIdxModule_attach = _VisusXIdxPy.XIdxModule_attach

def XIdxModule_detach():
    return _VisusXIdxPy.XIdxModule_detach()
XIdxModule_detach = _VisusXIdxPy.XIdxModule_detach

class VectorOfAttribute(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfAttribute, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfAttribute, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfAttribute_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfAttribute___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfAttribute___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfAttribute___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfAttribute___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfAttribute___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfAttribute_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfAttribute_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfAttribute_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfAttribute_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfAttribute_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfAttribute_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfAttribute_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfAttribute_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfAttribute_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfAttribute_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfAttribute_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfAttribute_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfAttribute_erase(self, *args)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VectorOfAttribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfAttribute_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfAttribute_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfAttribute_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfAttribute_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfAttribute_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfAttribute_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfAttribute_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfAttribute_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfAttribute
    __del__ = lambda self: None
VectorOfAttribute_swigregister = _VisusXIdxPy.VectorOfAttribute_swigregister
VectorOfAttribute_swigregister(VectorOfAttribute)

class VectorOfDataItem(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfDataItem, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfDataItem, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfDataItem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfDataItem___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfDataItem___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfDataItem___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataItem___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataItem___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfDataItem_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfDataItem_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfDataItem_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfDataItem_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfDataItem_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfDataItem_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfDataItem_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfDataItem_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfDataItem_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfDataItem_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfDataItem_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfDataItem_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfDataItem_erase(self, *args)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VectorOfDataItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfDataItem_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfDataItem_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfDataItem_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfDataItem_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfDataItem_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfDataItem_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfDataItem_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfDataItem_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfDataItem
    __del__ = lambda self: None
VectorOfDataItem_swigregister = _VisusXIdxPy.VectorOfDataItem_swigregister
VectorOfDataItem_swigregister(VectorOfDataItem)

class VectorOfXIdxElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfXIdxElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfXIdxElement, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfXIdxElement_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfXIdxElement___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfXIdxElement___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfXIdxElement___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfXIdxElement___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfXIdxElement___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfXIdxElement_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfXIdxElement_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfXIdxElement_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfXIdxElement_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfXIdxElement_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfXIdxElement_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfXIdxElement_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfXIdxElement_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfXIdxElement_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfXIdxElement_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfXIdxElement_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfXIdxElement_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement_erase(self, *args)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VectorOfXIdxElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfXIdxElement_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfXIdxElement_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfXIdxElement_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfXIdxElement_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfXIdxElement_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfXIdxElement_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfXIdxElement
    __del__ = lambda self: None
VectorOfXIdxElement_swigregister = _VisusXIdxPy.VectorOfXIdxElement_swigregister
VectorOfXIdxElement_swigregister(VectorOfXIdxElement)

class VectorOfGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfGroup, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfGroup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfGroup___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfGroup___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfGroup___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfGroup___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfGroup___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfGroup_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfGroup_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfGroup_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfGroup_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfGroup_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfGroup_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfGroup_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfGroup_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfGroup_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfGroup_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfGroup_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfGroup_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfGroup_erase(self, *args)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VectorOfGroup(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfGroup_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfGroup_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfGroup_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfGroup_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfGroup_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfGroup_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfGroup_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfGroup_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfGroup
    __del__ = lambda self: None
VectorOfGroup_swigregister = _VisusXIdxPy.VectorOfGroup_swigregister
VectorOfGroup_swigregister(VectorOfGroup)

class VectorOfVariable(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfVariable, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfVariable, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfVariable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfVariable___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfVariable___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfVariable___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfVariable___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfVariable___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfVariable_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfVariable_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfVariable_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfVariable_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfVariable_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfVariable_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfVariable_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfVariable_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfVariable_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfVariable_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfVariable_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfVariable_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfVariable_erase(self, *args)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VectorOfVariable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfVariable_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfVariable_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfVariable_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfVariable_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfVariable_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfVariable_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfVariable_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfVariable_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfVariable
    __del__ = lambda self: None
VectorOfVariable_swigregister = _VisusXIdxPy.VectorOfVariable_swigregister
VectorOfVariable_swigregister(VectorOfVariable)

class VectorOfDataSource(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfDataSource, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfDataSource, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfDataSource_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfDataSource___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfDataSource___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfDataSource___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataSource___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataSource___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfDataSource_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfDataSource_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfDataSource_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfDataSource_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfDataSource_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfDataSource_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfDataSource_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfDataSource_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfDataSource_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfDataSource_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfDataSource_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfDataSource_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfDataSource_erase(self, *args)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VectorOfDataSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfDataSource_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfDataSource_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfDataSource_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfDataSource_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfDataSource_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfDataSource_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfDataSource_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfDataSource_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfDataSource
    __del__ = lambda self: None
VectorOfDataSource_swigregister = _VisusXIdxPy.VectorOfDataSource_swigregister
VectorOfDataSource_swigregister(VectorOfDataSource)


def XIdxFormatString(fmt_str):
    return _VisusXIdxPy.XIdxFormatString(fmt_str)
XIdxFormatString = _VisusXIdxPy.XIdxFormatString
class XIdxElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XIdxElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XIdxElement, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.XIdxElement_getXIdxTypeName(self)
    __swig_setmethods__["name"] = _VisusXIdxPy.XIdxElement_name_set
    __swig_getmethods__["name"] = _VisusXIdxPy.XIdxElement_name_get
    if _newclass:
        name = _swig_property(_VisusXIdxPy.XIdxElement_name_get, _VisusXIdxPy.XIdxElement_name_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_XIdxElement(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_XIdxElement
    __del__ = lambda self: None

    def getParent(self):
        return _VisusXIdxPy.XIdxElement_getParent(self)

    def hasChild(self, child):
        return _VisusXIdxPy.XIdxElement_hasChild(self, child)
    if _newclass:
        addEdge = staticmethod(_VisusXIdxPy.XIdxElement_addEdge)
    else:
        addEdge = _VisusXIdxPy.XIdxElement_addEdge
    if _newclass:
        removeEdge = staticmethod(_VisusXIdxPy.XIdxElement_removeEdge)
    else:
        removeEdge = _VisusXIdxPy.XIdxElement_removeEdge

    def getXPathPrefix(self):
        return _VisusXIdxPy.XIdxElement_getXPathPrefix(self)

    def findChildWithName(self, name):
        return _VisusXIdxPy.XIdxElement_findChildWithName(self, name)

    def write(self, ar):
        return _VisusXIdxPy.XIdxElement_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.XIdxElement_read(self, ar)
XIdxElement_swigregister = _VisusXIdxPy.XIdxElement_swigregister
XIdxElement_swigregister(XIdxElement)

def XIdxElement_addEdge(parent, child):
    return _VisusXIdxPy.XIdxElement_addEdge(parent, child)
XIdxElement_addEdge = _VisusXIdxPy.XIdxElement_addEdge

def XIdxElement_removeEdge(parent, child):
    return _VisusXIdxPy.XIdxElement_removeEdge(parent, child)
XIdxElement_removeEdge = _VisusXIdxPy.XIdxElement_removeEdge

class DataSource(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataSource, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataSource, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.DataSource_getXIdxTypeName(self)
    __swig_setmethods__["url"] = _VisusXIdxPy.DataSource_url_set
    __swig_getmethods__["url"] = _VisusXIdxPy.DataSource_url_get
    if _newclass:
        url = _swig_property(_VisusXIdxPy.DataSource_url_get, _VisusXIdxPy.DataSource_url_set)
    __swig_setmethods__["use_cdata"] = _VisusXIdxPy.DataSource_use_cdata_set
    __swig_getmethods__["use_cdata"] = _VisusXIdxPy.DataSource_use_cdata_get
    if _newclass:
        use_cdata = _swig_property(_VisusXIdxPy.DataSource_use_cdata_get, _VisusXIdxPy.DataSource_use_cdata_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_DataSource(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getXPathPrefix(self):
        return _VisusXIdxPy.DataSource_getXPathPrefix(self)

    def write(self, ar):
        return _VisusXIdxPy.DataSource_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.DataSource_read(self, ar)
    __swig_destroy__ = _VisusXIdxPy.delete_DataSource
    __del__ = lambda self: None
DataSource_swigregister = _VisusXIdxPy.DataSource_swigregister
DataSource_swigregister(DataSource)

class Attribute(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Attribute, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Attribute, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Attribute_getXIdxTypeName(self)
    __swig_setmethods__["value"] = _VisusXIdxPy.Attribute_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.Attribute_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.Attribute_value_get, _VisusXIdxPy.Attribute_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_Attribute(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_Attribute
    __del__ = lambda self: None

    def write(self, ar):
        return _VisusXIdxPy.Attribute_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Attribute_read(self, ar)
Attribute_swigregister = _VisusXIdxPy.Attribute_swigregister
Attribute_swigregister(Attribute)

class Endianess(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Endianess, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Endianess, name)
    __repr__ = _swig_repr
    LITTLE_ENDIANESS = _VisusXIdxPy.Endianess_LITTLE_ENDIANESS
    BIG_ENDIANESS = _VisusXIdxPy.Endianess_BIG_ENDIANESS
    NATIVE_ENDIANESS = _VisusXIdxPy.Endianess_NATIVE_ENDIANESS
    END_ENUM = _VisusXIdxPy.Endianess_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.Endianess_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.Endianess_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.Endianess_value_get, _VisusXIdxPy.Endianess_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_Endianess(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.Endianess_fromString)
    else:
        fromString = _VisusXIdxPy.Endianess_fromString

    def toString(self):
        return _VisusXIdxPy.Endianess_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.Endianess___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_Endianess
    __del__ = lambda self: None
Endianess_swigregister = _VisusXIdxPy.Endianess_swigregister
Endianess_swigregister(Endianess)

def Endianess_fromString(value):
    return _VisusXIdxPy.Endianess_fromString(value)
Endianess_fromString = _VisusXIdxPy.Endianess_fromString

class FormatType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FormatType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FormatType, name)
    __repr__ = _swig_repr
    XML_FORMAT = _VisusXIdxPy.FormatType_XML_FORMAT
    HDF_FORMAT = _VisusXIdxPy.FormatType_HDF_FORMAT
    BINARY_FORMAT = _VisusXIdxPy.FormatType_BINARY_FORMAT
    TIFF_FORMAT = _VisusXIdxPy.FormatType_TIFF_FORMAT
    IDX_FORMAT = _VisusXIdxPy.FormatType_IDX_FORMAT
    END_ENUM = _VisusXIdxPy.FormatType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.FormatType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.FormatType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.FormatType_value_get, _VisusXIdxPy.FormatType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_FormatType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.FormatType_fromString)
    else:
        fromString = _VisusXIdxPy.FormatType_fromString

    def toString(self):
        return _VisusXIdxPy.FormatType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.FormatType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_FormatType
    __del__ = lambda self: None
FormatType_swigregister = _VisusXIdxPy.FormatType_swigregister
FormatType_swigregister(FormatType)

def FormatType_fromString(value):
    return _VisusXIdxPy.FormatType_fromString(value)
FormatType_fromString = _VisusXIdxPy.FormatType_fromString

class DataItem(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DataItem, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, DataItem, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dimensions"] = _VisusXIdxPy.DataItem_dimensions_set
    __swig_getmethods__["dimensions"] = _VisusXIdxPy.DataItem_dimensions_get
    if _newclass:
        dimensions = _swig_property(_VisusXIdxPy.DataItem_dimensions_get, _VisusXIdxPy.DataItem_dimensions_set)
    __swig_setmethods__["reference"] = _VisusXIdxPy.DataItem_reference_set
    __swig_getmethods__["reference"] = _VisusXIdxPy.DataItem_reference_get
    if _newclass:
        reference = _swig_property(_VisusXIdxPy.DataItem_reference_get, _VisusXIdxPy.DataItem_reference_set)
    __swig_setmethods__["endian_type"] = _VisusXIdxPy.DataItem_endian_type_set
    __swig_getmethods__["endian_type"] = _VisusXIdxPy.DataItem_endian_type_get
    if _newclass:
        endian_type = _swig_property(_VisusXIdxPy.DataItem_endian_type_get, _VisusXIdxPy.DataItem_endian_type_set)
    __swig_setmethods__["format_type"] = _VisusXIdxPy.DataItem_format_type_set
    __swig_getmethods__["format_type"] = _VisusXIdxPy.DataItem_format_type_get
    if _newclass:
        format_type = _swig_property(_VisusXIdxPy.DataItem_format_type_get, _VisusXIdxPy.DataItem_format_type_set)
    __swig_setmethods__["dtype"] = _VisusXIdxPy.DataItem_dtype_set
    __swig_getmethods__["dtype"] = _VisusXIdxPy.DataItem_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusXIdxPy.DataItem_dtype_get, _VisusXIdxPy.DataItem_dtype_set)
    __swig_setmethods__["text"] = _VisusXIdxPy.DataItem_text_set
    __swig_getmethods__["text"] = _VisusXIdxPy.DataItem_text_get
    if _newclass:
        text = _swig_property(_VisusXIdxPy.DataItem_text_get, _VisusXIdxPy.DataItem_text_set)
    __swig_setmethods__["values"] = _VisusXIdxPy.DataItem_values_set
    __swig_getmethods__["values"] = _VisusXIdxPy.DataItem_values_get
    if _newclass:
        values = _swig_property(_VisusXIdxPy.DataItem_values_get, _VisusXIdxPy.DataItem_values_set)
    __swig_setmethods__["attributes"] = _VisusXIdxPy.DataItem_attributes_set
    __swig_getmethods__["attributes"] = _VisusXIdxPy.DataItem_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusXIdxPy.DataItem_attributes_get, _VisusXIdxPy.DataItem_attributes_set)
    __swig_setmethods__["data_source"] = _VisusXIdxPy.DataItem_data_source_set
    __swig_getmethods__["data_source"] = _VisusXIdxPy.DataItem_data_source_get
    if _newclass:
        data_source = _swig_property(_VisusXIdxPy.DataItem_data_source_get, _VisusXIdxPy.DataItem_data_source_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_DataItem(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_DataItem
    __del__ = lambda self: None

    def setDataSource(self, disown):
        return _VisusXIdxPy.DataItem_setDataSource(self, disown)

    def addAttribute(self, disown):
        return _VisusXIdxPy.DataItem_addAttribute(self, disown)

    def getVolume(self):
        return _VisusXIdxPy.DataItem_getVolume(self)

    def setValues(self, values, stride=1):
        return _VisusXIdxPy.DataItem_setValues(self, values, stride)

    def addValue(self, val, stride=1):
        return _VisusXIdxPy.DataItem_addValue(self, val, stride)

    def getXPathPrefix(self):
        return _VisusXIdxPy.DataItem_getXPathPrefix(self)

    def findDataSource(self):
        return _VisusXIdxPy.DataItem_findDataSource(self)

    def write(self, ar):
        return _VisusXIdxPy.DataItem_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.DataItem_read(self, ar)
DataItem_swigregister = _VisusXIdxPy.DataItem_swigregister
DataItem_swigregister(DataItem)

class CenterType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CenterType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CenterType, name)
    __repr__ = _swig_repr
    NODE_CENTER = _VisusXIdxPy.CenterType_NODE_CENTER
    CELL_CENTER = _VisusXIdxPy.CenterType_CELL_CENTER
    GRID_CENTER = _VisusXIdxPy.CenterType_GRID_CENTER
    FACE_CENTER = _VisusXIdxPy.CenterType_FACE_CENTER
    EDGE_CENTER = _VisusXIdxPy.CenterType_EDGE_CENTER
    END_ENUM = _VisusXIdxPy.CenterType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.CenterType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.CenterType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.CenterType_value_get, _VisusXIdxPy.CenterType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_CenterType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.CenterType_fromString)
    else:
        fromString = _VisusXIdxPy.CenterType_fromString

    def toString(self):
        return _VisusXIdxPy.CenterType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.CenterType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_CenterType
    __del__ = lambda self: None
CenterType_swigregister = _VisusXIdxPy.CenterType_swigregister
CenterType_swigregister(CenterType)

def CenterType_fromString(value):
    return _VisusXIdxPy.CenterType_fromString(value)
CenterType_fromString = _VisusXIdxPy.CenterType_fromString

class Variable(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Variable, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Variable, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Variable_getXIdxTypeName(self)
    __swig_setmethods__["center_type"] = _VisusXIdxPy.Variable_center_type_set
    __swig_getmethods__["center_type"] = _VisusXIdxPy.Variable_center_type_get
    if _newclass:
        center_type = _swig_property(_VisusXIdxPy.Variable_center_type_get, _VisusXIdxPy.Variable_center_type_set)
    __swig_setmethods__["attributes"] = _VisusXIdxPy.Variable_attributes_set
    __swig_getmethods__["attributes"] = _VisusXIdxPy.Variable_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusXIdxPy.Variable_attributes_get, _VisusXIdxPy.Variable_attributes_set)
    __swig_setmethods__["data_items"] = _VisusXIdxPy.Variable_data_items_set
    __swig_getmethods__["data_items"] = _VisusXIdxPy.Variable_data_items_get
    if _newclass:
        data_items = _swig_property(_VisusXIdxPy.Variable_data_items_get, _VisusXIdxPy.Variable_data_items_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_Variable(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_Variable
    __del__ = lambda self: None

    def setValues(self, values, stride=1):
        return _VisusXIdxPy.Variable_setValues(self, values, stride)

    def getValues(self, axis=0):
        return _VisusXIdxPy.Variable_getValues(self, axis)

    def getVolume(self):
        return _VisusXIdxPy.Variable_getVolume(self)

    def addAttribute(self, *args):
        return _VisusXIdxPy.Variable_addAttribute(self, *args)

    def addDataItem(self, disown):
        return _VisusXIdxPy.Variable_addDataItem(self, disown)

    def addValue(self, v):
        return _VisusXIdxPy.Variable_addValue(self, v)

    def write(self, ar):
        return _VisusXIdxPy.Variable_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Variable_read(self, ar)
Variable_swigregister = _VisusXIdxPy.Variable_swigregister
Variable_swigregister(Variable)

class DomainType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DomainType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DomainType, name)
    __repr__ = _swig_repr
    HYPER_SLAB_DOMAIN_TYPE = _VisusXIdxPy.DomainType_HYPER_SLAB_DOMAIN_TYPE
    LIST_DOMAIN_TYPE = _VisusXIdxPy.DomainType_LIST_DOMAIN_TYPE
    MULTIAXIS_DOMAIN_TYPE = _VisusXIdxPy.DomainType_MULTIAXIS_DOMAIN_TYPE
    SPATIAL_DOMAIN_TYPE = _VisusXIdxPy.DomainType_SPATIAL_DOMAIN_TYPE
    RANGE_DOMAIN_TYPE = _VisusXIdxPy.DomainType_RANGE_DOMAIN_TYPE
    END_ENUM = _VisusXIdxPy.DomainType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.DomainType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.DomainType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.DomainType_value_get, _VisusXIdxPy.DomainType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_DomainType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.DomainType_fromString)
    else:
        fromString = _VisusXIdxPy.DomainType_fromString

    def toString(self):
        return _VisusXIdxPy.DomainType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.DomainType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_DomainType
    __del__ = lambda self: None
DomainType_swigregister = _VisusXIdxPy.DomainType_swigregister
DomainType_swigregister(DomainType)

def DomainType_fromString(value):
    return _VisusXIdxPy.DomainType_fromString(value)
DomainType_fromString = _VisusXIdxPy.DomainType_fromString

class Domain(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Domain, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Domain, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Domain_getXIdxTypeName(self)
    __swig_setmethods__["type"] = _VisusXIdxPy.Domain_type_set
    __swig_getmethods__["type"] = _VisusXIdxPy.Domain_type_get
    if _newclass:
        type = _swig_property(_VisusXIdxPy.Domain_type_get, _VisusXIdxPy.Domain_type_set)
    __swig_setmethods__["attributes"] = _VisusXIdxPy.Domain_attributes_set
    __swig_getmethods__["attributes"] = _VisusXIdxPy.Domain_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusXIdxPy.Domain_attributes_get, _VisusXIdxPy.Domain_attributes_set)
    __swig_setmethods__["data_items"] = _VisusXIdxPy.Domain_data_items_set
    __swig_getmethods__["data_items"] = _VisusXIdxPy.Domain_data_items_get
    if _newclass:
        data_items = _swig_property(_VisusXIdxPy.Domain_data_items_get, _VisusXIdxPy.Domain_data_items_set)
    __swig_destroy__ = _VisusXIdxPy.delete_Domain
    __del__ = lambda self: None

    def ensureDataItem(self):
        return _VisusXIdxPy.Domain_ensureDataItem(self)
    if _newclass:
        createDomain = staticmethod(_VisusXIdxPy.Domain_createDomain)
    else:
        createDomain = _VisusXIdxPy.Domain_createDomain

    def addDataItem(self, disown):
        return _VisusXIdxPy.Domain_addDataItem(self, disown)

    def addAttribute(self, *args):
        return _VisusXIdxPy.Domain_addAttribute(self, *args)

    def getVolume(self):
        return _VisusXIdxPy.Domain_getVolume(self)

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.Domain_getLinearizedIndexSpace(self)

    def write(self, ar):
        return _VisusXIdxPy.Domain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Domain_read(self, ar)
Domain_swigregister = _VisusXIdxPy.Domain_swigregister
Domain_swigregister(Domain)

def Domain_createDomain(type):
    return _VisusXIdxPy.Domain_createDomain(type)
Domain_createDomain = _VisusXIdxPy.Domain_createDomain

class GroupType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GroupType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GroupType, name)
    __repr__ = _swig_repr
    SPATIAL_GROUP_TYPE = _VisusXIdxPy.GroupType_SPATIAL_GROUP_TYPE
    TEMPORAL_GROUP_TYPE = _VisusXIdxPy.GroupType_TEMPORAL_GROUP_TYPE
    END_ENUM = _VisusXIdxPy.GroupType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.GroupType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.GroupType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.GroupType_value_get, _VisusXIdxPy.GroupType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_GroupType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.GroupType_fromString)
    else:
        fromString = _VisusXIdxPy.GroupType_fromString

    def toString(self):
        return _VisusXIdxPy.GroupType_toString(self)
    __swig_destroy__ = _VisusXIdxPy.delete_GroupType
    __del__ = lambda self: None
GroupType_swigregister = _VisusXIdxPy.GroupType_swigregister
GroupType_swigregister(GroupType)

def GroupType_fromString(value):
    return _VisusXIdxPy.GroupType_fromString(value)
GroupType_fromString = _VisusXIdxPy.GroupType_fromString

class VariabilityType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VariabilityType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VariabilityType, name)
    __repr__ = _swig_repr
    STATIC_VARIABILITY_TYPE = _VisusXIdxPy.VariabilityType_STATIC_VARIABILITY_TYPE
    VARIABLE_VARIABILITY_TYPE = _VisusXIdxPy.VariabilityType_VARIABLE_VARIABILITY_TYPE
    END_ENUM = _VisusXIdxPy.VariabilityType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.VariabilityType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.VariabilityType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.VariabilityType_value_get, _VisusXIdxPy.VariabilityType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_VariabilityType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.VariabilityType_fromString)
    else:
        fromString = _VisusXIdxPy.VariabilityType_fromString

    def toString(self):
        return _VisusXIdxPy.VariabilityType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.VariabilityType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_VariabilityType
    __del__ = lambda self: None
VariabilityType_swigregister = _VisusXIdxPy.VariabilityType_swigregister
VariabilityType_swigregister(VariabilityType)

def VariabilityType_fromString(value):
    return _VisusXIdxPy.VariabilityType_fromString(value)
VariabilityType_fromString = _VisusXIdxPy.VariabilityType_fromString

class Group(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Group_getXIdxTypeName(self)
    __swig_setmethods__["domain_index"] = _VisusXIdxPy.Group_domain_index_set
    __swig_getmethods__["domain_index"] = _VisusXIdxPy.Group_domain_index_get
    if _newclass:
        domain_index = _swig_property(_VisusXIdxPy.Group_domain_index_get, _VisusXIdxPy.Group_domain_index_set)
    __swig_setmethods__["file_pattern"] = _VisusXIdxPy.Group_file_pattern_set
    __swig_getmethods__["file_pattern"] = _VisusXIdxPy.Group_file_pattern_get
    if _newclass:
        file_pattern = _swig_property(_VisusXIdxPy.Group_file_pattern_get, _VisusXIdxPy.Group_file_pattern_set)
    __swig_setmethods__["group_type"] = _VisusXIdxPy.Group_group_type_set
    __swig_getmethods__["group_type"] = _VisusXIdxPy.Group_group_type_get
    if _newclass:
        group_type = _swig_property(_VisusXIdxPy.Group_group_type_get, _VisusXIdxPy.Group_group_type_set)
    __swig_setmethods__["variability_type"] = _VisusXIdxPy.Group_variability_type_set
    __swig_getmethods__["variability_type"] = _VisusXIdxPy.Group_variability_type_get
    if _newclass:
        variability_type = _swig_property(_VisusXIdxPy.Group_variability_type_get, _VisusXIdxPy.Group_variability_type_set)
    __swig_setmethods__["domain"] = _VisusXIdxPy.Group_domain_set
    __swig_getmethods__["domain"] = _VisusXIdxPy.Group_domain_get
    if _newclass:
        domain = _swig_property(_VisusXIdxPy.Group_domain_get, _VisusXIdxPy.Group_domain_set)
    __swig_setmethods__["variables"] = _VisusXIdxPy.Group_variables_set
    __swig_getmethods__["variables"] = _VisusXIdxPy.Group_variables_get
    if _newclass:
        variables = _swig_property(_VisusXIdxPy.Group_variables_get, _VisusXIdxPy.Group_variables_set)
    __swig_setmethods__["data_sources"] = _VisusXIdxPy.Group_data_sources_set
    __swig_getmethods__["data_sources"] = _VisusXIdxPy.Group_data_sources_get
    if _newclass:
        data_sources = _swig_property(_VisusXIdxPy.Group_data_sources_get, _VisusXIdxPy.Group_data_sources_set)
    __swig_setmethods__["attributes"] = _VisusXIdxPy.Group_attributes_set
    __swig_getmethods__["attributes"] = _VisusXIdxPy.Group_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusXIdxPy.Group_attributes_get, _VisusXIdxPy.Group_attributes_set)
    __swig_setmethods__["groups"] = _VisusXIdxPy.Group_groups_set
    __swig_getmethods__["groups"] = _VisusXIdxPy.Group_groups_get
    if _newclass:
        groups = _swig_property(_VisusXIdxPy.Group_groups_get, _VisusXIdxPy.Group_groups_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_Group(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_Group
    __del__ = lambda self: None

    def setDomain(self, disown):
        return _VisusXIdxPy.Group_setDomain(self, disown)

    def getDomain(self):
        return _VisusXIdxPy.Group_getDomain(self)

    def getGroup(self, index):
        return _VisusXIdxPy.Group_getGroup(self, index)

    def addVariable(self, *args):
        return _VisusXIdxPy.Group_addVariable(self, *args)

    def addAttribute(self, disown):
        return _VisusXIdxPy.Group_addAttribute(self, disown)

    def addDataSource(self, disown):
        return _VisusXIdxPy.Group_addDataSource(self, disown)

    def addGroup(self, disown):
        return _VisusXIdxPy.Group_addGroup(self, disown)

    def getXPathPrefix(self):
        return _VisusXIdxPy.Group_getXPathPrefix(self)

    def write(self, ar):
        return _VisusXIdxPy.Group_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Group_read(self, ar)
Group_swigregister = _VisusXIdxPy.Group_swigregister
Group_swigregister(Group)

class XIdxFile(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, XIdxFile, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, XIdxFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["groups"] = _VisusXIdxPy.XIdxFile_groups_set
    __swig_getmethods__["groups"] = _VisusXIdxPy.XIdxFile_groups_get
    if _newclass:
        groups = _swig_property(_VisusXIdxPy.XIdxFile_groups_get, _VisusXIdxPy.XIdxFile_groups_set)
    __swig_setmethods__["file_pattern"] = _VisusXIdxPy.XIdxFile_file_pattern_set
    __swig_getmethods__["file_pattern"] = _VisusXIdxPy.XIdxFile_file_pattern_get
    if _newclass:
        file_pattern = _swig_property(_VisusXIdxPy.XIdxFile_file_pattern_get, _VisusXIdxPy.XIdxFile_file_pattern_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_XIdxFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_XIdxFile
    __del__ = lambda self: None

    def addGroup(self, disown):
        return _VisusXIdxPy.XIdxFile_addGroup(self, disown)

    def getXPathPrefix(self):
        return _VisusXIdxPy.XIdxFile_getXPathPrefix(self)

    def getGroup(self, type):
        return _VisusXIdxPy.XIdxFile_getGroup(self, type)
    if _newclass:
        load = staticmethod(_VisusXIdxPy.XIdxFile_load)
    else:
        load = _VisusXIdxPy.XIdxFile_load

    def save(self, filename):
        return _VisusXIdxPy.XIdxFile_save(self, filename)

    def write(self, ar):
        return _VisusXIdxPy.XIdxFile_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.XIdxFile_read(self, ar)
XIdxFile_swigregister = _VisusXIdxPy.XIdxFile_swigregister
XIdxFile_swigregister(XIdxFile)

def XIdxFile_load(filename):
    return _VisusXIdxPy.XIdxFile_load(filename)
XIdxFile_load = _VisusXIdxPy.XIdxFile_load

class ListDomain(Domain):
    __swig_setmethods__ = {}
    for _s in [Domain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ListDomain, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.ListDomain_getXIdxTypeName(self)
    __swig_setmethods__["stride"] = _VisusXIdxPy.ListDomain_stride_set
    __swig_getmethods__["stride"] = _VisusXIdxPy.ListDomain_stride_get
    if _newclass:
        stride = _swig_property(_VisusXIdxPy.ListDomain_stride_get, _VisusXIdxPy.ListDomain_stride_set)
    __swig_setmethods__["values"] = _VisusXIdxPy.ListDomain_values_set
    __swig_getmethods__["values"] = _VisusXIdxPy.ListDomain_values_get
    if _newclass:
        values = _swig_property(_VisusXIdxPy.ListDomain_values_get, _VisusXIdxPy.ListDomain_values_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_ListDomain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_ListDomain
    __del__ = lambda self: None

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.ListDomain_getLinearizedIndexSpace(self)

    def addDomainItems(self, vals):
        return _VisusXIdxPy.ListDomain_addDomainItems(self, vals)

    def addDomainItem(self, phy):
        return _VisusXIdxPy.ListDomain_addDomainItem(self, phy)

    def write(self, ar):
        return _VisusXIdxPy.ListDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.ListDomain_read(self, ar)
ListDomain_swigregister = _VisusXIdxPy.ListDomain_swigregister
ListDomain_swigregister(ListDomain)

class HyperSlabDomain(ListDomain):
    __swig_setmethods__ = {}
    for _s in [ListDomain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HyperSlabDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [ListDomain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, HyperSlabDomain, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.HyperSlabDomain_getXIdxTypeName(self)
    __swig_setmethods__["start"] = _VisusXIdxPy.HyperSlabDomain_start_set
    __swig_getmethods__["start"] = _VisusXIdxPy.HyperSlabDomain_start_get
    if _newclass:
        start = _swig_property(_VisusXIdxPy.HyperSlabDomain_start_get, _VisusXIdxPy.HyperSlabDomain_start_set)
    __swig_setmethods__["step"] = _VisusXIdxPy.HyperSlabDomain_step_set
    __swig_getmethods__["step"] = _VisusXIdxPy.HyperSlabDomain_step_get
    if _newclass:
        step = _swig_property(_VisusXIdxPy.HyperSlabDomain_step_get, _VisusXIdxPy.HyperSlabDomain_step_set)
    __swig_setmethods__["count"] = _VisusXIdxPy.HyperSlabDomain_count_set
    __swig_getmethods__["count"] = _VisusXIdxPy.HyperSlabDomain_count_get
    if _newclass:
        count = _swig_property(_VisusXIdxPy.HyperSlabDomain_count_get, _VisusXIdxPy.HyperSlabDomain_count_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_HyperSlabDomain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def setDomain(self, start_, step_, count_):
        return _VisusXIdxPy.HyperSlabDomain_setDomain(self, start_, step_, count_)

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.HyperSlabDomain_getLinearizedIndexSpace(self)

    def write(self, ar):
        return _VisusXIdxPy.HyperSlabDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.HyperSlabDomain_read(self, ar)
    __swig_destroy__ = _VisusXIdxPy.delete_HyperSlabDomain
    __del__ = lambda self: None
HyperSlabDomain_swigregister = _VisusXIdxPy.HyperSlabDomain_swigregister
HyperSlabDomain_swigregister(HyperSlabDomain)

class MultiAxisDomain(Domain):
    __swig_setmethods__ = {}
    for _s in [Domain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiAxisDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiAxisDomain, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.MultiAxisDomain_getXIdxTypeName(self)
    __swig_setmethods__["axis"] = _VisusXIdxPy.MultiAxisDomain_axis_set
    __swig_getmethods__["axis"] = _VisusXIdxPy.MultiAxisDomain_axis_get
    if _newclass:
        axis = _swig_property(_VisusXIdxPy.MultiAxisDomain_axis_get, _VisusXIdxPy.MultiAxisDomain_axis_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_MultiAxisDomain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_MultiAxisDomain
    __del__ = lambda self: None

    def addAxis(self, disown):
        return _VisusXIdxPy.MultiAxisDomain_addAxis(self, disown)

    def getLinearizedIndexSpace(self, *args):
        return _VisusXIdxPy.MultiAxisDomain_getLinearizedIndexSpace(self, *args)

    def write(self, ar):
        return _VisusXIdxPy.MultiAxisDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.MultiAxisDomain_read(self, ar)
MultiAxisDomain_swigregister = _VisusXIdxPy.MultiAxisDomain_swigregister
MultiAxisDomain_swigregister(MultiAxisDomain)

class TopologyType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TopologyType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TopologyType, name)
    __repr__ = _swig_repr
    NO_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_NO_TOPOLOGY_TYPE
    RECT_2D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_RECT_2D_MESH_TOPOLOGY_TYPE
    CORECT_2D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_CORECT_2D_MESH_TOPOLOGY_TYPE
    RECT_3D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_RECT_3D_MESH_TOPOLOGY_TYPE
    CORECT_3D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_CORECT_3D_MESH_TOPOLOGY_TYPE
    DIM_1D_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_DIM_1D_TOPOLOGY_TYPE
    END_ENUM = _VisusXIdxPy.TopologyType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.TopologyType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.TopologyType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.TopologyType_value_get, _VisusXIdxPy.TopologyType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_TopologyType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.TopologyType_fromString)
    else:
        fromString = _VisusXIdxPy.TopologyType_fromString

    def toString(self):
        return _VisusXIdxPy.TopologyType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.TopologyType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_TopologyType
    __del__ = lambda self: None
TopologyType_swigregister = _VisusXIdxPy.TopologyType_swigregister
TopologyType_swigregister(TopologyType)

def TopologyType_fromString(value):
    return _VisusXIdxPy.TopologyType_fromString(value)
TopologyType_fromString = _VisusXIdxPy.TopologyType_fromString

class Topology(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Topology, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Topology, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Topology_getXIdxTypeName(self)
    __swig_setmethods__["type"] = _VisusXIdxPy.Topology_type_set
    __swig_getmethods__["type"] = _VisusXIdxPy.Topology_type_get
    if _newclass:
        type = _swig_property(_VisusXIdxPy.Topology_type_get, _VisusXIdxPy.Topology_type_set)
    __swig_setmethods__["dimensions"] = _VisusXIdxPy.Topology_dimensions_set
    __swig_getmethods__["dimensions"] = _VisusXIdxPy.Topology_dimensions_get
    if _newclass:
        dimensions = _swig_property(_VisusXIdxPy.Topology_dimensions_get, _VisusXIdxPy.Topology_dimensions_set)
    __swig_setmethods__["attributes"] = _VisusXIdxPy.Topology_attributes_set
    __swig_getmethods__["attributes"] = _VisusXIdxPy.Topology_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusXIdxPy.Topology_attributes_get, _VisusXIdxPy.Topology_attributes_set)
    __swig_setmethods__["data_items"] = _VisusXIdxPy.Topology_data_items_set
    __swig_getmethods__["data_items"] = _VisusXIdxPy.Topology_data_items_get
    if _newclass:
        data_items = _swig_property(_VisusXIdxPy.Topology_data_items_get, _VisusXIdxPy.Topology_data_items_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_Topology(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_Topology
    __del__ = lambda self: None

    def addAttribute(self, disown):
        return _VisusXIdxPy.Topology_addAttribute(self, disown)

    def addDataItem(self, disown):
        return _VisusXIdxPy.Topology_addDataItem(self, disown)

    def write(self, ar):
        return _VisusXIdxPy.Topology_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Topology_read(self, ar)
Topology_swigregister = _VisusXIdxPy.Topology_swigregister
Topology_swigregister(Topology)

class GeometryType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryType, name)
    __repr__ = _swig_repr
    XYZ_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_XYZ_GEOMETRY_TYPE
    XY_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_XY_GEOMETRY_TYPE
    X_Y_Z_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_X_Y_Z_GEOMETRY_TYPE
    VXVYVZ_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_VXVYVZ_GEOMETRY_TYPE
    ORIGIN_DXDYDZ_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_ORIGIN_DXDYDZ_GEOMETRY_TYPE
    ORIGIN_DXDY_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_ORIGIN_DXDY_GEOMETRY_TYPE
    RECT_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_RECT_GEOMETRY_TYPE
    END_ENUM = _VisusXIdxPy.GeometryType_END_ENUM
    __swig_setmethods__["value"] = _VisusXIdxPy.GeometryType_value_set
    __swig_getmethods__["value"] = _VisusXIdxPy.GeometryType_value_get
    if _newclass:
        value = _swig_property(_VisusXIdxPy.GeometryType_value_get, _VisusXIdxPy.GeometryType_value_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_GeometryType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusXIdxPy.GeometryType_fromString)
    else:
        fromString = _VisusXIdxPy.GeometryType_fromString

    def toString(self):
        return _VisusXIdxPy.GeometryType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.GeometryType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_GeometryType
    __del__ = lambda self: None
GeometryType_swigregister = _VisusXIdxPy.GeometryType_swigregister
GeometryType_swigregister(GeometryType)

def GeometryType_fromString(value):
    return _VisusXIdxPy.GeometryType_fromString(value)
GeometryType_fromString = _VisusXIdxPy.GeometryType_fromString

class Geometry(XIdxElement):
    __swig_setmethods__ = {}
    for _s in [XIdxElement]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Geometry, name, value)
    __swig_getmethods__ = {}
    for _s in [XIdxElement]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Geometry, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Geometry_getXIdxTypeName(self)
    __swig_setmethods__["type"] = _VisusXIdxPy.Geometry_type_set
    __swig_getmethods__["type"] = _VisusXIdxPy.Geometry_type_get
    if _newclass:
        type = _swig_property(_VisusXIdxPy.Geometry_type_get, _VisusXIdxPy.Geometry_type_set)
    __swig_setmethods__["data_items"] = _VisusXIdxPy.Geometry_data_items_set
    __swig_getmethods__["data_items"] = _VisusXIdxPy.Geometry_data_items_get
    if _newclass:
        data_items = _swig_property(_VisusXIdxPy.Geometry_data_items_get, _VisusXIdxPy.Geometry_data_items_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_Geometry(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_Geometry
    __del__ = lambda self: None

    def addDataItem(self, disown):
        return _VisusXIdxPy.Geometry_addDataItem(self, disown)

    def getVolume(self):
        return _VisusXIdxPy.Geometry_getVolume(self)

    def write(self, ar):
        return _VisusXIdxPy.Geometry_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Geometry_read(self, ar)
Geometry_swigregister = _VisusXIdxPy.Geometry_swigregister
Geometry_swigregister(Geometry)

class SpatialDomain(Domain):
    __swig_setmethods__ = {}
    for _s in [Domain]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SpatialDomain, name, value)
    __swig_getmethods__ = {}
    for _s in [Domain]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, SpatialDomain, name)
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.SpatialDomain_getXIdxTypeName(self)
    __swig_setmethods__["topology"] = _VisusXIdxPy.SpatialDomain_topology_set
    __swig_getmethods__["topology"] = _VisusXIdxPy.SpatialDomain_topology_get
    if _newclass:
        topology = _swig_property(_VisusXIdxPy.SpatialDomain_topology_get, _VisusXIdxPy.SpatialDomain_topology_set)
    __swig_setmethods__["geometry"] = _VisusXIdxPy.SpatialDomain_geometry_set
    __swig_getmethods__["geometry"] = _VisusXIdxPy.SpatialDomain_geometry_get
    if _newclass:
        geometry = _swig_property(_VisusXIdxPy.SpatialDomain_geometry_get, _VisusXIdxPy.SpatialDomain_geometry_set)

    def __init__(self, *args):
        this = _VisusXIdxPy.new_SpatialDomain(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusXIdxPy.delete_SpatialDomain
    __del__ = lambda self: None

    def setTopology(self, disown):
        return _VisusXIdxPy.SpatialDomain_setTopology(self, disown)

    def setGeometry(self, disown):
        return _VisusXIdxPy.SpatialDomain_setGeometry(self, disown)

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.SpatialDomain_getLinearizedIndexSpace(self)

    def getVolume(self):
        return _VisusXIdxPy.SpatialDomain_getVolume(self)

    def write(self, ar):
        return _VisusXIdxPy.SpatialDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.SpatialDomain_read(self, ar)
SpatialDomain_swigregister = _VisusXIdxPy.SpatialDomain_swigregister
SpatialDomain_swigregister(SpatialDomain)

# This file is compatible with both classic and new-style classes.


