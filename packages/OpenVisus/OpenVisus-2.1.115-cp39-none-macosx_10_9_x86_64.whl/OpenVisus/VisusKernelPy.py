# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusKernelPy
else:
    import _VisusKernelPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_SwigPyIterator

    def value(self):
        return _VisusKernelPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusKernelPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusKernelPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusKernelPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusKernelPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusKernelPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusKernelPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusKernelPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusKernelPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusKernelPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusKernelPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusKernelPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusKernelPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusKernelPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusKernelPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusKernelPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusKernelPy:
_VisusKernelPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusKernelPy.SHARED_PTR_DISOWN
class StdVectorInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorInt___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorInt_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorInt_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorInt_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorInt_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorInt_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorInt_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorInt_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorInt_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorInt_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorInt_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorInt_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.StdVectorInt_swiginit(self, _VisusKernelPy.new_StdVectorInt(*args))

    def push_back(self, x):
        return _VisusKernelPy.StdVectorInt_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorInt_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorInt_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorInt_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorInt_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorInt

# Register StdVectorInt in _VisusKernelPy:
_VisusKernelPy.StdVectorInt_swigregister(StdVectorInt)

class StdVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorDouble___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorDouble_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorDouble_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorDouble_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorDouble_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorDouble_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorDouble_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorDouble_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorDouble_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorDouble_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorDouble_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.StdVectorDouble_swiginit(self, _VisusKernelPy.new_StdVectorDouble(*args))

    def push_back(self, x):
        return _VisusKernelPy.StdVectorDouble_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorDouble_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorDouble_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorDouble_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorDouble

# Register StdVectorDouble in _VisusKernelPy:
_VisusKernelPy.StdVectorDouble_swigregister(StdVectorDouble)

class StdVectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorFloat___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorFloat_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorFloat_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorFloat_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorFloat_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorFloat_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorFloat_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorFloat_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorFloat_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorFloat_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorFloat_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorFloat_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.StdVectorFloat_swiginit(self, _VisusKernelPy.new_StdVectorFloat(*args))

    def push_back(self, x):
        return _VisusKernelPy.StdVectorFloat_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorFloat_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorFloat_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorFloat_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorFloat

# Register StdVectorFloat in _VisusKernelPy:
_VisusKernelPy.StdVectorFloat_swigregister(StdVectorFloat)

class StdVectorStdString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorStdString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorStdString___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorStdString___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorStdString___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorStdString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorStdString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorStdString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorStdString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorStdString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorStdString___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorStdString_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorStdString_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorStdString_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorStdString_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorStdString_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorStdString_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorStdString_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorStdString_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorStdString_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorStdString_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorStdString_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorStdString_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorStdString_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.StdVectorStdString_swiginit(self, _VisusKernelPy.new_StdVectorStdString(*args))

    def push_back(self, x):
        return _VisusKernelPy.StdVectorStdString_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorStdString_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorStdString_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorStdString_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorStdString_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorStdString_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorStdString_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorStdString_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorStdString

# Register StdVectorStdString in _VisusKernelPy:
_VisusKernelPy.StdVectorStdString_swigregister(StdVectorStdString)

class StdPairDoubleDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.StdPairDoubleDouble_swiginit(self, _VisusKernelPy.new_StdPairDoubleDouble(*args))
    first = property(_VisusKernelPy.StdPairDoubleDouble_first_get, _VisusKernelPy.StdPairDoubleDouble_first_set)
    second = property(_VisusKernelPy.StdPairDoubleDouble_second_get, _VisusKernelPy.StdPairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusKernelPy.delete_StdPairDoubleDouble

# Register StdPairDoubleDouble in _VisusKernelPy:
_VisusKernelPy.StdPairDoubleDouble_swigregister(StdPairDoubleDouble)

class StdPairIntDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.StdPairIntDouble_swiginit(self, _VisusKernelPy.new_StdPairIntDouble(*args))
    first = property(_VisusKernelPy.StdPairIntDouble_first_get, _VisusKernelPy.StdPairIntDouble_first_set)
    second = property(_VisusKernelPy.StdPairIntDouble_second_get, _VisusKernelPy.StdPairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusKernelPy.delete_StdPairIntDouble

# Register StdPairIntDouble in _VisusKernelPy:
_VisusKernelPy.StdPairIntDouble_swigregister(StdPairIntDouble)

class StdMapStdStringStdString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdMapStdStringStdString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdMapStdStringStdString___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdMapStdStringStdString___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdMapStdStringStdString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusKernelPy.StdMapStdStringStdString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusKernelPy.StdMapStdStringStdString___delitem__(self, key)

    def has_key(self, key):
        return _VisusKernelPy.StdMapStdStringStdString_has_key(self, key)

    def keys(self):
        return _VisusKernelPy.StdMapStdStringStdString_keys(self)

    def values(self):
        return _VisusKernelPy.StdMapStdStringStdString_values(self)

    def items(self):
        return _VisusKernelPy.StdMapStdStringStdString_items(self)

    def __contains__(self, key):
        return _VisusKernelPy.StdMapStdStringStdString___contains__(self, key)

    def key_iterator(self):
        return _VisusKernelPy.StdMapStdStringStdString_key_iterator(self)

    def value_iterator(self):
        return _VisusKernelPy.StdMapStdStringStdString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdMapStdStringStdString___setitem__(self, *args)

    def asdict(self):
        return _VisusKernelPy.StdMapStdStringStdString_asdict(self)

    def __init__(self, *args):
        _VisusKernelPy.StdMapStdStringStdString_swiginit(self, _VisusKernelPy.new_StdMapStdStringStdString(*args))

    def empty(self):
        return _VisusKernelPy.StdMapStdStringStdString_empty(self)

    def size(self):
        return _VisusKernelPy.StdMapStdStringStdString_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdMapStdStringStdString_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdMapStdStringStdString_begin(self)

    def end(self):
        return _VisusKernelPy.StdMapStdStringStdString_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdMapStdStringStdString_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdMapStdStringStdString_rend(self)

    def clear(self):
        return _VisusKernelPy.StdMapStdStringStdString_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdMapStdStringStdString_get_allocator(self)

    def count(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_count(self, x)

    def erase(self, *args):
        return _VisusKernelPy.StdMapStdStringStdString_erase(self, *args)

    def find(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_find(self, x)

    def lower_bound(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_upper_bound(self, x)
    __swig_destroy__ = _VisusKernelPy.delete_StdMapStdStringStdString

# Register StdMapStdStringStdString in _VisusKernelPy:
_VisusKernelPy.StdMapStdStringStdString_swigregister(StdMapStdStringStdString)

class StdVectorLongLong(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorLongLong___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorLongLong___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorLongLong___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorLongLong___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorLongLong___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorLongLong_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorLongLong_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorLongLong_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorLongLong_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorLongLong_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorLongLong_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorLongLong_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorLongLong_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorLongLong_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorLongLong_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorLongLong_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorLongLong_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorLongLong_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.StdVectorLongLong_swiginit(self, _VisusKernelPy.new_StdVectorLongLong(*args))

    def push_back(self, x):
        return _VisusKernelPy.StdVectorLongLong_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorLongLong_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorLongLong_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorLongLong_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorLongLong_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorLongLong_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorLongLong_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorLongLong_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorLongLong

# Register StdVectorLongLong in _VisusKernelPy:
_VisusKernelPy.StdVectorLongLong_swigregister(StdVectorLongLong)


def cstring(*args):
    return _VisusKernelPy.cstring(*args)

def concatenate(*args):
    return _VisusKernelPy.concatenate(*args)

def cbool(s):
    return _VisusKernelPy.cbool(s)

def cint(s):
    return _VisusKernelPy.cint(s)

def cfloat(s):
    return _VisusKernelPy.cfloat(s)

def cdouble(s):
    return _VisusKernelPy.cdouble(s)

def cuint64(s):
    return _VisusKernelPy.cuint64(s)

def cbigint(s):
    return _VisusKernelPy.cbigint(s)

def cint64(*args):
    return _VisusKernelPy.cint64(*args)

def cstring10(value):
    return _VisusKernelPy.cstring10(value)

def PrintLine(file, line, severity, msg):
    return _VisusKernelPy.PrintLine(file, line, severity, msg)

def RedirectLogTo(arg1, user_data=None):
    return _VisusKernelPy.RedirectLogTo(arg1, user_data)

def SetCommandLine(args):
    return _VisusKernelPy.SetCommandLine(args)

def VisusAssertFailed(file, line, expr):
    return _VisusKernelPy.VisusAssertFailed(file, line, expr)

def PrintMessageToTerminal(value):
    return _VisusKernelPy.PrintMessageToTerminal(value)

def VisusHasMessageLock():
    return _VisusKernelPy.VisusHasMessageLock()

def ThrowExceptionEx(file, line, what):
    return _VisusKernelPy.ThrowExceptionEx(file, line, what)
class Object(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.Object_swiginit(self, _VisusKernelPy.new_Object())
    __swig_destroy__ = _VisusKernelPy.delete_Object

# Register Object in _VisusKernelPy:
_VisusKernelPy.Object_swigregister(Object)
cvar = _VisusKernelPy.cvar
Pi = cvar.Pi

class Void(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.Void_swiginit(self, _VisusKernelPy.new_Void())
    __swig_destroy__ = _VisusKernelPy.delete_Void

# Register Void in _VisusKernelPy:
_VisusKernelPy.Void_swigregister(Void)

class VisusModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def getModuleConfig():
        return _VisusKernelPy.VisusModule_getModuleConfig()

    def __init__(self):
        _VisusKernelPy.VisusModule_swiginit(self, _VisusKernelPy.new_VisusModule())
    __swig_destroy__ = _VisusKernelPy.delete_VisusModule

# Register VisusModule in _VisusKernelPy:
_VisusKernelPy.VisusModule_swigregister(VisusModule)

def VisusModule_getModuleConfig():
    return _VisusKernelPy.VisusModule_getModuleConfig()

class KernelModule(VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusKernelPy.KernelModule_bAttached_get, _VisusKernelPy.KernelModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusKernelPy.KernelModule_attach()

    @staticmethod
    def detach():
        return _VisusKernelPy.KernelModule_detach()

    def __init__(self):
        _VisusKernelPy.KernelModule_swiginit(self, _VisusKernelPy.new_KernelModule())
    __swig_destroy__ = _VisusKernelPy.delete_KernelModule

# Register KernelModule in _VisusKernelPy:
_VisusKernelPy.KernelModule_swigregister(KernelModule)

def KernelModule_attach():
    return _VisusKernelPy.KernelModule_attach()

def KernelModule_detach():
    return _VisusKernelPy.KernelModule_detach()

class CommandLine(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    args = property(_VisusKernelPy.CommandLine_args_get, _VisusKernelPy.CommandLine_args_set)
    __swig_destroy__ = _VisusKernelPy.delete_CommandLine

# Register CommandLine in _VisusKernelPy:
_VisusKernelPy.CommandLine_swigregister(CommandLine)

class StringMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.StringMap_swiginit(self, _VisusKernelPy.new_StringMap())
    __swig_destroy__ = _VisusKernelPy.delete_StringMap

    def clear(self):
        return _VisusKernelPy.StringMap_clear(self)

    def size(self):
        return _VisusKernelPy.StringMap_size(self)

    def empty(self):
        return _VisusKernelPy.StringMap_empty(self)

    def begin(self, *args):
        return _VisusKernelPy.StringMap_begin(self, *args)

    def end(self, *args):
        return _VisusKernelPy.StringMap_end(self, *args)

    def find(self, *args):
        return _VisusKernelPy.StringMap_find(self, *args)

    def hasValue(self, key):
        return _VisusKernelPy.StringMap_hasValue(self, key)

    def getValue(self, *args):
        return _VisusKernelPy.StringMap_getValue(self, *args)

    def setValue(self, key, value):
        return _VisusKernelPy.StringMap_setValue(self, key, value)

    def eraseValue(self, key):
        return _VisusKernelPy.StringMap_eraseValue(self, key)

    def __eq__(self, other):
        return _VisusKernelPy.StringMap___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.StringMap___ne__(self, other)

# Register StringMap in _VisusKernelPy:
_VisusKernelPy.StringMap_swigregister(StringMap)

class HeapMemory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.HeapMemory_swiginit(self, _VisusKernelPy.new_HeapMemory())
    __swig_destroy__ = _VisusKernelPy.delete_HeapMemory

    @staticmethod
    def createUnmanaged(p, n):
        return _VisusKernelPy.HeapMemory_createUnmanaged(p, n)

    @staticmethod
    def createManaged(p, n):
        return _VisusKernelPy.HeapMemory_createManaged(p, n)

    def clone(self):
        return _VisusKernelPy.HeapMemory_clone(self)

    def reserve(self, new_m, file, line):
        return _VisusKernelPy.HeapMemory_reserve(self, new_m, file, line)

    def resize(self, size, file, line):
        return _VisusKernelPy.HeapMemory_resize(self, size, file, line)

    def shrink(self):
        return _VisusKernelPy.HeapMemory_shrink(self)

    def hasConstantValue(self, value):
        return _VisusKernelPy.HeapMemory_hasConstantValue(self, value)

    def isAllZero(self):
        return _VisusKernelPy.HeapMemory_isAllZero(self)

    def c_capacity(self):
        return _VisusKernelPy.HeapMemory_c_capacity(self)

    def c_size(self):
        return _VisusKernelPy.HeapMemory_c_size(self)

    def c_ptr(self):
        return _VisusKernelPy.HeapMemory_c_ptr(self)

    def fill(self, value):
        return _VisusKernelPy.HeapMemory_fill(self, value)

    def toString(self):
        return _VisusKernelPy.HeapMemory_toString(self)

    def base64Encode(self):
        return _VisusKernelPy.HeapMemory_base64Encode(self)

    @staticmethod
    def base64Decode(input):
        return _VisusKernelPy.HeapMemory_base64Decode(input)

    @staticmethod
    def copy(dst, src):
        return _VisusKernelPy.HeapMemory_copy(dst, src)

    @staticmethod
    def equals(a, b):
        return _VisusKernelPy.HeapMemory_equals(a, b)

# Register HeapMemory in _VisusKernelPy:
_VisusKernelPy.HeapMemory_swigregister(HeapMemory)

def HeapMemory_createUnmanaged(p, n):
    return _VisusKernelPy.HeapMemory_createUnmanaged(p, n)

def HeapMemory_createManaged(p, n):
    return _VisusKernelPy.HeapMemory_createManaged(p, n)

def HeapMemory_base64Decode(input):
    return _VisusKernelPy.HeapMemory_base64Decode(input)

def HeapMemory_copy(dst, src):
    return _VisusKernelPy.HeapMemory_copy(dst, src)

def HeapMemory_equals(a, b):
    return _VisusKernelPy.HeapMemory_equals(a, b)

class Aborted(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.Aborted_swiginit(self, _VisusKernelPy.new_Aborted())

    def getAbortedId(self):
        return _VisusKernelPy.Aborted_getAbortedId(self)

    def __call__(self):
        return _VisusKernelPy.Aborted___call__(self)

    def setTrue(self):
        return _VisusKernelPy.Aborted_setTrue(self)

    def setFalse(self):
        return _VisusKernelPy.Aborted_setFalse(self)

    def __eq__(self, other):
        return _VisusKernelPy.Aborted___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Aborted___ne__(self, other)
    __swig_destroy__ = _VisusKernelPy.delete_Aborted

# Register Aborted in _VisusKernelPy:
_VisusKernelPy.Aborted_swigregister(Aborted)

class StringTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_VisusKernelPy.StringTree_name_get, _VisusKernelPy.StringTree_name_set)
    attributes = property(_VisusKernelPy.StringTree_attributes_get, _VisusKernelPy.StringTree_attributes_set)

    def __init__(self, *args):
        _VisusKernelPy.StringTree_swiginit(self, _VisusKernelPy.new_StringTree(*args))
    __swig_destroy__ = _VisusKernelPy.delete_StringTree

    def valid(self):
        return _VisusKernelPy.StringTree_valid(self)

    def __nonzero__(self):
        return _VisusKernelPy.StringTree___nonzero__(self)
    __bool__ = __nonzero__



    @staticmethod
    def fromString(content, bEnablePostProcessing=True):
        return _VisusKernelPy.StringTree_fromString(content, bEnablePostProcessing)

    def assign(self, other):
        return _VisusKernelPy.StringTree_assign(self, other)

    def hasAttribute(self, name):
        return _VisusKernelPy.StringTree_hasAttribute(self, name)

    def getAttribute(self, *args):
        return _VisusKernelPy.StringTree_getAttribute(self, *args)

    def setAttribute(self, name, value):
        return _VisusKernelPy.StringTree_setAttribute(self, name, value)

    def removeAttribute(self, name):
        return _VisusKernelPy.StringTree_removeAttribute(self, name)

    def getNumberOfChilds(self):
        return _VisusKernelPy.StringTree_getNumberOfChilds(self)

    def addChildAtBegin(self, child):
        return _VisusKernelPy.StringTree_addChildAtBegin(self, child)

    def addChild(self, *args):
        return _VisusKernelPy.StringTree_addChild(self, *args)

    def getFirstChild(self):
        return _VisusKernelPy.StringTree_getFirstChild(self)

    def getLastChild(self):
        return _VisusKernelPy.StringTree_getLastChild(self)

    def getChild(self, *args):
        return _VisusKernelPy.StringTree_getChild(self, *args)

    def getChilds(self, *args):
        return _VisusKernelPy.StringTree_getChilds(self, *args)

    def getAllChilds(self, name):
        return _VisusKernelPy.StringTree_getAllChilds(self, name)

    def removeChild(self, name):
        return _VisusKernelPy.StringTree_removeChild(self, name)

    def isHash(self):
        return _VisusKernelPy.StringTree_isHash(self)

    def isComment(self):
        return _VisusKernelPy.StringTree_isComment(self)

    def isText(self):
        return _VisusKernelPy.StringTree_isText(self)

    def isCData(self):
        return _VisusKernelPy.StringTree_isCData(self)

    def addComment(self, value):
        return _VisusKernelPy.StringTree_addComment(self, value)

    def addText(self, value):
        return _VisusKernelPy.StringTree_addText(self, value)

    def addCData(self, value):
        return _VisusKernelPy.StringTree_addCData(self, value)

    def write(self, *args):
        return _VisusKernelPy.StringTree_write(self, *args)

    def read(self, *args):
        return _VisusKernelPy.StringTree_read(self, *args)

    def readString(self, *args):
        return _VisusKernelPy.StringTree_readString(self, *args)

    def readBool(self, key, default_value=False):
        return _VisusKernelPy.StringTree_readBool(self, key, default_value)

    def readInt(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readInt(self, key, default_value)

    def readInt64(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readInt64(self, key, default_value)

    def readDouble(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readDouble(self, key, default_value)

    def writeText(self, *args):
        return _VisusKernelPy.StringTree_writeText(self, *args)

    def readText(self, *args):
        return _VisusKernelPy.StringTree_readText(self, *args)

    @staticmethod
    def merge(dst, src):
        return _VisusKernelPy.StringTree_merge(dst, src)

    @staticmethod
    def postProcess(src):
        return _VisusKernelPy.StringTree_postProcess(src)

    def toXmlString(self):
        return _VisusKernelPy.StringTree_toXmlString(self)

    def toJSONString(self):
        return _VisusKernelPy.StringTree_toJSONString(self)

    def toString(self):
        return _VisusKernelPy.StringTree_toString(self)

# Register StringTree in _VisusKernelPy:
_VisusKernelPy.StringTree_swigregister(StringTree)

def StringTree_fromString(content, bEnablePostProcessing=True):
    return _VisusKernelPy.StringTree_fromString(content, bEnablePostProcessing)

def StringTree_merge(dst, src):
    return _VisusKernelPy.StringTree_merge(dst, src)

def StringTree_postProcess(src):
    return _VisusKernelPy.StringTree_postProcess(src)

class ConfigFile(StringTree):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.ConfigFile_swiginit(self, _VisusKernelPy.new_ConfigFile(*args))
    __swig_destroy__ = _VisusKernelPy.delete_ConfigFile

    @staticmethod
    def fromString(content, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_fromString(content, bEnablePostProcessing)

    def getFilename(self):
        return _VisusKernelPy.ConfigFile_getFilename(self)

    def load(self, filename, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_load(self, filename, bEnablePostProcessing)

    def reload(self, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_reload(self, bEnablePostProcessing)

    def save(self):
        return _VisusKernelPy.ConfigFile_save(self)

# Register ConfigFile in _VisusKernelPy:
_VisusKernelPy.ConfigFile_swigregister(ConfigFile)

def ConfigFile_fromString(content, bEnablePostProcessing=True):
    return _VisusKernelPy.ConfigFile_fromString(content, bEnablePostProcessing)

class Color(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RGBType = _VisusKernelPy.Color_RGBType
    HSBType = _VisusKernelPy.Color_HSBType
    HLSType = _VisusKernelPy.Color_HLSType
    CieLabType = _VisusKernelPy.Color_CieLabType

    def __init__(self, *args):
        _VisusKernelPy.Color_swiginit(self, _VisusKernelPy.new_Color(*args))
    __swig_destroy__ = _VisusKernelPy.delete_Color

    def clampToRange(self, a, b):
        return _VisusKernelPy.Color_clampToRange(self, a, b)

    @staticmethod
    def fromString(*args):
        return _VisusKernelPy.Color_fromString(*args)

    @staticmethod
    def createFromUint32(value):
        return _VisusKernelPy.Color_createFromUint32(value)

    @staticmethod
    def random(Alpha=1.0):
        return _VisusKernelPy.Color_random(Alpha)

    def getColorModel(self):
        return _VisusKernelPy.Color_getColorModel(self)

    def setColorModel(self, value):
        return _VisusKernelPy.Color_setColorModel(self, value)

    def get(self, index):
        return _VisusKernelPy.Color_get(self, index)

    def set(self, index, value):
        return _VisusKernelPy.Color_set(self, index, value)

    def __getitem__(self, index):
        return _VisusKernelPy.Color___getitem__(self, index)

    def __getitem_ref__(self, index):
        return _VisusKernelPy.Color___getitem_ref__(self, index)

    def assign(self, other):
        return _VisusKernelPy.Color_assign(self, other)

    @staticmethod
    def distance(c1, c2):
        return _VisusKernelPy.Color_distance(c1, c2)

    def __eq__(self, other):
        return _VisusKernelPy.Color___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Color___ne__(self, other)

    def __mul__(self, s):
        return _VisusKernelPy.Color___mul__(self, s)

    def withAlpha(self, alpha):
        return _VisusKernelPy.Color_withAlpha(self, alpha)

    def convertToOtherModel(self, color_model):
        return _VisusKernelPy.Color_convertToOtherModel(self, color_model)

    def toRGB(self):
        return _VisusKernelPy.Color_toRGB(self)

    def toHSB(self):
        return _VisusKernelPy.Color_toHSB(self)

    def toHLS(self):
        return _VisusKernelPy.Color_toHLS(self)

    def toCieLab(self):
        return _VisusKernelPy.Color_toCieLab(self)

    def getRed(self):
        return _VisusKernelPy.Color_getRed(self)

    def getGreen(self):
        return _VisusKernelPy.Color_getGreen(self)

    def getBlue(self):
        return _VisusKernelPy.Color_getBlue(self)

    def getHue(self):
        return _VisusKernelPy.Color_getHue(self)

    def getSaturation(self):
        return _VisusKernelPy.Color_getSaturation(self)

    def getLightness(self):
        return _VisusKernelPy.Color_getLightness(self)

    def getBrightness(self):
        return _VisusKernelPy.Color_getBrightness(self)

    def getAlpha(self):
        return _VisusKernelPy.Color_getAlpha(self)

    def setRed(self, value):
        return _VisusKernelPy.Color_setRed(self, value)

    def setGreen(self, value):
        return _VisusKernelPy.Color_setGreen(self, value)

    def setBlue(self, value):
        return _VisusKernelPy.Color_setBlue(self, value)

    def setHue(self, value):
        return _VisusKernelPy.Color_setHue(self, value)

    def setSaturation(self, value):
        return _VisusKernelPy.Color_setSaturation(self, value)

    def setLightness(self, value):
        return _VisusKernelPy.Color_setLightness(self, value)

    def setBrightness(self, value):
        return _VisusKernelPy.Color_setBrightness(self, value)

    def setAlpha(self, value):
        return _VisusKernelPy.Color_setAlpha(self, value)

    @staticmethod
    def interpolate(alpha, c1, beta, c2):
        return _VisusKernelPy.Color_interpolate(alpha, c1, beta, c2)

    def toString(self, bHex=True):
        return _VisusKernelPy.Color_toString(self, bHex)

    def write(self, ar):
        return _VisusKernelPy.Color_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Color_read(self, ar)

# Register Color in _VisusKernelPy:
_VisusKernelPy.Color_swigregister(Color)

def Color_fromString(*args):
    return _VisusKernelPy.Color_fromString(*args)

def Color_createFromUint32(value):
    return _VisusKernelPy.Color_createFromUint32(value)

def Color_random(Alpha=1.0):
    return _VisusKernelPy.Color_random(Alpha)

def Color_distance(c1, c2):
    return _VisusKernelPy.Color_distance(c1, c2)

def Color_interpolate(alpha, c1, beta, c2):
    return _VisusKernelPy.Color_interpolate(alpha, c1, beta, c2)

class Path(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.Path_swiginit(self, _VisusKernelPy.new_Path(*args))
    __swig_destroy__ = _VisusKernelPy.delete_Path

    @staticmethod
    def invalid():
        return _VisusKernelPy.Path_invalid()

    def empty(self):
        return _VisusKernelPy.Path_empty(self)

    def isRootDirectory(self):
        return _VisusKernelPy.Path_isRootDirectory(self)

    def toString(self):
        return _VisusKernelPy.Path_toString(self)

    def getParent(self, normalize=True):
        return _VisusKernelPy.Path_getParent(self, normalize)

    def getChild(self, child):
        return _VisusKernelPy.Path_getChild(self, child)

    def getFileName(self):
        return _VisusKernelPy.Path_getFileName(self)

    def getFileNameWithoutExtension(self):
        return _VisusKernelPy.Path_getFileNameWithoutExtension(self)

    def getExtension(self):
        return _VisusKernelPy.Path_getExtension(self)

# Register Path in _VisusKernelPy:
_VisusKernelPy.Path_swigregister(Path)

def Path_invalid():
    return _VisusKernelPy.Path_invalid()

class KnownPaths(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    VisusHome = property(_VisusKernelPy.KnownPaths_VisusHome_get, _VisusKernelPy.KnownPaths_VisusHome_set)
    BinaryDirectory = property(_VisusKernelPy.KnownPaths_BinaryDirectory_get, _VisusKernelPy.KnownPaths_BinaryDirectory_set)

    @staticmethod
    def CurrentWorkingDirectory():
        return _VisusKernelPy.KnownPaths_CurrentWorkingDirectory()
    __swig_destroy__ = _VisusKernelPy.delete_KnownPaths

# Register KnownPaths in _VisusKernelPy:
_VisusKernelPy.KnownPaths_swigregister(KnownPaths)

def KnownPaths_CurrentWorkingDirectory():
    return _VisusKernelPy.KnownPaths_CurrentWorkingDirectory()

class FileGlobalStats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.FileGlobalStats_swiginit(self, _VisusKernelPy.new_FileGlobalStats())

    def resetStats(self):
        return _VisusKernelPy.FileGlobalStats_resetStats(self)

    def getReadBytes(self):
        return _VisusKernelPy.FileGlobalStats_getReadBytes(self)

    def getWriteBytes(self):
        return _VisusKernelPy.FileGlobalStats_getWriteBytes(self)

    def getNumOpen(self):
        return _VisusKernelPy.FileGlobalStats_getNumOpen(self)
    __swig_destroy__ = _VisusKernelPy.delete_FileGlobalStats

# Register FileGlobalStats in _VisusKernelPy:
_VisusKernelPy.FileGlobalStats_swigregister(FileGlobalStats)

class File(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NoOptions = _VisusKernelPy.File_NoOptions
    MustCreateFile = _VisusKernelPy.File_MustCreateFile

    def __init__(self):
        _VisusKernelPy.File_swiginit(self, _VisusKernelPy.new_File())
    __swig_destroy__ = _VisusKernelPy.delete_File

    @staticmethod
    def global_stats():
        return _VisusKernelPy.File_global_stats()

    def isOpen(self):
        return _VisusKernelPy.File_isOpen(self)

    def open(self, filename, file_mode):
        return _VisusKernelPy.File_open(self, filename, file_mode)

    def createAndOpen(self, filename, file_mode):
        return _VisusKernelPy.File_createAndOpen(self, filename, file_mode)

    def close(self):
        return _VisusKernelPy.File_close(self)

    def size(self):
        return _VisusKernelPy.File_size(self)

    def canRead(self):
        return _VisusKernelPy.File_canRead(self)

    def canWrite(self):
        return _VisusKernelPy.File_canWrite(self)

    def getFileMode(self):
        return _VisusKernelPy.File_getFileMode(self)

    def getFilename(self):
        return _VisusKernelPy.File_getFilename(self)

    def write(self, pos, count, buffer):
        return _VisusKernelPy.File_write(self, pos, count, buffer)

    def read(self, pos, count, buffer):
        return _VisusKernelPy.File_read(self, pos, count, buffer)

# Register File in _VisusKernelPy:
_VisusKernelPy.File_swigregister(File)

def File_global_stats():
    return _VisusKernelPy.File_global_stats()

class FileUtils(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def existsFile(path):
        return _VisusKernelPy.FileUtils_existsFile(path)

    @staticmethod
    def existsDirectory(path):
        return _VisusKernelPy.FileUtils_existsDirectory(path)

    @staticmethod
    def removeFile(path):
        return _VisusKernelPy.FileUtils_removeFile(path)

    @staticmethod
    def createDirectory(path, bCreateParents=True):
        return _VisusKernelPy.FileUtils_createDirectory(path, bCreateParents)

    @staticmethod
    def removeDirectory(path):
        return _VisusKernelPy.FileUtils_removeDirectory(path)

    @staticmethod
    def getFileSize(path):
        return _VisusKernelPy.FileUtils_getFileSize(path)

    @staticmethod
    def getTimeLastModified(path):
        return _VisusKernelPy.FileUtils_getTimeLastModified(path)

    @staticmethod
    def getTimeLastAccessed(path):
        return _VisusKernelPy.FileUtils_getTimeLastAccessed(path)

    @staticmethod
    def lock(path):
        return _VisusKernelPy.FileUtils_lock(path)

    @staticmethod
    def unlock(path):
        return _VisusKernelPy.FileUtils_unlock(path)

    @staticmethod
    def touch(path):
        return _VisusKernelPy.FileUtils_touch(path)

    @staticmethod
    def copyFile(src, dst, bFailIfExist):
        return _VisusKernelPy.FileUtils_copyFile(src, dst, bFailIfExist)

    @staticmethod
    def moveFile(src, dst):
        return _VisusKernelPy.FileUtils_moveFile(src, dst)

    @staticmethod
    def createLink(existing_file, new_file):
        return _VisusKernelPy.FileUtils_createLink(existing_file, new_file)
    __swig_destroy__ = _VisusKernelPy.delete_FileUtils

# Register FileUtils in _VisusKernelPy:
_VisusKernelPy.FileUtils_swigregister(FileUtils)

def FileUtils_existsFile(path):
    return _VisusKernelPy.FileUtils_existsFile(path)

def FileUtils_existsDirectory(path):
    return _VisusKernelPy.FileUtils_existsDirectory(path)

def FileUtils_removeFile(path):
    return _VisusKernelPy.FileUtils_removeFile(path)

def FileUtils_createDirectory(path, bCreateParents=True):
    return _VisusKernelPy.FileUtils_createDirectory(path, bCreateParents)

def FileUtils_removeDirectory(path):
    return _VisusKernelPy.FileUtils_removeDirectory(path)

def FileUtils_getFileSize(path):
    return _VisusKernelPy.FileUtils_getFileSize(path)

def FileUtils_getTimeLastModified(path):
    return _VisusKernelPy.FileUtils_getTimeLastModified(path)

def FileUtils_getTimeLastAccessed(path):
    return _VisusKernelPy.FileUtils_getTimeLastAccessed(path)

def FileUtils_lock(path):
    return _VisusKernelPy.FileUtils_lock(path)

def FileUtils_unlock(path):
    return _VisusKernelPy.FileUtils_unlock(path)

def FileUtils_touch(path):
    return _VisusKernelPy.FileUtils_touch(path)

def FileUtils_copyFile(src, dst, bFailIfExist):
    return _VisusKernelPy.FileUtils_copyFile(src, dst, bFailIfExist)

def FileUtils_moveFile(src, dst):
    return _VisusKernelPy.FileUtils_moveFile(src, dst)

def FileUtils_createLink(existing_file, new_file):
    return _VisusKernelPy.FileUtils_createLink(existing_file, new_file)

class ScopedFileLock(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, filename_):
        _VisusKernelPy.ScopedFileLock_swiginit(self, _VisusKernelPy.new_ScopedFileLock(filename_))
    __swig_destroy__ = _VisusKernelPy.delete_ScopedFileLock

# Register ScopedFileLock in _VisusKernelPy:
_VisusKernelPy.ScopedFileLock_swigregister(ScopedFileLock)

class Time(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.Time_swiginit(self, _VisusKernelPy.new_Time(*args))
    __swig_destroy__ = _VisusKernelPy.delete_Time

    @staticmethod
    def getTimeStamp():
        return _VisusKernelPy.Time_getTimeStamp()

    @staticmethod
    def now():
        return _VisusKernelPy.Time_now()

    def elapsedMsec(self):
        return _VisusKernelPy.Time_elapsedMsec(self)

    def elapsedSec(self):
        return _VisusKernelPy.Time_elapsedSec(self)

    def getUTCMilliseconds(self):
        return _VisusKernelPy.Time_getUTCMilliseconds(self)

    def getYear(self):
        return _VisusKernelPy.Time_getYear(self)

    def getMonth(self):
        return _VisusKernelPy.Time_getMonth(self)

    def getDayOfMonth(self):
        return _VisusKernelPy.Time_getDayOfMonth(self)

    def getDayOfWeek(self):
        return _VisusKernelPy.Time_getDayOfWeek(self)

    def getDayOfYear(self):
        return _VisusKernelPy.Time_getDayOfYear(self)

    def getHours(self):
        return _VisusKernelPy.Time_getHours(self)

    def getMinutes(self):
        return _VisusKernelPy.Time_getMinutes(self)

    def getSeconds(self):
        return _VisusKernelPy.Time_getSeconds(self)

    def getMilliseconds(self):
        return _VisusKernelPy.Time_getMilliseconds(self)

    def getFormattedLocalTime(self):
        return _VisusKernelPy.Time_getFormattedLocalTime(self)

    def getPrettyFormattedShortLocalTime(self):
        return _VisusKernelPy.Time_getPrettyFormattedShortLocalTime(self)

    @staticmethod
    def getWeekdayName(*args):
        return _VisusKernelPy.Time_getWeekdayName(*args)

    @staticmethod
    def getMonthName(*args):
        return _VisusKernelPy.Time_getMonthName(*args)

    def assign(self, other):
        return _VisusKernelPy.Time_assign(self, other)

    def __eq__(self, other):
        return _VisusKernelPy.Time___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Time___ne__(self, other)

    def __lt__(self, other):
        return _VisusKernelPy.Time___lt__(self, other)

    def __le__(self, other):
        return _VisusKernelPy.Time___le__(self, other)

    def __gt__(self, other):
        return _VisusKernelPy.Time___gt__(self, other)

    def __ge__(self, other):
        return _VisusKernelPy.Time___ge__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.Time___sub__(self, other)

# Register Time in _VisusKernelPy:
_VisusKernelPy.Time_swigregister(Time)

def Time_getTimeStamp():
    return _VisusKernelPy.Time_getTimeStamp()

def Time_now():
    return _VisusKernelPy.Time_now()

def Time_getWeekdayName(*args):
    return _VisusKernelPy.Time_getWeekdayName(*args)

def Time_getMonthName(*args):
    return _VisusKernelPy.Time_getMonthName(*args)

class StringUtils(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def convertDoubleToString(v, precision=-1):
        return _VisusKernelPy.StringUtils_convertDoubleToString(v, precision)

    @staticmethod
    def ltrim(*args):
        return _VisusKernelPy.StringUtils_ltrim(*args)

    @staticmethod
    def rtrim(*args):
        return _VisusKernelPy.StringUtils_rtrim(*args)

    @staticmethod
    def trim(*args):
        return _VisusKernelPy.StringUtils_trim(*args)

    @staticmethod
    def reverse(ret):
        return _VisusKernelPy.StringUtils_reverse(ret)

    @staticmethod
    def removeSpaces(str):
        return _VisusKernelPy.StringUtils_removeSpaces(str)

    @staticmethod
    def onlyAlNum(value):
        return _VisusKernelPy.StringUtils_onlyAlNum(value)

    @staticmethod
    def toLower(ret):
        return _VisusKernelPy.StringUtils_toLower(ret)

    @staticmethod
    def toUpper(ret):
        return _VisusKernelPy.StringUtils_toUpper(ret)

    @staticmethod
    def find(src, what):
        return _VisusKernelPy.StringUtils_find(src, what)

    @staticmethod
    def contains(src, what):
        return _VisusKernelPy.StringUtils_contains(src, what)

    @staticmethod
    def containsControl(src):
        return _VisusKernelPy.StringUtils_containsControl(src)

    @staticmethod
    def nextToken(src, separator):
        return _VisusKernelPy.StringUtils_nextToken(src, separator)

    @staticmethod
    def replaceFirst(src, what, value):
        return _VisusKernelPy.StringUtils_replaceFirst(src, what, value)

    @staticmethod
    def replaceAll(src, what, value):
        return _VisusKernelPy.StringUtils_replaceAll(src, what, value)

    @staticmethod
    def startsWith(s, what, caseSensitive=False):
        return _VisusKernelPy.StringUtils_startsWith(s, what, caseSensitive)

    @staticmethod
    def endsWith(s, what, caseSensitive=False):
        return _VisusKernelPy.StringUtils_endsWith(s, what, caseSensitive)

    @staticmethod
    def tryParse(*args):
        return _VisusKernelPy.StringUtils_tryParse(*args)

    @staticmethod
    def split(*args):
        return _VisusKernelPy.StringUtils_split(*args)

    @staticmethod
    def parseInts(*args):
        return _VisusKernelPy.StringUtils_parseInts(*args)

    @staticmethod
    def parseDoubles(*args):
        return _VisusKernelPy.StringUtils_parseDoubles(*args)

    @staticmethod
    def splitInChunks(source, chunk):
        return _VisusKernelPy.StringUtils_splitInChunks(source, chunk)

    @staticmethod
    def join(*args):
        return _VisusKernelPy.StringUtils_join(*args)

    @staticmethod
    def joinLines(v):
        return _VisusKernelPy.StringUtils_joinLines(v)

    @staticmethod
    def combine(a, combinator, b):
        return _VisusKernelPy.StringUtils_combine(a, combinator, b)

    @staticmethod
    def decorateAll(prefix, v, postfix):
        return _VisusKernelPy.StringUtils_decorateAll(prefix, v, postfix)

    @staticmethod
    def getLines(s):
        return _VisusKernelPy.StringUtils_getLines(s)

    @staticmethod
    def getNonEmptyLines(s):
        return _VisusKernelPy.StringUtils_getNonEmptyLines(s)

    @staticmethod
    def getLinesAndPurgeComments(source, commentString):
        return _VisusKernelPy.StringUtils_getLinesAndPurgeComments(source, commentString)

    @staticmethod
    def base64Encode(input):
        return _VisusKernelPy.StringUtils_base64Encode(input)

    @staticmethod
    def base64Decode(input):
        return _VisusKernelPy.StringUtils_base64Decode(input)

    @staticmethod
    def toHexString(*args):
        return _VisusKernelPy.StringUtils_toHexString(*args)

    @staticmethod
    def md5(input):
        return _VisusKernelPy.StringUtils_md5(input)

    @staticmethod
    def computeChecksum(input):
        return _VisusKernelPy.StringUtils_computeChecksum(input)

    @staticmethod
    def hmac_sha256(input, key):
        return _VisusKernelPy.StringUtils_hmac_sha256(input, key)

    @staticmethod
    def hmac_sha1(input, key):
        return _VisusKernelPy.StringUtils_hmac_sha1(input, key)

    @staticmethod
    def encodeForFilename(value):
        return _VisusKernelPy.StringUtils_encodeForFilename(value)

    @staticmethod
    def removeEscapeChars(value):
        return _VisusKernelPy.StringUtils_removeEscapeChars(value)

    @staticmethod
    def addEscapeChars(value):
        return _VisusKernelPy.StringUtils_addEscapeChars(value)

    @staticmethod
    def getDateTimeForFilename():
        return _VisusKernelPy.StringUtils_getDateTimeForFilename()

    @staticmethod
    def getByteSizeFromString(value):
        return _VisusKernelPy.StringUtils_getByteSizeFromString(value)

    @staticmethod
    def getStringFromByteSize(size):
        return _VisusKernelPy.StringUtils_getStringFromByteSize(size)
    __swig_destroy__ = _VisusKernelPy.delete_StringUtils

# Register StringUtils in _VisusKernelPy:
_VisusKernelPy.StringUtils_swigregister(StringUtils)

def StringUtils_convertDoubleToString(v, precision=-1):
    return _VisusKernelPy.StringUtils_convertDoubleToString(v, precision)

def StringUtils_ltrim(*args):
    return _VisusKernelPy.StringUtils_ltrim(*args)

def StringUtils_rtrim(*args):
    return _VisusKernelPy.StringUtils_rtrim(*args)

def StringUtils_trim(*args):
    return _VisusKernelPy.StringUtils_trim(*args)

def StringUtils_reverse(ret):
    return _VisusKernelPy.StringUtils_reverse(ret)

def StringUtils_removeSpaces(str):
    return _VisusKernelPy.StringUtils_removeSpaces(str)

def StringUtils_onlyAlNum(value):
    return _VisusKernelPy.StringUtils_onlyAlNum(value)

def StringUtils_toLower(ret):
    return _VisusKernelPy.StringUtils_toLower(ret)

def StringUtils_toUpper(ret):
    return _VisusKernelPy.StringUtils_toUpper(ret)

def StringUtils_find(src, what):
    return _VisusKernelPy.StringUtils_find(src, what)

def StringUtils_contains(src, what):
    return _VisusKernelPy.StringUtils_contains(src, what)

def StringUtils_containsControl(src):
    return _VisusKernelPy.StringUtils_containsControl(src)

def StringUtils_nextToken(src, separator):
    return _VisusKernelPy.StringUtils_nextToken(src, separator)

def StringUtils_replaceFirst(src, what, value):
    return _VisusKernelPy.StringUtils_replaceFirst(src, what, value)

def StringUtils_replaceAll(src, what, value):
    return _VisusKernelPy.StringUtils_replaceAll(src, what, value)

def StringUtils_startsWith(s, what, caseSensitive=False):
    return _VisusKernelPy.StringUtils_startsWith(s, what, caseSensitive)

def StringUtils_endsWith(s, what, caseSensitive=False):
    return _VisusKernelPy.StringUtils_endsWith(s, what, caseSensitive)

def StringUtils_tryParse(*args):
    return _VisusKernelPy.StringUtils_tryParse(*args)

def StringUtils_split(*args):
    return _VisusKernelPy.StringUtils_split(*args)

def StringUtils_parseInts(*args):
    return _VisusKernelPy.StringUtils_parseInts(*args)

def StringUtils_parseDoubles(*args):
    return _VisusKernelPy.StringUtils_parseDoubles(*args)

def StringUtils_splitInChunks(source, chunk):
    return _VisusKernelPy.StringUtils_splitInChunks(source, chunk)

def StringUtils_join(*args):
    return _VisusKernelPy.StringUtils_join(*args)

def StringUtils_joinLines(v):
    return _VisusKernelPy.StringUtils_joinLines(v)

def StringUtils_combine(a, combinator, b):
    return _VisusKernelPy.StringUtils_combine(a, combinator, b)

def StringUtils_decorateAll(prefix, v, postfix):
    return _VisusKernelPy.StringUtils_decorateAll(prefix, v, postfix)

def StringUtils_getLines(s):
    return _VisusKernelPy.StringUtils_getLines(s)

def StringUtils_getNonEmptyLines(s):
    return _VisusKernelPy.StringUtils_getNonEmptyLines(s)

def StringUtils_getLinesAndPurgeComments(source, commentString):
    return _VisusKernelPy.StringUtils_getLinesAndPurgeComments(source, commentString)

def StringUtils_base64Encode(input):
    return _VisusKernelPy.StringUtils_base64Encode(input)

def StringUtils_base64Decode(input):
    return _VisusKernelPy.StringUtils_base64Decode(input)

def StringUtils_toHexString(*args):
    return _VisusKernelPy.StringUtils_toHexString(*args)

def StringUtils_md5(input):
    return _VisusKernelPy.StringUtils_md5(input)

def StringUtils_computeChecksum(input):
    return _VisusKernelPy.StringUtils_computeChecksum(input)

def StringUtils_hmac_sha256(input, key):
    return _VisusKernelPy.StringUtils_hmac_sha256(input, key)

def StringUtils_hmac_sha1(input, key):
    return _VisusKernelPy.StringUtils_hmac_sha1(input, key)

def StringUtils_encodeForFilename(value):
    return _VisusKernelPy.StringUtils_encodeForFilename(value)

def StringUtils_removeEscapeChars(value):
    return _VisusKernelPy.StringUtils_removeEscapeChars(value)

def StringUtils_addEscapeChars(value):
    return _VisusKernelPy.StringUtils_addEscapeChars(value)

def StringUtils_getDateTimeForFilename():
    return _VisusKernelPy.StringUtils_getDateTimeForFilename()

def StringUtils_getByteSizeFromString(value):
    return _VisusKernelPy.StringUtils_getByteSizeFromString(value)

def StringUtils_getStringFromByteSize(size):
    return _VisusKernelPy.StringUtils_getStringFromByteSize(size)

class ParseStringParams(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    source = property(_VisusKernelPy.ParseStringParams_source_get, _VisusKernelPy.ParseStringParams_source_set)
    without_params = property(_VisusKernelPy.ParseStringParams_without_params_get, _VisusKernelPy.ParseStringParams_without_params_set)
    params = property(_VisusKernelPy.ParseStringParams_params_get, _VisusKernelPy.ParseStringParams_params_set)

    def __init__(self, *args):
        _VisusKernelPy.ParseStringParams_swiginit(self, _VisusKernelPy.new_ParseStringParams(*args))
    __swig_destroy__ = _VisusKernelPy.delete_ParseStringParams

# Register ParseStringParams in _VisusKernelPy:
_VisusKernelPy.ParseStringParams_swigregister(ParseStringParams)

class Point2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point2i_x_get, _VisusKernelPy.Point2i_x_set)
    y = property(_VisusKernelPy.Point2i_y_get, _VisusKernelPy.Point2i_y_set)

    def __init__(self, *args):
        _VisusKernelPy.Point2i_swiginit(self, _VisusKernelPy.new_Point2i(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point2i_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point2i_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point2i_toVector(self)

    def back(self):
        return _VisusKernelPy.Point2i_back(self)

    def module2(self):
        return _VisusKernelPy.Point2i_module2(self)

    def module(self):
        return _VisusKernelPy.Point2i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2i_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2i___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2i___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2i_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point2i_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2i___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point2i_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point2i_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2i_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2i_smallest(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.Point2i_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.Point2i_innerDiv(self, other)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.Point2i_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.Point2i_max(a, b)

    def __lt__(self, b):
        return _VisusKernelPy.Point2i___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point2i___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point2i___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point2i___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point2i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2i

# Register Point2i in _VisusKernelPy:
_VisusKernelPy.Point2i_swigregister(Point2i)

def Point2i_fromString(value):
    return _VisusKernelPy.Point2i_fromString(value)

def Point2i_one(pdim):
    return _VisusKernelPy.Point2i_one(pdim)

def Point2i_min(a, b):
    return _VisusKernelPy.Point2i_min(a, b)

def Point2i_max(a, b):
    return _VisusKernelPy.Point2i_max(a, b)

class Point2f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point2f_x_get, _VisusKernelPy.Point2f_x_set)
    y = property(_VisusKernelPy.Point2f_y_get, _VisusKernelPy.Point2f_y_set)

    def __init__(self, *args):
        _VisusKernelPy.Point2f_swiginit(self, _VisusKernelPy.new_Point2f(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point2f_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point2f_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point2f_toVector(self)

    def back(self):
        return _VisusKernelPy.Point2f_back(self)

    def module2(self):
        return _VisusKernelPy.Point2f_module2(self)

    def module(self):
        return _VisusKernelPy.Point2f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2f_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2f___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2f___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2f_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point2f_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2f___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point2f_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point2f_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2f_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2f_smallest(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.Point2f_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.Point2f_innerDiv(self, other)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.Point2f_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.Point2f_max(a, b)

    def __lt__(self, b):
        return _VisusKernelPy.Point2f___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point2f___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point2f___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point2f___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point2f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2f

# Register Point2f in _VisusKernelPy:
_VisusKernelPy.Point2f_swigregister(Point2f)

def Point2f_fromString(value):
    return _VisusKernelPy.Point2f_fromString(value)

def Point2f_one(pdim):
    return _VisusKernelPy.Point2f_one(pdim)

def Point2f_min(a, b):
    return _VisusKernelPy.Point2f_min(a, b)

def Point2f_max(a, b):
    return _VisusKernelPy.Point2f_max(a, b)

class Point2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point2d_x_get, _VisusKernelPy.Point2d_x_set)
    y = property(_VisusKernelPy.Point2d_y_get, _VisusKernelPy.Point2d_y_set)

    def __init__(self, *args):
        _VisusKernelPy.Point2d_swiginit(self, _VisusKernelPy.new_Point2d(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point2d_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point2d_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point2d_toVector(self)

    def back(self):
        return _VisusKernelPy.Point2d_back(self)

    def module2(self):
        return _VisusKernelPy.Point2d_module2(self)

    def module(self):
        return _VisusKernelPy.Point2d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2d_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2d___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2d___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2d_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point2d_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2d___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point2d_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point2d_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2d_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2d_smallest(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.Point2d_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.Point2d_innerDiv(self, other)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.Point2d_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.Point2d_max(a, b)

    def __lt__(self, b):
        return _VisusKernelPy.Point2d___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point2d___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point2d___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point2d___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point2d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2d

# Register Point2d in _VisusKernelPy:
_VisusKernelPy.Point2d_swigregister(Point2d)

def Point2d_fromString(value):
    return _VisusKernelPy.Point2d_fromString(value)

def Point2d_one(pdim):
    return _VisusKernelPy.Point2d_one(pdim)

def Point2d_min(a, b):
    return _VisusKernelPy.Point2d_min(a, b)

def Point2d_max(a, b):
    return _VisusKernelPy.Point2d_max(a, b)

class Point3i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point3i_x_get, _VisusKernelPy.Point3i_x_set)
    y = property(_VisusKernelPy.Point3i_y_get, _VisusKernelPy.Point3i_y_set)
    z = property(_VisusKernelPy.Point3i_z_get, _VisusKernelPy.Point3i_z_set)

    def __init__(self, *args):
        _VisusKernelPy.Point3i_swiginit(self, _VisusKernelPy.new_Point3i(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point3i_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point3i_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point3i_toVector(self)

    def back(self):
        return _VisusKernelPy.Point3i_back(self)

    def toPoint2(self):
        return _VisusKernelPy.Point3i_toPoint2(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3i_module2(self)

    def module(self):
        return _VisusKernelPy.Point3i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3i_inv(self)

    def innerProduct(self):
        return _VisusKernelPy.Point3i_innerProduct(self)

    def __pos__(self):
        return _VisusKernelPy.Point3i___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3i___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3i_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point3i_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3i___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point3i_set(self, i, value)

    def cross(self, v):
        return _VisusKernelPy.Point3i_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3i_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3i_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3i_smallest(self)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.Point3i_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.Point3i_max(a, b)

    def __lt__(self, b):
        return _VisusKernelPy.Point3i___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3i___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3i___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3i___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3i

# Register Point3i in _VisusKernelPy:
_VisusKernelPy.Point3i_swigregister(Point3i)

def Point3i_fromString(value):
    return _VisusKernelPy.Point3i_fromString(value)

def Point3i_one(pdim):
    return _VisusKernelPy.Point3i_one(pdim)

def Point3i_min(a, b):
    return _VisusKernelPy.Point3i_min(a, b)

def Point3i_max(a, b):
    return _VisusKernelPy.Point3i_max(a, b)

class Point3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point3f_x_get, _VisusKernelPy.Point3f_x_set)
    y = property(_VisusKernelPy.Point3f_y_get, _VisusKernelPy.Point3f_y_set)
    z = property(_VisusKernelPy.Point3f_z_get, _VisusKernelPy.Point3f_z_set)

    def __init__(self, *args):
        _VisusKernelPy.Point3f_swiginit(self, _VisusKernelPy.new_Point3f(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point3f_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point3f_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point3f_toVector(self)

    def back(self):
        return _VisusKernelPy.Point3f_back(self)

    def toPoint2(self):
        return _VisusKernelPy.Point3f_toPoint2(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3f_module2(self)

    def module(self):
        return _VisusKernelPy.Point3f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3f_inv(self)

    def innerProduct(self):
        return _VisusKernelPy.Point3f_innerProduct(self)

    def __pos__(self):
        return _VisusKernelPy.Point3f___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3f___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3f_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point3f_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3f___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point3f_set(self, i, value)

    def cross(self, v):
        return _VisusKernelPy.Point3f_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3f_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3f_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3f_smallest(self)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.Point3f_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.Point3f_max(a, b)

    def __lt__(self, b):
        return _VisusKernelPy.Point3f___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3f___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3f___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3f___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3f

# Register Point3f in _VisusKernelPy:
_VisusKernelPy.Point3f_swigregister(Point3f)

def Point3f_fromString(value):
    return _VisusKernelPy.Point3f_fromString(value)

def Point3f_one(pdim):
    return _VisusKernelPy.Point3f_one(pdim)

def Point3f_min(a, b):
    return _VisusKernelPy.Point3f_min(a, b)

def Point3f_max(a, b):
    return _VisusKernelPy.Point3f_max(a, b)

class Point3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point3d_x_get, _VisusKernelPy.Point3d_x_set)
    y = property(_VisusKernelPy.Point3d_y_get, _VisusKernelPy.Point3d_y_set)
    z = property(_VisusKernelPy.Point3d_z_get, _VisusKernelPy.Point3d_z_set)

    def __init__(self, *args):
        _VisusKernelPy.Point3d_swiginit(self, _VisusKernelPy.new_Point3d(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point3d_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point3d_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point3d_toVector(self)

    def back(self):
        return _VisusKernelPy.Point3d_back(self)

    def toPoint2(self):
        return _VisusKernelPy.Point3d_toPoint2(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3d_module2(self)

    def module(self):
        return _VisusKernelPy.Point3d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3d_inv(self)

    def innerProduct(self):
        return _VisusKernelPy.Point3d_innerProduct(self)

    def __pos__(self):
        return _VisusKernelPy.Point3d___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3d___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3d_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point3d_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3d___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point3d_set(self, i, value)

    def cross(self, v):
        return _VisusKernelPy.Point3d_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3d_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3d_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3d_smallest(self)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.Point3d_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.Point3d_max(a, b)

    def __lt__(self, b):
        return _VisusKernelPy.Point3d___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3d___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3d___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3d___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3d

# Register Point3d in _VisusKernelPy:
_VisusKernelPy.Point3d_swigregister(Point3d)

def Point3d_fromString(value):
    return _VisusKernelPy.Point3d_fromString(value)

def Point3d_one(pdim):
    return _VisusKernelPy.Point3d_one(pdim)

def Point3d_min(a, b):
    return _VisusKernelPy.Point3d_min(a, b)

def Point3d_max(a, b):
    return _VisusKernelPy.Point3d_max(a, b)

class Point4i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point4i_x_get, _VisusKernelPy.Point4i_x_set)
    y = property(_VisusKernelPy.Point4i_y_get, _VisusKernelPy.Point4i_y_set)
    z = property(_VisusKernelPy.Point4i_z_get, _VisusKernelPy.Point4i_z_set)
    w = property(_VisusKernelPy.Point4i_w_get, _VisusKernelPy.Point4i_w_set)

    def __init__(self, *args):
        _VisusKernelPy.Point4i_swiginit(self, _VisusKernelPy.new_Point4i(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point4i_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point4i_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point4i_toVector(self)

    def back(self):
        return _VisusKernelPy.Point4i_back(self)

    def toPoint3(self):
        return _VisusKernelPy.Point4i_toPoint3(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4i_module2(self)

    def module(self):
        return _VisusKernelPy.Point4i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4i_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4i___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4i_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point4i_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4i___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point4i_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point4i_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4i

# Register Point4i in _VisusKernelPy:
_VisusKernelPy.Point4i_swigregister(Point4i)

def Point4i_fromString(value):
    return _VisusKernelPy.Point4i_fromString(value)

def Point4i_one(pdim):
    return _VisusKernelPy.Point4i_one(pdim)

class Point4f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point4f_x_get, _VisusKernelPy.Point4f_x_set)
    y = property(_VisusKernelPy.Point4f_y_get, _VisusKernelPy.Point4f_y_set)
    z = property(_VisusKernelPy.Point4f_z_get, _VisusKernelPy.Point4f_z_set)
    w = property(_VisusKernelPy.Point4f_w_get, _VisusKernelPy.Point4f_w_set)

    def __init__(self, *args):
        _VisusKernelPy.Point4f_swiginit(self, _VisusKernelPy.new_Point4f(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point4f_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point4f_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point4f_toVector(self)

    def back(self):
        return _VisusKernelPy.Point4f_back(self)

    def toPoint3(self):
        return _VisusKernelPy.Point4f_toPoint3(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4f_module2(self)

    def module(self):
        return _VisusKernelPy.Point4f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4f_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4f___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4f_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point4f_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4f___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point4f_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point4f_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4f

# Register Point4f in _VisusKernelPy:
_VisusKernelPy.Point4f_swigregister(Point4f)

def Point4f_fromString(value):
    return _VisusKernelPy.Point4f_fromString(value)

def Point4f_one(pdim):
    return _VisusKernelPy.Point4f_one(pdim)

class Point4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Point4d_x_get, _VisusKernelPy.Point4d_x_set)
    y = property(_VisusKernelPy.Point4d_y_get, _VisusKernelPy.Point4d_y_set)
    z = property(_VisusKernelPy.Point4d_z_get, _VisusKernelPy.Point4d_z_set)
    w = property(_VisusKernelPy.Point4d_w_get, _VisusKernelPy.Point4d_w_set)

    def __init__(self, *args):
        _VisusKernelPy.Point4d_swiginit(self, _VisusKernelPy.new_Point4d(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Point4d_fromString(value)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.Point4d_one(pdim)

    def toVector(self):
        return _VisusKernelPy.Point4d_toVector(self)

    def back(self):
        return _VisusKernelPy.Point4d_back(self)

    def toPoint3(self):
        return _VisusKernelPy.Point4d_toPoint3(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4d_module2(self)

    def module(self):
        return _VisusKernelPy.Point4d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4d_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4d___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4d_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point4d_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4d___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point4d_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point4d_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4d

# Register Point4d in _VisusKernelPy:
_VisusKernelPy.Point4d_swigregister(Point4d)

def Point4d_fromString(value):
    return _VisusKernelPy.Point4d_fromString(value)

def Point4d_one(pdim):
    return _VisusKernelPy.Point4d_one(pdim)

class PointNd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.PointNd_swiginit(self, _VisusKernelPy.new_PointNd(*args))

    def getPointDim(self):
        return _VisusKernelPy.PointNd_getPointDim(self)

    def push_back(self, value):
        return _VisusKernelPy.PointNd_push_back(self, value)

    def pop_back(self):
        return _VisusKernelPy.PointNd_pop_back(self)

    def withoutBack(self):
        return _VisusKernelPy.PointNd_withoutBack(self)

    def back(self):
        return _VisusKernelPy.PointNd_back(self)

    def begin(self):
        return _VisusKernelPy.PointNd_begin(self)

    def end(self):
        return _VisusKernelPy.PointNd_end(self)

    def setPointDim(self, new_pdim, default_value=0.0):
        return _VisusKernelPy.PointNd_setPointDim(self, new_pdim, default_value)

    def get(self, *args):
        return _VisusKernelPy.PointNd_get(self, *args)

    def __ne__(self, other):
        return _VisusKernelPy.PointNd___ne__(self, other)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.PointNd_dropHomogeneousCoordinate(self)

    @staticmethod
    def zero(pdim):
        return _VisusKernelPy.PointNd_zero(pdim)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.PointNd_one(pdim)

    def toVector(self):
        return _VisusKernelPy.PointNd_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNd_valid(self)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNd___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNd___getitem_ref__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.PointNd_set(self, i, value)

    def __neg__(self):
        return _VisusKernelPy.PointNd___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNd___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNd___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNd___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNd___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNd___imul__(self, s)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.PointNd_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.PointNd_max(a, b)

    @staticmethod
    def clamp(v, a, b):
        return _VisusKernelPy.PointNd_clamp(v, a, b)

    def module2(self):
        return _VisusKernelPy.PointNd_module2(self)

    def module(self):
        return _VisusKernelPy.PointNd_module(self)

    def distance(self, p):
        return _VisusKernelPy.PointNd_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.PointNd_normalized(self)

    def abs(self):
        return _VisusKernelPy.PointNd_abs(self)

    def inv(self):
        return _VisusKernelPy.PointNd_inv(self)

    def min_element_index(self):
        return _VisusKernelPy.PointNd_min_element_index(self)

    def max_element_index(self):
        return _VisusKernelPy.PointNd_max_element_index(self)

    def checkAllEqual(self, a, b):
        return _VisusKernelPy.PointNd_checkAllEqual(self, a, b)

    def checkAllLess(self, a, b):
        return _VisusKernelPy.PointNd_checkAllLess(self, a, b)

    def checkAllLessEqual(self, a, b):
        return _VisusKernelPy.PointNd_checkAllLessEqual(self, a, b)

    def checkAllGreater(self, a, b):
        return _VisusKernelPy.PointNd_checkAllGreater(self, a, b)

    def checkAllGreaterEqual(self, a, b):
        return _VisusKernelPy.PointNd_checkAllGreaterEqual(self, a, b)

    def __eq__(self, b):
        return _VisusKernelPy.PointNd___eq__(self, b)

    def __lt__(self, b):
        return _VisusKernelPy.PointNd___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNd___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNd___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNd___ge__(self, b)

    def dot(self, other):
        return _VisusKernelPy.PointNd_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNd_dotProduct(self, other)

    def stride(self):
        return _VisusKernelPy.PointNd_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNd_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNd_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNd_innerProduct(self)

    def toPoint2(self):
        return _VisusKernelPy.PointNd_toPoint2(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNd_toPoint3(self)

    def toPoint4(self):
        return _VisusKernelPy.PointNd_toPoint4(self)

    @staticmethod
    def fromString(src):
        return _VisusKernelPy.PointNd_fromString(src)

    def toString(self, *args):
        return _VisusKernelPy.PointNd_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNd

# Register PointNd in _VisusKernelPy:
_VisusKernelPy.PointNd_swigregister(PointNd)

def PointNd_zero(pdim):
    return _VisusKernelPy.PointNd_zero(pdim)

def PointNd_one(pdim):
    return _VisusKernelPy.PointNd_one(pdim)

def PointNd_min(a, b):
    return _VisusKernelPy.PointNd_min(a, b)

def PointNd_max(a, b):
    return _VisusKernelPy.PointNd_max(a, b)

def PointNd_clamp(v, a, b):
    return _VisusKernelPy.PointNd_clamp(v, a, b)

def PointNd_fromString(src):
    return _VisusKernelPy.PointNd_fromString(src)

class PointNi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.PointNi_swiginit(self, _VisusKernelPy.new_PointNi(*args))

    def getPointDim(self):
        return _VisusKernelPy.PointNi_getPointDim(self)

    def push_back(self, value):
        return _VisusKernelPy.PointNi_push_back(self, value)

    def pop_back(self):
        return _VisusKernelPy.PointNi_pop_back(self)

    def withoutBack(self):
        return _VisusKernelPy.PointNi_withoutBack(self)

    def back(self):
        return _VisusKernelPy.PointNi_back(self)

    def begin(self):
        return _VisusKernelPy.PointNi_begin(self)

    def end(self):
        return _VisusKernelPy.PointNi_end(self)

    def setPointDim(self, new_pdim, default_value=0.0):
        return _VisusKernelPy.PointNi_setPointDim(self, new_pdim, default_value)

    def get(self, *args):
        return _VisusKernelPy.PointNi_get(self, *args)

    def __ne__(self, other):
        return _VisusKernelPy.PointNi___ne__(self, other)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.PointNi_dropHomogeneousCoordinate(self)

    @staticmethod
    def zero(pdim):
        return _VisusKernelPy.PointNi_zero(pdim)

    @staticmethod
    def one(pdim):
        return _VisusKernelPy.PointNi_one(pdim)

    def toVector(self):
        return _VisusKernelPy.PointNi_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNi_valid(self)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNi___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNi___getitem_ref__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.PointNi_set(self, i, value)

    def __neg__(self):
        return _VisusKernelPy.PointNi___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNi___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNi___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNi___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNi___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNi___imul__(self, s)

    @staticmethod
    def min(a, b):
        return _VisusKernelPy.PointNi_min(a, b)

    @staticmethod
    def max(a, b):
        return _VisusKernelPy.PointNi_max(a, b)

    @staticmethod
    def clamp(v, a, b):
        return _VisusKernelPy.PointNi_clamp(v, a, b)

    def module2(self):
        return _VisusKernelPy.PointNi_module2(self)

    def module(self):
        return _VisusKernelPy.PointNi_module(self)

    def distance(self, p):
        return _VisusKernelPy.PointNi_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.PointNi_normalized(self)

    def abs(self):
        return _VisusKernelPy.PointNi_abs(self)

    def inv(self):
        return _VisusKernelPy.PointNi_inv(self)

    def min_element_index(self):
        return _VisusKernelPy.PointNi_min_element_index(self)

    def max_element_index(self):
        return _VisusKernelPy.PointNi_max_element_index(self)

    def checkAllEqual(self, a, b):
        return _VisusKernelPy.PointNi_checkAllEqual(self, a, b)

    def checkAllLess(self, a, b):
        return _VisusKernelPy.PointNi_checkAllLess(self, a, b)

    def checkAllLessEqual(self, a, b):
        return _VisusKernelPy.PointNi_checkAllLessEqual(self, a, b)

    def checkAllGreater(self, a, b):
        return _VisusKernelPy.PointNi_checkAllGreater(self, a, b)

    def checkAllGreaterEqual(self, a, b):
        return _VisusKernelPy.PointNi_checkAllGreaterEqual(self, a, b)

    def __eq__(self, b):
        return _VisusKernelPy.PointNi___eq__(self, b)

    def __lt__(self, b):
        return _VisusKernelPy.PointNi___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNi___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNi___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNi___ge__(self, b)

    def dot(self, other):
        return _VisusKernelPy.PointNi_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNi_dotProduct(self, other)

    def stride(self):
        return _VisusKernelPy.PointNi_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNi_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNi_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNi_innerProduct(self)

    def toPoint2(self):
        return _VisusKernelPy.PointNi_toPoint2(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNi_toPoint3(self)

    def toPoint4(self):
        return _VisusKernelPy.PointNi_toPoint4(self)

    @staticmethod
    def fromString(src):
        return _VisusKernelPy.PointNi_fromString(src)

    def toString(self, *args):
        return _VisusKernelPy.PointNi_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNi

# Register PointNi in _VisusKernelPy:
_VisusKernelPy.PointNi_swigregister(PointNi)

def PointNi_zero(pdim):
    return _VisusKernelPy.PointNi_zero(pdim)

def PointNi_one(pdim):
    return _VisusKernelPy.PointNi_one(pdim)

def PointNi_min(a, b):
    return _VisusKernelPy.PointNi_min(a, b)

def PointNi_max(a, b):
    return _VisusKernelPy.PointNi_max(a, b)

def PointNi_clamp(v, a, b):
    return _VisusKernelPy.PointNi_clamp(v, a, b)

def PointNi_fromString(src):
    return _VisusKernelPy.PointNi_fromString(src)

class Box3d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p1 = property(_VisusKernelPy.Box3d_p1_get, _VisusKernelPy.Box3d_p1_set)
    p2 = property(_VisusKernelPy.Box3d_p2_get, _VisusKernelPy.Box3d_p2_set)

    def __init__(self, *args):
        _VisusKernelPy.Box3d_swiginit(self, _VisusKernelPy.new_Box3d(*args))

    @staticmethod
    def invalid():
        return _VisusKernelPy.Box3d_invalid()

    def valid(self):
        return _VisusKernelPy.Box3d_valid(self)

    def center(self):
        return _VisusKernelPy.Box3d_center(self)

    def size(self):
        return _VisusKernelPy.Box3d_size(self)

    def middle(self):
        return _VisusKernelPy.Box3d_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.Box3d_addPoint(self, p)

    def getPoint(self, alpha, beta, gamma):
        return _VisusKernelPy.Box3d_getPoint(self, alpha, beta, gamma)

    def containsPoint(self, p):
        return _VisusKernelPy.Box3d_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.Box3d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Box3d___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.Box3d_intersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.Box3d_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.Box3d_getUnion(self, b)

    def toString(self):
        return _VisusKernelPy.Box3d_toString(self)

    def toBoxNd(self):
        return _VisusKernelPy.Box3d_toBoxNd(self)

    def toBoxNi(self):
        return _VisusKernelPy.Box3d_toBoxNi(self)

    @staticmethod
    def fromBoxNi(src):
        return _VisusKernelPy.Box3d_fromBoxNi(src)

    @staticmethod
    def fromBoxNd(src):
        return _VisusKernelPy.Box3d_fromBoxNd(src)
    __swig_destroy__ = _VisusKernelPy.delete_Box3d

# Register Box3d in _VisusKernelPy:
_VisusKernelPy.Box3d_swigregister(Box3d)

def Box3d_invalid():
    return _VisusKernelPy.Box3d_invalid()

def Box3d_fromBoxNi(src):
    return _VisusKernelPy.Box3d_fromBoxNi(src)

def Box3d_fromBoxNd(src):
    return _VisusKernelPy.Box3d_fromBoxNd(src)

class BoxNd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p1 = property(_VisusKernelPy.BoxNd_p1_get, _VisusKernelPy.BoxNd_p1_set)
    p2 = property(_VisusKernelPy.BoxNd_p2_get, _VisusKernelPy.BoxNd_p2_set)

    def __init__(self, *args):
        _VisusKernelPy.BoxNd_swiginit(self, _VisusKernelPy.new_BoxNd(*args))

    def getPointDim(self):
        return _VisusKernelPy.BoxNd_getPointDim(self)

    def setPointDim(self, pdim):
        return _VisusKernelPy.BoxNd_setPointDim(self, pdim)

    def withPointDim(self, pdim):
        return _VisusKernelPy.BoxNd_withPointDim(self, pdim)

    def withoutBack(self):
        return _VisusKernelPy.BoxNd_withoutBack(self)

    @staticmethod
    def invalid():
        return _VisusKernelPy.BoxNd_invalid()

    def valid(self):
        return _VisusKernelPy.BoxNd_valid(self)

    def isFullDim(self):
        return _VisusKernelPy.BoxNd_isFullDim(self)

    def center(self):
        return _VisusKernelPy.BoxNd_center(self)

    def size(self):
        return _VisusKernelPy.BoxNd_size(self)

    def maxsize(self):
        return _VisusKernelPy.BoxNd_maxsize(self)

    def maxsize_index(self):
        return _VisusKernelPy.BoxNd_maxsize_index(self)

    def minsize(self):
        return _VisusKernelPy.BoxNd_minsize(self)

    def minsize_index(self):
        return _VisusKernelPy.BoxNd_minsize_index(self)

    def middle(self):
        return _VisusKernelPy.BoxNd_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.BoxNd_addPoint(self, p)

    def toBox3(self):
        return _VisusKernelPy.BoxNd_toBox3(self)

    def containsPoint(self, p):
        return _VisusKernelPy.BoxNd_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.BoxNd___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.BoxNd___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.BoxNd_intersect(self, other)

    def strictIntersect(self, other):
        return _VisusKernelPy.BoxNd_strictIntersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.BoxNd_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.BoxNd_getUnion(self, b)

    def containsBox(self, other):
        return _VisusKernelPy.BoxNd_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.BoxNd_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _VisusKernelPy.BoxNd_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _VisusKernelPy.BoxNd_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _VisusKernelPy.BoxNd_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _VisusKernelPy.BoxNd_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _VisusKernelPy.BoxNd_translate(self, vt)

    def getPoints(self):
        return _VisusKernelPy.BoxNd_getPoints(self)

    def getAlphaPoint(self, alpha):
        return _VisusKernelPy.BoxNd_getAlphaPoint(self, alpha)

    def getPlanes(self):
        return _VisusKernelPy.BoxNd_getPlanes(self)

    @staticmethod
    def fromString(value, bInterleave=True):
        return _VisusKernelPy.BoxNd_fromString(value, bInterleave)

    def toString(self, bInterleave=True):
        return _VisusKernelPy.BoxNd_toString(self, bInterleave)

    def toOldFormatString(self):
        return _VisusKernelPy.BoxNd_toOldFormatString(self)

    @staticmethod
    def parseFromOldFormatString(pdim, src):
        return _VisusKernelPy.BoxNd_parseFromOldFormatString(pdim, src)

    def write(self, ar):
        return _VisusKernelPy.BoxNd_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.BoxNd_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_BoxNd

# Register BoxNd in _VisusKernelPy:
_VisusKernelPy.BoxNd_swigregister(BoxNd)

def BoxNd_invalid():
    return _VisusKernelPy.BoxNd_invalid()

def BoxNd_fromString(value, bInterleave=True):
    return _VisusKernelPy.BoxNd_fromString(value, bInterleave)

def BoxNd_parseFromOldFormatString(pdim, src):
    return _VisusKernelPy.BoxNd_parseFromOldFormatString(pdim, src)

class BoxNi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p1 = property(_VisusKernelPy.BoxNi_p1_get, _VisusKernelPy.BoxNi_p1_set)
    p2 = property(_VisusKernelPy.BoxNi_p2_get, _VisusKernelPy.BoxNi_p2_set)

    def __init__(self, *args):
        _VisusKernelPy.BoxNi_swiginit(self, _VisusKernelPy.new_BoxNi(*args))

    def getPointDim(self):
        return _VisusKernelPy.BoxNi_getPointDim(self)

    def setPointDim(self, pdim):
        return _VisusKernelPy.BoxNi_setPointDim(self, pdim)

    def withPointDim(self, pdim):
        return _VisusKernelPy.BoxNi_withPointDim(self, pdim)

    def withoutBack(self):
        return _VisusKernelPy.BoxNi_withoutBack(self)

    @staticmethod
    def invalid():
        return _VisusKernelPy.BoxNi_invalid()

    def valid(self):
        return _VisusKernelPy.BoxNi_valid(self)

    def isFullDim(self):
        return _VisusKernelPy.BoxNi_isFullDim(self)

    def center(self):
        return _VisusKernelPy.BoxNi_center(self)

    def size(self):
        return _VisusKernelPy.BoxNi_size(self)

    def maxsize(self):
        return _VisusKernelPy.BoxNi_maxsize(self)

    def maxsize_index(self):
        return _VisusKernelPy.BoxNi_maxsize_index(self)

    def minsize(self):
        return _VisusKernelPy.BoxNi_minsize(self)

    def minsize_index(self):
        return _VisusKernelPy.BoxNi_minsize_index(self)

    def middle(self):
        return _VisusKernelPy.BoxNi_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.BoxNi_addPoint(self, p)

    def toBox3(self):
        return _VisusKernelPy.BoxNi_toBox3(self)

    def containsPoint(self, p):
        return _VisusKernelPy.BoxNi_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.BoxNi___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.BoxNi___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.BoxNi_intersect(self, other)

    def strictIntersect(self, other):
        return _VisusKernelPy.BoxNi_strictIntersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.BoxNi_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.BoxNi_getUnion(self, b)

    def containsBox(self, other):
        return _VisusKernelPy.BoxNi_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.BoxNi_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _VisusKernelPy.BoxNi_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _VisusKernelPy.BoxNi_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _VisusKernelPy.BoxNi_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _VisusKernelPy.BoxNi_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _VisusKernelPy.BoxNi_translate(self, vt)

    def getPoints(self):
        return _VisusKernelPy.BoxNi_getPoints(self)

    def getAlphaPoint(self, alpha):
        return _VisusKernelPy.BoxNi_getAlphaPoint(self, alpha)

    def getPlanes(self):
        return _VisusKernelPy.BoxNi_getPlanes(self)

    @staticmethod
    def fromString(value, bInterleave=True):
        return _VisusKernelPy.BoxNi_fromString(value, bInterleave)

    def toString(self, bInterleave=True):
        return _VisusKernelPy.BoxNi_toString(self, bInterleave)

    def toOldFormatString(self):
        return _VisusKernelPy.BoxNi_toOldFormatString(self)

    @staticmethod
    def parseFromOldFormatString(pdim, src):
        return _VisusKernelPy.BoxNi_parseFromOldFormatString(pdim, src)

    def write(self, ar):
        return _VisusKernelPy.BoxNi_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.BoxNi_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_BoxNi

# Register BoxNi in _VisusKernelPy:
_VisusKernelPy.BoxNi_swigregister(BoxNi)

def BoxNi_invalid():
    return _VisusKernelPy.BoxNi_invalid()

def BoxNi_fromString(value, bInterleave=True):
    return _VisusKernelPy.BoxNi_fromString(value, bInterleave)

def BoxNi_parseFromOldFormatString(pdim, src):
    return _VisusKernelPy.BoxNi_parseFromOldFormatString(pdim, src)

class VectorBoxNi(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorBoxNi_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorBoxNi___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorBoxNi___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorBoxNi___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorBoxNi___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorBoxNi___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorBoxNi___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorBoxNi___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorBoxNi___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorBoxNi___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorBoxNi_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorBoxNi_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorBoxNi_empty(self)

    def size(self):
        return _VisusKernelPy.VectorBoxNi_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorBoxNi_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorBoxNi_begin(self)

    def end(self):
        return _VisusKernelPy.VectorBoxNi_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorBoxNi_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorBoxNi_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorBoxNi_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorBoxNi_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorBoxNi_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorBoxNi_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorBoxNi_swiginit(self, _VisusKernelPy.new_VectorBoxNi(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorBoxNi_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorBoxNi_front(self)

    def back(self):
        return _VisusKernelPy.VectorBoxNi_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorBoxNi_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorBoxNi_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorBoxNi_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorBoxNi_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorBoxNi_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorBoxNi

# Register VectorBoxNi in _VisusKernelPy:
_VisusKernelPy.VectorBoxNi_swigregister(VectorBoxNi)

class Quaternion(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    w = property(_VisusKernelPy.Quaternion_w_get, _VisusKernelPy.Quaternion_w_set)
    x = property(_VisusKernelPy.Quaternion_x_get, _VisusKernelPy.Quaternion_x_set)
    y = property(_VisusKernelPy.Quaternion_y_get, _VisusKernelPy.Quaternion_y_set)
    z = property(_VisusKernelPy.Quaternion_z_get, _VisusKernelPy.Quaternion_z_set)

    def __init__(self, *args):
        _VisusKernelPy.Quaternion_swiginit(self, _VisusKernelPy.new_Quaternion(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Quaternion_fromString(value)

    def toPoint4d(self):
        return _VisusKernelPy.Quaternion_toPoint4d(self)

    def isNull(self):
        return _VisusKernelPy.Quaternion_isNull(self)

    def isIdentity(self):
        return _VisusKernelPy.Quaternion_isIdentity(self)

    @staticmethod
    def identity():
        return _VisusKernelPy.Quaternion_identity()

    @staticmethod
    def null():
        return _VisusKernelPy.Quaternion_null()

    def toString(self):
        return _VisusKernelPy.Quaternion_toString(self)

    def getAxis(self):
        return _VisusKernelPy.Quaternion_getAxis(self)

    def getAngle(self):
        return _VisusKernelPy.Quaternion_getAngle(self)

    def __eq__(self, other):
        return _VisusKernelPy.Quaternion___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Quaternion___ne__(self, other)

    def __imul__(self, q2):
        return _VisusKernelPy.Quaternion___imul__(self, q2)

    @staticmethod
    def fromEulerAngles(roll, pitch, yaw):
        return _VisusKernelPy.Quaternion_fromEulerAngles(roll, pitch, yaw)

    def toEulerAngles(self):
        return _VisusKernelPy.Quaternion_toEulerAngles(self)

    def conjugate(self):
        return _VisusKernelPy.Quaternion_conjugate(self)

    def __mul__(self, *args):
        return _VisusKernelPy.Quaternion___mul__(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_Quaternion

# Register Quaternion in _VisusKernelPy:
_VisusKernelPy.Quaternion_swigregister(Quaternion)

def Quaternion_fromString(value):
    return _VisusKernelPy.Quaternion_fromString(value)

def Quaternion_identity():
    return _VisusKernelPy.Quaternion_identity()

def Quaternion_null():
    return _VisusKernelPy.Quaternion_null()

def Quaternion_fromEulerAngles(roll, pitch, yaw):
    return _VisusKernelPy.Quaternion_fromEulerAngles(roll, pitch, yaw)

class Matrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.Matrix_swiginit(self, _VisusKernelPy.new_Matrix(*args))

    @staticmethod
    def fromString(*args):
        return _VisusKernelPy.Matrix_fromString(*args)
    __swig_destroy__ = _VisusKernelPy.delete_Matrix

    def getSpaceDim(self):
        return _VisusKernelPy.Matrix_getSpaceDim(self)

    def setSpaceDim(self, dim):
        return _VisusKernelPy.Matrix_setSpaceDim(self, dim)

    def withSpaceDim(self, value):
        return _VisusKernelPy.Matrix_withSpaceDim(self, value)

    def valid(self):
        return _VisusKernelPy.Matrix_valid(self)

    def isIdentity(self):
        return _VisusKernelPy.Matrix_isIdentity(self)

    def isZero(self):
        return _VisusKernelPy.Matrix_isZero(self)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Matrix___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Matrix___getitem__(self, i)

    def get(self, r, c):
        return _VisusKernelPy.Matrix_get(self, r, c)

    def __call__(self, r, c):
        return _VisusKernelPy.Matrix___call__(self, r, c)

    def getRow(self, r):
        return _VisusKernelPy.Matrix_getRow(self, r)

    def getCol(self, c):
        return _VisusKernelPy.Matrix_getCol(self, c)

    def assign(self, other):
        return _VisusKernelPy.Matrix_assign(self, other)

    def __eq__(self, other):
        return _VisusKernelPy.Matrix___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Matrix___ne__(self, other)

    @staticmethod
    def zero(dim):
        return _VisusKernelPy.Matrix_zero(dim)

    @staticmethod
    def identity(dim):
        return _VisusKernelPy.Matrix_identity(dim)

    def __add__(self, b):
        return _VisusKernelPy.Matrix___add__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Matrix___sub__(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Matrix___mul__(self, b)

    def __imul__(self, b):
        return _VisusKernelPy.Matrix___imul__(self, b)

    def transpose(self):
        return _VisusKernelPy.Matrix_transpose(self)

    def determinant(self):
        return _VisusKernelPy.Matrix_determinant(self)

    def invert(self):
        return _VisusKernelPy.Matrix_invert(self)

    @staticmethod
    def translate(*args):
        return _VisusKernelPy.Matrix_translate(*args)

    @staticmethod
    def scale(*args):
        return _VisusKernelPy.Matrix_scale(*args)

    @staticmethod
    def scaleAroundAxis(axis, k):
        return _VisusKernelPy.Matrix_scaleAroundAxis(axis, k)

    @staticmethod
    def scaleAroundCenter(*args):
        return _VisusKernelPy.Matrix_scaleAroundCenter(*args)

    @staticmethod
    def nonZeroScale(vs):
        return _VisusKernelPy.Matrix_nonZeroScale(vs)

    @staticmethod
    def invNonZeroScale(vs):
        return _VisusKernelPy.Matrix_invNonZeroScale(vs)

    def getDiagonal(self):
        return _VisusKernelPy.Matrix_getDiagonal(self)

    def isOnlyScale(self):
        return _VisusKernelPy.Matrix_isOnlyScale(self)

    @staticmethod
    def rotate(*args):
        return _VisusKernelPy.Matrix_rotate(*args)

    @staticmethod
    def rotateAroundAxis(axis, angle):
        return _VisusKernelPy.Matrix_rotateAroundAxis(axis, angle)

    @staticmethod
    def rotateAroundCenter(*args):
        return _VisusKernelPy.Matrix_rotateAroundCenter(*args)

    def toQuaternion(self):
        return _VisusKernelPy.Matrix_toQuaternion(self)

    @staticmethod
    def lookAt(eye, center, up):
        return _VisusKernelPy.Matrix_lookAt(eye, center, up)

    def getLookAt(self, pos, dir, vup):
        return _VisusKernelPy.Matrix_getLookAt(self, pos, dir, vup)

    @staticmethod
    def perspective(fovy, aspect, zNear, zFar):
        return _VisusKernelPy.Matrix_perspective(fovy, aspect, zNear, zFar)

    @staticmethod
    def frustum(left, right, bottom, top, nearZ, farZ):
        return _VisusKernelPy.Matrix_frustum(left, right, bottom, top, nearZ, farZ)

    @staticmethod
    def ortho(left, right, bottom, top, nearZ, farZ):
        return _VisusKernelPy.Matrix_ortho(left, right, bottom, top, nearZ, farZ)

    @staticmethod
    def viewport(x, y, width, height):
        return _VisusKernelPy.Matrix_viewport(x, y, width, height)

    @staticmethod
    def embed(axis, offset):
        return _VisusKernelPy.Matrix_embed(axis, offset)

    def submatrix(self, row, column):
        return _VisusKernelPy.Matrix_submatrix(self, row, column)

    def toString(self):
        return _VisusKernelPy.Matrix_toString(self)

    def toStringWithPrecision(self, precision=2):
        return _VisusKernelPy.Matrix_toStringWithPrecision(self, precision)

    def write(self, ar):
        return _VisusKernelPy.Matrix_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Matrix_read(self, ar)

# Register Matrix in _VisusKernelPy:
_VisusKernelPy.Matrix_swigregister(Matrix)

def Matrix_fromString(*args):
    return _VisusKernelPy.Matrix_fromString(*args)

def Matrix_zero(dim):
    return _VisusKernelPy.Matrix_zero(dim)

def Matrix_identity(dim):
    return _VisusKernelPy.Matrix_identity(dim)

def Matrix_translate(*args):
    return _VisusKernelPy.Matrix_translate(*args)

def Matrix_scale(*args):
    return _VisusKernelPy.Matrix_scale(*args)

def Matrix_scaleAroundAxis(axis, k):
    return _VisusKernelPy.Matrix_scaleAroundAxis(axis, k)

def Matrix_scaleAroundCenter(*args):
    return _VisusKernelPy.Matrix_scaleAroundCenter(*args)

def Matrix_nonZeroScale(vs):
    return _VisusKernelPy.Matrix_nonZeroScale(vs)

def Matrix_invNonZeroScale(vs):
    return _VisusKernelPy.Matrix_invNonZeroScale(vs)

def Matrix_rotate(*args):
    return _VisusKernelPy.Matrix_rotate(*args)

def Matrix_rotateAroundAxis(axis, angle):
    return _VisusKernelPy.Matrix_rotateAroundAxis(axis, angle)

def Matrix_rotateAroundCenter(*args):
    return _VisusKernelPy.Matrix_rotateAroundCenter(*args)

def Matrix_lookAt(eye, center, up):
    return _VisusKernelPy.Matrix_lookAt(eye, center, up)

def Matrix_perspective(fovy, aspect, zNear, zFar):
    return _VisusKernelPy.Matrix_perspective(fovy, aspect, zNear, zFar)

def Matrix_frustum(left, right, bottom, top, nearZ, farZ):
    return _VisusKernelPy.Matrix_frustum(left, right, bottom, top, nearZ, farZ)

def Matrix_ortho(left, right, bottom, top, nearZ, farZ):
    return _VisusKernelPy.Matrix_ortho(left, right, bottom, top, nearZ, farZ)

def Matrix_viewport(x, y, width, height):
    return _VisusKernelPy.Matrix_viewport(x, y, width, height)

def Matrix_embed(axis, offset):
    return _VisusKernelPy.Matrix_embed(axis, offset)

class QDUMatrixDecomposition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Q = property(_VisusKernelPy.QDUMatrixDecomposition_Q_get, _VisusKernelPy.QDUMatrixDecomposition_Q_set)
    D = property(_VisusKernelPy.QDUMatrixDecomposition_D_get, _VisusKernelPy.QDUMatrixDecomposition_D_set)
    U = property(_VisusKernelPy.QDUMatrixDecomposition_U_get, _VisusKernelPy.QDUMatrixDecomposition_U_set)

    def __init__(self, T):
        _VisusKernelPy.QDUMatrixDecomposition_swiginit(self, _VisusKernelPy.new_QDUMatrixDecomposition(T))
    __swig_destroy__ = _VisusKernelPy.delete_QDUMatrixDecomposition

# Register QDUMatrixDecomposition in _VisusKernelPy:
_VisusKernelPy.QDUMatrixDecomposition_swigregister(QDUMatrixDecomposition)

class TRSMatrixDecomposition(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    translate = property(_VisusKernelPy.TRSMatrixDecomposition_translate_get, _VisusKernelPy.TRSMatrixDecomposition_translate_set)
    rotate = property(_VisusKernelPy.TRSMatrixDecomposition_rotate_get, _VisusKernelPy.TRSMatrixDecomposition_rotate_set)
    scale = property(_VisusKernelPy.TRSMatrixDecomposition_scale_get, _VisusKernelPy.TRSMatrixDecomposition_scale_set)

    def __init__(self, *args):
        _VisusKernelPy.TRSMatrixDecomposition_swiginit(self, _VisusKernelPy.new_TRSMatrixDecomposition(*args))

    def toMatrix(self):
        return _VisusKernelPy.TRSMatrixDecomposition_toMatrix(self)
    __swig_destroy__ = _VisusKernelPy.delete_TRSMatrixDecomposition

# Register TRSMatrixDecomposition in _VisusKernelPy:
_VisusKernelPy.TRSMatrixDecomposition_swigregister(TRSMatrixDecomposition)

class MatrixMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_VisusKernelPy.MatrixMap_T_get, _VisusKernelPy.MatrixMap_T_set)
    Ti = property(_VisusKernelPy.MatrixMap_Ti_get, _VisusKernelPy.MatrixMap_Ti_set)

    def __init__(self, *args):
        _VisusKernelPy.MatrixMap_swiginit(self, _VisusKernelPy.new_MatrixMap(*args))

    def getSpaceDim(self):
        return _VisusKernelPy.MatrixMap_getSpaceDim(self)

    def setSpaceDim(self, value):
        return _VisusKernelPy.MatrixMap_setSpaceDim(self, value)

    def applyDirectMap(self, *args):
        return _VisusKernelPy.MatrixMap_applyDirectMap(self, *args)

    def applyInverseMap(self, *args):
        return _VisusKernelPy.MatrixMap_applyInverseMap(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_MatrixMap

# Register MatrixMap in _VisusKernelPy:
_VisusKernelPy.MatrixMap_swigregister(MatrixMap)

class Polygon2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    points = property(_VisusKernelPy.Polygon2d_points_get, _VisusKernelPy.Polygon2d_points_set)

    def __init__(self, *args):
        _VisusKernelPy.Polygon2d_swiginit(self, _VisusKernelPy.new_Polygon2d(*args))

    def valid(self):
        return _VisusKernelPy.Polygon2d_valid(self)

    def __eq__(self, q):
        return _VisusKernelPy.Polygon2d___eq__(self, q)

    def __ne__(self, q):
        return _VisusKernelPy.Polygon2d___ne__(self, q)

    def getBoundingBox(self):
        return _VisusKernelPy.Polygon2d_getBoundingBox(self)

    def translate(self, vt):
        return _VisusKernelPy.Polygon2d_translate(self, vt)

    def scale(self, vs):
        return _VisusKernelPy.Polygon2d_scale(self, vs)

    def centroid(self):
        return _VisusKernelPy.Polygon2d_centroid(self)

    def toString(self):
        return _VisusKernelPy.Polygon2d_toString(self)

    def area(self):
        return _VisusKernelPy.Polygon2d_area(self)

    def clip(self, r):
        return _VisusKernelPy.Polygon2d_clip(self, r)
    __swig_destroy__ = _VisusKernelPy.delete_Polygon2d

# Register Polygon2d in _VisusKernelPy:
_VisusKernelPy.Polygon2d_swigregister(Polygon2d)

class Quad(Polygon2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.Quad_swiginit(self, _VisusKernelPy.new_Quad(*args))

    def centroid(self):
        return _VisusKernelPy.Quad_centroid(self)

    def getPoint(self, index):
        return _VisusKernelPy.Quad_getPoint(self, index)

    def translate(self, vt):
        return _VisusKernelPy.Quad_translate(self, vt)

    @staticmethod
    def computeBoundingBox(quads):
        return _VisusKernelPy.Quad_computeBoundingBox(quads)

    @staticmethod
    def findQuadHomography(dst, src):
        return _VisusKernelPy.Quad_findQuadHomography(dst, src)

    @staticmethod
    def intersection(A, B):
        return _VisusKernelPy.Quad_intersection(A, B)

    def isConvex(self):
        return _VisusKernelPy.Quad_isConvex(self)

    def wrongAngles(self):
        return _VisusKernelPy.Quad_wrongAngles(self)

    def wrongScale(self, width, height):
        return _VisusKernelPy.Quad_wrongScale(self, width, height)

    def toString(self, *args):
        return _VisusKernelPy.Quad_toString(self, *args)

    def toString10(self, *args):
        return _VisusKernelPy.Quad_toString10(self, *args)

    @staticmethod
    def fromString(s):
        return _VisusKernelPy.Quad_fromString(s)
    __swig_destroy__ = _VisusKernelPy.delete_Quad

# Register Quad in _VisusKernelPy:
_VisusKernelPy.Quad_swigregister(Quad)

def Quad_computeBoundingBox(quads):
    return _VisusKernelPy.Quad_computeBoundingBox(quads)

def Quad_findQuadHomography(dst, src):
    return _VisusKernelPy.Quad_findQuadHomography(dst, src)

def Quad_intersection(A, B):
    return _VisusKernelPy.Quad_intersection(A, B)

def Quad_fromString(s):
    return _VisusKernelPy.Quad_fromString(s)

class Position(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.Position_swiginit(self, _VisusKernelPy.new_Position(*args))

    @staticmethod
    def invalid():
        return _VisusKernelPy.Position_invalid()

    def prependTransformation(self, T):
        return _VisusKernelPy.Position_prependTransformation(self, T)

    def getPointDim(self):
        return _VisusKernelPy.Position_getPointDim(self)

    def setPointDim(self, value):
        return _VisusKernelPy.Position_setPointDim(self, value)

    def getSpaceDim(self):
        return _VisusKernelPy.Position_getSpaceDim(self)

    def setSpaceDim(self, value):
        return _VisusKernelPy.Position_setSpaceDim(self, value)

    @staticmethod
    def computeTransformation(*args):
        return _VisusKernelPy.Position_computeTransformation(*args)

    def __eq__(self, other):
        return _VisusKernelPy.Position___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Position___ne__(self, other)

    def valid(self):
        return _VisusKernelPy.Position_valid(self)

    def getTransformation(self):
        return _VisusKernelPy.Position_getTransformation(self)

    def getBoxNd(self):
        return _VisusKernelPy.Position_getBoxNd(self)

    def getBoxNi(self):
        return _VisusKernelPy.Position_getBoxNi(self)

    def computeVolume(self, *args):
        return _VisusKernelPy.Position_computeVolume(self, *args)

    def getCentroid(self):
        return _VisusKernelPy.Position_getCentroid(self)

    def getPoints(self):
        return _VisusKernelPy.Position_getPoints(self)

    def toAxisAlignedBox(self):
        return _VisusKernelPy.Position_toAxisAlignedBox(self)

    def toDiscreteAxisAlignedBox(self):
        return _VisusKernelPy.Position_toDiscreteAxisAlignedBox(self)

    @staticmethod
    def shrink(dst_box, map, position):
        return _VisusKernelPy.Position_shrink(dst_box, map, position)

    def write(self, ar):
        return _VisusKernelPy.Position_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Position_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Position

# Register Position in _VisusKernelPy:
_VisusKernelPy.Position_swigregister(Position)

def Position_invalid():
    return _VisusKernelPy.Position_invalid()

def Position_computeTransformation(*args):
    return _VisusKernelPy.Position_computeTransformation(*args)

def Position_shrink(dst_box, map, position):
    return _VisusKernelPy.Position_shrink(dst_box, map, position)

class VectorPoint2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorPoint2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorPoint2d___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorPoint2d___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorPoint2d___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorPoint2d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorPoint2d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorPoint2d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorPoint2d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorPoint2d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorPoint2d___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorPoint2d_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorPoint2d_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorPoint2d_empty(self)

    def size(self):
        return _VisusKernelPy.VectorPoint2d_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorPoint2d_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorPoint2d_begin(self)

    def end(self):
        return _VisusKernelPy.VectorPoint2d_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorPoint2d_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorPoint2d_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorPoint2d_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorPoint2d_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorPoint2d_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorPoint2d_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorPoint2d_swiginit(self, _VisusKernelPy.new_VectorPoint2d(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorPoint2d_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorPoint2d_front(self)

    def back(self):
        return _VisusKernelPy.VectorPoint2d_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorPoint2d_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorPoint2d_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorPoint2d_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorPoint2d_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorPoint2d_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorPoint2d

# Register VectorPoint2d in _VisusKernelPy:
_VisusKernelPy.VectorPoint2d_swigregister(VectorPoint2d)

class Ray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    origin = property(_VisusKernelPy.Ray_origin_get, _VisusKernelPy.Ray_origin_set)
    direction = property(_VisusKernelPy.Ray_direction_get, _VisusKernelPy.Ray_direction_set)

    def __init__(self, *args):
        _VisusKernelPy.Ray_swiginit(self, _VisusKernelPy.new_Ray(*args))

    @staticmethod
    def fromTwoPoints(A, B):
        return _VisusKernelPy.Ray_fromTwoPoints(A, B)

    def getPointDim(self):
        return _VisusKernelPy.Ray_getPointDim(self)

    def valid(self):
        return _VisusKernelPy.Ray_valid(self)

    def getOrigin(self):
        return _VisusKernelPy.Ray_getOrigin(self)

    def getDirection(self):
        return _VisusKernelPy.Ray_getDirection(self)

    def getPoint(self, alpha):
        return _VisusKernelPy.Ray_getPoint(self, alpha)

    def transformByMatrix(self, M):
        return _VisusKernelPy.Ray_transformByMatrix(self, M)

    def findIntersectionOnZeroPlane(self):
        return _VisusKernelPy.Ray_findIntersectionOnZeroPlane(self)
    __swig_destroy__ = _VisusKernelPy.delete_Ray

# Register Ray in _VisusKernelPy:
_VisusKernelPy.Ray_swigregister(Ray)

def Ray_fromTwoPoints(A, B):
    return _VisusKernelPy.Ray_fromTwoPoints(A, B)

class RayBoxIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_VisusKernelPy.RayBoxIntersection_valid_get, _VisusKernelPy.RayBoxIntersection_valid_set)
    tmin = property(_VisusKernelPy.RayBoxIntersection_tmin_get, _VisusKernelPy.RayBoxIntersection_tmin_set)
    tmax = property(_VisusKernelPy.RayBoxIntersection_tmax_get, _VisusKernelPy.RayBoxIntersection_tmax_set)

    def __init__(self, ray, box):
        _VisusKernelPy.RayBoxIntersection_swiginit(self, _VisusKernelPy.new_RayBoxIntersection(ray, box))
    __swig_destroy__ = _VisusKernelPy.delete_RayBoxIntersection

# Register RayBoxIntersection in _VisusKernelPy:
_VisusKernelPy.RayBoxIntersection_swigregister(RayBoxIntersection)

class RayPlaneIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_VisusKernelPy.RayPlaneIntersection_valid_get, _VisusKernelPy.RayPlaneIntersection_valid_set)
    t = property(_VisusKernelPy.RayPlaneIntersection_t_get, _VisusKernelPy.RayPlaneIntersection_t_set)
    point = property(_VisusKernelPy.RayPlaneIntersection_point_get, _VisusKernelPy.RayPlaneIntersection_point_set)

    def __init__(self, ray, plane):
        _VisusKernelPy.RayPlaneIntersection_swiginit(self, _VisusKernelPy.new_RayPlaneIntersection(ray, plane))
    __swig_destroy__ = _VisusKernelPy.delete_RayPlaneIntersection

# Register RayPlaneIntersection in _VisusKernelPy:
_VisusKernelPy.RayPlaneIntersection_swigregister(RayPlaneIntersection)

class RaySphereIntersection(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    valid = property(_VisusKernelPy.RaySphereIntersection_valid_get, _VisusKernelPy.RaySphereIntersection_valid_set)
    tmin = property(_VisusKernelPy.RaySphereIntersection_tmin_get, _VisusKernelPy.RaySphereIntersection_tmin_set)
    tmax = property(_VisusKernelPy.RaySphereIntersection_tmax_get, _VisusKernelPy.RaySphereIntersection_tmax_set)

    def __init__(self, ray, sp):
        _VisusKernelPy.RaySphereIntersection_swiginit(self, _VisusKernelPy.new_RaySphereIntersection(ray, sp))
    __swig_destroy__ = _VisusKernelPy.delete_RaySphereIntersection

# Register RaySphereIntersection in _VisusKernelPy:
_VisusKernelPy.RaySphereIntersection_swigregister(RaySphereIntersection)

class RayPointDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_VisusKernelPy.RayPointDistance_distance_get, _VisusKernelPy.RayPointDistance_distance_set)
    closest_ray_point = property(_VisusKernelPy.RayPointDistance_closest_ray_point_get, _VisusKernelPy.RayPointDistance_closest_ray_point_set)

    def __init__(self, ray, point):
        _VisusKernelPy.RayPointDistance_swiginit(self, _VisusKernelPy.new_RayPointDistance(ray, point))
    __swig_destroy__ = _VisusKernelPy.delete_RayPointDistance

# Register RayPointDistance in _VisusKernelPy:
_VisusKernelPy.RayPointDistance_swigregister(RayPointDistance)

class RayLineDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_VisusKernelPy.RayLineDistance_distance_get, _VisusKernelPy.RayLineDistance_distance_set)
    closest_ray_point = property(_VisusKernelPy.RayLineDistance_closest_ray_point_get, _VisusKernelPy.RayLineDistance_closest_ray_point_set)
    closest_line_point = property(_VisusKernelPy.RayLineDistance_closest_line_point_get, _VisusKernelPy.RayLineDistance_closest_line_point_set)

    def __init__(self, ray, line):
        _VisusKernelPy.RayLineDistance_swiginit(self, _VisusKernelPy.new_RayLineDistance(ray, line))
    __swig_destroy__ = _VisusKernelPy.delete_RayLineDistance

# Register RayLineDistance in _VisusKernelPy:
_VisusKernelPy.RayLineDistance_swigregister(RayLineDistance)

class RaySegmentDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_VisusKernelPy.RaySegmentDistance_distance_get, _VisusKernelPy.RaySegmentDistance_distance_set)
    closest_ray_point = property(_VisusKernelPy.RaySegmentDistance_closest_ray_point_get, _VisusKernelPy.RaySegmentDistance_closest_ray_point_set)
    closest_segment_point = property(_VisusKernelPy.RaySegmentDistance_closest_segment_point_get, _VisusKernelPy.RaySegmentDistance_closest_segment_point_set)

    def __init__(self, ray, segment):
        _VisusKernelPy.RaySegmentDistance_swiginit(self, _VisusKernelPy.new_RaySegmentDistance(ray, segment))
    __swig_destroy__ = _VisusKernelPy.delete_RaySegmentDistance

# Register RaySegmentDistance in _VisusKernelPy:
_VisusKernelPy.RaySegmentDistance_swigregister(RaySegmentDistance)

class RayCircleDistance(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    distance = property(_VisusKernelPy.RayCircleDistance_distance_get, _VisusKernelPy.RayCircleDistance_distance_set)
    closest_ray_point = property(_VisusKernelPy.RayCircleDistance_closest_ray_point_get, _VisusKernelPy.RayCircleDistance_closest_ray_point_set)
    closest_circle_point = property(_VisusKernelPy.RayCircleDistance_closest_circle_point_get, _VisusKernelPy.RayCircleDistance_closest_circle_point_set)

    def __init__(self, ray, circle):
        _VisusKernelPy.RayCircleDistance_swiginit(self, _VisusKernelPy.new_RayCircleDistance(ray, circle))
    __swig_destroy__ = _VisusKernelPy.delete_RayCircleDistance

# Register RayCircleDistance in _VisusKernelPy:
_VisusKernelPy.RayCircleDistance_swigregister(RayCircleDistance)

class Rectangle2i(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Rectangle2i_x_get, _VisusKernelPy.Rectangle2i_x_set)
    y = property(_VisusKernelPy.Rectangle2i_y_get, _VisusKernelPy.Rectangle2i_y_set)
    width = property(_VisusKernelPy.Rectangle2i_width_get, _VisusKernelPy.Rectangle2i_width_set)
    height = property(_VisusKernelPy.Rectangle2i_height_get, _VisusKernelPy.Rectangle2i_height_set)

    def __init__(self, *args):
        _VisusKernelPy.Rectangle2i_swiginit(self, _VisusKernelPy.new_Rectangle2i(*args))

    def getUnion(self, other):
        return _VisusKernelPy.Rectangle2i_getUnion(self, other)

    def getIntersection(self, other):
        return _VisusKernelPy.Rectangle2i_getIntersection(self, other)

    def scaleAroundCenter(self, sx, sy):
        return _VisusKernelPy.Rectangle2i_scaleAroundCenter(self, sx, sy)

    def valid(self):
        return _VisusKernelPy.Rectangle2i_valid(self)

    def containsPoint(self, p):
        return _VisusKernelPy.Rectangle2i_containsPoint(self, p)

    def p1(self):
        return _VisusKernelPy.Rectangle2i_p1(self)

    def p2(self):
        return _VisusKernelPy.Rectangle2i_p2(self)

    def center(self):
        return _VisusKernelPy.Rectangle2i_center(self)

    def size(self):
        return _VisusKernelPy.Rectangle2i_size(self)

    def __eq__(self, other):
        return _VisusKernelPy.Rectangle2i___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Rectangle2i___ne__(self, other)

    def write(self, ar):
        return _VisusKernelPy.Rectangle2i_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Rectangle2i_read(self, ar)

    def toString(self):
        return _VisusKernelPy.Rectangle2i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Rectangle2i

# Register Rectangle2i in _VisusKernelPy:
_VisusKernelPy.Rectangle2i_swigregister(Rectangle2i)

class Rectangle2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.Rectangle2d_x_get, _VisusKernelPy.Rectangle2d_x_set)
    y = property(_VisusKernelPy.Rectangle2d_y_get, _VisusKernelPy.Rectangle2d_y_set)
    width = property(_VisusKernelPy.Rectangle2d_width_get, _VisusKernelPy.Rectangle2d_width_set)
    height = property(_VisusKernelPy.Rectangle2d_height_get, _VisusKernelPy.Rectangle2d_height_set)

    def __init__(self, *args):
        _VisusKernelPy.Rectangle2d_swiginit(self, _VisusKernelPy.new_Rectangle2d(*args))
    __swig_destroy__ = _VisusKernelPy.delete_Rectangle2d

    @staticmethod
    def fromString(s):
        return _VisusKernelPy.Rectangle2d_fromString(s)

    def valid(self):
        return _VisusKernelPy.Rectangle2d_valid(self)

    def getAspectRatio(self):
        return _VisusKernelPy.Rectangle2d_getAspectRatio(self)

    def containsPoint(self, p):
        return _VisusKernelPy.Rectangle2d_containsPoint(self, p)

    def p1(self):
        return _VisusKernelPy.Rectangle2d_p1(self)

    def p2(self):
        return _VisusKernelPy.Rectangle2d_p2(self)

    def center(self):
        return _VisusKernelPy.Rectangle2d_center(self)

    def size(self):
        return _VisusKernelPy.Rectangle2d_size(self)

    def translate(self, *args):
        return _VisusKernelPy.Rectangle2d_translate(self, *args)

    def scale(self, *args):
        return _VisusKernelPy.Rectangle2d_scale(self, *args)

    def __eq__(self, other):
        return _VisusKernelPy.Rectangle2d___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Rectangle2d___ne__(self, other)

    def write(self, ar):
        return _VisusKernelPy.Rectangle2d_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Rectangle2d_read(self, ar)

    def toString(self):
        return _VisusKernelPy.Rectangle2d_toString(self)

# Register Rectangle2d in _VisusKernelPy:
_VisusKernelPy.Rectangle2d_swigregister(Rectangle2d)

def Rectangle2d_fromString(s):
    return _VisusKernelPy.Rectangle2d_fromString(s)

class Frustum(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    POINT_NEAR_BOTTOM_LEFT = _VisusKernelPy.Frustum_POINT_NEAR_BOTTOM_LEFT
    POINT_NEAR_BOTTOM_RIGHT = _VisusKernelPy.Frustum_POINT_NEAR_BOTTOM_RIGHT
    POINT_NEAR_TOP_RIGHT = _VisusKernelPy.Frustum_POINT_NEAR_TOP_RIGHT
    POINT_NEAR_TOP_LEFT = _VisusKernelPy.Frustum_POINT_NEAR_TOP_LEFT
    POINT_FAR_BOTTOM_LEFT = _VisusKernelPy.Frustum_POINT_FAR_BOTTOM_LEFT
    POINT_FAR_BOTTOM_RIGHT = _VisusKernelPy.Frustum_POINT_FAR_BOTTOM_RIGHT
    POINT_FAR_TOP_RIGHT = _VisusKernelPy.Frustum_POINT_FAR_TOP_RIGHT
    POINT_FAR_TOP_LEFT = _VisusKernelPy.Frustum_POINT_FAR_TOP_LEFT
    PLANE_LEFT = _VisusKernelPy.Frustum_PLANE_LEFT
    PLANE_RIGHT = _VisusKernelPy.Frustum_PLANE_RIGHT
    PLANE_TOP = _VisusKernelPy.Frustum_PLANE_TOP
    PLANE_BOTTOM = _VisusKernelPy.Frustum_PLANE_BOTTOM
    PLANE_NEAR = _VisusKernelPy.Frustum_PLANE_NEAR
    PLANE_FAR = _VisusKernelPy.Frustum_PLANE_FAR

    def __init__(self, *args):
        _VisusKernelPy.Frustum_swiginit(self, _VisusKernelPy.new_Frustum(*args))

    def __eq__(self, other):
        return _VisusKernelPy.Frustum___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Frustum___ne__(self, other)

    def getModelview(self):
        return _VisusKernelPy.Frustum_getModelview(self)

    def getProjection(self):
        return _VisusKernelPy.Frustum_getProjection(self)

    def getViewport(self):
        return _VisusKernelPy.Frustum_getViewport(self)

    def valid(self):
        return _VisusKernelPy.Frustum_valid(self)

    def getScreenBox(self):
        return _VisusKernelPy.Frustum_getScreenBox(self)

    def loadModelview(self, T):
        return _VisusKernelPy.Frustum_loadModelview(self, T)

    def loadProjection(self, T):
        return _VisusKernelPy.Frustum_loadProjection(self, T)

    def setViewport(self, V):
        return _VisusKernelPy.Frustum_setViewport(self, V)

    def multModelview(self, T):
        return _VisusKernelPy.Frustum_multModelview(self, T)

    def multProjection(self, T):
        return _VisusKernelPy.Frustum_multProjection(self, T)

    def pickMatrix(self, x, y, dx, dy):
        return _VisusKernelPy.Frustum_pickMatrix(self, x, y, dx, dy)

    def getConvexHull(self):
        return _VisusKernelPy.Frustum_getConvexHull(self)

    def computeDistance(self, obj, screen_point, bUseFarPoint=False):
        return _VisusKernelPy.Frustum_computeDistance(self, obj, screen_point, bUseFarPoint)

    def computeZDistance(self, obj, bUseFarPoint=False):
        return _VisusKernelPy.Frustum_computeZDistance(self, obj, bUseFarPoint)

    def getViewportDirectTransformation(self, *args):
        return _VisusKernelPy.Frustum_getViewportDirectTransformation(self, *args)

    def getViewportInverseTransformation(self, *args):
        return _VisusKernelPy.Frustum_getViewportInverseTransformation(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_Frustum

# Register Frustum in _VisusKernelPy:
_VisusKernelPy.Frustum_swigregister(Frustum)

class FrustumMap(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    frustum = property(_VisusKernelPy.FrustumMap_frustum_get, _VisusKernelPy.FrustumMap_frustum_set)
    viewport = property(_VisusKernelPy.FrustumMap_viewport_get, _VisusKernelPy.FrustumMap_viewport_set)
    projection = property(_VisusKernelPy.FrustumMap_projection_get, _VisusKernelPy.FrustumMap_projection_set)
    modelview = property(_VisusKernelPy.FrustumMap_modelview_get, _VisusKernelPy.FrustumMap_modelview_set)

    def __init__(self, *args):
        _VisusKernelPy.FrustumMap_swiginit(self, _VisusKernelPy.new_FrustumMap(*args))

    def getSpaceDim(self):
        return _VisusKernelPy.FrustumMap_getSpaceDim(self)

    def setSpaceDim(self, value):
        return _VisusKernelPy.FrustumMap_setSpaceDim(self, value)

    def toNormalizedScreenCoordinates(self, p):
        return _VisusKernelPy.FrustumMap_toNormalizedScreenCoordinates(self, p)

    def fromNormalizedScreenCoordinates(self, p):
        return _VisusKernelPy.FrustumMap_fromNormalizedScreenCoordinates(self, p)

    def applyDirectMap(self, *args):
        return _VisusKernelPy.FrustumMap_applyDirectMap(self, *args)

    def applyInverseMap(self, *args):
        return _VisusKernelPy.FrustumMap_applyInverseMap(self, *args)

    def applyDirectMapFromEye(self, p):
        return _VisusKernelPy.FrustumMap_applyDirectMapFromEye(self, p)

    def applyInverseMapToEye(self, p):
        return _VisusKernelPy.FrustumMap_applyInverseMapToEye(self, p)

    def projectPoint(self, p):
        return _VisusKernelPy.FrustumMap_projectPoint(self, p)

    def unprojectPoint(self, p, Z=0.0):
        return _VisusKernelPy.FrustumMap_unprojectPoint(self, p, Z)

    def unprojectPointToEye(self, p, Z=0.0):
        return _VisusKernelPy.FrustumMap_unprojectPointToEye(self, p, Z)

    def getRay(self, p):
        return _VisusKernelPy.FrustumMap_getRay(self, p)
    __swig_destroy__ = _VisusKernelPy.delete_FrustumMap

# Register FrustumMap in _VisusKernelPy:
_VisusKernelPy.FrustumMap_swigregister(FrustumMap)

class Range(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    From = property(_VisusKernelPy.Range_From_get, _VisusKernelPy.Range_From_set)
    To = property(_VisusKernelPy.Range_To_get, _VisusKernelPy.Range_To_set)
    step = property(_VisusKernelPy.Range_step_get, _VisusKernelPy.Range_step_set)

    def __init__(self, *args):
        _VisusKernelPy.Range_swiginit(self, _VisusKernelPy.new_Range(*args))

    @staticmethod
    def fromString(value):
        return _VisusKernelPy.Range_fromString(value)
    __swig_destroy__ = _VisusKernelPy.delete_Range

    def __eq__(self, other):
        return _VisusKernelPy.Range___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Range___ne__(self, other)

    def contains(self, value):
        return _VisusKernelPy.Range_contains(self, value)

    @staticmethod
    def invalid():
        return _VisusKernelPy.Range_invalid()

    def delta(self):
        return _VisusKernelPy.Range_delta(self)

    def clamp(self, v):
        return _VisusKernelPy.Range_clamp(self, v)

    def toString(self):
        return _VisusKernelPy.Range_toString(self)

    def getUnion(self, other):
        return _VisusKernelPy.Range_getUnion(self, other)

    def getIntersection(self, other):
        return _VisusKernelPy.Range_getIntersection(self, other)

    def write(self, ar):
        return _VisusKernelPy.Range_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Range_read(self, ar)

# Register Range in _VisusKernelPy:
_VisusKernelPy.Range_swigregister(Range)

def Range_fromString(value):
    return _VisusKernelPy.Range_fromString(value)

def Range_invalid():
    return _VisusKernelPy.Range_invalid()

class DType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusKernelPy.DType_swiginit(self, _VisusKernelPy.new_DType(*args))

    @staticmethod
    def fromString(s):
        return _VisusKernelPy.DType_fromString(s)

    def toString(self):
        return _VisusKernelPy.DType_toString(self)

    def isDecimal(self):
        return _VisusKernelPy.DType_isDecimal(self)

    def __eq__(self, other):
        return _VisusKernelPy.DType___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.DType___ne__(self, other)

    def valid(self):
        return _VisusKernelPy.DType_valid(self)

    def isVectorOf(self, other):
        return _VisusKernelPy.DType_isVectorOf(self, other)

    def ncomponents(self):
        return _VisusKernelPy.DType_ncomponents(self)

    def withNumberOfComponents(self, N):
        return _VisusKernelPy.DType_withNumberOfComponents(self, N)

    def getBitSize(self, *args):
        return _VisusKernelPy.DType_getBitSize(self, *args)

    def getByteSize(self, *args):
        return _VisusKernelPy.DType_getByteSize(self, *args)

    def isUnsigned(self):
        return _VisusKernelPy.DType_isUnsigned(self)

    def getBitsOffset(self, C):
        return _VisusKernelPy.DType_getBitsOffset(self, C)

    def get(self, C):
        return _VisusKernelPy.DType_get(self, C)

    def getDTypeRange(self, component=0):
        return _VisusKernelPy.DType_getDTypeRange(self, component)

    def withDTypeRange(self, value, component=0):
        return _VisusKernelPy.DType_withDTypeRange(self, value, component)
    __swig_destroy__ = _VisusKernelPy.delete_DType

# Register DType in _VisusKernelPy:
_VisusKernelPy.DType_swigregister(DType)

def DType_fromString(s):
    return _VisusKernelPy.DType_fromString(s)


def GetCppRange(dtype):
    return _VisusKernelPy.GetCppRange(dtype)
class DTypes(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    UINT1 = property(_VisusKernelPy.DTypes_UINT1_get, _VisusKernelPy.DTypes_UINT1_set)
    INT8 = property(_VisusKernelPy.DTypes_INT8_get, _VisusKernelPy.DTypes_INT8_set)
    INT8_GA = property(_VisusKernelPy.DTypes_INT8_GA_get, _VisusKernelPy.DTypes_INT8_GA_set)
    INT8_RGB = property(_VisusKernelPy.DTypes_INT8_RGB_get, _VisusKernelPy.DTypes_INT8_RGB_set)
    INT8_RGBA = property(_VisusKernelPy.DTypes_INT8_RGBA_get, _VisusKernelPy.DTypes_INT8_RGBA_set)
    UINT8 = property(_VisusKernelPy.DTypes_UINT8_get, _VisusKernelPy.DTypes_UINT8_set)
    UINT8_GA = property(_VisusKernelPy.DTypes_UINT8_GA_get, _VisusKernelPy.DTypes_UINT8_GA_set)
    UINT8_RGB = property(_VisusKernelPy.DTypes_UINT8_RGB_get, _VisusKernelPy.DTypes_UINT8_RGB_set)
    UINT8_RGBA = property(_VisusKernelPy.DTypes_UINT8_RGBA_get, _VisusKernelPy.DTypes_UINT8_RGBA_set)
    INT16 = property(_VisusKernelPy.DTypes_INT16_get, _VisusKernelPy.DTypes_INT16_set)
    INT16_GA = property(_VisusKernelPy.DTypes_INT16_GA_get, _VisusKernelPy.DTypes_INT16_GA_set)
    INT16_RGB = property(_VisusKernelPy.DTypes_INT16_RGB_get, _VisusKernelPy.DTypes_INT16_RGB_set)
    INT16_RGBA = property(_VisusKernelPy.DTypes_INT16_RGBA_get, _VisusKernelPy.DTypes_INT16_RGBA_set)
    UINT16 = property(_VisusKernelPy.DTypes_UINT16_get, _VisusKernelPy.DTypes_UINT16_set)
    UINT16_GA = property(_VisusKernelPy.DTypes_UINT16_GA_get, _VisusKernelPy.DTypes_UINT16_GA_set)
    UINT16_RGB = property(_VisusKernelPy.DTypes_UINT16_RGB_get, _VisusKernelPy.DTypes_UINT16_RGB_set)
    UINT16_RGBA = property(_VisusKernelPy.DTypes_UINT16_RGBA_get, _VisusKernelPy.DTypes_UINT16_RGBA_set)
    INT32 = property(_VisusKernelPy.DTypes_INT32_get, _VisusKernelPy.DTypes_INT32_set)
    INT32_GA = property(_VisusKernelPy.DTypes_INT32_GA_get, _VisusKernelPy.DTypes_INT32_GA_set)
    INT32_RGB = property(_VisusKernelPy.DTypes_INT32_RGB_get, _VisusKernelPy.DTypes_INT32_RGB_set)
    INT32_RGBA = property(_VisusKernelPy.DTypes_INT32_RGBA_get, _VisusKernelPy.DTypes_INT32_RGBA_set)
    UINT32 = property(_VisusKernelPy.DTypes_UINT32_get, _VisusKernelPy.DTypes_UINT32_set)
    UINT32_GA = property(_VisusKernelPy.DTypes_UINT32_GA_get, _VisusKernelPy.DTypes_UINT32_GA_set)
    UINT32_RGB = property(_VisusKernelPy.DTypes_UINT32_RGB_get, _VisusKernelPy.DTypes_UINT32_RGB_set)
    UINT32_RGBA = property(_VisusKernelPy.DTypes_UINT32_RGBA_get, _VisusKernelPy.DTypes_UINT32_RGBA_set)
    INT64 = property(_VisusKernelPy.DTypes_INT64_get, _VisusKernelPy.DTypes_INT64_set)
    INT64_GA = property(_VisusKernelPy.DTypes_INT64_GA_get, _VisusKernelPy.DTypes_INT64_GA_set)
    INT64_RGB = property(_VisusKernelPy.DTypes_INT64_RGB_get, _VisusKernelPy.DTypes_INT64_RGB_set)
    INT64_RGBA = property(_VisusKernelPy.DTypes_INT64_RGBA_get, _VisusKernelPy.DTypes_INT64_RGBA_set)
    UINT64 = property(_VisusKernelPy.DTypes_UINT64_get, _VisusKernelPy.DTypes_UINT64_set)
    UINT64_GA = property(_VisusKernelPy.DTypes_UINT64_GA_get, _VisusKernelPy.DTypes_UINT64_GA_set)
    UINT64_RGB = property(_VisusKernelPy.DTypes_UINT64_RGB_get, _VisusKernelPy.DTypes_UINT64_RGB_set)
    UINT64_RGBA = property(_VisusKernelPy.DTypes_UINT64_RGBA_get, _VisusKernelPy.DTypes_UINT64_RGBA_set)
    FLOAT32 = property(_VisusKernelPy.DTypes_FLOAT32_get, _VisusKernelPy.DTypes_FLOAT32_set)
    FLOAT32_GA = property(_VisusKernelPy.DTypes_FLOAT32_GA_get, _VisusKernelPy.DTypes_FLOAT32_GA_set)
    FLOAT32_RGB = property(_VisusKernelPy.DTypes_FLOAT32_RGB_get, _VisusKernelPy.DTypes_FLOAT32_RGB_set)
    FLOAT32_RGBA = property(_VisusKernelPy.DTypes_FLOAT32_RGBA_get, _VisusKernelPy.DTypes_FLOAT32_RGBA_set)
    FLOAT64 = property(_VisusKernelPy.DTypes_FLOAT64_get, _VisusKernelPy.DTypes_FLOAT64_set)
    FLOAT64_GA = property(_VisusKernelPy.DTypes_FLOAT64_GA_get, _VisusKernelPy.DTypes_FLOAT64_GA_set)
    FLOAT64_RGB = property(_VisusKernelPy.DTypes_FLOAT64_RGB_get, _VisusKernelPy.DTypes_FLOAT64_RGB_set)
    FLOAT64_RGBA = property(_VisusKernelPy.DTypes_FLOAT64_RGBA_get, _VisusKernelPy.DTypes_FLOAT64_RGBA_set)
    __swig_destroy__ = _VisusKernelPy.delete_DTypes

# Register DTypes in _VisusKernelPy:
_VisusKernelPy.DTypes_swigregister(DTypes)

class Field(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_VisusKernelPy.Field_name_get, _VisusKernelPy.Field_name_set)
    dtype = property(_VisusKernelPy.Field_dtype_get, _VisusKernelPy.Field_dtype_set)
    description = property(_VisusKernelPy.Field_description_get, _VisusKernelPy.Field_description_set)
    index = property(_VisusKernelPy.Field_index_get, _VisusKernelPy.Field_index_set)
    default_compression = property(_VisusKernelPy.Field_default_compression_get, _VisusKernelPy.Field_default_compression_set)
    default_layout = property(_VisusKernelPy.Field_default_layout_get, _VisusKernelPy.Field_default_layout_set)
    default_value = property(_VisusKernelPy.Field_default_value_get, _VisusKernelPy.Field_default_value_set)
    filter = property(_VisusKernelPy.Field_filter_get, _VisusKernelPy.Field_filter_set)
    params = property(_VisusKernelPy.Field_params_get, _VisusKernelPy.Field_params_set)

    def __init__(self, *args):
        _VisusKernelPy.Field_swiginit(self, _VisusKernelPy.new_Field(*args))

    @staticmethod
    def fromString(src):
        return _VisusKernelPy.Field_fromString(src)

    def valid(self):
        return _VisusKernelPy.Field_valid(self)

    def getDescription(self, bUseNameIfEmpty=True):
        return _VisusKernelPy.Field_getDescription(self, bUseNameIfEmpty)

    def setDescription(self, value):
        return _VisusKernelPy.Field_setDescription(self, value)

    def hasParam(self, key):
        return _VisusKernelPy.Field_hasParam(self, key)

    def getParam(self, *args):
        return _VisusKernelPy.Field_getParam(self, *args)

    def getDTypeRange(self, component=0):
        return _VisusKernelPy.Field_getDTypeRange(self, component)

    def setDTypeRange(self, value, component=0):
        return _VisusKernelPy.Field_setDTypeRange(self, value, component)

    def write(self, ar):
        return _VisusKernelPy.Field_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Field_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Field

# Register Field in _VisusKernelPy:
_VisusKernelPy.Field_swigregister(Field)

def Field_fromString(src):
    return _VisusKernelPy.Field_fromString(src)

class VectorOfField(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfField_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfField___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfField___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfField___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfField___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfField___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfField___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfField___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfField___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfField___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfField_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfField_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfField_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfField_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfField_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfField_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfField_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfField_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfField_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfField_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfField_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfField_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfField_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorOfField_swiginit(self, _VisusKernelPy.new_VectorOfField(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorOfField_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfField_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfField_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfField_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfField_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfField_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfField_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfField_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfField

# Register VectorOfField in _VisusKernelPy:
_VisusKernelPy.VectorOfField_swigregister(VectorOfField)

class Array(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dtype = property(_VisusKernelPy.Array_dtype_get, _VisusKernelPy.Array_dtype_set)
    dims = property(_VisusKernelPy.Array_dims_get, _VisusKernelPy.Array_dims_set)
    url = property(_VisusKernelPy.Array_url_get, _VisusKernelPy.Array_url_set)
    layout = property(_VisusKernelPy.Array_layout_get, _VisusKernelPy.Array_layout_set)
    bounds = property(_VisusKernelPy.Array_bounds_get, _VisusKernelPy.Array_bounds_set)
    clipping = property(_VisusKernelPy.Array_clipping_get, _VisusKernelPy.Array_clipping_set)
    heap = property(_VisusKernelPy.Array_heap_get, _VisusKernelPy.Array_heap_set)
    alpha = property(_VisusKernelPy.Array_alpha_get, _VisusKernelPy.Array_alpha_set)
    texture = property(_VisusKernelPy.Array_texture_get, _VisusKernelPy.Array_texture_set)
    run_time_attributes = property(_VisusKernelPy.Array_run_time_attributes_get, _VisusKernelPy.Array_run_time_attributes_set)

    def __init__(self, *args):
        _VisusKernelPy.Array_swiginit(self, _VisusKernelPy.new_Array(*args))
    __swig_destroy__ = _VisusKernelPy.delete_Array

    def clone(self):
        return _VisusKernelPy.Array_clone(self)

    def valid(self):
        return _VisusKernelPy.Array_valid(self)

    def getPointDim(self):
        return _VisusKernelPy.Array_getPointDim(self)

    def getWidth(self):
        return _VisusKernelPy.Array_getWidth(self)

    def getHeight(self):
        return _VisusKernelPy.Array_getHeight(self)

    def getDepth(self):
        return _VisusKernelPy.Array_getDepth(self)

    def getTotalNumberOfSamples(self):
        return _VisusKernelPy.Array_getTotalNumberOfSamples(self)

    def shareProperties(self, other):
        return _VisusKernelPy.Array_shareProperties(self, other)

    @staticmethod
    def createView(*args):
        return _VisusKernelPy.Array_createView(*args)

    def hasConstantValue(self, value):
        return _VisusKernelPy.Array_hasConstantValue(self, value)

    def isAllZero(self):
        return _VisusKernelPy.Array_isAllZero(self)

    def c_capacity(self):
        return _VisusKernelPy.Array_c_capacity(self)

    def c_size(self):
        return _VisusKernelPy.Array_c_size(self)

    def c_ptr(self):
        return _VisusKernelPy.Array_c_ptr(self)

    def c_address(self):
        return _VisusKernelPy.Array_c_address(self)

    def shrink(self):
        return _VisusKernelPy.Array_shrink(self)

    def fillWithValue(self, value):
        return _VisusKernelPy.Array_fillWithValue(self, value)

    def resize(self, *args):
        return _VisusKernelPy.Array_resize(self, *args)

    def getComponent(self, *args):
        return _VisusKernelPy.Array_getComponent(self, *args)

    def setComponent(self, *args):
        return _VisusKernelPy.Array_setComponent(self, *args)

    def __getitem__(self, index):
        return _VisusKernelPy.Array___getitem__(self, index)

    def __add__(self, other):
        return _VisusKernelPy.Array___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.Array___sub__(self, other)

    def __mul__(self, *args):
        return _VisusKernelPy.Array___mul__(self, *args)

    def __truediv__(self, *args):
        return _VisusKernelPy.Array___div__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, other):
        return _VisusKernelPy.Array___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.Array___isub__(self, other)

    def __imul__(self, *args):
        return _VisusKernelPy.Array___imul__(self, *args)

    def __itruediv__(self, *args):
        return _VisusKernelPy.Array___itruediv__(self, *args)
    __idiv__ = __itruediv__




    # ////////////////////////////////////////////////////////
    def __rmul__(self, v):
        return self.__mul__(v)

    # ////////////////////////////////////////////////////////
    def toNumPy(src, bShareMem=False, bSqueeze=False):

    	import numpy

    # invalid arrray is a zero numpy,0 is "shape"
    	if not src.dtype.valid(): 
    		return numpy.zeros(0, dtype=numpy.float) 

    # dtype  (<: little-endian, >: big-endian, |: not-relevant) ; integer providing the number of bytes  ; i (integer) u (unsigned integer) f (floating point)
    	atomic_dtype=src.dtype.get(0)
    	typestr="".join([
    		"|" if atomic_dtype.getBitSize()==8 else "<",
    		"f" if atomic_dtype.isDecimal() else ("u" if atomic_dtype.isUnsigned() else "i"),
    		str(int(atomic_dtype.getBitSize()/8))
    	])  

    # shape (can be multi components)
    	shape=list(reversed([src.dims[I] for I in range(src.dims.getPointDim())]))
    	if src.dtype.ncomponents()>1 : 
    		shape.append(src.dtype.ncomponents())

    # no real data, just keep the "dimensions" of the data
    	if 0 in shape:

    		return numpy.zeros(shape, dtype=numpy.dtype(typestr))

    	else:

    		if bSqueeze: 
    			shape=[it for it in shape if it>1]

    		class MyNumPyHolder(object): 
    			pass

    		holder = MyNumPyHolder()

    		holder.__array_interface__ = {
    			'strides': None,
    			'shape': tuple(shape), 
    			'typestr': typestr, 
    			'data': (int(src.c_address()), False),  # The second entry in the tuple is a read-only flag (true means the data area is read-only).
    			'version': 3 
    		}

    		return numpy.array(holder, copy=False if bShareMem else True) 

    toNumPy = staticmethod(toNumPy)

    # ////////////////////////////////////////////////////////
    def fromNumPy(src, TargetDim=0, bShareMem=False):

    	import numpy

    # is not memory contigous...
    	bContiguos = src.__array_interface__["strides"] is None
    	if not bContiguos: 

    		if bShareMem: 
    			raise Exception("Cannot share memory since the original numpy array is not memory contiguous")

    		src=numpy.ascontiguousarray(src)

    # dtype
    	typestr = src.__array_interface__["typestr"]
    	dtype=DType(typestr[1]=="u", typestr[1]=="f", int(typestr[2])*8)

    # shape (reversed!)
    	shape   = src.__array_interface__["shape"]
    	shape=tuple(reversed(shape)) 
    	pdim=len(shape)
    	dims=PointNi.one(pdim)
    	for I in range(pdim):  
    		dims.set(I,shape[I]) 

    	if dims.innerProduct() == 0:
    		ret=Array(dims, dtype)

    	else:
    		c_address=str(src.__array_interface__["data"][0]) # [0] element is the address
    		ret=Array(dims, dtype, c_address, bShareMem)

    # example (3,512,512) uint8 TargetDim=2 -> (512,512) uint8[3]
    	if TargetDim > 0 and ret.dims.getPointDim() > TargetDim:
    		v=ret.dims.toVector()
    		A=1
    		for it in v[0:len(v)-TargetDim]: A*=it # first remaining elements
    		B=PointNi(v[-TargetDim:]) # last 'TargetDim' elements
    		ret.resize(B,DType(A,ret.dtype), "Array::fromNumPy",0)

    	return ret

    fromNumPy = staticmethod(fromNumPy)


# Register Array in _VisusKernelPy:
_VisusKernelPy.Array_swigregister(Array)

def Array_createView(*args):
    return _VisusKernelPy.Array_createView(*args)

class VectorOfArray(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfArray___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfArray___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfArray___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfArray_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfArray_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfArray_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfArray_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfArray_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfArray_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfArray_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfArray_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfArray_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfArray_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfArray_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfArray_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfArray_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorOfArray_swiginit(self, _VisusKernelPy.new_VectorOfArray(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorOfArray_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfArray_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfArray_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfArray_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfArray_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfArray_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfArray_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfArray_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfArray

# Register VectorOfArray in _VisusKernelPy:
_VisusKernelPy.VectorOfArray_swigregister(VectorOfArray)

class ArrayUtils(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def loadImage(*args):
        return _VisusKernelPy.ArrayUtils_loadImage(*args)

    @staticmethod
    def loadImageFromMemory(*args):
        return _VisusKernelPy.ArrayUtils_loadImageFromMemory(*args)

    @staticmethod
    def statImage(url):
        return _VisusKernelPy.ArrayUtils_statImage(url)

    @staticmethod
    def saveImage(*args):
        return _VisusKernelPy.ArrayUtils_saveImage(*args)

    @staticmethod
    def saveImageUINT8(*args):
        return _VisusKernelPy.ArrayUtils_saveImageUINT8(*args)

    @staticmethod
    def encodeArray(compression, value):
        return _VisusKernelPy.ArrayUtils_encodeArray(compression, value)

    @staticmethod
    def decodeArray(*args):
        return _VisusKernelPy.ArrayUtils_decodeArray(*args)

    @staticmethod
    def computeRange(*args):
        return _VisusKernelPy.ArrayUtils_computeRange(*args)

    @staticmethod
    def compactDims(src):
        return _VisusKernelPy.ArrayUtils_compactDims(src)

    @staticmethod
    def interleave(*args):
        return _VisusKernelPy.ArrayUtils_interleave(*args)

    @staticmethod
    def split(*args):
        return _VisusKernelPy.ArrayUtils_split(*args)

    @staticmethod
    def insert(*args):
        return _VisusKernelPy.ArrayUtils_insert(*args)

    @staticmethod
    def paste(*args):
        return _VisusKernelPy.ArrayUtils_paste(*args)

    @staticmethod
    def smartCast(*args):
        return _VisusKernelPy.ArrayUtils_smartCast(*args)

    @staticmethod
    def crop(*args):
        return _VisusKernelPy.ArrayUtils_crop(*args)

    @staticmethod
    def mirror(*args):
        return _VisusKernelPy.ArrayUtils_mirror(*args)

    @staticmethod
    def downSample(*args):
        return _VisusKernelPy.ArrayUtils_downSample(*args)

    @staticmethod
    def upSample(*args):
        return _VisusKernelPy.ArrayUtils_upSample(*args)

    @staticmethod
    def splitAndGetFirst(*args):
        return _VisusKernelPy.ArrayUtils_splitAndGetFirst(*args)

    @staticmethod
    def splitAndGetSecond(*args):
        return _VisusKernelPy.ArrayUtils_splitAndGetSecond(*args)

    @staticmethod
    def cast(*args):
        return _VisusKernelPy.ArrayUtils_cast(*args)

    @staticmethod
    def withNumberOfComponents(*args):
        return _VisusKernelPy.ArrayUtils_withNumberOfComponents(*args)

    @staticmethod
    def sqrt(*args):
        return _VisusKernelPy.ArrayUtils_sqrt(*args)

    @staticmethod
    def module2(input, aborted):
        return _VisusKernelPy.ArrayUtils_module2(input, aborted)

    @staticmethod
    def module(input, aborted):
        return _VisusKernelPy.ArrayUtils_module(input, aborted)

    @staticmethod
    def resample(*args):
        return _VisusKernelPy.ArrayUtils_resample(*args)

    @staticmethod
    def convolve(*args):
        return _VisusKernelPy.ArrayUtils_convolve(*args)

    @staticmethod
    def medianHybrid(*args):
        return _VisusKernelPy.ArrayUtils_medianHybrid(*args)
    InvalidOperation = _VisusKernelPy.ArrayUtils_InvalidOperation
    AddOperation = _VisusKernelPy.ArrayUtils_AddOperation
    SubOperation = _VisusKernelPy.ArrayUtils_SubOperation
    MulOperation = _VisusKernelPy.ArrayUtils_MulOperation
    DivOperation = _VisusKernelPy.ArrayUtils_DivOperation
    MinOperation = _VisusKernelPy.ArrayUtils_MinOperation
    MaxOperation = _VisusKernelPy.ArrayUtils_MaxOperation
    AverageOperation = _VisusKernelPy.ArrayUtils_AverageOperation
    StandardDeviationOperation = _VisusKernelPy.ArrayUtils_StandardDeviationOperation
    MedianOperation = _VisusKernelPy.ArrayUtils_MedianOperation

    @staticmethod
    def executeOperation(*args):
        return _VisusKernelPy.ArrayUtils_executeOperation(*args)

    @staticmethod
    def add(*args):
        return _VisusKernelPy.ArrayUtils_add(*args)

    @staticmethod
    def sub(*args):
        return _VisusKernelPy.ArrayUtils_sub(*args)

    @staticmethod
    def mul(*args):
        return _VisusKernelPy.ArrayUtils_mul(*args)

    @staticmethod
    def div(*args):
        return _VisusKernelPy.ArrayUtils_div(*args)

    @staticmethod
    def min(*args):
        return _VisusKernelPy.ArrayUtils_min(*args)

    @staticmethod
    def max(*args):
        return _VisusKernelPy.ArrayUtils_max(*args)

    @staticmethod
    def average(*args):
        return _VisusKernelPy.ArrayUtils_average(*args)

    @staticmethod
    def standardDeviation(*args):
        return _VisusKernelPy.ArrayUtils_standardDeviation(*args)

    @staticmethod
    def median(*args):
        return _VisusKernelPy.ArrayUtils_median(*args)

    @staticmethod
    def threshold(*args):
        return _VisusKernelPy.ArrayUtils_threshold(*args)

    @staticmethod
    def brightnessContrast(*args):
        return _VisusKernelPy.ArrayUtils_brightnessContrast(*args)

    @staticmethod
    def invert(*args):
        return _VisusKernelPy.ArrayUtils_invert(*args)

    @staticmethod
    def levels(*args):
        return _VisusKernelPy.ArrayUtils_levels(*args)

    @staticmethod
    def hueSaturationBrightness(*args):
        return _VisusKernelPy.ArrayUtils_hueSaturationBrightness(*args)

    @staticmethod
    def warpPerspective(dst, T, src, aborted):
        return _VisusKernelPy.ArrayUtils_warpPerspective(dst, T, src, aborted)

    @staticmethod
    def setBufferColor(buffer, color):
        return _VisusKernelPy.ArrayUtils_setBufferColor(buffer, color)
    __swig_destroy__ = _VisusKernelPy.delete_ArrayUtils

# Register ArrayUtils in _VisusKernelPy:
_VisusKernelPy.ArrayUtils_swigregister(ArrayUtils)

def ArrayUtils_loadImage(*args):
    return _VisusKernelPy.ArrayUtils_loadImage(*args)

def ArrayUtils_loadImageFromMemory(*args):
    return _VisusKernelPy.ArrayUtils_loadImageFromMemory(*args)

def ArrayUtils_statImage(url):
    return _VisusKernelPy.ArrayUtils_statImage(url)

def ArrayUtils_saveImage(*args):
    return _VisusKernelPy.ArrayUtils_saveImage(*args)

def ArrayUtils_saveImageUINT8(*args):
    return _VisusKernelPy.ArrayUtils_saveImageUINT8(*args)

def ArrayUtils_encodeArray(compression, value):
    return _VisusKernelPy.ArrayUtils_encodeArray(compression, value)

def ArrayUtils_decodeArray(*args):
    return _VisusKernelPy.ArrayUtils_decodeArray(*args)

def ArrayUtils_computeRange(*args):
    return _VisusKernelPy.ArrayUtils_computeRange(*args)

def ArrayUtils_compactDims(src):
    return _VisusKernelPy.ArrayUtils_compactDims(src)

def ArrayUtils_interleave(*args):
    return _VisusKernelPy.ArrayUtils_interleave(*args)

def ArrayUtils_split(*args):
    return _VisusKernelPy.ArrayUtils_split(*args)

def ArrayUtils_insert(*args):
    return _VisusKernelPy.ArrayUtils_insert(*args)

def ArrayUtils_paste(*args):
    return _VisusKernelPy.ArrayUtils_paste(*args)

def ArrayUtils_smartCast(*args):
    return _VisusKernelPy.ArrayUtils_smartCast(*args)

def ArrayUtils_crop(*args):
    return _VisusKernelPy.ArrayUtils_crop(*args)

def ArrayUtils_mirror(*args):
    return _VisusKernelPy.ArrayUtils_mirror(*args)

def ArrayUtils_downSample(*args):
    return _VisusKernelPy.ArrayUtils_downSample(*args)

def ArrayUtils_upSample(*args):
    return _VisusKernelPy.ArrayUtils_upSample(*args)

def ArrayUtils_splitAndGetFirst(*args):
    return _VisusKernelPy.ArrayUtils_splitAndGetFirst(*args)

def ArrayUtils_splitAndGetSecond(*args):
    return _VisusKernelPy.ArrayUtils_splitAndGetSecond(*args)

def ArrayUtils_cast(*args):
    return _VisusKernelPy.ArrayUtils_cast(*args)

def ArrayUtils_withNumberOfComponents(*args):
    return _VisusKernelPy.ArrayUtils_withNumberOfComponents(*args)

def ArrayUtils_sqrt(*args):
    return _VisusKernelPy.ArrayUtils_sqrt(*args)

def ArrayUtils_module2(input, aborted):
    return _VisusKernelPy.ArrayUtils_module2(input, aborted)

def ArrayUtils_module(input, aborted):
    return _VisusKernelPy.ArrayUtils_module(input, aborted)

def ArrayUtils_resample(*args):
    return _VisusKernelPy.ArrayUtils_resample(*args)

def ArrayUtils_convolve(*args):
    return _VisusKernelPy.ArrayUtils_convolve(*args)

def ArrayUtils_medianHybrid(*args):
    return _VisusKernelPy.ArrayUtils_medianHybrid(*args)

def ArrayUtils_executeOperation(*args):
    return _VisusKernelPy.ArrayUtils_executeOperation(*args)

def ArrayUtils_add(*args):
    return _VisusKernelPy.ArrayUtils_add(*args)

def ArrayUtils_sub(*args):
    return _VisusKernelPy.ArrayUtils_sub(*args)

def ArrayUtils_mul(*args):
    return _VisusKernelPy.ArrayUtils_mul(*args)

def ArrayUtils_div(*args):
    return _VisusKernelPy.ArrayUtils_div(*args)

def ArrayUtils_min(*args):
    return _VisusKernelPy.ArrayUtils_min(*args)

def ArrayUtils_max(*args):
    return _VisusKernelPy.ArrayUtils_max(*args)

def ArrayUtils_average(*args):
    return _VisusKernelPy.ArrayUtils_average(*args)

def ArrayUtils_standardDeviation(*args):
    return _VisusKernelPy.ArrayUtils_standardDeviation(*args)

def ArrayUtils_median(*args):
    return _VisusKernelPy.ArrayUtils_median(*args)

def ArrayUtils_threshold(*args):
    return _VisusKernelPy.ArrayUtils_threshold(*args)

def ArrayUtils_brightnessContrast(*args):
    return _VisusKernelPy.ArrayUtils_brightnessContrast(*args)

def ArrayUtils_invert(*args):
    return _VisusKernelPy.ArrayUtils_invert(*args)

def ArrayUtils_levels(*args):
    return _VisusKernelPy.ArrayUtils_levels(*args)

def ArrayUtils_hueSaturationBrightness(*args):
    return _VisusKernelPy.ArrayUtils_hueSaturationBrightness(*args)

def ArrayUtils_warpPerspective(dst, T, src, aborted):
    return _VisusKernelPy.ArrayUtils_warpPerspective(dst, T, src, aborted)

def ArrayUtils_setBufferColor(buffer, color):
    return _VisusKernelPy.ArrayUtils_setBufferColor(buffer, color)

class BlendBuffers(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pimpl = property(_VisusKernelPy.BlendBuffers_pimpl_get, _VisusKernelPy.BlendBuffers_pimpl_set)
    GenericBlend = _VisusKernelPy.BlendBuffers_GenericBlend
    NoBlend = _VisusKernelPy.BlendBuffers_NoBlend
    AverageBlend = _VisusKernelPy.BlendBuffers_AverageBlend
    VororoiBlend = _VisusKernelPy.BlendBuffers_VororoiBlend
    result = property(_VisusKernelPy.BlendBuffers_result_get, _VisusKernelPy.BlendBuffers_result_set)

    def __init__(self, type, aborted_):
        _VisusKernelPy.BlendBuffers_swiginit(self, _VisusKernelPy.new_BlendBuffers(type, aborted_))
    __swig_destroy__ = _VisusKernelPy.delete_BlendBuffers

    def getNumberOfArgs(self):
        return _VisusKernelPy.BlendBuffers_getNumberOfArgs(self)

    def addBlendArg(self, arg):
        return _VisusKernelPy.BlendBuffers_addBlendArg(self, arg)

# Register BlendBuffers in _VisusKernelPy:
_VisusKernelPy.BlendBuffers_swigregister(BlendBuffers)

class ArrayPlugin(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_ArrayPlugin

    def handleStatImage(self, url):
        return _VisusKernelPy.ArrayPlugin_handleStatImage(self, url)

    def handleLoadImage(self, url, args):
        return _VisusKernelPy.ArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _VisusKernelPy.ArrayPlugin_handleSaveImage(self, url, src, args)

    def handleLoadImageFromMemory(self, src, args):
        return _VisusKernelPy.ArrayPlugin_handleLoadImageFromMemory(self, src, args)

# Register ArrayPlugin in _VisusKernelPy:
_VisusKernelPy.ArrayPlugin_swigregister(ArrayPlugin)

class ArrayPlugins(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _VisusKernelPy.ArrayPlugins_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _VisusKernelPy.ArrayPlugins_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _VisusKernelPy.ArrayPlugins_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _VisusKernelPy.ArrayPlugins_releaseSingleton()
    values = property(_VisusKernelPy.ArrayPlugins_values_get, _VisusKernelPy.ArrayPlugins_values_set)
    __swig_destroy__ = _VisusKernelPy.delete_ArrayPlugins

# Register ArrayPlugins in _VisusKernelPy:
_VisusKernelPy.ArrayPlugins_swigregister(ArrayPlugins)

def ArrayPlugins_getSingleton():
    return _VisusKernelPy.ArrayPlugins_getSingleton()

def ArrayPlugins_setSingleton(value):
    return _VisusKernelPy.ArrayPlugins_setSingleton(value)

def ArrayPlugins_allocSingleton():
    return _VisusKernelPy.ArrayPlugins_allocSingleton()

def ArrayPlugins_releaseSingleton():
    return _VisusKernelPy.ArrayPlugins_releaseSingleton()

class HttpStatus(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    STATUS_NONE = _VisusKernelPy.HttpStatus_STATUS_NONE
    STATUS_CANCELLED = _VisusKernelPy.HttpStatus_STATUS_CANCELLED
    STATUS_CANT_RESOLVE = _VisusKernelPy.HttpStatus_STATUS_CANT_RESOLVE
    STATUS_CANT_RESOLVE_PROXY = _VisusKernelPy.HttpStatus_STATUS_CANT_RESOLVE_PROXY
    STATUS_CANT_CONNECT = _VisusKernelPy.HttpStatus_STATUS_CANT_CONNECT
    STATUS_CANT_CONNECT_PROXY = _VisusKernelPy.HttpStatus_STATUS_CANT_CONNECT_PROXY
    STATUS_SSL_FAILED = _VisusKernelPy.HttpStatus_STATUS_SSL_FAILED
    STATUS_IO_ERROR = _VisusKernelPy.HttpStatus_STATUS_IO_ERROR
    STATUS_MALFORMED = _VisusKernelPy.HttpStatus_STATUS_MALFORMED
    STATUS_TRY_AGAIN = _VisusKernelPy.HttpStatus_STATUS_TRY_AGAIN
    STATUS_CONTINUE = _VisusKernelPy.HttpStatus_STATUS_CONTINUE
    STATUS_SWITCHING_PROTOCOLS = _VisusKernelPy.HttpStatus_STATUS_SWITCHING_PROTOCOLS
    STATUS_PROCESSING = _VisusKernelPy.HttpStatus_STATUS_PROCESSING
    STATUS_OK = _VisusKernelPy.HttpStatus_STATUS_OK
    STATUS_CREATED = _VisusKernelPy.HttpStatus_STATUS_CREATED
    STATUS_ACCEPTED = _VisusKernelPy.HttpStatus_STATUS_ACCEPTED
    STATUS_NON_AUTHORITATIVE = _VisusKernelPy.HttpStatus_STATUS_NON_AUTHORITATIVE
    STATUS_NO_CONTENT = _VisusKernelPy.HttpStatus_STATUS_NO_CONTENT
    STATUS_RESET_CONTENT = _VisusKernelPy.HttpStatus_STATUS_RESET_CONTENT
    STATUS_PARTIAL_CONTENT = _VisusKernelPy.HttpStatus_STATUS_PARTIAL_CONTENT
    STATUS_MULTI_STATUS = _VisusKernelPy.HttpStatus_STATUS_MULTI_STATUS
    STATUS_MULTIPLE_CHOICES = _VisusKernelPy.HttpStatus_STATUS_MULTIPLE_CHOICES
    STATUS_MOVED_PERMANENTLY = _VisusKernelPy.HttpStatus_STATUS_MOVED_PERMANENTLY
    STATUS_FOUND = _VisusKernelPy.HttpStatus_STATUS_FOUND
    STATUS_MOVED_TEMPORARILY = _VisusKernelPy.HttpStatus_STATUS_MOVED_TEMPORARILY
    STATUS_SEE_OTHER = _VisusKernelPy.HttpStatus_STATUS_SEE_OTHER
    STATUS_NOT_MODIFIED = _VisusKernelPy.HttpStatus_STATUS_NOT_MODIFIED
    STATUS_USE_PROXY = _VisusKernelPy.HttpStatus_STATUS_USE_PROXY
    STATUS_NOT_APPEARING_IN_THIS_PROTOCOL = _VisusKernelPy.HttpStatus_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL
    STATUS_TEMPORARY_REDIRECT = _VisusKernelPy.HttpStatus_STATUS_TEMPORARY_REDIRECT
    STATUS_BAD_REQUEST = _VisusKernelPy.HttpStatus_STATUS_BAD_REQUEST
    STATUS_UNAUTHORIZED = _VisusKernelPy.HttpStatus_STATUS_UNAUTHORIZED
    STATUS_PAYMENT_REQUIRED = _VisusKernelPy.HttpStatus_STATUS_PAYMENT_REQUIRED
    STATUS_FORBIDDEN = _VisusKernelPy.HttpStatus_STATUS_FORBIDDEN
    STATUS_NOT_FOUND = _VisusKernelPy.HttpStatus_STATUS_NOT_FOUND
    STATUS_METHOD_NOT_ALLOWED = _VisusKernelPy.HttpStatus_STATUS_METHOD_NOT_ALLOWED
    STATUS_NOT_ACCEPTABLE = _VisusKernelPy.HttpStatus_STATUS_NOT_ACCEPTABLE
    STATUS_PROXY_AUTHENTICATION_REQUIRED = _VisusKernelPy.HttpStatus_STATUS_PROXY_AUTHENTICATION_REQUIRED
    STATUS_PROXY_UNAUTHORIZED = _VisusKernelPy.HttpStatus_STATUS_PROXY_UNAUTHORIZED
    STATUS_REQUEST_TIMEOUT = _VisusKernelPy.HttpStatus_STATUS_REQUEST_TIMEOUT
    STATUS_CONFLICT = _VisusKernelPy.HttpStatus_STATUS_CONFLICT
    STATUS_GONE = _VisusKernelPy.HttpStatus_STATUS_GONE
    STATUS_LENGTH_REQUIRED = _VisusKernelPy.HttpStatus_STATUS_LENGTH_REQUIRED
    STATUS_PRECONDITION_FAILED = _VisusKernelPy.HttpStatus_STATUS_PRECONDITION_FAILED
    STATUS_REQUEST_ENTITY_TOO_LARGE = _VisusKernelPy.HttpStatus_STATUS_REQUEST_ENTITY_TOO_LARGE
    STATUS_REQUEST_URI_TOO_LONG = _VisusKernelPy.HttpStatus_STATUS_REQUEST_URI_TOO_LONG
    STATUS_UNSUPPORTED_MEDIA_TYPE = _VisusKernelPy.HttpStatus_STATUS_UNSUPPORTED_MEDIA_TYPE
    STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = _VisusKernelPy.HttpStatus_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE
    STATUS_INVALID_RANGE = _VisusKernelPy.HttpStatus_STATUS_INVALID_RANGE
    STATUS_EXPECTATION_FAILED = _VisusKernelPy.HttpStatus_STATUS_EXPECTATION_FAILED
    STATUS_UNPROCESSABLE_ENTITY = _VisusKernelPy.HttpStatus_STATUS_UNPROCESSABLE_ENTITY
    STATUS_LOCKED = _VisusKernelPy.HttpStatus_STATUS_LOCKED
    STATUS_FAILED_DEPENDENCY = _VisusKernelPy.HttpStatus_STATUS_FAILED_DEPENDENCY
    STATUS_INTERNAL_SERVER_ERROR = _VisusKernelPy.HttpStatus_STATUS_INTERNAL_SERVER_ERROR
    STATUS_NOT_IMPLEMENTED = _VisusKernelPy.HttpStatus_STATUS_NOT_IMPLEMENTED
    STATUS_BAD_GATEWAY = _VisusKernelPy.HttpStatus_STATUS_BAD_GATEWAY
    STATUS_SERVICE_UNAVAILABLE = _VisusKernelPy.HttpStatus_STATUS_SERVICE_UNAVAILABLE
    STATUS_GATEWAY_TIMEOUT = _VisusKernelPy.HttpStatus_STATUS_GATEWAY_TIMEOUT
    STATUS_HTTP_VERSION_NOT_SUPPORTED = _VisusKernelPy.HttpStatus_STATUS_HTTP_VERSION_NOT_SUPPORTED
    STATUS_INSUFFICIENT_STORAGE = _VisusKernelPy.HttpStatus_STATUS_INSUFFICIENT_STORAGE
    STATUS_NOT_EXTENDED = _VisusKernelPy.HttpStatus_STATUS_NOT_EXTENDED
    __swig_destroy__ = _VisusKernelPy.delete_HttpStatus

# Register HttpStatus in _VisusKernelPy:
_VisusKernelPy.HttpStatus_swigregister(HttpStatus)

class NetMessage(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    headers = property(_VisusKernelPy.NetMessage_headers_get, _VisusKernelPy.NetMessage_headers_set)
    body = property(_VisusKernelPy.NetMessage_body_get, _VisusKernelPy.NetMessage_body_set)

    def __init__(self):
        _VisusKernelPy.NetMessage_swiginit(self, _VisusKernelPy.new_NetMessage())
    __swig_destroy__ = _VisusKernelPy.delete_NetMessage

    def getHeader(self, *args):
        return _VisusKernelPy.NetMessage_getHeader(self, *args)

    def setHeader(self, key, value):
        return _VisusKernelPy.NetMessage_setHeader(self, key, value)

    def eraseHeader(self, key):
        return _VisusKernelPy.NetMessage_eraseHeader(self, key)

    def hasHeader(self, key):
        return _VisusKernelPy.NetMessage_hasHeader(self, key)

    def getTextBody(self):
        return _VisusKernelPy.NetMessage_getTextBody(self)

    def setTextBody(self, value, bAsBinary=False):
        return _VisusKernelPy.NetMessage_setTextBody(self, value, bAsBinary)

    def setXmlBody(self, value):
        return _VisusKernelPy.NetMessage_setXmlBody(self, value)

    def setHtmlBody(self, value):
        return _VisusKernelPy.NetMessage_setHtmlBody(self, value)

    def setJSONBody(self, value):
        return _VisusKernelPy.NetMessage_setJSONBody(self, value)

    def setArrayBody(self, compression, value):
        return _VisusKernelPy.NetMessage_setArrayBody(self, compression, value)

    def getArrayBody(self):
        return _VisusKernelPy.NetMessage_getArrayBody(self)

    def getCompatibleArrayBody(self, requested_dims, requested_dtype):
        return _VisusKernelPy.NetMessage_getCompatibleArrayBody(self, requested_dims, requested_dtype)

    def hasContentLength(self):
        return _VisusKernelPy.NetMessage_hasContentLength(self)

    def getContentLength(self):
        return _VisusKernelPy.NetMessage_getContentLength(self)

    def setContentLength(self, value):
        return _VisusKernelPy.NetMessage_setContentLength(self, value)

    def hasContentType(self):
        return _VisusKernelPy.NetMessage_hasContentType(self)

    def getContentType(self):
        return _VisusKernelPy.NetMessage_getContentType(self)

    def setContentType(self, value):
        return _VisusKernelPy.NetMessage_setContentType(self, value)

    def eraseContentType(self):
        return _VisusKernelPy.NetMessage_eraseContentType(self)

    def hasAttachedFilename(self):
        return _VisusKernelPy.NetMessage_hasAttachedFilename(self)

    def getAttachedFilename(self):
        return _VisusKernelPy.NetMessage_getAttachedFilename(self)

    def setAttachedFilename(self, filename):
        return _VisusKernelPy.NetMessage_setAttachedFilename(self, filename)

    def hasErrorMessage(self):
        return _VisusKernelPy.NetMessage_hasErrorMessage(self)

    def getErrorMessage(self):
        return _VisusKernelPy.NetMessage_getErrorMessage(self)

    def setErrorMessage(self, value):
        return _VisusKernelPy.NetMessage_setErrorMessage(self, value)

# Register NetMessage in _VisusKernelPy:
_VisusKernelPy.NetMessage_swigregister(NetMessage)

class NetRequest(NetMessage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    aborted = property(_VisusKernelPy.NetRequest_aborted_get, _VisusKernelPy.NetRequest_aborted_set)
    url = property(_VisusKernelPy.NetRequest_url_get, _VisusKernelPy.NetRequest_url_set)
    method = property(_VisusKernelPy.NetRequest_method_get, _VisusKernelPy.NetRequest_method_set)

    def __init__(self, *args):
        _VisusKernelPy.NetRequest_swiginit(self, _VisusKernelPy.new_NetRequest(*args))
    __swig_destroy__ = _VisusKernelPy.delete_NetRequest

    def valid(self):
        return _VisusKernelPy.NetRequest_valid(self)

    def getHeadersAsString(self):
        return _VisusKernelPy.NetRequest_getHeadersAsString(self)

    def setHeadersFromString(self, value):
        return _VisusKernelPy.NetRequest_setHeadersFromString(self, value)

    def toString(self):
        return _VisusKernelPy.NetRequest_toString(self)

# Register NetRequest in _VisusKernelPy:
_VisusKernelPy.NetRequest_swigregister(NetRequest)

class NetResponse(NetMessage):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    status = property(_VisusKernelPy.NetResponse_status_get, _VisusKernelPy.NetResponse_status_set)

    def __init__(self, *args):
        _VisusKernelPy.NetResponse_swiginit(self, _VisusKernelPy.new_NetResponse(*args))
    __swig_destroy__ = _VisusKernelPy.delete_NetResponse

    def isInformational(self):
        return _VisusKernelPy.NetResponse_isInformational(self)

    def isSuccessful(self):
        return _VisusKernelPy.NetResponse_isSuccessful(self)

    def isRedirection(self):
        return _VisusKernelPy.NetResponse_isRedirection(self)

    def isClientError(self):
        return _VisusKernelPy.NetResponse_isClientError(self)

    def isServerError(self):
        return _VisusKernelPy.NetResponse_isServerError(self)

    def getStatusDescription(self):
        return _VisusKernelPy.NetResponse_getStatusDescription(self)

    def getHeadersAsString(self):
        return _VisusKernelPy.NetResponse_getHeadersAsString(self)

    def setHeadersFromString(self, value):
        return _VisusKernelPy.NetResponse_setHeadersFromString(self, value)

    def toString(self):
        return _VisusKernelPy.NetResponse_toString(self)

    @staticmethod
    def compose(responses):
        return _VisusKernelPy.NetResponse_compose(responses)

    @staticmethod
    def decompose(RESPONSE):
        return _VisusKernelPy.NetResponse_decompose(RESPONSE)

# Register NetResponse in _VisusKernelPy:
_VisusKernelPy.NetResponse_swigregister(NetResponse)

def NetResponse_compose(responses):
    return _VisusKernelPy.NetResponse_compose(responses)

def NetResponse_decompose(RESPONSE):
    return _VisusKernelPy.NetResponse_decompose(RESPONSE)

class NetSocket(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pimpl = property(_VisusKernelPy.NetSocket_pimpl_get, _VisusKernelPy.NetSocket_pimpl_set)

    def __init__(self, *args):
        _VisusKernelPy.NetSocket_swiginit(self, _VisusKernelPy.new_NetSocket(*args))
    __swig_destroy__ = _VisusKernelPy.delete_NetSocket

    def shutdownSend(self):
        return _VisusKernelPy.NetSocket_shutdownSend(self)

    def close(self):
        return _VisusKernelPy.NetSocket_close(self)

    def connect(self, url):
        return _VisusKernelPy.NetSocket_connect(self, url)

    def bind(self, url):
        return _VisusKernelPy.NetSocket_bind(self, url)

    def acceptConnection(self):
        return _VisusKernelPy.NetSocket_acceptConnection(self)

    def sendRequest(self, request):
        return _VisusKernelPy.NetSocket_sendRequest(self, request)

    def sendResponse(self, response):
        return _VisusKernelPy.NetSocket_sendResponse(self, response)

    def receiveRequest(self):
        return _VisusKernelPy.NetSocket_receiveRequest(self)

    def receiveResponse(self):
        return _VisusKernelPy.NetSocket_receiveResponse(self)

# Register NetSocket in _VisusKernelPy:
_VisusKernelPy.NetSocket_swigregister(NetSocket)

class NetGlobalStats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusKernelPy.NetGlobalStats_swiginit(self, _VisusKernelPy.new_NetGlobalStats())

    def resetStats(self):
        return _VisusKernelPy.NetGlobalStats_resetStats(self)

    def getNumRequests(self):
        return _VisusKernelPy.NetGlobalStats_getNumRequests(self)

    def getReadBytes(self):
        return _VisusKernelPy.NetGlobalStats_getReadBytes(self)

    def getWriteBytes(self):
        return _VisusKernelPy.NetGlobalStats_getWriteBytes(self)
    __swig_destroy__ = _VisusKernelPy.delete_NetGlobalStats

# Register NetGlobalStats in _VisusKernelPy:
_VisusKernelPy.NetGlobalStats_swigregister(NetGlobalStats)

class NetService(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pimpl = property(_VisusKernelPy.NetService_pimpl_get, _VisusKernelPy.NetService_pimpl_set)

    @staticmethod
    def global_stats():
        return _VisusKernelPy.NetService_global_stats()

    def __init__(self, nconnections, bVerbose=True):
        _VisusKernelPy.NetService_swiginit(self, _VisusKernelPy.new_NetService(nconnections, bVerbose))
    __swig_destroy__ = _VisusKernelPy.delete_NetService

    @staticmethod
    def attach():
        return _VisusKernelPy.NetService_attach()

    @staticmethod
    def detach():
        return _VisusKernelPy.NetService_detach()

    def setVerbose(self, value):
        return _VisusKernelPy.NetService_setVerbose(self, value)

    def getConnectTimeout(self):
        return _VisusKernelPy.NetService_getConnectTimeout(self)

    def setConnectTimeout(self, value):
        return _VisusKernelPy.NetService_setConnectTimeout(self, value)

    @staticmethod
    def push(service, request):
        return _VisusKernelPy.NetService_push(service, request)

    @staticmethod
    def getNetResponse(request):
        return _VisusKernelPy.NetService_getNetResponse(request)

    @staticmethod
    def testSpeed(nconnections, nrequests, urls):
        return _VisusKernelPy.NetService_testSpeed(nconnections, nrequests, urls)

# Register NetService in _VisusKernelPy:
_VisusKernelPy.NetService_swigregister(NetService)

def NetService_global_stats():
    return _VisusKernelPy.NetService_global_stats()

def NetService_attach():
    return _VisusKernelPy.NetService_attach()

def NetService_detach():
    return _VisusKernelPy.NetService_detach()

def NetService_push(service, request):
    return _VisusKernelPy.NetService_push(service, request)

def NetService_getNetResponse(request):
    return _VisusKernelPy.NetService_getNetResponse(request)

def NetService_testSpeed(nconnections, nrequests, urls):
    return _VisusKernelPy.NetService_testSpeed(nconnections, nrequests, urls)

class NetServerModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_NetServerModule

    def handleRequest(self, request):
        return _VisusKernelPy.NetServerModule_handleRequest(self, request)

# Register NetServerModule in _VisusKernelPy:
_VisusKernelPy.NetServerModule_swigregister(NetServerModule)

class NetServer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, port, disown, nthreads=8):
        _VisusKernelPy.NetServer_swiginit(self, _VisusKernelPy.new_NetServer(port, disown, nthreads))
    __swig_destroy__ = _VisusKernelPy.delete_NetServer

    def signalExit(self):
        return _VisusKernelPy.NetServer_signalExit(self)

    def setVerbose(self, value):
        return _VisusKernelPy.NetServer_setVerbose(self, value)

    def runInThisThread(self):
        return _VisusKernelPy.NetServer_runInThisThread(self)

    def runInBackground(self):
        return _VisusKernelPy.NetServer_runInBackground(self)

    def waitForExit(self):
        return _VisusKernelPy.NetServer_waitForExit(self)

# Register NetServer in _VisusKernelPy:
_VisusKernelPy.NetServer_swigregister(NetServer)

class SingleTransferFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    values = property(_VisusKernelPy.SingleTransferFunction_values_get, _VisusKernelPy.SingleTransferFunction_values_set)

    def __init__(self, *args):
        _VisusKernelPy.SingleTransferFunction_swiginit(self, _VisusKernelPy.new_SingleTransferFunction(*args))
    __swig_destroy__ = _VisusKernelPy.delete_SingleTransferFunction

    def getNumberOfSamples(self):
        return _VisusKernelPy.SingleTransferFunction_getNumberOfSamples(self)

    def getValue(self, x):
        return _VisusKernelPy.SingleTransferFunction_getValue(self, x)

    def write(self, ar):
        return _VisusKernelPy.SingleTransferFunction_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.SingleTransferFunction_read(self, ar)

    def encode(self, root_name):
        return _VisusKernelPy.SingleTransferFunction_encode(self, root_name)

    def decode(self, _in):
        return _VisusKernelPy.SingleTransferFunction_decode(self, _in)

# Register SingleTransferFunction in _VisusKernelPy:
_VisusKernelPy.SingleTransferFunction_swigregister(SingleTransferFunction)

class TransferFunction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    FieldRange = _VisusKernelPy.TransferFunction_FieldRange
    ComputeRangePerComponent = _VisusKernelPy.TransferFunction_ComputeRangePerComponent
    ComputeRangeOverall = _VisusKernelPy.TransferFunction_ComputeRangeOverall
    UserRange = _VisusKernelPy.TransferFunction_UserRange
    R = property(_VisusKernelPy.TransferFunction_R_get, _VisusKernelPy.TransferFunction_R_set)
    G = property(_VisusKernelPy.TransferFunction_G_get, _VisusKernelPy.TransferFunction_G_set)
    B = property(_VisusKernelPy.TransferFunction_B_get, _VisusKernelPy.TransferFunction_B_set)
    A = property(_VisusKernelPy.TransferFunction_A_get, _VisusKernelPy.TransferFunction_A_set)
    texture = property(_VisusKernelPy.TransferFunction_texture_get, _VisusKernelPy.TransferFunction_texture_set)

    def __init__(self, *args):
        _VisusKernelPy.TransferFunction_swiginit(self, _VisusKernelPy.new_TransferFunction(*args))
    __swig_destroy__ = _VisusKernelPy.delete_TransferFunction

    @staticmethod
    def fromArray(*args):
        return _VisusKernelPy.TransferFunction_fromArray(*args)

    @staticmethod
    def fromString(content):
        return _VisusKernelPy.TransferFunction_fromString(content)

    def getTypeName(self):
        return _VisusKernelPy.TransferFunction_getTypeName(self)

    def getFunctions(self):
        return _VisusKernelPy.TransferFunction_getFunctions(self)

    def setRed(self, value):
        return _VisusKernelPy.TransferFunction_setRed(self, value)

    def setGreen(self, value):
        return _VisusKernelPy.TransferFunction_setGreen(self, value)

    def setBlue(self, value):
        return _VisusKernelPy.TransferFunction_setBlue(self, value)

    def setAlpha(self, value):
        return _VisusKernelPy.TransferFunction_setAlpha(self, value)

    def getNumberOfSamples(self):
        return _VisusKernelPy.TransferFunction_getNumberOfSamples(self)

    def valid(self):
        return _VisusKernelPy.TransferFunction_valid(self)

    def isDefault(self):
        return _VisusKernelPy.TransferFunction_isDefault(self)

    def getDefaultName(self):
        return _VisusKernelPy.TransferFunction_getDefaultName(self)

    def getAttenuation(self):
        return _VisusKernelPy.TransferFunction_getAttenuation(self)

    def setAttenutation(self, value):
        return _VisusKernelPy.TransferFunction_setAttenutation(self, value)

    def getNormalizationMode(self):
        return _VisusKernelPy.TransferFunction_getNormalizationMode(self)

    def setNormalizationMode(self, value):
        return _VisusKernelPy.TransferFunction_setNormalizationMode(self, value)

    def getUserRange(self):
        return _VisusKernelPy.TransferFunction_getUserRange(self)

    def setUserRange(self, range):
        return _VisusKernelPy.TransferFunction_setUserRange(self, range)

    def drawValues(self, function, x1, x2, values):
        return _VisusKernelPy.TransferFunction_drawValues(self, function, x1, x2, values)

    def drawLine(self, function, x1, y1, x2, y2):
        return _VisusKernelPy.TransferFunction_drawLine(self, function, x1, y1, x2, y2)

    @staticmethod
    def getDefaults():
        return _VisusKernelPy.TransferFunction_getDefaults()

    @staticmethod
    def getDefault(name):
        return _VisusKernelPy.TransferFunction_getDefault(name)

    def setDefault(self, name):
        return _VisusKernelPy.TransferFunction_setDefault(self, name)

    @staticmethod
    def getDefaultOpacities():
        return _VisusKernelPy.TransferFunction_getDefaultOpacities()

    @staticmethod
    def getDefaultOpacity(name):
        return _VisusKernelPy.TransferFunction_getDefaultOpacity(name)

    def setOpacity(self, name):
        return _VisusKernelPy.TransferFunction_setOpacity(self, name)

    @staticmethod
    def ComputeRange(*args):
        return _VisusKernelPy.TransferFunction_ComputeRange(*args)

    def toArray(self):
        return _VisusKernelPy.TransferFunction_toArray(self)

    @staticmethod
    def importTransferFunction(content):
        return _VisusKernelPy.TransferFunction_importTransferFunction(content)

    def exportTransferFunction(self, filename):
        return _VisusKernelPy.TransferFunction_exportTransferFunction(self, filename)

    def execute(self, ar):
        return _VisusKernelPy.TransferFunction_execute(self, ar)

    def write(self, ar):
        return _VisusKernelPy.TransferFunction_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.TransferFunction_read(self, ar)

# Register TransferFunction in _VisusKernelPy:
_VisusKernelPy.TransferFunction_swigregister(TransferFunction)

def TransferFunction_fromArray(*args):
    return _VisusKernelPy.TransferFunction_fromArray(*args)

def TransferFunction_fromString(content):
    return _VisusKernelPy.TransferFunction_fromString(content)

def TransferFunction_getDefaults():
    return _VisusKernelPy.TransferFunction_getDefaults()

def TransferFunction_getDefault(name):
    return _VisusKernelPy.TransferFunction_getDefault(name)

def TransferFunction_getDefaultOpacities():
    return _VisusKernelPy.TransferFunction_getDefaultOpacities()

def TransferFunction_getDefaultOpacity(name):
    return _VisusKernelPy.TransferFunction_getDefaultOpacity(name)

def TransferFunction_ComputeRange(*args):
    return _VisusKernelPy.TransferFunction_ComputeRange(*args)

def TransferFunction_importTransferFunction(content):
    return _VisusKernelPy.TransferFunction_importTransferFunction(content)

class VectorOfCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfCamera_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfCamera___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfCamera___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfCamera___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfCamera___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfCamera___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfCamera___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfCamera___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfCamera___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfCamera___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfCamera_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfCamera_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfCamera_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfCamera_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfCamera_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfCamera_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfCamera_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfCamera_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfCamera_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfCamera_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfCamera_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfCamera_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfCamera_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorOfCamera_swiginit(self, _VisusKernelPy.new_VectorOfCamera(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorOfCamera_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfCamera_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfCamera_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfCamera_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfCamera_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfCamera_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfCamera_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfCamera_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfCamera

# Register VectorOfCamera in _VisusKernelPy:
_VisusKernelPy.VectorOfCamera_swigregister(VectorOfCamera)

class VectorOfMatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfMatch_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfMatch___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfMatch___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfMatch___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfMatch___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfMatch___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfMatch___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfMatch___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfMatch___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfMatch___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfMatch_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfMatch_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfMatch_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfMatch_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfMatch_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfMatch_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfMatch_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfMatch_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfMatch_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfMatch_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfMatch_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfMatch_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfMatch_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorOfMatch_swiginit(self, _VisusKernelPy.new_VectorOfMatch(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorOfMatch_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfMatch_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfMatch_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfMatch_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfMatch_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfMatch_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfMatch_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfMatch_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfMatch

# Register VectorOfMatch in _VisusKernelPy:
_VisusKernelPy.VectorOfMatch_swigregister(VectorOfMatch)

class VectorOfKeyPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfKeyPoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfKeyPoint___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfKeyPoint___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfKeyPoint___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfKeyPoint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfKeyPoint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfKeyPoint_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfKeyPoint_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfKeyPoint_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfKeyPoint_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfKeyPoint_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfKeyPoint_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfKeyPoint_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfKeyPoint_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfKeyPoint_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfKeyPoint_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfKeyPoint_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfKeyPoint_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint_erase(self, *args)

    def __init__(self, *args):
        _VisusKernelPy.VectorOfKeyPoint_swiginit(self, _VisusKernelPy.new_VectorOfKeyPoint(*args))

    def push_back(self, x):
        return _VisusKernelPy.VectorOfKeyPoint_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfKeyPoint_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfKeyPoint_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfKeyPoint_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfKeyPoint_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfKeyPoint_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfKeyPoint

# Register VectorOfKeyPoint in _VisusKernelPy:
_VisusKernelPy.VectorOfKeyPoint_swigregister(VectorOfKeyPoint)

class Pose(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    q = property(_VisusKernelPy.Pose_q_get, _VisusKernelPy.Pose_q_set)
    t = property(_VisusKernelPy.Pose_t_get, _VisusKernelPy.Pose_t_set)

    def __init__(self, *args):
        _VisusKernelPy.Pose_swiginit(self, _VisusKernelPy.new_Pose(*args))

    @staticmethod
    def identity():
        return _VisusKernelPy.Pose_identity()

    @staticmethod
    def lookingDown(t):
        return _VisusKernelPy.Pose_lookingDown(t)

    def R(self):
        return _VisusKernelPy.Pose_R(self)

    def isIdentity(self):
        return _VisusKernelPy.Pose_isIdentity(self)

    def toMatrix(self):
        return _VisusKernelPy.Pose_toMatrix(self)

    def __mul__(self, p2):
        return _VisusKernelPy.Pose___mul__(self, p2)

    def inverse(self):
        return _VisusKernelPy.Pose_inverse(self)

    def worldToCamera(self, worldpos):
        return _VisusKernelPy.Pose_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusKernelPy.Pose_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusKernelPy.Pose_getWorldCenter(self)

    def write(self, ar):
        return _VisusKernelPy.Pose_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Pose_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Pose

# Register Pose in _VisusKernelPy:
_VisusKernelPy.Pose_swigregister(Pose)

def Pose_identity():
    return _VisusKernelPy.Pose_identity()

def Pose_lookingDown(t):
    return _VisusKernelPy.Pose_lookingDown(t)

class Calibration(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    f = property(_VisusKernelPy.Calibration_f_get, _VisusKernelPy.Calibration_f_set)
    cx = property(_VisusKernelPy.Calibration_cx_get, _VisusKernelPy.Calibration_cx_set)
    cy = property(_VisusKernelPy.Calibration_cy_get, _VisusKernelPy.Calibration_cy_set)
    bFixed = property(_VisusKernelPy.Calibration_bFixed_get, _VisusKernelPy.Calibration_bFixed_set)

    def __init__(self, f_=1, cx_=0, cy_=0):
        _VisusKernelPy.Calibration_swiginit(self, _VisusKernelPy.new_Calibration(f_, cx_, cy_))

    def toMatrix(self):
        return _VisusKernelPy.Calibration_toMatrix(self)

    def screenToCamera(self, screen):
        return _VisusKernelPy.Calibration_screenToCamera(self, screen)

    def cameraToScreen(self, eye):
        return _VisusKernelPy.Calibration_cameraToScreen(self, eye)

    def write(self, ar):
        return _VisusKernelPy.Calibration_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Calibration_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Calibration

# Register Calibration in _VisusKernelPy:
_VisusKernelPy.Calibration_swigregister(Calibration)

class KeyPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_VisusKernelPy.KeyPoint_x_get, _VisusKernelPy.KeyPoint_x_set)
    y = property(_VisusKernelPy.KeyPoint_y_get, _VisusKernelPy.KeyPoint_y_set)
    size = property(_VisusKernelPy.KeyPoint_size_get, _VisusKernelPy.KeyPoint_size_set)
    angle = property(_VisusKernelPy.KeyPoint_angle_get, _VisusKernelPy.KeyPoint_angle_set)
    response = property(_VisusKernelPy.KeyPoint_response_get, _VisusKernelPy.KeyPoint_response_set)
    octave = property(_VisusKernelPy.KeyPoint_octave_get, _VisusKernelPy.KeyPoint_octave_set)
    class_id = property(_VisusKernelPy.KeyPoint_class_id_get, _VisusKernelPy.KeyPoint_class_id_set)

    def __init__(self, _x=0, _y=0, _size=0, _angle=-1, _response=0, _octave=0, _class_id=-1):
        _VisusKernelPy.KeyPoint_swiginit(self, _VisusKernelPy.new_KeyPoint(_x, _y, _size, _angle, _response, _octave, _class_id))

    @staticmethod
    def adaptiveNonMaximalSuppression(responses, xs, ys, anms):
        return _VisusKernelPy.KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms)
    __swig_destroy__ = _VisusKernelPy.delete_KeyPoint

# Register KeyPoint in _VisusKernelPy:
_VisusKernelPy.KeyPoint_swigregister(KeyPoint)

def KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms):
    return _VisusKernelPy.KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms)

class Match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    queryIdx = property(_VisusKernelPy.Match_queryIdx_get, _VisusKernelPy.Match_queryIdx_set)
    trainIdx = property(_VisusKernelPy.Match_trainIdx_get, _VisusKernelPy.Match_trainIdx_set)
    imgIdx = property(_VisusKernelPy.Match_imgIdx_get, _VisusKernelPy.Match_imgIdx_set)
    distance = property(_VisusKernelPy.Match_distance_get, _VisusKernelPy.Match_distance_set)

    def __init__(self, *args):
        _VisusKernelPy.Match_swiginit(self, _VisusKernelPy.new_Match(*args))

    def __lt__(self, m):
        return _VisusKernelPy.Match___lt__(self, m)
    __swig_destroy__ = _VisusKernelPy.delete_Match

# Register Match in _VisusKernelPy:
_VisusKernelPy.Match_swigregister(Match)

class SlamEdge(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    origin = property(_VisusKernelPy.SlamEdge_origin_get, _VisusKernelPy.SlamEdge_origin_set)
    other = property(_VisusKernelPy.SlamEdge_other_get, _VisusKernelPy.SlamEdge_other_set)
    text = property(_VisusKernelPy.SlamEdge_text_get, _VisusKernelPy.SlamEdge_text_set)
    matches = property(_VisusKernelPy.SlamEdge_matches_get, _VisusKernelPy.SlamEdge_matches_set)

    def __init__(self, origin_, other_):
        _VisusKernelPy.SlamEdge_swiginit(self, _VisusKernelPy.new_SlamEdge(origin_, other_))

    def getNumberOfMatches(self):
        return _VisusKernelPy.SlamEdge_getNumberOfMatches(self)

    def isGood(self):
        return _VisusKernelPy.SlamEdge_isGood(self)

    def setMatches(self, matches, text):
        return _VisusKernelPy.SlamEdge_setMatches(self, matches, text)
    __swig_destroy__ = _VisusKernelPy.delete_SlamEdge

# Register SlamEdge in _VisusKernelPy:
_VisusKernelPy.SlamEdge_swigregister(SlamEdge)

class Camera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    id = property(_VisusKernelPy.Camera_id_get, _VisusKernelPy.Camera_id_set)
    idx_filename = property(_VisusKernelPy.Camera_idx_filename_get, _VisusKernelPy.Camera_idx_filename_set)
    filenames = property(_VisusKernelPy.Camera_filenames_get, _VisusKernelPy.Camera_filenames_set)
    color = property(_VisusKernelPy.Camera_color_get, _VisusKernelPy.Camera_color_set)
    keypoints = property(_VisusKernelPy.Camera_keypoints_get, _VisusKernelPy.Camera_keypoints_set)
    descriptors = property(_VisusKernelPy.Camera_descriptors_get, _VisusKernelPy.Camera_descriptors_set)
    pose = property(_VisusKernelPy.Camera_pose_get, _VisusKernelPy.Camera_pose_set)
    bFixed = property(_VisusKernelPy.Camera_bFixed_get, _VisusKernelPy.Camera_bFixed_set)
    edges = property(_VisusKernelPy.Camera_edges_get, _VisusKernelPy.Camera_edges_set)
    homography = property(_VisusKernelPy.Camera_homography_get, _VisusKernelPy.Camera_homography_set)
    quad = property(_VisusKernelPy.Camera_quad_get, _VisusKernelPy.Camera_quad_set)

    def __init__(self):
        _VisusKernelPy.Camera_swiginit(self, _VisusKernelPy.new_Camera())
    __swig_destroy__ = _VisusKernelPy.delete_Camera

    def getNumberOfKeyPoints(self):
        return _VisusKernelPy.Camera_getNumberOfKeyPoints(self)

    def worldToCamera(self, worldpos):
        return _VisusKernelPy.Camera_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusKernelPy.Camera_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusKernelPy.Camera_getWorldCenter(self)

    def getWorldViewDirection(self):
        return _VisusKernelPy.Camera_getWorldViewDirection(self)

    def addLocalCamera(self, camera1):
        return _VisusKernelPy.Camera_addLocalCamera(self, camera1)

    def getEdge(self, other):
        return _VisusKernelPy.Camera_getEdge(self, other)

    def removeLocalCamera(self, camera1):
        return _VisusKernelPy.Camera_removeLocalCamera(self, camera1)

    def getAllLocalCameras(self):
        return _VisusKernelPy.Camera_getAllLocalCameras(self)

    def getGoodLocalCameras(self):
        return _VisusKernelPy.Camera_getGoodLocalCameras(self)

# Register Camera in _VisusKernelPy:
_VisusKernelPy.Camera_swigregister(Camera)

class Slam(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    url = property(_VisusKernelPy.Slam_url_get, _VisusKernelPy.Slam_url_set)
    width = property(_VisusKernelPy.Slam_width_get, _VisusKernelPy.Slam_width_set)
    height = property(_VisusKernelPy.Slam_height_get, _VisusKernelPy.Slam_height_set)
    dtype = property(_VisusKernelPy.Slam_dtype_get, _VisusKernelPy.Slam_dtype_set)
    cameras = property(_VisusKernelPy.Slam_cameras_get, _VisusKernelPy.Slam_cameras_set)
    calibration = property(_VisusKernelPy.Slam_calibration_get, _VisusKernelPy.Slam_calibration_set)

    def __init__(self):
        if self.__class__ == Slam:
            _self = None
        else:
            _self = self
        _VisusKernelPy.Slam_swiginit(self, _VisusKernelPy.new_Slam(_self, ))
    __swig_destroy__ = _VisusKernelPy.delete_Slam

    def addCamera(self, disown):
        return _VisusKernelPy.Slam_addCamera(self, disown)

    def previousCamera(self, camera):
        return _VisusKernelPy.Slam_previousCamera(self, camera)

    def nextCamera(self, camera):
        return _VisusKernelPy.Slam_nextCamera(self, camera)

    def removeCamera(self, camera2):
        return _VisusKernelPy.Slam_removeCamera(self, camera2)

    def findGroups(self):
        return _VisusKernelPy.Slam_findGroups(self)

    def removeDisconnectedCameras(self):
        return _VisusKernelPy.Slam_removeDisconnectedCameras(self)

    def removeCamerasWithTooMuchSkew(self):
        return _VisusKernelPy.Slam_removeCamerasWithTooMuchSkew(self)

    def computeWorldQuad(self, camera):
        return _VisusKernelPy.Slam_computeWorldQuad(self, camera)

    def getQuadsBox(self):
        return _VisusKernelPy.Slam_getQuadsBox(self)

    def refreshQuads(self):
        return _VisusKernelPy.Slam_refreshQuads(self)

    def loadKeyPoints(self, camera2, filename):
        return _VisusKernelPy.Slam_loadKeyPoints(self, camera2, filename)

    def saveKeyPoints(self, camera2, filename):
        return _VisusKernelPy.Slam_saveKeyPoints(self, camera2, filename)

    def removeOutlierMatches(self, max_reproj_error):
        return _VisusKernelPy.Slam_removeOutlierMatches(self, max_reproj_error)

    def bundleAdjustment(self, *args):
        return _VisusKernelPy.Slam_bundleAdjustment(self, *args)

    def doPostIterationAction(self):
        return _VisusKernelPy.Slam_doPostIterationAction(self)
    def __disown__(self):
        self.this.disown()
        _VisusKernelPy.disown_Slam(self)
        return weakref.proxy(self)

# Register Slam in _VisusKernelPy:
_VisusKernelPy.Slam_swigregister(Slam)


def convert_dtype(value):

	import numpy

# get first component
	if isinstance(value,DType):
		value=value.get(0).toString() 

	if isinstance(value,str):
		if value=="uint8":    return numpy.uint8
		if value=="int8":     return numpy.int8
		if value=="uint16":   return numpy.uint16
		if value=="int16":    return numpy.int16
		if value=="uint32":   return numpy.uint32
		if value=="int32":    return numpy.int32
		if value=="float32":  return numpy.float32
		if value=="float64":  return numpy.float64

	if isinstance(value,numpy):
		if value==numpy.uint8:   return "uint8"
		if value==numpy.int8:    return "int8"
		if value==numpy.uint16:  return "uint16"
		if value==numpy.int16:   return "int16"
		if value==numpy.uint32:  return "uint32"
		if value==numpy.int32:   return "int32"
		if value==numpy.float32: return "float32"
		if value==numpy.float64: return "float64"

	raise Exception("Internal error")



