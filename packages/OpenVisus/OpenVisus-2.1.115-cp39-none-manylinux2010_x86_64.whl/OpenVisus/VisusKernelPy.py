# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_VisusKernelPy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_VisusKernelPy')
    _VisusKernelPy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_VisusKernelPy', [dirname(__file__)])
        except ImportError:
            import _VisusKernelPy
            return _VisusKernelPy
        try:
            _mod = imp.load_module('_VisusKernelPy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _VisusKernelPy = swig_import_helper()
    del swig_import_helper
else:
    import _VisusKernelPy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _VisusKernelPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusKernelPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusKernelPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusKernelPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusKernelPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusKernelPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusKernelPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusKernelPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusKernelPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusKernelPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusKernelPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusKernelPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusKernelPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusKernelPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusKernelPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusKernelPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _VisusKernelPy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusKernelPy.SHARED_PTR_DISOWN
class StdVectorInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorInt, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorInt_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorInt___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorInt___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorInt___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorInt___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorInt___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorInt___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorInt___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorInt___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorInt___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorInt_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorInt_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorInt_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorInt_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorInt_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorInt_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorInt_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorInt_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorInt_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorInt_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorInt_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorInt_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorInt_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdVectorInt(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.StdVectorInt_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorInt_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorInt_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorInt_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorInt_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorInt_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorInt_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorInt_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorInt
    __del__ = lambda self: None
StdVectorInt_swigregister = _VisusKernelPy.StdVectorInt_swigregister
StdVectorInt_swigregister(StdVectorInt)

class StdVectorDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorDouble, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorDouble___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorDouble___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorDouble___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorDouble_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorDouble_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorDouble_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorDouble_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorDouble_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorDouble_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorDouble_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorDouble_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorDouble_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorDouble_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorDouble_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorDouble_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorDouble_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdVectorDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.StdVectorDouble_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorDouble_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorDouble_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorDouble_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorDouble_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorDouble
    __del__ = lambda self: None
StdVectorDouble_swigregister = _VisusKernelPy.StdVectorDouble_swigregister
StdVectorDouble_swigregister(StdVectorDouble)

class StdVectorFloat(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorFloat, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorFloat___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorFloat___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorFloat___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorFloat_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorFloat_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorFloat_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorFloat_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorFloat_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorFloat_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorFloat_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorFloat_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorFloat_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorFloat_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorFloat_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorFloat_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorFloat_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdVectorFloat(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.StdVectorFloat_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorFloat_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorFloat_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorFloat_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorFloat_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorFloat_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorFloat_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorFloat
    __del__ = lambda self: None
StdVectorFloat_swigregister = _VisusKernelPy.StdVectorFloat_swigregister
StdVectorFloat_swigregister(StdVectorFloat)

class StdVectorStdString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorStdString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorStdString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorStdString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorStdString___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorStdString___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorStdString___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorStdString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorStdString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorStdString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorStdString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorStdString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorStdString___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorStdString_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorStdString_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorStdString_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorStdString_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorStdString_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorStdString_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorStdString_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorStdString_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorStdString_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorStdString_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorStdString_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorStdString_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorStdString_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdVectorStdString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.StdVectorStdString_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorStdString_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorStdString_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorStdString_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorStdString_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorStdString_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorStdString_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorStdString_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorStdString
    __del__ = lambda self: None
StdVectorStdString_swigregister = _VisusKernelPy.StdVectorStdString_swigregister
StdVectorStdString_swigregister(StdVectorStdString)

class StdPairDoubleDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdPairDoubleDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdPairDoubleDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdPairDoubleDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusKernelPy.StdPairDoubleDouble_first_set
    __swig_getmethods__["first"] = _VisusKernelPy.StdPairDoubleDouble_first_get
    if _newclass:
        first = _swig_property(_VisusKernelPy.StdPairDoubleDouble_first_get, _VisusKernelPy.StdPairDoubleDouble_first_set)
    __swig_setmethods__["second"] = _VisusKernelPy.StdPairDoubleDouble_second_set
    __swig_getmethods__["second"] = _VisusKernelPy.StdPairDoubleDouble_second_get
    if _newclass:
        second = _swig_property(_VisusKernelPy.StdPairDoubleDouble_second_get, _VisusKernelPy.StdPairDoubleDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusKernelPy.delete_StdPairDoubleDouble
    __del__ = lambda self: None
StdPairDoubleDouble_swigregister = _VisusKernelPy.StdPairDoubleDouble_swigregister
StdPairDoubleDouble_swigregister(StdPairDoubleDouble)

class StdPairIntDouble(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdPairIntDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdPairIntDouble, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdPairIntDouble(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _VisusKernelPy.StdPairIntDouble_first_set
    __swig_getmethods__["first"] = _VisusKernelPy.StdPairIntDouble_first_get
    if _newclass:
        first = _swig_property(_VisusKernelPy.StdPairIntDouble_first_get, _VisusKernelPy.StdPairIntDouble_first_set)
    __swig_setmethods__["second"] = _VisusKernelPy.StdPairIntDouble_second_set
    __swig_getmethods__["second"] = _VisusKernelPy.StdPairIntDouble_second_get
    if _newclass:
        second = _swig_property(_VisusKernelPy.StdPairIntDouble_second_get, _VisusKernelPy.StdPairIntDouble_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _VisusKernelPy.delete_StdPairIntDouble
    __del__ = lambda self: None
StdPairIntDouble_swigregister = _VisusKernelPy.StdPairIntDouble_swigregister
StdPairIntDouble_swigregister(StdPairIntDouble)

class StdMapStdStringStdString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdMapStdStringStdString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdMapStdStringStdString, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdMapStdStringStdString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdMapStdStringStdString___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdMapStdStringStdString___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdMapStdStringStdString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _VisusKernelPy.StdMapStdStringStdString___getitem__(self, key)

    def __delitem__(self, key):
        return _VisusKernelPy.StdMapStdStringStdString___delitem__(self, key)

    def has_key(self, key):
        return _VisusKernelPy.StdMapStdStringStdString_has_key(self, key)

    def keys(self):
        return _VisusKernelPy.StdMapStdStringStdString_keys(self)

    def values(self):
        return _VisusKernelPy.StdMapStdStringStdString_values(self)

    def items(self):
        return _VisusKernelPy.StdMapStdStringStdString_items(self)

    def __contains__(self, key):
        return _VisusKernelPy.StdMapStdStringStdString___contains__(self, key)

    def key_iterator(self):
        return _VisusKernelPy.StdMapStdStringStdString_key_iterator(self)

    def value_iterator(self):
        return _VisusKernelPy.StdMapStdStringStdString_value_iterator(self)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdMapStdStringStdString___setitem__(self, *args)

    def asdict(self):
        return _VisusKernelPy.StdMapStdStringStdString_asdict(self)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdMapStdStringStdString(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        return _VisusKernelPy.StdMapStdStringStdString_empty(self)

    def size(self):
        return _VisusKernelPy.StdMapStdStringStdString_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdMapStdStringStdString_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdMapStdStringStdString_begin(self)

    def end(self):
        return _VisusKernelPy.StdMapStdStringStdString_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdMapStdStringStdString_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdMapStdStringStdString_rend(self)

    def clear(self):
        return _VisusKernelPy.StdMapStdStringStdString_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdMapStdStringStdString_get_allocator(self)

    def count(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_count(self, x)

    def erase(self, *args):
        return _VisusKernelPy.StdMapStdStringStdString_erase(self, *args)

    def find(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_find(self, x)

    def lower_bound(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_lower_bound(self, x)

    def upper_bound(self, x):
        return _VisusKernelPy.StdMapStdStringStdString_upper_bound(self, x)
    __swig_destroy__ = _VisusKernelPy.delete_StdMapStdStringStdString
    __del__ = lambda self: None
StdMapStdStringStdString_swigregister = _VisusKernelPy.StdMapStdStringStdString_swigregister
StdMapStdStringStdString_swigregister(StdMapStdStringStdString)

class StdVectorLongLong(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdVectorLongLong, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdVectorLongLong, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.StdVectorLongLong_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.StdVectorLongLong___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.StdVectorLongLong___bool__(self)

    def __len__(self):
        return _VisusKernelPy.StdVectorLongLong___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.StdVectorLongLong___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.StdVectorLongLong___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.StdVectorLongLong___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.StdVectorLongLong_pop(self)

    def append(self, x):
        return _VisusKernelPy.StdVectorLongLong_append(self, x)

    def empty(self):
        return _VisusKernelPy.StdVectorLongLong_empty(self)

    def size(self):
        return _VisusKernelPy.StdVectorLongLong_size(self)

    def swap(self, v):
        return _VisusKernelPy.StdVectorLongLong_swap(self, v)

    def begin(self):
        return _VisusKernelPy.StdVectorLongLong_begin(self)

    def end(self):
        return _VisusKernelPy.StdVectorLongLong_end(self)

    def rbegin(self):
        return _VisusKernelPy.StdVectorLongLong_rbegin(self)

    def rend(self):
        return _VisusKernelPy.StdVectorLongLong_rend(self)

    def clear(self):
        return _VisusKernelPy.StdVectorLongLong_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.StdVectorLongLong_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.StdVectorLongLong_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.StdVectorLongLong_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StdVectorLongLong(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.StdVectorLongLong_push_back(self, x)

    def front(self):
        return _VisusKernelPy.StdVectorLongLong_front(self)

    def back(self):
        return _VisusKernelPy.StdVectorLongLong_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.StdVectorLongLong_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.StdVectorLongLong_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.StdVectorLongLong_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.StdVectorLongLong_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.StdVectorLongLong_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_StdVectorLongLong
    __del__ = lambda self: None
StdVectorLongLong_swigregister = _VisusKernelPy.StdVectorLongLong_swigregister
StdVectorLongLong_swigregister(StdVectorLongLong)


def cstring(*args):
    return _VisusKernelPy.cstring(*args)
cstring = _VisusKernelPy.cstring

def concatenate(*args):
    return _VisusKernelPy.concatenate(*args)
concatenate = _VisusKernelPy.concatenate

def cbool(s):
    return _VisusKernelPy.cbool(s)
cbool = _VisusKernelPy.cbool

def cint(s):
    return _VisusKernelPy.cint(s)
cint = _VisusKernelPy.cint

def cfloat(s):
    return _VisusKernelPy.cfloat(s)
cfloat = _VisusKernelPy.cfloat

def cdouble(s):
    return _VisusKernelPy.cdouble(s)
cdouble = _VisusKernelPy.cdouble

def cuint64(s):
    return _VisusKernelPy.cuint64(s)
cuint64 = _VisusKernelPy.cuint64

def cbigint(s):
    return _VisusKernelPy.cbigint(s)
cbigint = _VisusKernelPy.cbigint

def cint64(*args):
    return _VisusKernelPy.cint64(*args)
cint64 = _VisusKernelPy.cint64

def cstring10(value):
    return _VisusKernelPy.cstring10(value)
cstring10 = _VisusKernelPy.cstring10

def PrintLine(file, line, severity, msg):
    return _VisusKernelPy.PrintLine(file, line, severity, msg)
PrintLine = _VisusKernelPy.PrintLine

def RedirectLogTo(arg1, user_data=None):
    return _VisusKernelPy.RedirectLogTo(arg1, user_data)
RedirectLogTo = _VisusKernelPy.RedirectLogTo

def SetCommandLine(args):
    return _VisusKernelPy.SetCommandLine(args)
SetCommandLine = _VisusKernelPy.SetCommandLine

def VisusAssertFailed(file, line, expr):
    return _VisusKernelPy.VisusAssertFailed(file, line, expr)
VisusAssertFailed = _VisusKernelPy.VisusAssertFailed

def PrintMessageToTerminal(value):
    return _VisusKernelPy.PrintMessageToTerminal(value)
PrintMessageToTerminal = _VisusKernelPy.PrintMessageToTerminal

def VisusHasMessageLock():
    return _VisusKernelPy.VisusHasMessageLock()
VisusHasMessageLock = _VisusKernelPy.VisusHasMessageLock

def ThrowExceptionEx(file, line, what):
    return _VisusKernelPy.ThrowExceptionEx(file, line, what)
ThrowExceptionEx = _VisusKernelPy.ThrowExceptionEx
class Object(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Object, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Object, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_Object()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Object
    __del__ = lambda self: None
Object_swigregister = _VisusKernelPy.Object_swigregister
Object_swigregister(Object)
cvar = _VisusKernelPy.cvar
Pi = cvar.Pi

class Void(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Void, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Void, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_Void()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Void
    __del__ = lambda self: None
Void_swigregister = _VisusKernelPy.Void_swigregister
Void_swigregister(Void)

class VisusModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisusModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisusModule, name)
    __repr__ = _swig_repr
    if _newclass:
        getModuleConfig = staticmethod(_VisusKernelPy.VisusModule_getModuleConfig)
    else:
        getModuleConfig = _VisusKernelPy.VisusModule_getModuleConfig

    def __init__(self):
        this = _VisusKernelPy.new_VisusModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_VisusModule
    __del__ = lambda self: None
VisusModule_swigregister = _VisusKernelPy.VisusModule_swigregister
VisusModule_swigregister(VisusModule)

def VisusModule_getModuleConfig():
    return _VisusKernelPy.VisusModule_getModuleConfig()
VisusModule_getModuleConfig = _VisusKernelPy.VisusModule_getModuleConfig

class KernelModule(VisusModule):
    __swig_setmethods__ = {}
    for _s in [VisusModule]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, KernelModule, name, value)
    __swig_getmethods__ = {}
    for _s in [VisusModule]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, KernelModule, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bAttached"] = _VisusKernelPy.KernelModule_bAttached_set
    __swig_getmethods__["bAttached"] = _VisusKernelPy.KernelModule_bAttached_get
    if _newclass:
        bAttached = _swig_property(_VisusKernelPy.KernelModule_bAttached_get, _VisusKernelPy.KernelModule_bAttached_set)
    if _newclass:
        attach = staticmethod(_VisusKernelPy.KernelModule_attach)
    else:
        attach = _VisusKernelPy.KernelModule_attach
    if _newclass:
        detach = staticmethod(_VisusKernelPy.KernelModule_detach)
    else:
        detach = _VisusKernelPy.KernelModule_detach

    def __init__(self):
        this = _VisusKernelPy.new_KernelModule()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_KernelModule
    __del__ = lambda self: None
KernelModule_swigregister = _VisusKernelPy.KernelModule_swigregister
KernelModule_swigregister(KernelModule)

def KernelModule_attach():
    return _VisusKernelPy.KernelModule_attach()
KernelModule_attach = _VisusKernelPy.KernelModule_attach

def KernelModule_detach():
    return _VisusKernelPy.KernelModule_detach()
KernelModule_detach = _VisusKernelPy.KernelModule_detach

class CommandLine(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CommandLine, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CommandLine, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["args"] = _VisusKernelPy.CommandLine_args_set
    __swig_getmethods__["args"] = _VisusKernelPy.CommandLine_args_get
    if _newclass:
        args = _swig_property(_VisusKernelPy.CommandLine_args_get, _VisusKernelPy.CommandLine_args_set)
    __swig_destroy__ = _VisusKernelPy.delete_CommandLine
    __del__ = lambda self: None
CommandLine_swigregister = _VisusKernelPy.CommandLine_swigregister
CommandLine_swigregister(CommandLine)

class StringMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringMap, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_StringMap()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_StringMap
    __del__ = lambda self: None

    def clear(self):
        return _VisusKernelPy.StringMap_clear(self)

    def size(self):
        return _VisusKernelPy.StringMap_size(self)

    def empty(self):
        return _VisusKernelPy.StringMap_empty(self)

    def begin(self, *args):
        return _VisusKernelPy.StringMap_begin(self, *args)

    def end(self, *args):
        return _VisusKernelPy.StringMap_end(self, *args)

    def find(self, *args):
        return _VisusKernelPy.StringMap_find(self, *args)

    def hasValue(self, key):
        return _VisusKernelPy.StringMap_hasValue(self, key)

    def getValue(self, *args):
        return _VisusKernelPy.StringMap_getValue(self, *args)

    def setValue(self, key, value):
        return _VisusKernelPy.StringMap_setValue(self, key, value)

    def eraseValue(self, key):
        return _VisusKernelPy.StringMap_eraseValue(self, key)

    def __eq__(self, other):
        return _VisusKernelPy.StringMap___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.StringMap___ne__(self, other)
StringMap_swigregister = _VisusKernelPy.StringMap_swigregister
StringMap_swigregister(StringMap)

class HeapMemory(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HeapMemory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HeapMemory, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_HeapMemory()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_HeapMemory
    __del__ = lambda self: None
    if _newclass:
        createUnmanaged = staticmethod(_VisusKernelPy.HeapMemory_createUnmanaged)
    else:
        createUnmanaged = _VisusKernelPy.HeapMemory_createUnmanaged
    if _newclass:
        createManaged = staticmethod(_VisusKernelPy.HeapMemory_createManaged)
    else:
        createManaged = _VisusKernelPy.HeapMemory_createManaged

    def clone(self):
        return _VisusKernelPy.HeapMemory_clone(self)

    def reserve(self, new_m, file, line):
        return _VisusKernelPy.HeapMemory_reserve(self, new_m, file, line)

    def resize(self, size, file, line):
        return _VisusKernelPy.HeapMemory_resize(self, size, file, line)

    def shrink(self):
        return _VisusKernelPy.HeapMemory_shrink(self)

    def hasConstantValue(self, value):
        return _VisusKernelPy.HeapMemory_hasConstantValue(self, value)

    def isAllZero(self):
        return _VisusKernelPy.HeapMemory_isAllZero(self)

    def c_capacity(self):
        return _VisusKernelPy.HeapMemory_c_capacity(self)

    def c_size(self):
        return _VisusKernelPy.HeapMemory_c_size(self)

    def c_ptr(self):
        return _VisusKernelPy.HeapMemory_c_ptr(self)

    def fill(self, value):
        return _VisusKernelPy.HeapMemory_fill(self, value)

    def toString(self):
        return _VisusKernelPy.HeapMemory_toString(self)

    def base64Encode(self):
        return _VisusKernelPy.HeapMemory_base64Encode(self)
    if _newclass:
        base64Decode = staticmethod(_VisusKernelPy.HeapMemory_base64Decode)
    else:
        base64Decode = _VisusKernelPy.HeapMemory_base64Decode
    if _newclass:
        copy = staticmethod(_VisusKernelPy.HeapMemory_copy)
    else:
        copy = _VisusKernelPy.HeapMemory_copy
    if _newclass:
        equals = staticmethod(_VisusKernelPy.HeapMemory_equals)
    else:
        equals = _VisusKernelPy.HeapMemory_equals
HeapMemory_swigregister = _VisusKernelPy.HeapMemory_swigregister
HeapMemory_swigregister(HeapMemory)

def HeapMemory_createUnmanaged(p, n):
    return _VisusKernelPy.HeapMemory_createUnmanaged(p, n)
HeapMemory_createUnmanaged = _VisusKernelPy.HeapMemory_createUnmanaged

def HeapMemory_createManaged(p, n):
    return _VisusKernelPy.HeapMemory_createManaged(p, n)
HeapMemory_createManaged = _VisusKernelPy.HeapMemory_createManaged

def HeapMemory_base64Decode(input):
    return _VisusKernelPy.HeapMemory_base64Decode(input)
HeapMemory_base64Decode = _VisusKernelPy.HeapMemory_base64Decode

def HeapMemory_copy(dst, src):
    return _VisusKernelPy.HeapMemory_copy(dst, src)
HeapMemory_copy = _VisusKernelPy.HeapMemory_copy

def HeapMemory_equals(a, b):
    return _VisusKernelPy.HeapMemory_equals(a, b)
HeapMemory_equals = _VisusKernelPy.HeapMemory_equals

class Aborted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Aborted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Aborted, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_Aborted()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getAbortedId(self):
        return _VisusKernelPy.Aborted_getAbortedId(self)

    def __call__(self):
        return _VisusKernelPy.Aborted___call__(self)

    def setTrue(self):
        return _VisusKernelPy.Aborted_setTrue(self)

    def setFalse(self):
        return _VisusKernelPy.Aborted_setFalse(self)

    def __eq__(self, other):
        return _VisusKernelPy.Aborted___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Aborted___ne__(self, other)
    __swig_destroy__ = _VisusKernelPy.delete_Aborted
    __del__ = lambda self: None
Aborted_swigregister = _VisusKernelPy.Aborted_swigregister
Aborted_swigregister(Aborted)

class StringTree(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringTree, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringTree, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusKernelPy.StringTree_name_set
    __swig_getmethods__["name"] = _VisusKernelPy.StringTree_name_get
    if _newclass:
        name = _swig_property(_VisusKernelPy.StringTree_name_get, _VisusKernelPy.StringTree_name_set)
    __swig_setmethods__["attributes"] = _VisusKernelPy.StringTree_attributes_set
    __swig_getmethods__["attributes"] = _VisusKernelPy.StringTree_attributes_get
    if _newclass:
        attributes = _swig_property(_VisusKernelPy.StringTree_attributes_get, _VisusKernelPy.StringTree_attributes_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_StringTree(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_StringTree
    __del__ = lambda self: None

    def valid(self):
        return _VisusKernelPy.StringTree_valid(self)

    def __nonzero__(self):
        return _VisusKernelPy.StringTree___nonzero__(self)
    __bool__ = __nonzero__


    if _newclass:
        fromString = staticmethod(_VisusKernelPy.StringTree_fromString)
    else:
        fromString = _VisusKernelPy.StringTree_fromString

    def assign(self, other):
        return _VisusKernelPy.StringTree_assign(self, other)

    def hasAttribute(self, name):
        return _VisusKernelPy.StringTree_hasAttribute(self, name)

    def getAttribute(self, *args):
        return _VisusKernelPy.StringTree_getAttribute(self, *args)

    def setAttribute(self, name, value):
        return _VisusKernelPy.StringTree_setAttribute(self, name, value)

    def removeAttribute(self, name):
        return _VisusKernelPy.StringTree_removeAttribute(self, name)

    def getNumberOfChilds(self):
        return _VisusKernelPy.StringTree_getNumberOfChilds(self)

    def addChildAtBegin(self, child):
        return _VisusKernelPy.StringTree_addChildAtBegin(self, child)

    def addChild(self, *args):
        return _VisusKernelPy.StringTree_addChild(self, *args)

    def getFirstChild(self):
        return _VisusKernelPy.StringTree_getFirstChild(self)

    def getLastChild(self):
        return _VisusKernelPy.StringTree_getLastChild(self)

    def getChild(self, *args):
        return _VisusKernelPy.StringTree_getChild(self, *args)

    def getChilds(self, *args):
        return _VisusKernelPy.StringTree_getChilds(self, *args)

    def getAllChilds(self, name):
        return _VisusKernelPy.StringTree_getAllChilds(self, name)

    def removeChild(self, name):
        return _VisusKernelPy.StringTree_removeChild(self, name)

    def isHash(self):
        return _VisusKernelPy.StringTree_isHash(self)

    def isComment(self):
        return _VisusKernelPy.StringTree_isComment(self)

    def isText(self):
        return _VisusKernelPy.StringTree_isText(self)

    def isCData(self):
        return _VisusKernelPy.StringTree_isCData(self)

    def addComment(self, value):
        return _VisusKernelPy.StringTree_addComment(self, value)

    def addText(self, value):
        return _VisusKernelPy.StringTree_addText(self, value)

    def addCData(self, value):
        return _VisusKernelPy.StringTree_addCData(self, value)

    def write(self, *args):
        return _VisusKernelPy.StringTree_write(self, *args)

    def read(self, *args):
        return _VisusKernelPy.StringTree_read(self, *args)

    def readString(self, *args):
        return _VisusKernelPy.StringTree_readString(self, *args)

    def readBool(self, key, default_value=False):
        return _VisusKernelPy.StringTree_readBool(self, key, default_value)

    def readInt(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readInt(self, key, default_value)

    def readInt64(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readInt64(self, key, default_value)

    def readDouble(self, key, default_value=0):
        return _VisusKernelPy.StringTree_readDouble(self, key, default_value)

    def writeText(self, *args):
        return _VisusKernelPy.StringTree_writeText(self, *args)

    def readText(self, *args):
        return _VisusKernelPy.StringTree_readText(self, *args)
    if _newclass:
        merge = staticmethod(_VisusKernelPy.StringTree_merge)
    else:
        merge = _VisusKernelPy.StringTree_merge
    if _newclass:
        postProcess = staticmethod(_VisusKernelPy.StringTree_postProcess)
    else:
        postProcess = _VisusKernelPy.StringTree_postProcess

    def toXmlString(self):
        return _VisusKernelPy.StringTree_toXmlString(self)

    def toJSONString(self):
        return _VisusKernelPy.StringTree_toJSONString(self)

    def toString(self):
        return _VisusKernelPy.StringTree_toString(self)
StringTree_swigregister = _VisusKernelPy.StringTree_swigregister
StringTree_swigregister(StringTree)

def StringTree_fromString(content, bEnablePostProcessing=True):
    return _VisusKernelPy.StringTree_fromString(content, bEnablePostProcessing)
StringTree_fromString = _VisusKernelPy.StringTree_fromString

def StringTree_merge(dst, src):
    return _VisusKernelPy.StringTree_merge(dst, src)
StringTree_merge = _VisusKernelPy.StringTree_merge

def StringTree_postProcess(src):
    return _VisusKernelPy.StringTree_postProcess(src)
StringTree_postProcess = _VisusKernelPy.StringTree_postProcess

class ConfigFile(StringTree):
    __swig_setmethods__ = {}
    for _s in [StringTree]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConfigFile, name, value)
    __swig_getmethods__ = {}
    for _s in [StringTree]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, ConfigFile, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_ConfigFile(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_ConfigFile
    __del__ = lambda self: None
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.ConfigFile_fromString)
    else:
        fromString = _VisusKernelPy.ConfigFile_fromString

    def getFilename(self):
        return _VisusKernelPy.ConfigFile_getFilename(self)

    def load(self, filename, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_load(self, filename, bEnablePostProcessing)

    def reload(self, bEnablePostProcessing=True):
        return _VisusKernelPy.ConfigFile_reload(self, bEnablePostProcessing)

    def save(self):
        return _VisusKernelPy.ConfigFile_save(self)
ConfigFile_swigregister = _VisusKernelPy.ConfigFile_swigregister
ConfigFile_swigregister(ConfigFile)

def ConfigFile_fromString(content, bEnablePostProcessing=True):
    return _VisusKernelPy.ConfigFile_fromString(content, bEnablePostProcessing)
ConfigFile_fromString = _VisusKernelPy.ConfigFile_fromString

class Color(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Color, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Color, name)
    __repr__ = _swig_repr
    RGBType = _VisusKernelPy.Color_RGBType
    HSBType = _VisusKernelPy.Color_HSBType
    HLSType = _VisusKernelPy.Color_HLSType
    CieLabType = _VisusKernelPy.Color_CieLabType

    def __init__(self, *args):
        this = _VisusKernelPy.new_Color(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Color
    __del__ = lambda self: None

    def clampToRange(self, a, b):
        return _VisusKernelPy.Color_clampToRange(self, a, b)
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Color_fromString)
    else:
        fromString = _VisusKernelPy.Color_fromString
    if _newclass:
        createFromUint32 = staticmethod(_VisusKernelPy.Color_createFromUint32)
    else:
        createFromUint32 = _VisusKernelPy.Color_createFromUint32
    if _newclass:
        random = staticmethod(_VisusKernelPy.Color_random)
    else:
        random = _VisusKernelPy.Color_random

    def getColorModel(self):
        return _VisusKernelPy.Color_getColorModel(self)

    def setColorModel(self, value):
        return _VisusKernelPy.Color_setColorModel(self, value)

    def get(self, index):
        return _VisusKernelPy.Color_get(self, index)

    def set(self, index, value):
        return _VisusKernelPy.Color_set(self, index, value)

    def __getitem__(self, index):
        return _VisusKernelPy.Color___getitem__(self, index)

    def __getitem_ref__(self, index):
        return _VisusKernelPy.Color___getitem_ref__(self, index)

    def assign(self, other):
        return _VisusKernelPy.Color_assign(self, other)
    if _newclass:
        distance = staticmethod(_VisusKernelPy.Color_distance)
    else:
        distance = _VisusKernelPy.Color_distance

    def __eq__(self, other):
        return _VisusKernelPy.Color___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Color___ne__(self, other)

    def __mul__(self, s):
        return _VisusKernelPy.Color___mul__(self, s)

    def withAlpha(self, alpha):
        return _VisusKernelPy.Color_withAlpha(self, alpha)

    def convertToOtherModel(self, color_model):
        return _VisusKernelPy.Color_convertToOtherModel(self, color_model)

    def toRGB(self):
        return _VisusKernelPy.Color_toRGB(self)

    def toHSB(self):
        return _VisusKernelPy.Color_toHSB(self)

    def toHLS(self):
        return _VisusKernelPy.Color_toHLS(self)

    def toCieLab(self):
        return _VisusKernelPy.Color_toCieLab(self)

    def getRed(self):
        return _VisusKernelPy.Color_getRed(self)

    def getGreen(self):
        return _VisusKernelPy.Color_getGreen(self)

    def getBlue(self):
        return _VisusKernelPy.Color_getBlue(self)

    def getHue(self):
        return _VisusKernelPy.Color_getHue(self)

    def getSaturation(self):
        return _VisusKernelPy.Color_getSaturation(self)

    def getLightness(self):
        return _VisusKernelPy.Color_getLightness(self)

    def getBrightness(self):
        return _VisusKernelPy.Color_getBrightness(self)

    def getAlpha(self):
        return _VisusKernelPy.Color_getAlpha(self)

    def setRed(self, value):
        return _VisusKernelPy.Color_setRed(self, value)

    def setGreen(self, value):
        return _VisusKernelPy.Color_setGreen(self, value)

    def setBlue(self, value):
        return _VisusKernelPy.Color_setBlue(self, value)

    def setHue(self, value):
        return _VisusKernelPy.Color_setHue(self, value)

    def setSaturation(self, value):
        return _VisusKernelPy.Color_setSaturation(self, value)

    def setLightness(self, value):
        return _VisusKernelPy.Color_setLightness(self, value)

    def setBrightness(self, value):
        return _VisusKernelPy.Color_setBrightness(self, value)

    def setAlpha(self, value):
        return _VisusKernelPy.Color_setAlpha(self, value)
    if _newclass:
        interpolate = staticmethod(_VisusKernelPy.Color_interpolate)
    else:
        interpolate = _VisusKernelPy.Color_interpolate

    def toString(self, bHex=True):
        return _VisusKernelPy.Color_toString(self, bHex)

    def write(self, ar):
        return _VisusKernelPy.Color_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Color_read(self, ar)
Color_swigregister = _VisusKernelPy.Color_swigregister
Color_swigregister(Color)

def Color_fromString(*args):
    return _VisusKernelPy.Color_fromString(*args)
Color_fromString = _VisusKernelPy.Color_fromString

def Color_createFromUint32(value):
    return _VisusKernelPy.Color_createFromUint32(value)
Color_createFromUint32 = _VisusKernelPy.Color_createFromUint32

def Color_random(Alpha=1.0):
    return _VisusKernelPy.Color_random(Alpha)
Color_random = _VisusKernelPy.Color_random

def Color_distance(c1, c2):
    return _VisusKernelPy.Color_distance(c1, c2)
Color_distance = _VisusKernelPy.Color_distance

def Color_interpolate(alpha, c1, beta, c2):
    return _VisusKernelPy.Color_interpolate(alpha, c1, beta, c2)
Color_interpolate = _VisusKernelPy.Color_interpolate

class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_Path(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Path
    __del__ = lambda self: None
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Path_invalid)
    else:
        invalid = _VisusKernelPy.Path_invalid

    def empty(self):
        return _VisusKernelPy.Path_empty(self)

    def isRootDirectory(self):
        return _VisusKernelPy.Path_isRootDirectory(self)

    def toString(self):
        return _VisusKernelPy.Path_toString(self)

    def getParent(self, normalize=True):
        return _VisusKernelPy.Path_getParent(self, normalize)

    def getChild(self, child):
        return _VisusKernelPy.Path_getChild(self, child)

    def getFileName(self):
        return _VisusKernelPy.Path_getFileName(self)

    def getFileNameWithoutExtension(self):
        return _VisusKernelPy.Path_getFileNameWithoutExtension(self)

    def getExtension(self):
        return _VisusKernelPy.Path_getExtension(self)
Path_swigregister = _VisusKernelPy.Path_swigregister
Path_swigregister(Path)

def Path_invalid():
    return _VisusKernelPy.Path_invalid()
Path_invalid = _VisusKernelPy.Path_invalid

class KnownPaths(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KnownPaths, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KnownPaths, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["VisusHome"] = _VisusKernelPy.KnownPaths_VisusHome_set
    __swig_getmethods__["VisusHome"] = _VisusKernelPy.KnownPaths_VisusHome_get
    if _newclass:
        VisusHome = _swig_property(_VisusKernelPy.KnownPaths_VisusHome_get, _VisusKernelPy.KnownPaths_VisusHome_set)
    __swig_setmethods__["BinaryDirectory"] = _VisusKernelPy.KnownPaths_BinaryDirectory_set
    __swig_getmethods__["BinaryDirectory"] = _VisusKernelPy.KnownPaths_BinaryDirectory_get
    if _newclass:
        BinaryDirectory = _swig_property(_VisusKernelPy.KnownPaths_BinaryDirectory_get, _VisusKernelPy.KnownPaths_BinaryDirectory_set)
    if _newclass:
        CurrentWorkingDirectory = staticmethod(_VisusKernelPy.KnownPaths_CurrentWorkingDirectory)
    else:
        CurrentWorkingDirectory = _VisusKernelPy.KnownPaths_CurrentWorkingDirectory
    __swig_destroy__ = _VisusKernelPy.delete_KnownPaths
    __del__ = lambda self: None
KnownPaths_swigregister = _VisusKernelPy.KnownPaths_swigregister
KnownPaths_swigregister(KnownPaths)

def KnownPaths_CurrentWorkingDirectory():
    return _VisusKernelPy.KnownPaths_CurrentWorkingDirectory()
KnownPaths_CurrentWorkingDirectory = _VisusKernelPy.KnownPaths_CurrentWorkingDirectory

class FileGlobalStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileGlobalStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileGlobalStats, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_FileGlobalStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resetStats(self):
        return _VisusKernelPy.FileGlobalStats_resetStats(self)

    def getReadBytes(self):
        return _VisusKernelPy.FileGlobalStats_getReadBytes(self)

    def getWriteBytes(self):
        return _VisusKernelPy.FileGlobalStats_getWriteBytes(self)

    def getNumOpen(self):
        return _VisusKernelPy.FileGlobalStats_getNumOpen(self)
    __swig_destroy__ = _VisusKernelPy.delete_FileGlobalStats
    __del__ = lambda self: None
FileGlobalStats_swigregister = _VisusKernelPy.FileGlobalStats_swigregister
FileGlobalStats_swigregister(FileGlobalStats)

class File(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, File, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, File, name)
    __repr__ = _swig_repr
    NoOptions = _VisusKernelPy.File_NoOptions
    MustCreateFile = _VisusKernelPy.File_MustCreateFile

    def __init__(self):
        this = _VisusKernelPy.new_File()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_File
    __del__ = lambda self: None
    if _newclass:
        global_stats = staticmethod(_VisusKernelPy.File_global_stats)
    else:
        global_stats = _VisusKernelPy.File_global_stats

    def isOpen(self):
        return _VisusKernelPy.File_isOpen(self)

    def open(self, filename, file_mode):
        return _VisusKernelPy.File_open(self, filename, file_mode)

    def createAndOpen(self, filename, file_mode):
        return _VisusKernelPy.File_createAndOpen(self, filename, file_mode)

    def close(self):
        return _VisusKernelPy.File_close(self)

    def size(self):
        return _VisusKernelPy.File_size(self)

    def canRead(self):
        return _VisusKernelPy.File_canRead(self)

    def canWrite(self):
        return _VisusKernelPy.File_canWrite(self)

    def getFileMode(self):
        return _VisusKernelPy.File_getFileMode(self)

    def getFilename(self):
        return _VisusKernelPy.File_getFilename(self)

    def write(self, pos, count, buffer):
        return _VisusKernelPy.File_write(self, pos, count, buffer)

    def read(self, pos, count, buffer):
        return _VisusKernelPy.File_read(self, pos, count, buffer)
File_swigregister = _VisusKernelPy.File_swigregister
File_swigregister(File)

def File_global_stats():
    return _VisusKernelPy.File_global_stats()
File_global_stats = _VisusKernelPy.File_global_stats

class FileUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FileUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FileUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        existsFile = staticmethod(_VisusKernelPy.FileUtils_existsFile)
    else:
        existsFile = _VisusKernelPy.FileUtils_existsFile
    if _newclass:
        existsDirectory = staticmethod(_VisusKernelPy.FileUtils_existsDirectory)
    else:
        existsDirectory = _VisusKernelPy.FileUtils_existsDirectory
    if _newclass:
        removeFile = staticmethod(_VisusKernelPy.FileUtils_removeFile)
    else:
        removeFile = _VisusKernelPy.FileUtils_removeFile
    if _newclass:
        createDirectory = staticmethod(_VisusKernelPy.FileUtils_createDirectory)
    else:
        createDirectory = _VisusKernelPy.FileUtils_createDirectory
    if _newclass:
        removeDirectory = staticmethod(_VisusKernelPy.FileUtils_removeDirectory)
    else:
        removeDirectory = _VisusKernelPy.FileUtils_removeDirectory
    if _newclass:
        getFileSize = staticmethod(_VisusKernelPy.FileUtils_getFileSize)
    else:
        getFileSize = _VisusKernelPy.FileUtils_getFileSize
    if _newclass:
        getTimeLastModified = staticmethod(_VisusKernelPy.FileUtils_getTimeLastModified)
    else:
        getTimeLastModified = _VisusKernelPy.FileUtils_getTimeLastModified
    if _newclass:
        getTimeLastAccessed = staticmethod(_VisusKernelPy.FileUtils_getTimeLastAccessed)
    else:
        getTimeLastAccessed = _VisusKernelPy.FileUtils_getTimeLastAccessed
    if _newclass:
        lock = staticmethod(_VisusKernelPy.FileUtils_lock)
    else:
        lock = _VisusKernelPy.FileUtils_lock
    if _newclass:
        unlock = staticmethod(_VisusKernelPy.FileUtils_unlock)
    else:
        unlock = _VisusKernelPy.FileUtils_unlock
    if _newclass:
        touch = staticmethod(_VisusKernelPy.FileUtils_touch)
    else:
        touch = _VisusKernelPy.FileUtils_touch
    if _newclass:
        copyFile = staticmethod(_VisusKernelPy.FileUtils_copyFile)
    else:
        copyFile = _VisusKernelPy.FileUtils_copyFile
    if _newclass:
        moveFile = staticmethod(_VisusKernelPy.FileUtils_moveFile)
    else:
        moveFile = _VisusKernelPy.FileUtils_moveFile
    if _newclass:
        createLink = staticmethod(_VisusKernelPy.FileUtils_createLink)
    else:
        createLink = _VisusKernelPy.FileUtils_createLink
    __swig_destroy__ = _VisusKernelPy.delete_FileUtils
    __del__ = lambda self: None
FileUtils_swigregister = _VisusKernelPy.FileUtils_swigregister
FileUtils_swigregister(FileUtils)

def FileUtils_existsFile(path):
    return _VisusKernelPy.FileUtils_existsFile(path)
FileUtils_existsFile = _VisusKernelPy.FileUtils_existsFile

def FileUtils_existsDirectory(path):
    return _VisusKernelPy.FileUtils_existsDirectory(path)
FileUtils_existsDirectory = _VisusKernelPy.FileUtils_existsDirectory

def FileUtils_removeFile(path):
    return _VisusKernelPy.FileUtils_removeFile(path)
FileUtils_removeFile = _VisusKernelPy.FileUtils_removeFile

def FileUtils_createDirectory(path, bCreateParents=True):
    return _VisusKernelPy.FileUtils_createDirectory(path, bCreateParents)
FileUtils_createDirectory = _VisusKernelPy.FileUtils_createDirectory

def FileUtils_removeDirectory(path):
    return _VisusKernelPy.FileUtils_removeDirectory(path)
FileUtils_removeDirectory = _VisusKernelPy.FileUtils_removeDirectory

def FileUtils_getFileSize(path):
    return _VisusKernelPy.FileUtils_getFileSize(path)
FileUtils_getFileSize = _VisusKernelPy.FileUtils_getFileSize

def FileUtils_getTimeLastModified(path):
    return _VisusKernelPy.FileUtils_getTimeLastModified(path)
FileUtils_getTimeLastModified = _VisusKernelPy.FileUtils_getTimeLastModified

def FileUtils_getTimeLastAccessed(path):
    return _VisusKernelPy.FileUtils_getTimeLastAccessed(path)
FileUtils_getTimeLastAccessed = _VisusKernelPy.FileUtils_getTimeLastAccessed

def FileUtils_lock(path):
    return _VisusKernelPy.FileUtils_lock(path)
FileUtils_lock = _VisusKernelPy.FileUtils_lock

def FileUtils_unlock(path):
    return _VisusKernelPy.FileUtils_unlock(path)
FileUtils_unlock = _VisusKernelPy.FileUtils_unlock

def FileUtils_touch(path):
    return _VisusKernelPy.FileUtils_touch(path)
FileUtils_touch = _VisusKernelPy.FileUtils_touch

def FileUtils_copyFile(src, dst, bFailIfExist):
    return _VisusKernelPy.FileUtils_copyFile(src, dst, bFailIfExist)
FileUtils_copyFile = _VisusKernelPy.FileUtils_copyFile

def FileUtils_moveFile(src, dst):
    return _VisusKernelPy.FileUtils_moveFile(src, dst)
FileUtils_moveFile = _VisusKernelPy.FileUtils_moveFile

def FileUtils_createLink(existing_file, new_file):
    return _VisusKernelPy.FileUtils_createLink(existing_file, new_file)
FileUtils_createLink = _VisusKernelPy.FileUtils_createLink

class ScopedFileLock(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ScopedFileLock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ScopedFileLock, name)
    __repr__ = _swig_repr

    def __init__(self, filename_):
        this = _VisusKernelPy.new_ScopedFileLock(filename_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_ScopedFileLock
    __del__ = lambda self: None
ScopedFileLock_swigregister = _VisusKernelPy.ScopedFileLock_swigregister
ScopedFileLock_swigregister(ScopedFileLock)

class Time(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Time, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Time, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_Time(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Time
    __del__ = lambda self: None
    if _newclass:
        getTimeStamp = staticmethod(_VisusKernelPy.Time_getTimeStamp)
    else:
        getTimeStamp = _VisusKernelPy.Time_getTimeStamp
    if _newclass:
        now = staticmethod(_VisusKernelPy.Time_now)
    else:
        now = _VisusKernelPy.Time_now

    def elapsedMsec(self):
        return _VisusKernelPy.Time_elapsedMsec(self)

    def elapsedSec(self):
        return _VisusKernelPy.Time_elapsedSec(self)

    def getUTCMilliseconds(self):
        return _VisusKernelPy.Time_getUTCMilliseconds(self)

    def getYear(self):
        return _VisusKernelPy.Time_getYear(self)

    def getMonth(self):
        return _VisusKernelPy.Time_getMonth(self)

    def getDayOfMonth(self):
        return _VisusKernelPy.Time_getDayOfMonth(self)

    def getDayOfWeek(self):
        return _VisusKernelPy.Time_getDayOfWeek(self)

    def getDayOfYear(self):
        return _VisusKernelPy.Time_getDayOfYear(self)

    def getHours(self):
        return _VisusKernelPy.Time_getHours(self)

    def getMinutes(self):
        return _VisusKernelPy.Time_getMinutes(self)

    def getSeconds(self):
        return _VisusKernelPy.Time_getSeconds(self)

    def getMilliseconds(self):
        return _VisusKernelPy.Time_getMilliseconds(self)

    def getFormattedLocalTime(self):
        return _VisusKernelPy.Time_getFormattedLocalTime(self)

    def getPrettyFormattedShortLocalTime(self):
        return _VisusKernelPy.Time_getPrettyFormattedShortLocalTime(self)
    if _newclass:
        getWeekdayName = staticmethod(_VisusKernelPy.Time_getWeekdayName)
    else:
        getWeekdayName = _VisusKernelPy.Time_getWeekdayName
    if _newclass:
        getMonthName = staticmethod(_VisusKernelPy.Time_getMonthName)
    else:
        getMonthName = _VisusKernelPy.Time_getMonthName

    def assign(self, other):
        return _VisusKernelPy.Time_assign(self, other)

    def __eq__(self, other):
        return _VisusKernelPy.Time___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Time___ne__(self, other)

    def __lt__(self, other):
        return _VisusKernelPy.Time___lt__(self, other)

    def __le__(self, other):
        return _VisusKernelPy.Time___le__(self, other)

    def __gt__(self, other):
        return _VisusKernelPy.Time___gt__(self, other)

    def __ge__(self, other):
        return _VisusKernelPy.Time___ge__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.Time___sub__(self, other)
Time_swigregister = _VisusKernelPy.Time_swigregister
Time_swigregister(Time)

def Time_getTimeStamp():
    return _VisusKernelPy.Time_getTimeStamp()
Time_getTimeStamp = _VisusKernelPy.Time_getTimeStamp

def Time_now():
    return _VisusKernelPy.Time_now()
Time_now = _VisusKernelPy.Time_now

def Time_getWeekdayName(*args):
    return _VisusKernelPy.Time_getWeekdayName(*args)
Time_getWeekdayName = _VisusKernelPy.Time_getWeekdayName

def Time_getMonthName(*args):
    return _VisusKernelPy.Time_getMonthName(*args)
Time_getMonthName = _VisusKernelPy.Time_getMonthName

class StringUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        convertDoubleToString = staticmethod(_VisusKernelPy.StringUtils_convertDoubleToString)
    else:
        convertDoubleToString = _VisusKernelPy.StringUtils_convertDoubleToString
    if _newclass:
        ltrim = staticmethod(_VisusKernelPy.StringUtils_ltrim)
    else:
        ltrim = _VisusKernelPy.StringUtils_ltrim
    if _newclass:
        rtrim = staticmethod(_VisusKernelPy.StringUtils_rtrim)
    else:
        rtrim = _VisusKernelPy.StringUtils_rtrim
    if _newclass:
        trim = staticmethod(_VisusKernelPy.StringUtils_trim)
    else:
        trim = _VisusKernelPy.StringUtils_trim
    if _newclass:
        reverse = staticmethod(_VisusKernelPy.StringUtils_reverse)
    else:
        reverse = _VisusKernelPy.StringUtils_reverse
    if _newclass:
        removeSpaces = staticmethod(_VisusKernelPy.StringUtils_removeSpaces)
    else:
        removeSpaces = _VisusKernelPy.StringUtils_removeSpaces
    if _newclass:
        onlyAlNum = staticmethod(_VisusKernelPy.StringUtils_onlyAlNum)
    else:
        onlyAlNum = _VisusKernelPy.StringUtils_onlyAlNum
    if _newclass:
        toLower = staticmethod(_VisusKernelPy.StringUtils_toLower)
    else:
        toLower = _VisusKernelPy.StringUtils_toLower
    if _newclass:
        toUpper = staticmethod(_VisusKernelPy.StringUtils_toUpper)
    else:
        toUpper = _VisusKernelPy.StringUtils_toUpper
    if _newclass:
        find = staticmethod(_VisusKernelPy.StringUtils_find)
    else:
        find = _VisusKernelPy.StringUtils_find
    if _newclass:
        contains = staticmethod(_VisusKernelPy.StringUtils_contains)
    else:
        contains = _VisusKernelPy.StringUtils_contains
    if _newclass:
        containsControl = staticmethod(_VisusKernelPy.StringUtils_containsControl)
    else:
        containsControl = _VisusKernelPy.StringUtils_containsControl
    if _newclass:
        nextToken = staticmethod(_VisusKernelPy.StringUtils_nextToken)
    else:
        nextToken = _VisusKernelPy.StringUtils_nextToken
    if _newclass:
        replaceFirst = staticmethod(_VisusKernelPy.StringUtils_replaceFirst)
    else:
        replaceFirst = _VisusKernelPy.StringUtils_replaceFirst
    if _newclass:
        replaceAll = staticmethod(_VisusKernelPy.StringUtils_replaceAll)
    else:
        replaceAll = _VisusKernelPy.StringUtils_replaceAll
    if _newclass:
        startsWith = staticmethod(_VisusKernelPy.StringUtils_startsWith)
    else:
        startsWith = _VisusKernelPy.StringUtils_startsWith
    if _newclass:
        endsWith = staticmethod(_VisusKernelPy.StringUtils_endsWith)
    else:
        endsWith = _VisusKernelPy.StringUtils_endsWith
    if _newclass:
        tryParse = staticmethod(_VisusKernelPy.StringUtils_tryParse)
    else:
        tryParse = _VisusKernelPy.StringUtils_tryParse
    if _newclass:
        split = staticmethod(_VisusKernelPy.StringUtils_split)
    else:
        split = _VisusKernelPy.StringUtils_split
    if _newclass:
        parseInts = staticmethod(_VisusKernelPy.StringUtils_parseInts)
    else:
        parseInts = _VisusKernelPy.StringUtils_parseInts
    if _newclass:
        parseDoubles = staticmethod(_VisusKernelPy.StringUtils_parseDoubles)
    else:
        parseDoubles = _VisusKernelPy.StringUtils_parseDoubles
    if _newclass:
        splitInChunks = staticmethod(_VisusKernelPy.StringUtils_splitInChunks)
    else:
        splitInChunks = _VisusKernelPy.StringUtils_splitInChunks
    if _newclass:
        join = staticmethod(_VisusKernelPy.StringUtils_join)
    else:
        join = _VisusKernelPy.StringUtils_join
    if _newclass:
        joinLines = staticmethod(_VisusKernelPy.StringUtils_joinLines)
    else:
        joinLines = _VisusKernelPy.StringUtils_joinLines
    if _newclass:
        combine = staticmethod(_VisusKernelPy.StringUtils_combine)
    else:
        combine = _VisusKernelPy.StringUtils_combine
    if _newclass:
        decorateAll = staticmethod(_VisusKernelPy.StringUtils_decorateAll)
    else:
        decorateAll = _VisusKernelPy.StringUtils_decorateAll
    if _newclass:
        getLines = staticmethod(_VisusKernelPy.StringUtils_getLines)
    else:
        getLines = _VisusKernelPy.StringUtils_getLines
    if _newclass:
        getNonEmptyLines = staticmethod(_VisusKernelPy.StringUtils_getNonEmptyLines)
    else:
        getNonEmptyLines = _VisusKernelPy.StringUtils_getNonEmptyLines
    if _newclass:
        getLinesAndPurgeComments = staticmethod(_VisusKernelPy.StringUtils_getLinesAndPurgeComments)
    else:
        getLinesAndPurgeComments = _VisusKernelPy.StringUtils_getLinesAndPurgeComments
    if _newclass:
        base64Encode = staticmethod(_VisusKernelPy.StringUtils_base64Encode)
    else:
        base64Encode = _VisusKernelPy.StringUtils_base64Encode
    if _newclass:
        base64Decode = staticmethod(_VisusKernelPy.StringUtils_base64Decode)
    else:
        base64Decode = _VisusKernelPy.StringUtils_base64Decode
    if _newclass:
        toHexString = staticmethod(_VisusKernelPy.StringUtils_toHexString)
    else:
        toHexString = _VisusKernelPy.StringUtils_toHexString
    if _newclass:
        md5 = staticmethod(_VisusKernelPy.StringUtils_md5)
    else:
        md5 = _VisusKernelPy.StringUtils_md5
    if _newclass:
        computeChecksum = staticmethod(_VisusKernelPy.StringUtils_computeChecksum)
    else:
        computeChecksum = _VisusKernelPy.StringUtils_computeChecksum
    if _newclass:
        hmac_sha256 = staticmethod(_VisusKernelPy.StringUtils_hmac_sha256)
    else:
        hmac_sha256 = _VisusKernelPy.StringUtils_hmac_sha256
    if _newclass:
        hmac_sha1 = staticmethod(_VisusKernelPy.StringUtils_hmac_sha1)
    else:
        hmac_sha1 = _VisusKernelPy.StringUtils_hmac_sha1
    if _newclass:
        encodeForFilename = staticmethod(_VisusKernelPy.StringUtils_encodeForFilename)
    else:
        encodeForFilename = _VisusKernelPy.StringUtils_encodeForFilename
    if _newclass:
        removeEscapeChars = staticmethod(_VisusKernelPy.StringUtils_removeEscapeChars)
    else:
        removeEscapeChars = _VisusKernelPy.StringUtils_removeEscapeChars
    if _newclass:
        addEscapeChars = staticmethod(_VisusKernelPy.StringUtils_addEscapeChars)
    else:
        addEscapeChars = _VisusKernelPy.StringUtils_addEscapeChars
    if _newclass:
        getDateTimeForFilename = staticmethod(_VisusKernelPy.StringUtils_getDateTimeForFilename)
    else:
        getDateTimeForFilename = _VisusKernelPy.StringUtils_getDateTimeForFilename
    if _newclass:
        getByteSizeFromString = staticmethod(_VisusKernelPy.StringUtils_getByteSizeFromString)
    else:
        getByteSizeFromString = _VisusKernelPy.StringUtils_getByteSizeFromString
    if _newclass:
        getStringFromByteSize = staticmethod(_VisusKernelPy.StringUtils_getStringFromByteSize)
    else:
        getStringFromByteSize = _VisusKernelPy.StringUtils_getStringFromByteSize
    __swig_destroy__ = _VisusKernelPy.delete_StringUtils
    __del__ = lambda self: None
StringUtils_swigregister = _VisusKernelPy.StringUtils_swigregister
StringUtils_swigregister(StringUtils)

def StringUtils_convertDoubleToString(v, precision=-1):
    return _VisusKernelPy.StringUtils_convertDoubleToString(v, precision)
StringUtils_convertDoubleToString = _VisusKernelPy.StringUtils_convertDoubleToString

def StringUtils_ltrim(*args):
    return _VisusKernelPy.StringUtils_ltrim(*args)
StringUtils_ltrim = _VisusKernelPy.StringUtils_ltrim

def StringUtils_rtrim(*args):
    return _VisusKernelPy.StringUtils_rtrim(*args)
StringUtils_rtrim = _VisusKernelPy.StringUtils_rtrim

def StringUtils_trim(*args):
    return _VisusKernelPy.StringUtils_trim(*args)
StringUtils_trim = _VisusKernelPy.StringUtils_trim

def StringUtils_reverse(ret):
    return _VisusKernelPy.StringUtils_reverse(ret)
StringUtils_reverse = _VisusKernelPy.StringUtils_reverse

def StringUtils_removeSpaces(str):
    return _VisusKernelPy.StringUtils_removeSpaces(str)
StringUtils_removeSpaces = _VisusKernelPy.StringUtils_removeSpaces

def StringUtils_onlyAlNum(value):
    return _VisusKernelPy.StringUtils_onlyAlNum(value)
StringUtils_onlyAlNum = _VisusKernelPy.StringUtils_onlyAlNum

def StringUtils_toLower(ret):
    return _VisusKernelPy.StringUtils_toLower(ret)
StringUtils_toLower = _VisusKernelPy.StringUtils_toLower

def StringUtils_toUpper(ret):
    return _VisusKernelPy.StringUtils_toUpper(ret)
StringUtils_toUpper = _VisusKernelPy.StringUtils_toUpper

def StringUtils_find(src, what):
    return _VisusKernelPy.StringUtils_find(src, what)
StringUtils_find = _VisusKernelPy.StringUtils_find

def StringUtils_contains(src, what):
    return _VisusKernelPy.StringUtils_contains(src, what)
StringUtils_contains = _VisusKernelPy.StringUtils_contains

def StringUtils_containsControl(src):
    return _VisusKernelPy.StringUtils_containsControl(src)
StringUtils_containsControl = _VisusKernelPy.StringUtils_containsControl

def StringUtils_nextToken(src, separator):
    return _VisusKernelPy.StringUtils_nextToken(src, separator)
StringUtils_nextToken = _VisusKernelPy.StringUtils_nextToken

def StringUtils_replaceFirst(src, what, value):
    return _VisusKernelPy.StringUtils_replaceFirst(src, what, value)
StringUtils_replaceFirst = _VisusKernelPy.StringUtils_replaceFirst

def StringUtils_replaceAll(src, what, value):
    return _VisusKernelPy.StringUtils_replaceAll(src, what, value)
StringUtils_replaceAll = _VisusKernelPy.StringUtils_replaceAll

def StringUtils_startsWith(s, what, caseSensitive=False):
    return _VisusKernelPy.StringUtils_startsWith(s, what, caseSensitive)
StringUtils_startsWith = _VisusKernelPy.StringUtils_startsWith

def StringUtils_endsWith(s, what, caseSensitive=False):
    return _VisusKernelPy.StringUtils_endsWith(s, what, caseSensitive)
StringUtils_endsWith = _VisusKernelPy.StringUtils_endsWith

def StringUtils_tryParse(*args):
    return _VisusKernelPy.StringUtils_tryParse(*args)
StringUtils_tryParse = _VisusKernelPy.StringUtils_tryParse

def StringUtils_split(*args):
    return _VisusKernelPy.StringUtils_split(*args)
StringUtils_split = _VisusKernelPy.StringUtils_split

def StringUtils_parseInts(*args):
    return _VisusKernelPy.StringUtils_parseInts(*args)
StringUtils_parseInts = _VisusKernelPy.StringUtils_parseInts

def StringUtils_parseDoubles(*args):
    return _VisusKernelPy.StringUtils_parseDoubles(*args)
StringUtils_parseDoubles = _VisusKernelPy.StringUtils_parseDoubles

def StringUtils_splitInChunks(source, chunk):
    return _VisusKernelPy.StringUtils_splitInChunks(source, chunk)
StringUtils_splitInChunks = _VisusKernelPy.StringUtils_splitInChunks

def StringUtils_join(*args):
    return _VisusKernelPy.StringUtils_join(*args)
StringUtils_join = _VisusKernelPy.StringUtils_join

def StringUtils_joinLines(v):
    return _VisusKernelPy.StringUtils_joinLines(v)
StringUtils_joinLines = _VisusKernelPy.StringUtils_joinLines

def StringUtils_combine(a, combinator, b):
    return _VisusKernelPy.StringUtils_combine(a, combinator, b)
StringUtils_combine = _VisusKernelPy.StringUtils_combine

def StringUtils_decorateAll(prefix, v, postfix):
    return _VisusKernelPy.StringUtils_decorateAll(prefix, v, postfix)
StringUtils_decorateAll = _VisusKernelPy.StringUtils_decorateAll

def StringUtils_getLines(s):
    return _VisusKernelPy.StringUtils_getLines(s)
StringUtils_getLines = _VisusKernelPy.StringUtils_getLines

def StringUtils_getNonEmptyLines(s):
    return _VisusKernelPy.StringUtils_getNonEmptyLines(s)
StringUtils_getNonEmptyLines = _VisusKernelPy.StringUtils_getNonEmptyLines

def StringUtils_getLinesAndPurgeComments(source, commentString):
    return _VisusKernelPy.StringUtils_getLinesAndPurgeComments(source, commentString)
StringUtils_getLinesAndPurgeComments = _VisusKernelPy.StringUtils_getLinesAndPurgeComments

def StringUtils_base64Encode(input):
    return _VisusKernelPy.StringUtils_base64Encode(input)
StringUtils_base64Encode = _VisusKernelPy.StringUtils_base64Encode

def StringUtils_base64Decode(input):
    return _VisusKernelPy.StringUtils_base64Decode(input)
StringUtils_base64Decode = _VisusKernelPy.StringUtils_base64Decode

def StringUtils_toHexString(*args):
    return _VisusKernelPy.StringUtils_toHexString(*args)
StringUtils_toHexString = _VisusKernelPy.StringUtils_toHexString

def StringUtils_md5(input):
    return _VisusKernelPy.StringUtils_md5(input)
StringUtils_md5 = _VisusKernelPy.StringUtils_md5

def StringUtils_computeChecksum(input):
    return _VisusKernelPy.StringUtils_computeChecksum(input)
StringUtils_computeChecksum = _VisusKernelPy.StringUtils_computeChecksum

def StringUtils_hmac_sha256(input, key):
    return _VisusKernelPy.StringUtils_hmac_sha256(input, key)
StringUtils_hmac_sha256 = _VisusKernelPy.StringUtils_hmac_sha256

def StringUtils_hmac_sha1(input, key):
    return _VisusKernelPy.StringUtils_hmac_sha1(input, key)
StringUtils_hmac_sha1 = _VisusKernelPy.StringUtils_hmac_sha1

def StringUtils_encodeForFilename(value):
    return _VisusKernelPy.StringUtils_encodeForFilename(value)
StringUtils_encodeForFilename = _VisusKernelPy.StringUtils_encodeForFilename

def StringUtils_removeEscapeChars(value):
    return _VisusKernelPy.StringUtils_removeEscapeChars(value)
StringUtils_removeEscapeChars = _VisusKernelPy.StringUtils_removeEscapeChars

def StringUtils_addEscapeChars(value):
    return _VisusKernelPy.StringUtils_addEscapeChars(value)
StringUtils_addEscapeChars = _VisusKernelPy.StringUtils_addEscapeChars

def StringUtils_getDateTimeForFilename():
    return _VisusKernelPy.StringUtils_getDateTimeForFilename()
StringUtils_getDateTimeForFilename = _VisusKernelPy.StringUtils_getDateTimeForFilename

def StringUtils_getByteSizeFromString(value):
    return _VisusKernelPy.StringUtils_getByteSizeFromString(value)
StringUtils_getByteSizeFromString = _VisusKernelPy.StringUtils_getByteSizeFromString

def StringUtils_getStringFromByteSize(size):
    return _VisusKernelPy.StringUtils_getStringFromByteSize(size)
StringUtils_getStringFromByteSize = _VisusKernelPy.StringUtils_getStringFromByteSize

class ParseStringParams(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ParseStringParams, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ParseStringParams, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _VisusKernelPy.ParseStringParams_source_set
    __swig_getmethods__["source"] = _VisusKernelPy.ParseStringParams_source_get
    if _newclass:
        source = _swig_property(_VisusKernelPy.ParseStringParams_source_get, _VisusKernelPy.ParseStringParams_source_set)
    __swig_setmethods__["without_params"] = _VisusKernelPy.ParseStringParams_without_params_set
    __swig_getmethods__["without_params"] = _VisusKernelPy.ParseStringParams_without_params_get
    if _newclass:
        without_params = _swig_property(_VisusKernelPy.ParseStringParams_without_params_get, _VisusKernelPy.ParseStringParams_without_params_set)
    __swig_setmethods__["params"] = _VisusKernelPy.ParseStringParams_params_set
    __swig_getmethods__["params"] = _VisusKernelPy.ParseStringParams_params_get
    if _newclass:
        params = _swig_property(_VisusKernelPy.ParseStringParams_params_get, _VisusKernelPy.ParseStringParams_params_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_ParseStringParams(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_ParseStringParams
    __del__ = lambda self: None
ParseStringParams_swigregister = _VisusKernelPy.ParseStringParams_swigregister
ParseStringParams_swigregister(ParseStringParams)

class Point2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point2i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point2i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point2i_x_get, _VisusKernelPy.Point2i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point2i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point2i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point2i_y_get, _VisusKernelPy.Point2i_y_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point2i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point2i_fromString)
    else:
        fromString = _VisusKernelPy.Point2i_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point2i_one)
    else:
        one = _VisusKernelPy.Point2i_one

    def toVector(self):
        return _VisusKernelPy.Point2i_toVector(self)

    def back(self):
        return _VisusKernelPy.Point2i_back(self)

    def module2(self):
        return _VisusKernelPy.Point2i_module2(self)

    def module(self):
        return _VisusKernelPy.Point2i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2i_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2i___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2i___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2i_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point2i_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2i___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point2i_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point2i_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2i_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2i_smallest(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.Point2i_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.Point2i_innerDiv(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point2i_min)
    else:
        min = _VisusKernelPy.Point2i_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point2i_max)
    else:
        max = _VisusKernelPy.Point2i_max

    def __lt__(self, b):
        return _VisusKernelPy.Point2i___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point2i___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point2i___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point2i___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point2i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2i
    __del__ = lambda self: None
Point2i_swigregister = _VisusKernelPy.Point2i_swigregister
Point2i_swigregister(Point2i)

def Point2i_fromString(value):
    return _VisusKernelPy.Point2i_fromString(value)
Point2i_fromString = _VisusKernelPy.Point2i_fromString

def Point2i_one(pdim):
    return _VisusKernelPy.Point2i_one(pdim)
Point2i_one = _VisusKernelPy.Point2i_one

def Point2i_min(a, b):
    return _VisusKernelPy.Point2i_min(a, b)
Point2i_min = _VisusKernelPy.Point2i_min

def Point2i_max(a, b):
    return _VisusKernelPy.Point2i_max(a, b)
Point2i_max = _VisusKernelPy.Point2i_max

class Point2f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point2f_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point2f_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point2f_x_get, _VisusKernelPy.Point2f_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point2f_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point2f_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point2f_y_get, _VisusKernelPy.Point2f_y_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point2f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point2f_fromString)
    else:
        fromString = _VisusKernelPy.Point2f_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point2f_one)
    else:
        one = _VisusKernelPy.Point2f_one

    def toVector(self):
        return _VisusKernelPy.Point2f_toVector(self)

    def back(self):
        return _VisusKernelPy.Point2f_back(self)

    def module2(self):
        return _VisusKernelPy.Point2f_module2(self)

    def module(self):
        return _VisusKernelPy.Point2f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2f_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2f___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2f___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2f_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point2f_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2f___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point2f_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point2f_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2f_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2f_smallest(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.Point2f_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.Point2f_innerDiv(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point2f_min)
    else:
        min = _VisusKernelPy.Point2f_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point2f_max)
    else:
        max = _VisusKernelPy.Point2f_max

    def __lt__(self, b):
        return _VisusKernelPy.Point2f___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point2f___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point2f___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point2f___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point2f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2f
    __del__ = lambda self: None
Point2f_swigregister = _VisusKernelPy.Point2f_swigregister
Point2f_swigregister(Point2f)

def Point2f_fromString(value):
    return _VisusKernelPy.Point2f_fromString(value)
Point2f_fromString = _VisusKernelPy.Point2f_fromString

def Point2f_one(pdim):
    return _VisusKernelPy.Point2f_one(pdim)
Point2f_one = _VisusKernelPy.Point2f_one

def Point2f_min(a, b):
    return _VisusKernelPy.Point2f_min(a, b)
Point2f_min = _VisusKernelPy.Point2f_min

def Point2f_max(a, b):
    return _VisusKernelPy.Point2f_max(a, b)
Point2f_max = _VisusKernelPy.Point2f_max

class Point2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point2d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point2d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point2d_x_get, _VisusKernelPy.Point2d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point2d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point2d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point2d_y_get, _VisusKernelPy.Point2d_y_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point2d_fromString)
    else:
        fromString = _VisusKernelPy.Point2d_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point2d_one)
    else:
        one = _VisusKernelPy.Point2d_one

    def toVector(self):
        return _VisusKernelPy.Point2d_toVector(self)

    def back(self):
        return _VisusKernelPy.Point2d_back(self)

    def module2(self):
        return _VisusKernelPy.Point2d_module2(self)

    def module(self):
        return _VisusKernelPy.Point2d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point2d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point2d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point2d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point2d_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point2d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point2d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point2d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point2d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point2d___isub__(self, b)

    def __imul__(self, s):
        return _VisusKernelPy.Point2d___imul__(self, s)

    def __eq__(self, b):
        return _VisusKernelPy.Point2d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point2d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point2d_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point2d_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point2d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point2d___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point2d_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point2d_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point2d_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point2d_smallest(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.Point2d_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.Point2d_innerDiv(self, other)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point2d_min)
    else:
        min = _VisusKernelPy.Point2d_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point2d_max)
    else:
        max = _VisusKernelPy.Point2d_max

    def __lt__(self, b):
        return _VisusKernelPy.Point2d___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point2d___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point2d___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point2d___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point2d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point2d
    __del__ = lambda self: None
Point2d_swigregister = _VisusKernelPy.Point2d_swigregister
Point2d_swigregister(Point2d)

def Point2d_fromString(value):
    return _VisusKernelPy.Point2d_fromString(value)
Point2d_fromString = _VisusKernelPy.Point2d_fromString

def Point2d_one(pdim):
    return _VisusKernelPy.Point2d_one(pdim)
Point2d_one = _VisusKernelPy.Point2d_one

def Point2d_min(a, b):
    return _VisusKernelPy.Point2d_min(a, b)
Point2d_min = _VisusKernelPy.Point2d_min

def Point2d_max(a, b):
    return _VisusKernelPy.Point2d_max(a, b)
Point2d_max = _VisusKernelPy.Point2d_max

class Point3i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point3i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point3i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point3i_x_get, _VisusKernelPy.Point3i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point3i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point3i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point3i_y_get, _VisusKernelPy.Point3i_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point3i_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point3i_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point3i_z_get, _VisusKernelPy.Point3i_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point3i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point3i_fromString)
    else:
        fromString = _VisusKernelPy.Point3i_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point3i_one)
    else:
        one = _VisusKernelPy.Point3i_one

    def toVector(self):
        return _VisusKernelPy.Point3i_toVector(self)

    def back(self):
        return _VisusKernelPy.Point3i_back(self)

    def toPoint2(self):
        return _VisusKernelPy.Point3i_toPoint2(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3i_module2(self)

    def module(self):
        return _VisusKernelPy.Point3i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3i_inv(self)

    def innerProduct(self):
        return _VisusKernelPy.Point3i_innerProduct(self)

    def __pos__(self):
        return _VisusKernelPy.Point3i___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3i___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3i_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point3i_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3i___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point3i_set(self, i, value)

    def cross(self, v):
        return _VisusKernelPy.Point3i_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3i_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3i_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3i_smallest(self)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point3i_min)
    else:
        min = _VisusKernelPy.Point3i_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point3i_max)
    else:
        max = _VisusKernelPy.Point3i_max

    def __lt__(self, b):
        return _VisusKernelPy.Point3i___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3i___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3i___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3i___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3i
    __del__ = lambda self: None
Point3i_swigregister = _VisusKernelPy.Point3i_swigregister
Point3i_swigregister(Point3i)

def Point3i_fromString(value):
    return _VisusKernelPy.Point3i_fromString(value)
Point3i_fromString = _VisusKernelPy.Point3i_fromString

def Point3i_one(pdim):
    return _VisusKernelPy.Point3i_one(pdim)
Point3i_one = _VisusKernelPy.Point3i_one

def Point3i_min(a, b):
    return _VisusKernelPy.Point3i_min(a, b)
Point3i_min = _VisusKernelPy.Point3i_min

def Point3i_max(a, b):
    return _VisusKernelPy.Point3i_max(a, b)
Point3i_max = _VisusKernelPy.Point3i_max

class Point3f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point3f_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point3f_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point3f_x_get, _VisusKernelPy.Point3f_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point3f_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point3f_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point3f_y_get, _VisusKernelPy.Point3f_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point3f_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point3f_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point3f_z_get, _VisusKernelPy.Point3f_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point3f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point3f_fromString)
    else:
        fromString = _VisusKernelPy.Point3f_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point3f_one)
    else:
        one = _VisusKernelPy.Point3f_one

    def toVector(self):
        return _VisusKernelPy.Point3f_toVector(self)

    def back(self):
        return _VisusKernelPy.Point3f_back(self)

    def toPoint2(self):
        return _VisusKernelPy.Point3f_toPoint2(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3f_module2(self)

    def module(self):
        return _VisusKernelPy.Point3f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3f_inv(self)

    def innerProduct(self):
        return _VisusKernelPy.Point3f_innerProduct(self)

    def __pos__(self):
        return _VisusKernelPy.Point3f___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3f___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3f_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point3f_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3f___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point3f_set(self, i, value)

    def cross(self, v):
        return _VisusKernelPy.Point3f_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3f_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3f_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3f_smallest(self)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point3f_min)
    else:
        min = _VisusKernelPy.Point3f_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point3f_max)
    else:
        max = _VisusKernelPy.Point3f_max

    def __lt__(self, b):
        return _VisusKernelPy.Point3f___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3f___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3f___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3f___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3f
    __del__ = lambda self: None
Point3f_swigregister = _VisusKernelPy.Point3f_swigregister
Point3f_swigregister(Point3f)

def Point3f_fromString(value):
    return _VisusKernelPy.Point3f_fromString(value)
Point3f_fromString = _VisusKernelPy.Point3f_fromString

def Point3f_one(pdim):
    return _VisusKernelPy.Point3f_one(pdim)
Point3f_one = _VisusKernelPy.Point3f_one

def Point3f_min(a, b):
    return _VisusKernelPy.Point3f_min(a, b)
Point3f_min = _VisusKernelPy.Point3f_min

def Point3f_max(a, b):
    return _VisusKernelPy.Point3f_max(a, b)
Point3f_max = _VisusKernelPy.Point3f_max

class Point3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point3d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point3d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point3d_x_get, _VisusKernelPy.Point3d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point3d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point3d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point3d_y_get, _VisusKernelPy.Point3d_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point3d_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point3d_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point3d_z_get, _VisusKernelPy.Point3d_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point3d_fromString)
    else:
        fromString = _VisusKernelPy.Point3d_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point3d_one)
    else:
        one = _VisusKernelPy.Point3d_one

    def toVector(self):
        return _VisusKernelPy.Point3d_toVector(self)

    def back(self):
        return _VisusKernelPy.Point3d_back(self)

    def toPoint2(self):
        return _VisusKernelPy.Point3d_toPoint2(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point3d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point3d_module2(self)

    def module(self):
        return _VisusKernelPy.Point3d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point3d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point3d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point3d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point3d_inv(self)

    def innerProduct(self):
        return _VisusKernelPy.Point3d_innerProduct(self)

    def __pos__(self):
        return _VisusKernelPy.Point3d___pos__(self)

    def __neg__(self):
        return _VisusKernelPy.Point3d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point3d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point3d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point3d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point3d___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point3d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point3d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point3d_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point3d_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point3d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point3d___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point3d_set(self, i, value)

    def cross(self, v):
        return _VisusKernelPy.Point3d_cross(self, v)

    def valid(self):
        return _VisusKernelPy.Point3d_valid(self)

    def biggest(self):
        return _VisusKernelPy.Point3d_biggest(self)

    def smallest(self):
        return _VisusKernelPy.Point3d_smallest(self)
    if _newclass:
        min = staticmethod(_VisusKernelPy.Point3d_min)
    else:
        min = _VisusKernelPy.Point3d_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.Point3d_max)
    else:
        max = _VisusKernelPy.Point3d_max

    def __lt__(self, b):
        return _VisusKernelPy.Point3d___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.Point3d___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.Point3d___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.Point3d___ge__(self, b)

    def toString(self):
        return _VisusKernelPy.Point3d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point3d
    __del__ = lambda self: None
Point3d_swigregister = _VisusKernelPy.Point3d_swigregister
Point3d_swigregister(Point3d)

def Point3d_fromString(value):
    return _VisusKernelPy.Point3d_fromString(value)
Point3d_fromString = _VisusKernelPy.Point3d_fromString

def Point3d_one(pdim):
    return _VisusKernelPy.Point3d_one(pdim)
Point3d_one = _VisusKernelPy.Point3d_one

def Point3d_min(a, b):
    return _VisusKernelPy.Point3d_min(a, b)
Point3d_min = _VisusKernelPy.Point3d_min

def Point3d_max(a, b):
    return _VisusKernelPy.Point3d_max(a, b)
Point3d_max = _VisusKernelPy.Point3d_max

class Point4i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point4i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point4i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point4i_x_get, _VisusKernelPy.Point4i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point4i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point4i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point4i_y_get, _VisusKernelPy.Point4i_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point4i_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point4i_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point4i_z_get, _VisusKernelPy.Point4i_z_set)
    __swig_setmethods__["w"] = _VisusKernelPy.Point4i_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Point4i_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Point4i_w_get, _VisusKernelPy.Point4i_w_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point4i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point4i_fromString)
    else:
        fromString = _VisusKernelPy.Point4i_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point4i_one)
    else:
        one = _VisusKernelPy.Point4i_one

    def toVector(self):
        return _VisusKernelPy.Point4i_toVector(self)

    def back(self):
        return _VisusKernelPy.Point4i_back(self)

    def toPoint3(self):
        return _VisusKernelPy.Point4i_toPoint3(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4i_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4i_module2(self)

    def module(self):
        return _VisusKernelPy.Point4i_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4i_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4i_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4i_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4i_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4i___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4i___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4i___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4i___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4i___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4i___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4i___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4i_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point4i_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4i___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4i___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point4i_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point4i_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4i
    __del__ = lambda self: None
Point4i_swigregister = _VisusKernelPy.Point4i_swigregister
Point4i_swigregister(Point4i)

def Point4i_fromString(value):
    return _VisusKernelPy.Point4i_fromString(value)
Point4i_fromString = _VisusKernelPy.Point4i_fromString

def Point4i_one(pdim):
    return _VisusKernelPy.Point4i_one(pdim)
Point4i_one = _VisusKernelPy.Point4i_one

class Point4f(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4f, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4f, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point4f_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point4f_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point4f_x_get, _VisusKernelPy.Point4f_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point4f_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point4f_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point4f_y_get, _VisusKernelPy.Point4f_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point4f_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point4f_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point4f_z_get, _VisusKernelPy.Point4f_z_set)
    __swig_setmethods__["w"] = _VisusKernelPy.Point4f_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Point4f_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Point4f_w_get, _VisusKernelPy.Point4f_w_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point4f(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point4f_fromString)
    else:
        fromString = _VisusKernelPy.Point4f_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point4f_one)
    else:
        one = _VisusKernelPy.Point4f_one

    def toVector(self):
        return _VisusKernelPy.Point4f_toVector(self)

    def back(self):
        return _VisusKernelPy.Point4f_back(self)

    def toPoint3(self):
        return _VisusKernelPy.Point4f_toPoint3(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4f_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4f_module2(self)

    def module(self):
        return _VisusKernelPy.Point4f_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4f_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4f_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4f_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4f_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4f___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4f___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4f___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4f___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4f___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4f___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4f___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4f_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point4f_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4f___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4f___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point4f_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point4f_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4f_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4f
    __del__ = lambda self: None
Point4f_swigregister = _VisusKernelPy.Point4f_swigregister
Point4f_swigregister(Point4f)

def Point4f_fromString(value):
    return _VisusKernelPy.Point4f_fromString(value)
Point4f_fromString = _VisusKernelPy.Point4f_fromString

def Point4f_one(pdim):
    return _VisusKernelPy.Point4f_one(pdim)
Point4f_one = _VisusKernelPy.Point4f_one

class Point4d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point4d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point4d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Point4d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Point4d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Point4d_x_get, _VisusKernelPy.Point4d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Point4d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Point4d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Point4d_y_get, _VisusKernelPy.Point4d_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Point4d_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Point4d_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Point4d_z_get, _VisusKernelPy.Point4d_z_set)
    __swig_setmethods__["w"] = _VisusKernelPy.Point4d_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Point4d_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Point4d_w_get, _VisusKernelPy.Point4d_w_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Point4d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Point4d_fromString)
    else:
        fromString = _VisusKernelPy.Point4d_fromString
    if _newclass:
        one = staticmethod(_VisusKernelPy.Point4d_one)
    else:
        one = _VisusKernelPy.Point4d_one

    def toVector(self):
        return _VisusKernelPy.Point4d_toVector(self)

    def back(self):
        return _VisusKernelPy.Point4d_back(self)

    def toPoint3(self):
        return _VisusKernelPy.Point4d_toPoint3(self)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.Point4d_dropHomogeneousCoordinate(self)

    def module2(self):
        return _VisusKernelPy.Point4d_module2(self)

    def module(self):
        return _VisusKernelPy.Point4d_module(self)

    def distance(self, p):
        return _VisusKernelPy.Point4d_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.Point4d_normalized(self)

    def abs(self):
        return _VisusKernelPy.Point4d_abs(self)

    def inv(self):
        return _VisusKernelPy.Point4d_inv(self)

    def __neg__(self):
        return _VisusKernelPy.Point4d___neg__(self)

    def __add__(self, b):
        return _VisusKernelPy.Point4d___add__(self, b)

    def __iadd__(self, b):
        return _VisusKernelPy.Point4d___iadd__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Point4d___sub__(self, b)

    def __isub__(self, b):
        return _VisusKernelPy.Point4d___isub__(self, b)

    def __eq__(self, b):
        return _VisusKernelPy.Point4d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Point4d___ne__(self, b)

    def dot(self, b):
        return _VisusKernelPy.Point4d_dot(self, b)

    def get(self, *args):
        return _VisusKernelPy.Point4d_get(self, *args)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Point4d___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Point4d___getitem__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.Point4d_set(self, i, value)

    def valid(self):
        return _VisusKernelPy.Point4d_valid(self)

    def toString(self):
        return _VisusKernelPy.Point4d_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Point4d
    __del__ = lambda self: None
Point4d_swigregister = _VisusKernelPy.Point4d_swigregister
Point4d_swigregister(Point4d)

def Point4d_fromString(value):
    return _VisusKernelPy.Point4d_fromString(value)
Point4d_fromString = _VisusKernelPy.Point4d_fromString

def Point4d_one(pdim):
    return _VisusKernelPy.Point4d_one(pdim)
Point4d_one = _VisusKernelPy.Point4d_one

class PointNd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNd, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PointNd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.PointNd_getPointDim(self)

    def push_back(self, value):
        return _VisusKernelPy.PointNd_push_back(self, value)

    def pop_back(self):
        return _VisusKernelPy.PointNd_pop_back(self)

    def withoutBack(self):
        return _VisusKernelPy.PointNd_withoutBack(self)

    def back(self):
        return _VisusKernelPy.PointNd_back(self)

    def begin(self):
        return _VisusKernelPy.PointNd_begin(self)

    def end(self):
        return _VisusKernelPy.PointNd_end(self)

    def setPointDim(self, new_pdim, default_value=0.0):
        return _VisusKernelPy.PointNd_setPointDim(self, new_pdim, default_value)

    def get(self, *args):
        return _VisusKernelPy.PointNd_get(self, *args)

    def __ne__(self, other):
        return _VisusKernelPy.PointNd___ne__(self, other)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.PointNd_dropHomogeneousCoordinate(self)
    if _newclass:
        zero = staticmethod(_VisusKernelPy.PointNd_zero)
    else:
        zero = _VisusKernelPy.PointNd_zero
    if _newclass:
        one = staticmethod(_VisusKernelPy.PointNd_one)
    else:
        one = _VisusKernelPy.PointNd_one

    def toVector(self):
        return _VisusKernelPy.PointNd_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNd_valid(self)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNd___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNd___getitem_ref__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.PointNd_set(self, i, value)

    def __neg__(self):
        return _VisusKernelPy.PointNd___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNd___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNd___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNd___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNd___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNd___imul__(self, s)
    if _newclass:
        min = staticmethod(_VisusKernelPy.PointNd_min)
    else:
        min = _VisusKernelPy.PointNd_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.PointNd_max)
    else:
        max = _VisusKernelPy.PointNd_max
    if _newclass:
        clamp = staticmethod(_VisusKernelPy.PointNd_clamp)
    else:
        clamp = _VisusKernelPy.PointNd_clamp

    def module2(self):
        return _VisusKernelPy.PointNd_module2(self)

    def module(self):
        return _VisusKernelPy.PointNd_module(self)

    def distance(self, p):
        return _VisusKernelPy.PointNd_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.PointNd_normalized(self)

    def abs(self):
        return _VisusKernelPy.PointNd_abs(self)

    def inv(self):
        return _VisusKernelPy.PointNd_inv(self)

    def min_element_index(self):
        return _VisusKernelPy.PointNd_min_element_index(self)

    def max_element_index(self):
        return _VisusKernelPy.PointNd_max_element_index(self)

    def checkAllEqual(self, a, b):
        return _VisusKernelPy.PointNd_checkAllEqual(self, a, b)

    def checkAllLess(self, a, b):
        return _VisusKernelPy.PointNd_checkAllLess(self, a, b)

    def checkAllLessEqual(self, a, b):
        return _VisusKernelPy.PointNd_checkAllLessEqual(self, a, b)

    def checkAllGreater(self, a, b):
        return _VisusKernelPy.PointNd_checkAllGreater(self, a, b)

    def checkAllGreaterEqual(self, a, b):
        return _VisusKernelPy.PointNd_checkAllGreaterEqual(self, a, b)

    def __eq__(self, b):
        return _VisusKernelPy.PointNd___eq__(self, b)

    def __lt__(self, b):
        return _VisusKernelPy.PointNd___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNd___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNd___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNd___ge__(self, b)

    def dot(self, other):
        return _VisusKernelPy.PointNd_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNd_dotProduct(self, other)

    def stride(self):
        return _VisusKernelPy.PointNd_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNd_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNd_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNd_innerProduct(self)

    def toPoint2(self):
        return _VisusKernelPy.PointNd_toPoint2(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNd_toPoint3(self)

    def toPoint4(self):
        return _VisusKernelPy.PointNd_toPoint4(self)
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.PointNd_fromString)
    else:
        fromString = _VisusKernelPy.PointNd_fromString

    def toString(self, *args):
        return _VisusKernelPy.PointNd_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNd
    __del__ = lambda self: None
PointNd_swigregister = _VisusKernelPy.PointNd_swigregister
PointNd_swigregister(PointNd)

def PointNd_zero(pdim):
    return _VisusKernelPy.PointNd_zero(pdim)
PointNd_zero = _VisusKernelPy.PointNd_zero

def PointNd_one(pdim):
    return _VisusKernelPy.PointNd_one(pdim)
PointNd_one = _VisusKernelPy.PointNd_one

def PointNd_min(a, b):
    return _VisusKernelPy.PointNd_min(a, b)
PointNd_min = _VisusKernelPy.PointNd_min

def PointNd_max(a, b):
    return _VisusKernelPy.PointNd_max(a, b)
PointNd_max = _VisusKernelPy.PointNd_max

def PointNd_clamp(v, a, b):
    return _VisusKernelPy.PointNd_clamp(v, a, b)
PointNd_clamp = _VisusKernelPy.PointNd_clamp

def PointNd_fromString(src):
    return _VisusKernelPy.PointNd_fromString(src)
PointNd_fromString = _VisusKernelPy.PointNd_fromString

class PointNi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PointNi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PointNi, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_PointNi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.PointNi_getPointDim(self)

    def push_back(self, value):
        return _VisusKernelPy.PointNi_push_back(self, value)

    def pop_back(self):
        return _VisusKernelPy.PointNi_pop_back(self)

    def withoutBack(self):
        return _VisusKernelPy.PointNi_withoutBack(self)

    def back(self):
        return _VisusKernelPy.PointNi_back(self)

    def begin(self):
        return _VisusKernelPy.PointNi_begin(self)

    def end(self):
        return _VisusKernelPy.PointNi_end(self)

    def setPointDim(self, new_pdim, default_value=0.0):
        return _VisusKernelPy.PointNi_setPointDim(self, new_pdim, default_value)

    def get(self, *args):
        return _VisusKernelPy.PointNi_get(self, *args)

    def __ne__(self, other):
        return _VisusKernelPy.PointNi___ne__(self, other)

    def dropHomogeneousCoordinate(self):
        return _VisusKernelPy.PointNi_dropHomogeneousCoordinate(self)
    if _newclass:
        zero = staticmethod(_VisusKernelPy.PointNi_zero)
    else:
        zero = _VisusKernelPy.PointNi_zero
    if _newclass:
        one = staticmethod(_VisusKernelPy.PointNi_one)
    else:
        one = _VisusKernelPy.PointNi_one

    def toVector(self):
        return _VisusKernelPy.PointNi_toVector(self)

    def valid(self):
        return _VisusKernelPy.PointNi_valid(self)

    def __getitem__(self, i):
        return _VisusKernelPy.PointNi___getitem__(self, i)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.PointNi___getitem_ref__(self, i)

    def set(self, i, value):
        return _VisusKernelPy.PointNi_set(self, i, value)

    def __neg__(self):
        return _VisusKernelPy.PointNi___neg__(self)

    def __add__(self, other):
        return _VisusKernelPy.PointNi___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.PointNi___sub__(self, other)

    def __iadd__(self, other):
        return _VisusKernelPy.PointNi___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.PointNi___isub__(self, other)

    def __imul__(self, s):
        return _VisusKernelPy.PointNi___imul__(self, s)
    if _newclass:
        min = staticmethod(_VisusKernelPy.PointNi_min)
    else:
        min = _VisusKernelPy.PointNi_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.PointNi_max)
    else:
        max = _VisusKernelPy.PointNi_max
    if _newclass:
        clamp = staticmethod(_VisusKernelPy.PointNi_clamp)
    else:
        clamp = _VisusKernelPy.PointNi_clamp

    def module2(self):
        return _VisusKernelPy.PointNi_module2(self)

    def module(self):
        return _VisusKernelPy.PointNi_module(self)

    def distance(self, p):
        return _VisusKernelPy.PointNi_distance(self, p)

    def normalized(self):
        return _VisusKernelPy.PointNi_normalized(self)

    def abs(self):
        return _VisusKernelPy.PointNi_abs(self)

    def inv(self):
        return _VisusKernelPy.PointNi_inv(self)

    def min_element_index(self):
        return _VisusKernelPy.PointNi_min_element_index(self)

    def max_element_index(self):
        return _VisusKernelPy.PointNi_max_element_index(self)

    def checkAllEqual(self, a, b):
        return _VisusKernelPy.PointNi_checkAllEqual(self, a, b)

    def checkAllLess(self, a, b):
        return _VisusKernelPy.PointNi_checkAllLess(self, a, b)

    def checkAllLessEqual(self, a, b):
        return _VisusKernelPy.PointNi_checkAllLessEqual(self, a, b)

    def checkAllGreater(self, a, b):
        return _VisusKernelPy.PointNi_checkAllGreater(self, a, b)

    def checkAllGreaterEqual(self, a, b):
        return _VisusKernelPy.PointNi_checkAllGreaterEqual(self, a, b)

    def __eq__(self, b):
        return _VisusKernelPy.PointNi___eq__(self, b)

    def __lt__(self, b):
        return _VisusKernelPy.PointNi___lt__(self, b)

    def __le__(self, b):
        return _VisusKernelPy.PointNi___le__(self, b)

    def __gt__(self, b):
        return _VisusKernelPy.PointNi___gt__(self, b)

    def __ge__(self, b):
        return _VisusKernelPy.PointNi___ge__(self, b)

    def dot(self, other):
        return _VisusKernelPy.PointNi_dot(self, other)

    def dotProduct(self, other):
        return _VisusKernelPy.PointNi_dotProduct(self, other)

    def stride(self):
        return _VisusKernelPy.PointNi_stride(self)

    def innerMultiply(self, other):
        return _VisusKernelPy.PointNi_innerMultiply(self, other)

    def innerDiv(self, other):
        return _VisusKernelPy.PointNi_innerDiv(self, other)

    def innerProduct(self):
        return _VisusKernelPy.PointNi_innerProduct(self)

    def toPoint2(self):
        return _VisusKernelPy.PointNi_toPoint2(self)

    def toPoint3(self):
        return _VisusKernelPy.PointNi_toPoint3(self)

    def toPoint4(self):
        return _VisusKernelPy.PointNi_toPoint4(self)
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.PointNi_fromString)
    else:
        fromString = _VisusKernelPy.PointNi_fromString

    def toString(self, *args):
        return _VisusKernelPy.PointNi_toString(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_PointNi
    __del__ = lambda self: None
PointNi_swigregister = _VisusKernelPy.PointNi_swigregister
PointNi_swigregister(PointNi)

def PointNi_zero(pdim):
    return _VisusKernelPy.PointNi_zero(pdim)
PointNi_zero = _VisusKernelPy.PointNi_zero

def PointNi_one(pdim):
    return _VisusKernelPy.PointNi_one(pdim)
PointNi_one = _VisusKernelPy.PointNi_one

def PointNi_min(a, b):
    return _VisusKernelPy.PointNi_min(a, b)
PointNi_min = _VisusKernelPy.PointNi_min

def PointNi_max(a, b):
    return _VisusKernelPy.PointNi_max(a, b)
PointNi_max = _VisusKernelPy.PointNi_max

def PointNi_clamp(v, a, b):
    return _VisusKernelPy.PointNi_clamp(v, a, b)
PointNi_clamp = _VisusKernelPy.PointNi_clamp

def PointNi_fromString(src):
    return _VisusKernelPy.PointNi_fromString(src)
PointNi_fromString = _VisusKernelPy.PointNi_fromString

class Box3d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box3d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box3d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.Box3d_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.Box3d_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.Box3d_p1_get, _VisusKernelPy.Box3d_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.Box3d_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.Box3d_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.Box3d_p2_get, _VisusKernelPy.Box3d_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Box3d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Box3d_invalid)
    else:
        invalid = _VisusKernelPy.Box3d_invalid

    def valid(self):
        return _VisusKernelPy.Box3d_valid(self)

    def center(self):
        return _VisusKernelPy.Box3d_center(self)

    def size(self):
        return _VisusKernelPy.Box3d_size(self)

    def middle(self):
        return _VisusKernelPy.Box3d_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.Box3d_addPoint(self, p)

    def getPoint(self, alpha, beta, gamma):
        return _VisusKernelPy.Box3d_getPoint(self, alpha, beta, gamma)

    def containsPoint(self, p):
        return _VisusKernelPy.Box3d_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.Box3d___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.Box3d___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.Box3d_intersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.Box3d_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.Box3d_getUnion(self, b)

    def toString(self):
        return _VisusKernelPy.Box3d_toString(self)

    def toBoxNd(self):
        return _VisusKernelPy.Box3d_toBoxNd(self)

    def toBoxNi(self):
        return _VisusKernelPy.Box3d_toBoxNi(self)
    if _newclass:
        fromBoxNi = staticmethod(_VisusKernelPy.Box3d_fromBoxNi)
    else:
        fromBoxNi = _VisusKernelPy.Box3d_fromBoxNi
    if _newclass:
        fromBoxNd = staticmethod(_VisusKernelPy.Box3d_fromBoxNd)
    else:
        fromBoxNd = _VisusKernelPy.Box3d_fromBoxNd
    __swig_destroy__ = _VisusKernelPy.delete_Box3d
    __del__ = lambda self: None
Box3d_swigregister = _VisusKernelPy.Box3d_swigregister
Box3d_swigregister(Box3d)

def Box3d_invalid():
    return _VisusKernelPy.Box3d_invalid()
Box3d_invalid = _VisusKernelPy.Box3d_invalid

def Box3d_fromBoxNi(src):
    return _VisusKernelPy.Box3d_fromBoxNi(src)
Box3d_fromBoxNi = _VisusKernelPy.Box3d_fromBoxNi

def Box3d_fromBoxNd(src):
    return _VisusKernelPy.Box3d_fromBoxNd(src)
Box3d_fromBoxNd = _VisusKernelPy.Box3d_fromBoxNd

class BoxNd(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxNd, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxNd, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.BoxNd_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.BoxNd_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.BoxNd_p1_get, _VisusKernelPy.BoxNd_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.BoxNd_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.BoxNd_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.BoxNd_p2_get, _VisusKernelPy.BoxNd_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_BoxNd(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.BoxNd_getPointDim(self)

    def setPointDim(self, pdim):
        return _VisusKernelPy.BoxNd_setPointDim(self, pdim)

    def withPointDim(self, pdim):
        return _VisusKernelPy.BoxNd_withPointDim(self, pdim)

    def withoutBack(self):
        return _VisusKernelPy.BoxNd_withoutBack(self)
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.BoxNd_invalid)
    else:
        invalid = _VisusKernelPy.BoxNd_invalid

    def valid(self):
        return _VisusKernelPy.BoxNd_valid(self)

    def isFullDim(self):
        return _VisusKernelPy.BoxNd_isFullDim(self)

    def center(self):
        return _VisusKernelPy.BoxNd_center(self)

    def size(self):
        return _VisusKernelPy.BoxNd_size(self)

    def maxsize(self):
        return _VisusKernelPy.BoxNd_maxsize(self)

    def maxsize_index(self):
        return _VisusKernelPy.BoxNd_maxsize_index(self)

    def minsize(self):
        return _VisusKernelPy.BoxNd_minsize(self)

    def minsize_index(self):
        return _VisusKernelPy.BoxNd_minsize_index(self)

    def middle(self):
        return _VisusKernelPy.BoxNd_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.BoxNd_addPoint(self, p)

    def toBox3(self):
        return _VisusKernelPy.BoxNd_toBox3(self)

    def containsPoint(self, p):
        return _VisusKernelPy.BoxNd_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.BoxNd___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.BoxNd___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.BoxNd_intersect(self, other)

    def strictIntersect(self, other):
        return _VisusKernelPy.BoxNd_strictIntersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.BoxNd_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.BoxNd_getUnion(self, b)

    def containsBox(self, other):
        return _VisusKernelPy.BoxNd_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.BoxNd_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _VisusKernelPy.BoxNd_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _VisusKernelPy.BoxNd_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _VisusKernelPy.BoxNd_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _VisusKernelPy.BoxNd_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _VisusKernelPy.BoxNd_translate(self, vt)

    def getPoints(self):
        return _VisusKernelPy.BoxNd_getPoints(self)

    def getAlphaPoint(self, alpha):
        return _VisusKernelPy.BoxNd_getAlphaPoint(self, alpha)

    def getPlanes(self):
        return _VisusKernelPy.BoxNd_getPlanes(self)
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.BoxNd_fromString)
    else:
        fromString = _VisusKernelPy.BoxNd_fromString

    def toString(self, bInterleave=True):
        return _VisusKernelPy.BoxNd_toString(self, bInterleave)

    def toOldFormatString(self):
        return _VisusKernelPy.BoxNd_toOldFormatString(self)
    if _newclass:
        parseFromOldFormatString = staticmethod(_VisusKernelPy.BoxNd_parseFromOldFormatString)
    else:
        parseFromOldFormatString = _VisusKernelPy.BoxNd_parseFromOldFormatString

    def write(self, ar):
        return _VisusKernelPy.BoxNd_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.BoxNd_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_BoxNd
    __del__ = lambda self: None
BoxNd_swigregister = _VisusKernelPy.BoxNd_swigregister
BoxNd_swigregister(BoxNd)

def BoxNd_invalid():
    return _VisusKernelPy.BoxNd_invalid()
BoxNd_invalid = _VisusKernelPy.BoxNd_invalid

def BoxNd_fromString(value, bInterleave=True):
    return _VisusKernelPy.BoxNd_fromString(value, bInterleave)
BoxNd_fromString = _VisusKernelPy.BoxNd_fromString

def BoxNd_parseFromOldFormatString(pdim, src):
    return _VisusKernelPy.BoxNd_parseFromOldFormatString(pdim, src)
BoxNd_parseFromOldFormatString = _VisusKernelPy.BoxNd_parseFromOldFormatString

class BoxNi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BoxNi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BoxNi, name)
    __repr__ = _swig_repr
    __swig_setmethods__["p1"] = _VisusKernelPy.BoxNi_p1_set
    __swig_getmethods__["p1"] = _VisusKernelPy.BoxNi_p1_get
    if _newclass:
        p1 = _swig_property(_VisusKernelPy.BoxNi_p1_get, _VisusKernelPy.BoxNi_p1_set)
    __swig_setmethods__["p2"] = _VisusKernelPy.BoxNi_p2_set
    __swig_getmethods__["p2"] = _VisusKernelPy.BoxNi_p2_get
    if _newclass:
        p2 = _swig_property(_VisusKernelPy.BoxNi_p2_get, _VisusKernelPy.BoxNi_p2_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_BoxNi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getPointDim(self):
        return _VisusKernelPy.BoxNi_getPointDim(self)

    def setPointDim(self, pdim):
        return _VisusKernelPy.BoxNi_setPointDim(self, pdim)

    def withPointDim(self, pdim):
        return _VisusKernelPy.BoxNi_withPointDim(self, pdim)

    def withoutBack(self):
        return _VisusKernelPy.BoxNi_withoutBack(self)
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.BoxNi_invalid)
    else:
        invalid = _VisusKernelPy.BoxNi_invalid

    def valid(self):
        return _VisusKernelPy.BoxNi_valid(self)

    def isFullDim(self):
        return _VisusKernelPy.BoxNi_isFullDim(self)

    def center(self):
        return _VisusKernelPy.BoxNi_center(self)

    def size(self):
        return _VisusKernelPy.BoxNi_size(self)

    def maxsize(self):
        return _VisusKernelPy.BoxNi_maxsize(self)

    def maxsize_index(self):
        return _VisusKernelPy.BoxNi_maxsize_index(self)

    def minsize(self):
        return _VisusKernelPy.BoxNi_minsize(self)

    def minsize_index(self):
        return _VisusKernelPy.BoxNi_minsize_index(self)

    def middle(self):
        return _VisusKernelPy.BoxNi_middle(self)

    def addPoint(self, p):
        return _VisusKernelPy.BoxNi_addPoint(self, p)

    def toBox3(self):
        return _VisusKernelPy.BoxNi_toBox3(self)

    def containsPoint(self, p):
        return _VisusKernelPy.BoxNi_containsPoint(self, p)

    def __eq__(self, b):
        return _VisusKernelPy.BoxNi___eq__(self, b)

    def __ne__(self, b):
        return _VisusKernelPy.BoxNi___ne__(self, b)

    def intersect(self, other):
        return _VisusKernelPy.BoxNi_intersect(self, other)

    def strictIntersect(self, other):
        return _VisusKernelPy.BoxNi_strictIntersect(self, other)

    def getIntersection(self, b):
        return _VisusKernelPy.BoxNi_getIntersection(self, b)

    def getUnion(self, b):
        return _VisusKernelPy.BoxNi_getUnion(self, b)

    def containsBox(self, other):
        return _VisusKernelPy.BoxNi_containsBox(self, other)

    def scaleAroundCenter(self, scale):
        return _VisusKernelPy.BoxNi_scaleAroundCenter(self, scale)

    def getSlab(self, axis, v1, v2):
        return _VisusKernelPy.BoxNi_getSlab(self, axis, v1, v2)

    def getXSlab(self, x1, x2):
        return _VisusKernelPy.BoxNi_getXSlab(self, x1, x2)

    def getYSlab(self, y1, y2):
        return _VisusKernelPy.BoxNi_getYSlab(self, y1, y2)

    def getZSlab(self, z1, z2):
        return _VisusKernelPy.BoxNi_getZSlab(self, z1, z2)

    def translate(self, vt):
        return _VisusKernelPy.BoxNi_translate(self, vt)

    def getPoints(self):
        return _VisusKernelPy.BoxNi_getPoints(self)

    def getAlphaPoint(self, alpha):
        return _VisusKernelPy.BoxNi_getAlphaPoint(self, alpha)

    def getPlanes(self):
        return _VisusKernelPy.BoxNi_getPlanes(self)
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.BoxNi_fromString)
    else:
        fromString = _VisusKernelPy.BoxNi_fromString

    def toString(self, bInterleave=True):
        return _VisusKernelPy.BoxNi_toString(self, bInterleave)

    def toOldFormatString(self):
        return _VisusKernelPy.BoxNi_toOldFormatString(self)
    if _newclass:
        parseFromOldFormatString = staticmethod(_VisusKernelPy.BoxNi_parseFromOldFormatString)
    else:
        parseFromOldFormatString = _VisusKernelPy.BoxNi_parseFromOldFormatString

    def write(self, ar):
        return _VisusKernelPy.BoxNi_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.BoxNi_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_BoxNi
    __del__ = lambda self: None
BoxNi_swigregister = _VisusKernelPy.BoxNi_swigregister
BoxNi_swigregister(BoxNi)

def BoxNi_invalid():
    return _VisusKernelPy.BoxNi_invalid()
BoxNi_invalid = _VisusKernelPy.BoxNi_invalid

def BoxNi_fromString(value, bInterleave=True):
    return _VisusKernelPy.BoxNi_fromString(value, bInterleave)
BoxNi_fromString = _VisusKernelPy.BoxNi_fromString

def BoxNi_parseFromOldFormatString(pdim, src):
    return _VisusKernelPy.BoxNi_parseFromOldFormatString(pdim, src)
BoxNi_parseFromOldFormatString = _VisusKernelPy.BoxNi_parseFromOldFormatString

class VectorBoxNi(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorBoxNi, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorBoxNi, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorBoxNi_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorBoxNi___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorBoxNi___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorBoxNi___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorBoxNi___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorBoxNi___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorBoxNi___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorBoxNi___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorBoxNi___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorBoxNi___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorBoxNi_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorBoxNi_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorBoxNi_empty(self)

    def size(self):
        return _VisusKernelPy.VectorBoxNi_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorBoxNi_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorBoxNi_begin(self)

    def end(self):
        return _VisusKernelPy.VectorBoxNi_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorBoxNi_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorBoxNi_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorBoxNi_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorBoxNi_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorBoxNi_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorBoxNi_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorBoxNi(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorBoxNi_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorBoxNi_front(self)

    def back(self):
        return _VisusKernelPy.VectorBoxNi_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorBoxNi_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorBoxNi_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorBoxNi_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorBoxNi_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorBoxNi_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorBoxNi
    __del__ = lambda self: None
VectorBoxNi_swigregister = _VisusKernelPy.VectorBoxNi_swigregister
VectorBoxNi_swigregister(VectorBoxNi)

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _VisusKernelPy.Quaternion_w_set
    __swig_getmethods__["w"] = _VisusKernelPy.Quaternion_w_get
    if _newclass:
        w = _swig_property(_VisusKernelPy.Quaternion_w_get, _VisusKernelPy.Quaternion_w_set)
    __swig_setmethods__["x"] = _VisusKernelPy.Quaternion_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Quaternion_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Quaternion_x_get, _VisusKernelPy.Quaternion_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Quaternion_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Quaternion_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Quaternion_y_get, _VisusKernelPy.Quaternion_y_set)
    __swig_setmethods__["z"] = _VisusKernelPy.Quaternion_z_set
    __swig_getmethods__["z"] = _VisusKernelPy.Quaternion_z_get
    if _newclass:
        z = _swig_property(_VisusKernelPy.Quaternion_z_get, _VisusKernelPy.Quaternion_z_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Quaternion(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Quaternion_fromString)
    else:
        fromString = _VisusKernelPy.Quaternion_fromString

    def toPoint4d(self):
        return _VisusKernelPy.Quaternion_toPoint4d(self)

    def isNull(self):
        return _VisusKernelPy.Quaternion_isNull(self)

    def isIdentity(self):
        return _VisusKernelPy.Quaternion_isIdentity(self)
    if _newclass:
        identity = staticmethod(_VisusKernelPy.Quaternion_identity)
    else:
        identity = _VisusKernelPy.Quaternion_identity
    if _newclass:
        null = staticmethod(_VisusKernelPy.Quaternion_null)
    else:
        null = _VisusKernelPy.Quaternion_null

    def toString(self):
        return _VisusKernelPy.Quaternion_toString(self)

    def getAxis(self):
        return _VisusKernelPy.Quaternion_getAxis(self)

    def getAngle(self):
        return _VisusKernelPy.Quaternion_getAngle(self)

    def __eq__(self, other):
        return _VisusKernelPy.Quaternion___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Quaternion___ne__(self, other)

    def __imul__(self, q2):
        return _VisusKernelPy.Quaternion___imul__(self, q2)
    if _newclass:
        fromEulerAngles = staticmethod(_VisusKernelPy.Quaternion_fromEulerAngles)
    else:
        fromEulerAngles = _VisusKernelPy.Quaternion_fromEulerAngles

    def toEulerAngles(self):
        return _VisusKernelPy.Quaternion_toEulerAngles(self)

    def conjugate(self):
        return _VisusKernelPy.Quaternion_conjugate(self)

    def __mul__(self, *args):
        return _VisusKernelPy.Quaternion___mul__(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_Quaternion
    __del__ = lambda self: None
Quaternion_swigregister = _VisusKernelPy.Quaternion_swigregister
Quaternion_swigregister(Quaternion)

def Quaternion_fromString(value):
    return _VisusKernelPy.Quaternion_fromString(value)
Quaternion_fromString = _VisusKernelPy.Quaternion_fromString

def Quaternion_identity():
    return _VisusKernelPy.Quaternion_identity()
Quaternion_identity = _VisusKernelPy.Quaternion_identity

def Quaternion_null():
    return _VisusKernelPy.Quaternion_null()
Quaternion_null = _VisusKernelPy.Quaternion_null

def Quaternion_fromEulerAngles(roll, pitch, yaw):
    return _VisusKernelPy.Quaternion_fromEulerAngles(roll, pitch, yaw)
Quaternion_fromEulerAngles = _VisusKernelPy.Quaternion_fromEulerAngles

class Matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_Matrix(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Matrix_fromString)
    else:
        fromString = _VisusKernelPy.Matrix_fromString
    __swig_destroy__ = _VisusKernelPy.delete_Matrix
    __del__ = lambda self: None

    def getSpaceDim(self):
        return _VisusKernelPy.Matrix_getSpaceDim(self)

    def setSpaceDim(self, dim):
        return _VisusKernelPy.Matrix_setSpaceDim(self, dim)

    def withSpaceDim(self, value):
        return _VisusKernelPy.Matrix_withSpaceDim(self, value)

    def valid(self):
        return _VisusKernelPy.Matrix_valid(self)

    def isIdentity(self):
        return _VisusKernelPy.Matrix_isIdentity(self)

    def isZero(self):
        return _VisusKernelPy.Matrix_isZero(self)

    def __getitem_ref__(self, i):
        return _VisusKernelPy.Matrix___getitem_ref__(self, i)

    def __getitem__(self, i):
        return _VisusKernelPy.Matrix___getitem__(self, i)

    def get(self, r, c):
        return _VisusKernelPy.Matrix_get(self, r, c)

    def __call__(self, r, c):
        return _VisusKernelPy.Matrix___call__(self, r, c)

    def getRow(self, r):
        return _VisusKernelPy.Matrix_getRow(self, r)

    def getCol(self, c):
        return _VisusKernelPy.Matrix_getCol(self, c)

    def assign(self, other):
        return _VisusKernelPy.Matrix_assign(self, other)

    def __eq__(self, other):
        return _VisusKernelPy.Matrix___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Matrix___ne__(self, other)
    if _newclass:
        zero = staticmethod(_VisusKernelPy.Matrix_zero)
    else:
        zero = _VisusKernelPy.Matrix_zero
    if _newclass:
        identity = staticmethod(_VisusKernelPy.Matrix_identity)
    else:
        identity = _VisusKernelPy.Matrix_identity

    def __add__(self, b):
        return _VisusKernelPy.Matrix___add__(self, b)

    def __sub__(self, b):
        return _VisusKernelPy.Matrix___sub__(self, b)

    def __mul__(self, b):
        return _VisusKernelPy.Matrix___mul__(self, b)

    def __imul__(self, b):
        return _VisusKernelPy.Matrix___imul__(self, b)

    def transpose(self):
        return _VisusKernelPy.Matrix_transpose(self)

    def determinant(self):
        return _VisusKernelPy.Matrix_determinant(self)

    def invert(self):
        return _VisusKernelPy.Matrix_invert(self)
    if _newclass:
        translate = staticmethod(_VisusKernelPy.Matrix_translate)
    else:
        translate = _VisusKernelPy.Matrix_translate
    if _newclass:
        scale = staticmethod(_VisusKernelPy.Matrix_scale)
    else:
        scale = _VisusKernelPy.Matrix_scale
    if _newclass:
        scaleAroundAxis = staticmethod(_VisusKernelPy.Matrix_scaleAroundAxis)
    else:
        scaleAroundAxis = _VisusKernelPy.Matrix_scaleAroundAxis
    if _newclass:
        scaleAroundCenter = staticmethod(_VisusKernelPy.Matrix_scaleAroundCenter)
    else:
        scaleAroundCenter = _VisusKernelPy.Matrix_scaleAroundCenter
    if _newclass:
        nonZeroScale = staticmethod(_VisusKernelPy.Matrix_nonZeroScale)
    else:
        nonZeroScale = _VisusKernelPy.Matrix_nonZeroScale
    if _newclass:
        invNonZeroScale = staticmethod(_VisusKernelPy.Matrix_invNonZeroScale)
    else:
        invNonZeroScale = _VisusKernelPy.Matrix_invNonZeroScale

    def getDiagonal(self):
        return _VisusKernelPy.Matrix_getDiagonal(self)

    def isOnlyScale(self):
        return _VisusKernelPy.Matrix_isOnlyScale(self)
    if _newclass:
        rotate = staticmethod(_VisusKernelPy.Matrix_rotate)
    else:
        rotate = _VisusKernelPy.Matrix_rotate
    if _newclass:
        rotateAroundAxis = staticmethod(_VisusKernelPy.Matrix_rotateAroundAxis)
    else:
        rotateAroundAxis = _VisusKernelPy.Matrix_rotateAroundAxis
    if _newclass:
        rotateAroundCenter = staticmethod(_VisusKernelPy.Matrix_rotateAroundCenter)
    else:
        rotateAroundCenter = _VisusKernelPy.Matrix_rotateAroundCenter

    def toQuaternion(self):
        return _VisusKernelPy.Matrix_toQuaternion(self)
    if _newclass:
        lookAt = staticmethod(_VisusKernelPy.Matrix_lookAt)
    else:
        lookAt = _VisusKernelPy.Matrix_lookAt

    def getLookAt(self, pos, dir, vup):
        return _VisusKernelPy.Matrix_getLookAt(self, pos, dir, vup)
    if _newclass:
        perspective = staticmethod(_VisusKernelPy.Matrix_perspective)
    else:
        perspective = _VisusKernelPy.Matrix_perspective
    if _newclass:
        frustum = staticmethod(_VisusKernelPy.Matrix_frustum)
    else:
        frustum = _VisusKernelPy.Matrix_frustum
    if _newclass:
        ortho = staticmethod(_VisusKernelPy.Matrix_ortho)
    else:
        ortho = _VisusKernelPy.Matrix_ortho
    if _newclass:
        viewport = staticmethod(_VisusKernelPy.Matrix_viewport)
    else:
        viewport = _VisusKernelPy.Matrix_viewport
    if _newclass:
        embed = staticmethod(_VisusKernelPy.Matrix_embed)
    else:
        embed = _VisusKernelPy.Matrix_embed

    def submatrix(self, row, column):
        return _VisusKernelPy.Matrix_submatrix(self, row, column)

    def toString(self):
        return _VisusKernelPy.Matrix_toString(self)

    def toStringWithPrecision(self, precision=2):
        return _VisusKernelPy.Matrix_toStringWithPrecision(self, precision)

    def write(self, ar):
        return _VisusKernelPy.Matrix_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Matrix_read(self, ar)
Matrix_swigregister = _VisusKernelPy.Matrix_swigregister
Matrix_swigregister(Matrix)

def Matrix_fromString(*args):
    return _VisusKernelPy.Matrix_fromString(*args)
Matrix_fromString = _VisusKernelPy.Matrix_fromString

def Matrix_zero(dim):
    return _VisusKernelPy.Matrix_zero(dim)
Matrix_zero = _VisusKernelPy.Matrix_zero

def Matrix_identity(dim):
    return _VisusKernelPy.Matrix_identity(dim)
Matrix_identity = _VisusKernelPy.Matrix_identity

def Matrix_translate(*args):
    return _VisusKernelPy.Matrix_translate(*args)
Matrix_translate = _VisusKernelPy.Matrix_translate

def Matrix_scale(*args):
    return _VisusKernelPy.Matrix_scale(*args)
Matrix_scale = _VisusKernelPy.Matrix_scale

def Matrix_scaleAroundAxis(axis, k):
    return _VisusKernelPy.Matrix_scaleAroundAxis(axis, k)
Matrix_scaleAroundAxis = _VisusKernelPy.Matrix_scaleAroundAxis

def Matrix_scaleAroundCenter(*args):
    return _VisusKernelPy.Matrix_scaleAroundCenter(*args)
Matrix_scaleAroundCenter = _VisusKernelPy.Matrix_scaleAroundCenter

def Matrix_nonZeroScale(vs):
    return _VisusKernelPy.Matrix_nonZeroScale(vs)
Matrix_nonZeroScale = _VisusKernelPy.Matrix_nonZeroScale

def Matrix_invNonZeroScale(vs):
    return _VisusKernelPy.Matrix_invNonZeroScale(vs)
Matrix_invNonZeroScale = _VisusKernelPy.Matrix_invNonZeroScale

def Matrix_rotate(*args):
    return _VisusKernelPy.Matrix_rotate(*args)
Matrix_rotate = _VisusKernelPy.Matrix_rotate

def Matrix_rotateAroundAxis(axis, angle):
    return _VisusKernelPy.Matrix_rotateAroundAxis(axis, angle)
Matrix_rotateAroundAxis = _VisusKernelPy.Matrix_rotateAroundAxis

def Matrix_rotateAroundCenter(*args):
    return _VisusKernelPy.Matrix_rotateAroundCenter(*args)
Matrix_rotateAroundCenter = _VisusKernelPy.Matrix_rotateAroundCenter

def Matrix_lookAt(eye, center, up):
    return _VisusKernelPy.Matrix_lookAt(eye, center, up)
Matrix_lookAt = _VisusKernelPy.Matrix_lookAt

def Matrix_perspective(fovy, aspect, zNear, zFar):
    return _VisusKernelPy.Matrix_perspective(fovy, aspect, zNear, zFar)
Matrix_perspective = _VisusKernelPy.Matrix_perspective

def Matrix_frustum(left, right, bottom, top, nearZ, farZ):
    return _VisusKernelPy.Matrix_frustum(left, right, bottom, top, nearZ, farZ)
Matrix_frustum = _VisusKernelPy.Matrix_frustum

def Matrix_ortho(left, right, bottom, top, nearZ, farZ):
    return _VisusKernelPy.Matrix_ortho(left, right, bottom, top, nearZ, farZ)
Matrix_ortho = _VisusKernelPy.Matrix_ortho

def Matrix_viewport(x, y, width, height):
    return _VisusKernelPy.Matrix_viewport(x, y, width, height)
Matrix_viewport = _VisusKernelPy.Matrix_viewport

def Matrix_embed(axis, offset):
    return _VisusKernelPy.Matrix_embed(axis, offset)
Matrix_embed = _VisusKernelPy.Matrix_embed

class QDUMatrixDecomposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QDUMatrixDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QDUMatrixDecomposition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Q"] = _VisusKernelPy.QDUMatrixDecomposition_Q_set
    __swig_getmethods__["Q"] = _VisusKernelPy.QDUMatrixDecomposition_Q_get
    if _newclass:
        Q = _swig_property(_VisusKernelPy.QDUMatrixDecomposition_Q_get, _VisusKernelPy.QDUMatrixDecomposition_Q_set)
    __swig_setmethods__["D"] = _VisusKernelPy.QDUMatrixDecomposition_D_set
    __swig_getmethods__["D"] = _VisusKernelPy.QDUMatrixDecomposition_D_get
    if _newclass:
        D = _swig_property(_VisusKernelPy.QDUMatrixDecomposition_D_get, _VisusKernelPy.QDUMatrixDecomposition_D_set)
    __swig_setmethods__["U"] = _VisusKernelPy.QDUMatrixDecomposition_U_set
    __swig_getmethods__["U"] = _VisusKernelPy.QDUMatrixDecomposition_U_get
    if _newclass:
        U = _swig_property(_VisusKernelPy.QDUMatrixDecomposition_U_get, _VisusKernelPy.QDUMatrixDecomposition_U_set)

    def __init__(self, T):
        this = _VisusKernelPy.new_QDUMatrixDecomposition(T)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_QDUMatrixDecomposition
    __del__ = lambda self: None
QDUMatrixDecomposition_swigregister = _VisusKernelPy.QDUMatrixDecomposition_swigregister
QDUMatrixDecomposition_swigregister(QDUMatrixDecomposition)

class TRSMatrixDecomposition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TRSMatrixDecomposition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TRSMatrixDecomposition, name)
    __repr__ = _swig_repr
    __swig_setmethods__["translate"] = _VisusKernelPy.TRSMatrixDecomposition_translate_set
    __swig_getmethods__["translate"] = _VisusKernelPy.TRSMatrixDecomposition_translate_get
    if _newclass:
        translate = _swig_property(_VisusKernelPy.TRSMatrixDecomposition_translate_get, _VisusKernelPy.TRSMatrixDecomposition_translate_set)
    __swig_setmethods__["rotate"] = _VisusKernelPy.TRSMatrixDecomposition_rotate_set
    __swig_getmethods__["rotate"] = _VisusKernelPy.TRSMatrixDecomposition_rotate_get
    if _newclass:
        rotate = _swig_property(_VisusKernelPy.TRSMatrixDecomposition_rotate_get, _VisusKernelPy.TRSMatrixDecomposition_rotate_set)
    __swig_setmethods__["scale"] = _VisusKernelPy.TRSMatrixDecomposition_scale_set
    __swig_getmethods__["scale"] = _VisusKernelPy.TRSMatrixDecomposition_scale_get
    if _newclass:
        scale = _swig_property(_VisusKernelPy.TRSMatrixDecomposition_scale_get, _VisusKernelPy.TRSMatrixDecomposition_scale_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_TRSMatrixDecomposition(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toMatrix(self):
        return _VisusKernelPy.TRSMatrixDecomposition_toMatrix(self)
    __swig_destroy__ = _VisusKernelPy.delete_TRSMatrixDecomposition
    __del__ = lambda self: None
TRSMatrixDecomposition_swigregister = _VisusKernelPy.TRSMatrixDecomposition_swigregister
TRSMatrixDecomposition_swigregister(TRSMatrixDecomposition)

class MatrixMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MatrixMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MatrixMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["T"] = _VisusKernelPy.MatrixMap_T_set
    __swig_getmethods__["T"] = _VisusKernelPy.MatrixMap_T_get
    if _newclass:
        T = _swig_property(_VisusKernelPy.MatrixMap_T_get, _VisusKernelPy.MatrixMap_T_set)
    __swig_setmethods__["Ti"] = _VisusKernelPy.MatrixMap_Ti_set
    __swig_getmethods__["Ti"] = _VisusKernelPy.MatrixMap_Ti_get
    if _newclass:
        Ti = _swig_property(_VisusKernelPy.MatrixMap_Ti_get, _VisusKernelPy.MatrixMap_Ti_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_MatrixMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSpaceDim(self):
        return _VisusKernelPy.MatrixMap_getSpaceDim(self)

    def setSpaceDim(self, value):
        return _VisusKernelPy.MatrixMap_setSpaceDim(self, value)

    def applyDirectMap(self, *args):
        return _VisusKernelPy.MatrixMap_applyDirectMap(self, *args)

    def applyInverseMap(self, *args):
        return _VisusKernelPy.MatrixMap_applyInverseMap(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_MatrixMap
    __del__ = lambda self: None
MatrixMap_swigregister = _VisusKernelPy.MatrixMap_swigregister
MatrixMap_swigregister(MatrixMap)

class Polygon2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polygon2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Polygon2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["points"] = _VisusKernelPy.Polygon2d_points_set
    __swig_getmethods__["points"] = _VisusKernelPy.Polygon2d_points_get
    if _newclass:
        points = _swig_property(_VisusKernelPy.Polygon2d_points_get, _VisusKernelPy.Polygon2d_points_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Polygon2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def valid(self):
        return _VisusKernelPy.Polygon2d_valid(self)

    def __eq__(self, q):
        return _VisusKernelPy.Polygon2d___eq__(self, q)

    def __ne__(self, q):
        return _VisusKernelPy.Polygon2d___ne__(self, q)

    def getBoundingBox(self):
        return _VisusKernelPy.Polygon2d_getBoundingBox(self)

    def translate(self, vt):
        return _VisusKernelPy.Polygon2d_translate(self, vt)

    def scale(self, vs):
        return _VisusKernelPy.Polygon2d_scale(self, vs)

    def centroid(self):
        return _VisusKernelPy.Polygon2d_centroid(self)

    def toString(self):
        return _VisusKernelPy.Polygon2d_toString(self)

    def area(self):
        return _VisusKernelPy.Polygon2d_area(self)

    def clip(self, r):
        return _VisusKernelPy.Polygon2d_clip(self, r)
    __swig_destroy__ = _VisusKernelPy.delete_Polygon2d
    __del__ = lambda self: None
Polygon2d_swigregister = _VisusKernelPy.Polygon2d_swigregister
Polygon2d_swigregister(Polygon2d)

class Quad(Polygon2d):
    __swig_setmethods__ = {}
    for _s in [Polygon2d]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quad, name, value)
    __swig_getmethods__ = {}
    for _s in [Polygon2d]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, Quad, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_Quad(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def centroid(self):
        return _VisusKernelPy.Quad_centroid(self)

    def getPoint(self, index):
        return _VisusKernelPy.Quad_getPoint(self, index)

    def translate(self, vt):
        return _VisusKernelPy.Quad_translate(self, vt)
    if _newclass:
        computeBoundingBox = staticmethod(_VisusKernelPy.Quad_computeBoundingBox)
    else:
        computeBoundingBox = _VisusKernelPy.Quad_computeBoundingBox
    if _newclass:
        findQuadHomography = staticmethod(_VisusKernelPy.Quad_findQuadHomography)
    else:
        findQuadHomography = _VisusKernelPy.Quad_findQuadHomography
    if _newclass:
        intersection = staticmethod(_VisusKernelPy.Quad_intersection)
    else:
        intersection = _VisusKernelPy.Quad_intersection

    def isConvex(self):
        return _VisusKernelPy.Quad_isConvex(self)

    def wrongAngles(self):
        return _VisusKernelPy.Quad_wrongAngles(self)

    def wrongScale(self, width, height):
        return _VisusKernelPy.Quad_wrongScale(self, width, height)

    def toString(self, *args):
        return _VisusKernelPy.Quad_toString(self, *args)

    def toString10(self, *args):
        return _VisusKernelPy.Quad_toString10(self, *args)
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Quad_fromString)
    else:
        fromString = _VisusKernelPy.Quad_fromString
    __swig_destroy__ = _VisusKernelPy.delete_Quad
    __del__ = lambda self: None
Quad_swigregister = _VisusKernelPy.Quad_swigregister
Quad_swigregister(Quad)

def Quad_computeBoundingBox(quads):
    return _VisusKernelPy.Quad_computeBoundingBox(quads)
Quad_computeBoundingBox = _VisusKernelPy.Quad_computeBoundingBox

def Quad_findQuadHomography(dst, src):
    return _VisusKernelPy.Quad_findQuadHomography(dst, src)
Quad_findQuadHomography = _VisusKernelPy.Quad_findQuadHomography

def Quad_intersection(A, B):
    return _VisusKernelPy.Quad_intersection(A, B)
Quad_intersection = _VisusKernelPy.Quad_intersection

def Quad_fromString(s):
    return _VisusKernelPy.Quad_fromString(s)
Quad_fromString = _VisusKernelPy.Quad_fromString

class Position(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Position, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Position, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_Position(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Position_invalid)
    else:
        invalid = _VisusKernelPy.Position_invalid

    def prependTransformation(self, T):
        return _VisusKernelPy.Position_prependTransformation(self, T)

    def getPointDim(self):
        return _VisusKernelPy.Position_getPointDim(self)

    def setPointDim(self, value):
        return _VisusKernelPy.Position_setPointDim(self, value)

    def getSpaceDim(self):
        return _VisusKernelPy.Position_getSpaceDim(self)

    def setSpaceDim(self, value):
        return _VisusKernelPy.Position_setSpaceDim(self, value)
    if _newclass:
        computeTransformation = staticmethod(_VisusKernelPy.Position_computeTransformation)
    else:
        computeTransformation = _VisusKernelPy.Position_computeTransformation

    def __eq__(self, other):
        return _VisusKernelPy.Position___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Position___ne__(self, other)

    def valid(self):
        return _VisusKernelPy.Position_valid(self)

    def getTransformation(self):
        return _VisusKernelPy.Position_getTransformation(self)

    def getBoxNd(self):
        return _VisusKernelPy.Position_getBoxNd(self)

    def getBoxNi(self):
        return _VisusKernelPy.Position_getBoxNi(self)

    def computeVolume(self, *args):
        return _VisusKernelPy.Position_computeVolume(self, *args)

    def getCentroid(self):
        return _VisusKernelPy.Position_getCentroid(self)

    def getPoints(self):
        return _VisusKernelPy.Position_getPoints(self)

    def toAxisAlignedBox(self):
        return _VisusKernelPy.Position_toAxisAlignedBox(self)

    def toDiscreteAxisAlignedBox(self):
        return _VisusKernelPy.Position_toDiscreteAxisAlignedBox(self)
    if _newclass:
        shrink = staticmethod(_VisusKernelPy.Position_shrink)
    else:
        shrink = _VisusKernelPy.Position_shrink

    def write(self, ar):
        return _VisusKernelPy.Position_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Position_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Position
    __del__ = lambda self: None
Position_swigregister = _VisusKernelPy.Position_swigregister
Position_swigregister(Position)

def Position_invalid():
    return _VisusKernelPy.Position_invalid()
Position_invalid = _VisusKernelPy.Position_invalid

def Position_computeTransformation(*args):
    return _VisusKernelPy.Position_computeTransformation(*args)
Position_computeTransformation = _VisusKernelPy.Position_computeTransformation

def Position_shrink(dst_box, map, position):
    return _VisusKernelPy.Position_shrink(dst_box, map, position)
Position_shrink = _VisusKernelPy.Position_shrink

class VectorPoint2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorPoint2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorPoint2d, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorPoint2d_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorPoint2d___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorPoint2d___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorPoint2d___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorPoint2d___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorPoint2d___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorPoint2d___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorPoint2d___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorPoint2d___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorPoint2d___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorPoint2d_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorPoint2d_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorPoint2d_empty(self)

    def size(self):
        return _VisusKernelPy.VectorPoint2d_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorPoint2d_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorPoint2d_begin(self)

    def end(self):
        return _VisusKernelPy.VectorPoint2d_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorPoint2d_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorPoint2d_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorPoint2d_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorPoint2d_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorPoint2d_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorPoint2d_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorPoint2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorPoint2d_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorPoint2d_front(self)

    def back(self):
        return _VisusKernelPy.VectorPoint2d_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorPoint2d_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorPoint2d_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorPoint2d_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorPoint2d_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorPoint2d_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorPoint2d
    __del__ = lambda self: None
VectorPoint2d_swigregister = _VisusKernelPy.VectorPoint2d_swigregister
VectorPoint2d_swigregister(VectorPoint2d)

class Ray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ray, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _VisusKernelPy.Ray_origin_set
    __swig_getmethods__["origin"] = _VisusKernelPy.Ray_origin_get
    if _newclass:
        origin = _swig_property(_VisusKernelPy.Ray_origin_get, _VisusKernelPy.Ray_origin_set)
    __swig_setmethods__["direction"] = _VisusKernelPy.Ray_direction_set
    __swig_getmethods__["direction"] = _VisusKernelPy.Ray_direction_get
    if _newclass:
        direction = _swig_property(_VisusKernelPy.Ray_direction_get, _VisusKernelPy.Ray_direction_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Ray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromTwoPoints = staticmethod(_VisusKernelPy.Ray_fromTwoPoints)
    else:
        fromTwoPoints = _VisusKernelPy.Ray_fromTwoPoints

    def getPointDim(self):
        return _VisusKernelPy.Ray_getPointDim(self)

    def valid(self):
        return _VisusKernelPy.Ray_valid(self)

    def getOrigin(self):
        return _VisusKernelPy.Ray_getOrigin(self)

    def getDirection(self):
        return _VisusKernelPy.Ray_getDirection(self)

    def getPoint(self, alpha):
        return _VisusKernelPy.Ray_getPoint(self, alpha)

    def transformByMatrix(self, M):
        return _VisusKernelPy.Ray_transformByMatrix(self, M)

    def findIntersectionOnZeroPlane(self):
        return _VisusKernelPy.Ray_findIntersectionOnZeroPlane(self)
    __swig_destroy__ = _VisusKernelPy.delete_Ray
    __del__ = lambda self: None
Ray_swigregister = _VisusKernelPy.Ray_swigregister
Ray_swigregister(Ray)

def Ray_fromTwoPoints(A, B):
    return _VisusKernelPy.Ray_fromTwoPoints(A, B)
Ray_fromTwoPoints = _VisusKernelPy.Ray_fromTwoPoints

class RayBoxIntersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayBoxIntersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayBoxIntersection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["valid"] = _VisusKernelPy.RayBoxIntersection_valid_set
    __swig_getmethods__["valid"] = _VisusKernelPy.RayBoxIntersection_valid_get
    if _newclass:
        valid = _swig_property(_VisusKernelPy.RayBoxIntersection_valid_get, _VisusKernelPy.RayBoxIntersection_valid_set)
    __swig_setmethods__["tmin"] = _VisusKernelPy.RayBoxIntersection_tmin_set
    __swig_getmethods__["tmin"] = _VisusKernelPy.RayBoxIntersection_tmin_get
    if _newclass:
        tmin = _swig_property(_VisusKernelPy.RayBoxIntersection_tmin_get, _VisusKernelPy.RayBoxIntersection_tmin_set)
    __swig_setmethods__["tmax"] = _VisusKernelPy.RayBoxIntersection_tmax_set
    __swig_getmethods__["tmax"] = _VisusKernelPy.RayBoxIntersection_tmax_get
    if _newclass:
        tmax = _swig_property(_VisusKernelPy.RayBoxIntersection_tmax_get, _VisusKernelPy.RayBoxIntersection_tmax_set)

    def __init__(self, ray, box):
        this = _VisusKernelPy.new_RayBoxIntersection(ray, box)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RayBoxIntersection
    __del__ = lambda self: None
RayBoxIntersection_swigregister = _VisusKernelPy.RayBoxIntersection_swigregister
RayBoxIntersection_swigregister(RayBoxIntersection)

class RayPlaneIntersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayPlaneIntersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayPlaneIntersection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["valid"] = _VisusKernelPy.RayPlaneIntersection_valid_set
    __swig_getmethods__["valid"] = _VisusKernelPy.RayPlaneIntersection_valid_get
    if _newclass:
        valid = _swig_property(_VisusKernelPy.RayPlaneIntersection_valid_get, _VisusKernelPy.RayPlaneIntersection_valid_set)
    __swig_setmethods__["t"] = _VisusKernelPy.RayPlaneIntersection_t_set
    __swig_getmethods__["t"] = _VisusKernelPy.RayPlaneIntersection_t_get
    if _newclass:
        t = _swig_property(_VisusKernelPy.RayPlaneIntersection_t_get, _VisusKernelPy.RayPlaneIntersection_t_set)
    __swig_setmethods__["point"] = _VisusKernelPy.RayPlaneIntersection_point_set
    __swig_getmethods__["point"] = _VisusKernelPy.RayPlaneIntersection_point_get
    if _newclass:
        point = _swig_property(_VisusKernelPy.RayPlaneIntersection_point_get, _VisusKernelPy.RayPlaneIntersection_point_set)

    def __init__(self, ray, plane):
        this = _VisusKernelPy.new_RayPlaneIntersection(ray, plane)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RayPlaneIntersection
    __del__ = lambda self: None
RayPlaneIntersection_swigregister = _VisusKernelPy.RayPlaneIntersection_swigregister
RayPlaneIntersection_swigregister(RayPlaneIntersection)

class RaySphereIntersection(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RaySphereIntersection, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RaySphereIntersection, name)
    __repr__ = _swig_repr
    __swig_setmethods__["valid"] = _VisusKernelPy.RaySphereIntersection_valid_set
    __swig_getmethods__["valid"] = _VisusKernelPy.RaySphereIntersection_valid_get
    if _newclass:
        valid = _swig_property(_VisusKernelPy.RaySphereIntersection_valid_get, _VisusKernelPy.RaySphereIntersection_valid_set)
    __swig_setmethods__["tmin"] = _VisusKernelPy.RaySphereIntersection_tmin_set
    __swig_getmethods__["tmin"] = _VisusKernelPy.RaySphereIntersection_tmin_get
    if _newclass:
        tmin = _swig_property(_VisusKernelPy.RaySphereIntersection_tmin_get, _VisusKernelPy.RaySphereIntersection_tmin_set)
    __swig_setmethods__["tmax"] = _VisusKernelPy.RaySphereIntersection_tmax_set
    __swig_getmethods__["tmax"] = _VisusKernelPy.RaySphereIntersection_tmax_get
    if _newclass:
        tmax = _swig_property(_VisusKernelPy.RaySphereIntersection_tmax_get, _VisusKernelPy.RaySphereIntersection_tmax_set)

    def __init__(self, ray, sp):
        this = _VisusKernelPy.new_RaySphereIntersection(ray, sp)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RaySphereIntersection
    __del__ = lambda self: None
RaySphereIntersection_swigregister = _VisusKernelPy.RaySphereIntersection_swigregister
RaySphereIntersection_swigregister(RaySphereIntersection)

class RayPointDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayPointDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayPointDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distance"] = _VisusKernelPy.RayPointDistance_distance_set
    __swig_getmethods__["distance"] = _VisusKernelPy.RayPointDistance_distance_get
    if _newclass:
        distance = _swig_property(_VisusKernelPy.RayPointDistance_distance_get, _VisusKernelPy.RayPointDistance_distance_set)
    __swig_setmethods__["closest_ray_point"] = _VisusKernelPy.RayPointDistance_closest_ray_point_set
    __swig_getmethods__["closest_ray_point"] = _VisusKernelPy.RayPointDistance_closest_ray_point_get
    if _newclass:
        closest_ray_point = _swig_property(_VisusKernelPy.RayPointDistance_closest_ray_point_get, _VisusKernelPy.RayPointDistance_closest_ray_point_set)

    def __init__(self, ray, point):
        this = _VisusKernelPy.new_RayPointDistance(ray, point)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RayPointDistance
    __del__ = lambda self: None
RayPointDistance_swigregister = _VisusKernelPy.RayPointDistance_swigregister
RayPointDistance_swigregister(RayPointDistance)

class RayLineDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayLineDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayLineDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distance"] = _VisusKernelPy.RayLineDistance_distance_set
    __swig_getmethods__["distance"] = _VisusKernelPy.RayLineDistance_distance_get
    if _newclass:
        distance = _swig_property(_VisusKernelPy.RayLineDistance_distance_get, _VisusKernelPy.RayLineDistance_distance_set)
    __swig_setmethods__["closest_ray_point"] = _VisusKernelPy.RayLineDistance_closest_ray_point_set
    __swig_getmethods__["closest_ray_point"] = _VisusKernelPy.RayLineDistance_closest_ray_point_get
    if _newclass:
        closest_ray_point = _swig_property(_VisusKernelPy.RayLineDistance_closest_ray_point_get, _VisusKernelPy.RayLineDistance_closest_ray_point_set)
    __swig_setmethods__["closest_line_point"] = _VisusKernelPy.RayLineDistance_closest_line_point_set
    __swig_getmethods__["closest_line_point"] = _VisusKernelPy.RayLineDistance_closest_line_point_get
    if _newclass:
        closest_line_point = _swig_property(_VisusKernelPy.RayLineDistance_closest_line_point_get, _VisusKernelPy.RayLineDistance_closest_line_point_set)

    def __init__(self, ray, line):
        this = _VisusKernelPy.new_RayLineDistance(ray, line)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RayLineDistance
    __del__ = lambda self: None
RayLineDistance_swigregister = _VisusKernelPy.RayLineDistance_swigregister
RayLineDistance_swigregister(RayLineDistance)

class RaySegmentDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RaySegmentDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RaySegmentDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distance"] = _VisusKernelPy.RaySegmentDistance_distance_set
    __swig_getmethods__["distance"] = _VisusKernelPy.RaySegmentDistance_distance_get
    if _newclass:
        distance = _swig_property(_VisusKernelPy.RaySegmentDistance_distance_get, _VisusKernelPy.RaySegmentDistance_distance_set)
    __swig_setmethods__["closest_ray_point"] = _VisusKernelPy.RaySegmentDistance_closest_ray_point_set
    __swig_getmethods__["closest_ray_point"] = _VisusKernelPy.RaySegmentDistance_closest_ray_point_get
    if _newclass:
        closest_ray_point = _swig_property(_VisusKernelPy.RaySegmentDistance_closest_ray_point_get, _VisusKernelPy.RaySegmentDistance_closest_ray_point_set)
    __swig_setmethods__["closest_segment_point"] = _VisusKernelPy.RaySegmentDistance_closest_segment_point_set
    __swig_getmethods__["closest_segment_point"] = _VisusKernelPy.RaySegmentDistance_closest_segment_point_get
    if _newclass:
        closest_segment_point = _swig_property(_VisusKernelPy.RaySegmentDistance_closest_segment_point_get, _VisusKernelPy.RaySegmentDistance_closest_segment_point_set)

    def __init__(self, ray, segment):
        this = _VisusKernelPy.new_RaySegmentDistance(ray, segment)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RaySegmentDistance
    __del__ = lambda self: None
RaySegmentDistance_swigregister = _VisusKernelPy.RaySegmentDistance_swigregister
RaySegmentDistance_swigregister(RaySegmentDistance)

class RayCircleDistance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RayCircleDistance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RayCircleDistance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["distance"] = _VisusKernelPy.RayCircleDistance_distance_set
    __swig_getmethods__["distance"] = _VisusKernelPy.RayCircleDistance_distance_get
    if _newclass:
        distance = _swig_property(_VisusKernelPy.RayCircleDistance_distance_get, _VisusKernelPy.RayCircleDistance_distance_set)
    __swig_setmethods__["closest_ray_point"] = _VisusKernelPy.RayCircleDistance_closest_ray_point_set
    __swig_getmethods__["closest_ray_point"] = _VisusKernelPy.RayCircleDistance_closest_ray_point_get
    if _newclass:
        closest_ray_point = _swig_property(_VisusKernelPy.RayCircleDistance_closest_ray_point_get, _VisusKernelPy.RayCircleDistance_closest_ray_point_set)
    __swig_setmethods__["closest_circle_point"] = _VisusKernelPy.RayCircleDistance_closest_circle_point_set
    __swig_getmethods__["closest_circle_point"] = _VisusKernelPy.RayCircleDistance_closest_circle_point_get
    if _newclass:
        closest_circle_point = _swig_property(_VisusKernelPy.RayCircleDistance_closest_circle_point_get, _VisusKernelPy.RayCircleDistance_closest_circle_point_set)

    def __init__(self, ray, circle):
        this = _VisusKernelPy.new_RayCircleDistance(ray, circle)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_RayCircleDistance
    __del__ = lambda self: None
RayCircleDistance_swigregister = _VisusKernelPy.RayCircleDistance_swigregister
RayCircleDistance_swigregister(RayCircleDistance)

class Rectangle2i(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rectangle2i, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rectangle2i, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Rectangle2i_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Rectangle2i_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Rectangle2i_x_get, _VisusKernelPy.Rectangle2i_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Rectangle2i_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Rectangle2i_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Rectangle2i_y_get, _VisusKernelPy.Rectangle2i_y_set)
    __swig_setmethods__["width"] = _VisusKernelPy.Rectangle2i_width_set
    __swig_getmethods__["width"] = _VisusKernelPy.Rectangle2i_width_get
    if _newclass:
        width = _swig_property(_VisusKernelPy.Rectangle2i_width_get, _VisusKernelPy.Rectangle2i_width_set)
    __swig_setmethods__["height"] = _VisusKernelPy.Rectangle2i_height_set
    __swig_getmethods__["height"] = _VisusKernelPy.Rectangle2i_height_get
    if _newclass:
        height = _swig_property(_VisusKernelPy.Rectangle2i_height_get, _VisusKernelPy.Rectangle2i_height_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Rectangle2i(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getUnion(self, other):
        return _VisusKernelPy.Rectangle2i_getUnion(self, other)

    def getIntersection(self, other):
        return _VisusKernelPy.Rectangle2i_getIntersection(self, other)

    def scaleAroundCenter(self, sx, sy):
        return _VisusKernelPy.Rectangle2i_scaleAroundCenter(self, sx, sy)

    def valid(self):
        return _VisusKernelPy.Rectangle2i_valid(self)

    def containsPoint(self, p):
        return _VisusKernelPy.Rectangle2i_containsPoint(self, p)

    def p1(self):
        return _VisusKernelPy.Rectangle2i_p1(self)

    def p2(self):
        return _VisusKernelPy.Rectangle2i_p2(self)

    def center(self):
        return _VisusKernelPy.Rectangle2i_center(self)

    def size(self):
        return _VisusKernelPy.Rectangle2i_size(self)

    def __eq__(self, other):
        return _VisusKernelPy.Rectangle2i___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Rectangle2i___ne__(self, other)

    def write(self, ar):
        return _VisusKernelPy.Rectangle2i_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Rectangle2i_read(self, ar)

    def toString(self):
        return _VisusKernelPy.Rectangle2i_toString(self)
    __swig_destroy__ = _VisusKernelPy.delete_Rectangle2i
    __del__ = lambda self: None
Rectangle2i_swigregister = _VisusKernelPy.Rectangle2i_swigregister
Rectangle2i_swigregister(Rectangle2i)

class Rectangle2d(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rectangle2d, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rectangle2d, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.Rectangle2d_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.Rectangle2d_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.Rectangle2d_x_get, _VisusKernelPy.Rectangle2d_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.Rectangle2d_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.Rectangle2d_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.Rectangle2d_y_get, _VisusKernelPy.Rectangle2d_y_set)
    __swig_setmethods__["width"] = _VisusKernelPy.Rectangle2d_width_set
    __swig_getmethods__["width"] = _VisusKernelPy.Rectangle2d_width_get
    if _newclass:
        width = _swig_property(_VisusKernelPy.Rectangle2d_width_get, _VisusKernelPy.Rectangle2d_width_set)
    __swig_setmethods__["height"] = _VisusKernelPy.Rectangle2d_height_set
    __swig_getmethods__["height"] = _VisusKernelPy.Rectangle2d_height_get
    if _newclass:
        height = _swig_property(_VisusKernelPy.Rectangle2d_height_get, _VisusKernelPy.Rectangle2d_height_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Rectangle2d(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Rectangle2d
    __del__ = lambda self: None
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Rectangle2d_fromString)
    else:
        fromString = _VisusKernelPy.Rectangle2d_fromString

    def valid(self):
        return _VisusKernelPy.Rectangle2d_valid(self)

    def getAspectRatio(self):
        return _VisusKernelPy.Rectangle2d_getAspectRatio(self)

    def containsPoint(self, p):
        return _VisusKernelPy.Rectangle2d_containsPoint(self, p)

    def p1(self):
        return _VisusKernelPy.Rectangle2d_p1(self)

    def p2(self):
        return _VisusKernelPy.Rectangle2d_p2(self)

    def center(self):
        return _VisusKernelPy.Rectangle2d_center(self)

    def size(self):
        return _VisusKernelPy.Rectangle2d_size(self)

    def translate(self, *args):
        return _VisusKernelPy.Rectangle2d_translate(self, *args)

    def scale(self, *args):
        return _VisusKernelPy.Rectangle2d_scale(self, *args)

    def __eq__(self, other):
        return _VisusKernelPy.Rectangle2d___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Rectangle2d___ne__(self, other)

    def write(self, ar):
        return _VisusKernelPy.Rectangle2d_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Rectangle2d_read(self, ar)

    def toString(self):
        return _VisusKernelPy.Rectangle2d_toString(self)
Rectangle2d_swigregister = _VisusKernelPy.Rectangle2d_swigregister
Rectangle2d_swigregister(Rectangle2d)

def Rectangle2d_fromString(s):
    return _VisusKernelPy.Rectangle2d_fromString(s)
Rectangle2d_fromString = _VisusKernelPy.Rectangle2d_fromString

class Frustum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frustum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Frustum, name)
    __repr__ = _swig_repr
    POINT_NEAR_BOTTOM_LEFT = _VisusKernelPy.Frustum_POINT_NEAR_BOTTOM_LEFT
    POINT_NEAR_BOTTOM_RIGHT = _VisusKernelPy.Frustum_POINT_NEAR_BOTTOM_RIGHT
    POINT_NEAR_TOP_RIGHT = _VisusKernelPy.Frustum_POINT_NEAR_TOP_RIGHT
    POINT_NEAR_TOP_LEFT = _VisusKernelPy.Frustum_POINT_NEAR_TOP_LEFT
    POINT_FAR_BOTTOM_LEFT = _VisusKernelPy.Frustum_POINT_FAR_BOTTOM_LEFT
    POINT_FAR_BOTTOM_RIGHT = _VisusKernelPy.Frustum_POINT_FAR_BOTTOM_RIGHT
    POINT_FAR_TOP_RIGHT = _VisusKernelPy.Frustum_POINT_FAR_TOP_RIGHT
    POINT_FAR_TOP_LEFT = _VisusKernelPy.Frustum_POINT_FAR_TOP_LEFT
    PLANE_LEFT = _VisusKernelPy.Frustum_PLANE_LEFT
    PLANE_RIGHT = _VisusKernelPy.Frustum_PLANE_RIGHT
    PLANE_TOP = _VisusKernelPy.Frustum_PLANE_TOP
    PLANE_BOTTOM = _VisusKernelPy.Frustum_PLANE_BOTTOM
    PLANE_NEAR = _VisusKernelPy.Frustum_PLANE_NEAR
    PLANE_FAR = _VisusKernelPy.Frustum_PLANE_FAR

    def __init__(self, *args):
        this = _VisusKernelPy.new_Frustum(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __eq__(self, other):
        return _VisusKernelPy.Frustum___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Frustum___ne__(self, other)

    def getModelview(self):
        return _VisusKernelPy.Frustum_getModelview(self)

    def getProjection(self):
        return _VisusKernelPy.Frustum_getProjection(self)

    def getViewport(self):
        return _VisusKernelPy.Frustum_getViewport(self)

    def valid(self):
        return _VisusKernelPy.Frustum_valid(self)

    def getScreenBox(self):
        return _VisusKernelPy.Frustum_getScreenBox(self)

    def loadModelview(self, T):
        return _VisusKernelPy.Frustum_loadModelview(self, T)

    def loadProjection(self, T):
        return _VisusKernelPy.Frustum_loadProjection(self, T)

    def setViewport(self, V):
        return _VisusKernelPy.Frustum_setViewport(self, V)

    def multModelview(self, T):
        return _VisusKernelPy.Frustum_multModelview(self, T)

    def multProjection(self, T):
        return _VisusKernelPy.Frustum_multProjection(self, T)

    def pickMatrix(self, x, y, dx, dy):
        return _VisusKernelPy.Frustum_pickMatrix(self, x, y, dx, dy)

    def getConvexHull(self):
        return _VisusKernelPy.Frustum_getConvexHull(self)

    def computeDistance(self, obj, screen_point, bUseFarPoint=False):
        return _VisusKernelPy.Frustum_computeDistance(self, obj, screen_point, bUseFarPoint)

    def computeZDistance(self, obj, bUseFarPoint=False):
        return _VisusKernelPy.Frustum_computeZDistance(self, obj, bUseFarPoint)

    def getViewportDirectTransformation(self, *args):
        return _VisusKernelPy.Frustum_getViewportDirectTransformation(self, *args)

    def getViewportInverseTransformation(self, *args):
        return _VisusKernelPy.Frustum_getViewportInverseTransformation(self, *args)
    __swig_destroy__ = _VisusKernelPy.delete_Frustum
    __del__ = lambda self: None
Frustum_swigregister = _VisusKernelPy.Frustum_swigregister
Frustum_swigregister(Frustum)

class FrustumMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FrustumMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FrustumMap, name)
    __repr__ = _swig_repr
    __swig_setmethods__["frustum"] = _VisusKernelPy.FrustumMap_frustum_set
    __swig_getmethods__["frustum"] = _VisusKernelPy.FrustumMap_frustum_get
    if _newclass:
        frustum = _swig_property(_VisusKernelPy.FrustumMap_frustum_get, _VisusKernelPy.FrustumMap_frustum_set)
    __swig_setmethods__["viewport"] = _VisusKernelPy.FrustumMap_viewport_set
    __swig_getmethods__["viewport"] = _VisusKernelPy.FrustumMap_viewport_get
    if _newclass:
        viewport = _swig_property(_VisusKernelPy.FrustumMap_viewport_get, _VisusKernelPy.FrustumMap_viewport_set)
    __swig_setmethods__["projection"] = _VisusKernelPy.FrustumMap_projection_set
    __swig_getmethods__["projection"] = _VisusKernelPy.FrustumMap_projection_get
    if _newclass:
        projection = _swig_property(_VisusKernelPy.FrustumMap_projection_get, _VisusKernelPy.FrustumMap_projection_set)
    __swig_setmethods__["modelview"] = _VisusKernelPy.FrustumMap_modelview_set
    __swig_getmethods__["modelview"] = _VisusKernelPy.FrustumMap_modelview_get
    if _newclass:
        modelview = _swig_property(_VisusKernelPy.FrustumMap_modelview_get, _VisusKernelPy.FrustumMap_modelview_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_FrustumMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getSpaceDim(self):
        return _VisusKernelPy.FrustumMap_getSpaceDim(self)

    def setSpaceDim(self, value):
        return _VisusKernelPy.FrustumMap_setSpaceDim(self, value)

    def toNormalizedScreenCoordinates(self, p):
        return _VisusKernelPy.FrustumMap_toNormalizedScreenCoordinates(self, p)

    def fromNormalizedScreenCoordinates(self, p):
        return _VisusKernelPy.FrustumMap_fromNormalizedScreenCoordinates(self, p)

    def applyDirectMap(self, *args):
        return _VisusKernelPy.FrustumMap_applyDirectMap(self, *args)

    def applyInverseMap(self, *args):
        return _VisusKernelPy.FrustumMap_applyInverseMap(self, *args)

    def applyDirectMapFromEye(self, p):
        return _VisusKernelPy.FrustumMap_applyDirectMapFromEye(self, p)

    def applyInverseMapToEye(self, p):
        return _VisusKernelPy.FrustumMap_applyInverseMapToEye(self, p)

    def projectPoint(self, p):
        return _VisusKernelPy.FrustumMap_projectPoint(self, p)

    def unprojectPoint(self, p, Z=0.0):
        return _VisusKernelPy.FrustumMap_unprojectPoint(self, p, Z)

    def unprojectPointToEye(self, p, Z=0.0):
        return _VisusKernelPy.FrustumMap_unprojectPointToEye(self, p, Z)

    def getRay(self, p):
        return _VisusKernelPy.FrustumMap_getRay(self, p)
    __swig_destroy__ = _VisusKernelPy.delete_FrustumMap
    __del__ = lambda self: None
FrustumMap_swigregister = _VisusKernelPy.FrustumMap_swigregister
FrustumMap_swigregister(FrustumMap)

class Range(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Range, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Range, name)
    __repr__ = _swig_repr
    __swig_setmethods__["From"] = _VisusKernelPy.Range_From_set
    __swig_getmethods__["From"] = _VisusKernelPy.Range_From_get
    if _newclass:
        From = _swig_property(_VisusKernelPy.Range_From_get, _VisusKernelPy.Range_From_set)
    __swig_setmethods__["To"] = _VisusKernelPy.Range_To_set
    __swig_getmethods__["To"] = _VisusKernelPy.Range_To_get
    if _newclass:
        To = _swig_property(_VisusKernelPy.Range_To_get, _VisusKernelPy.Range_To_set)
    __swig_setmethods__["step"] = _VisusKernelPy.Range_step_set
    __swig_getmethods__["step"] = _VisusKernelPy.Range_step_get
    if _newclass:
        step = _swig_property(_VisusKernelPy.Range_step_get, _VisusKernelPy.Range_step_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Range(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Range_fromString)
    else:
        fromString = _VisusKernelPy.Range_fromString
    __swig_destroy__ = _VisusKernelPy.delete_Range
    __del__ = lambda self: None

    def __eq__(self, other):
        return _VisusKernelPy.Range___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.Range___ne__(self, other)

    def contains(self, value):
        return _VisusKernelPy.Range_contains(self, value)
    if _newclass:
        invalid = staticmethod(_VisusKernelPy.Range_invalid)
    else:
        invalid = _VisusKernelPy.Range_invalid

    def delta(self):
        return _VisusKernelPy.Range_delta(self)

    def clamp(self, v):
        return _VisusKernelPy.Range_clamp(self, v)

    def toString(self):
        return _VisusKernelPy.Range_toString(self)

    def getUnion(self, other):
        return _VisusKernelPy.Range_getUnion(self, other)

    def getIntersection(self, other):
        return _VisusKernelPy.Range_getIntersection(self, other)

    def write(self, ar):
        return _VisusKernelPy.Range_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Range_read(self, ar)
Range_swigregister = _VisusKernelPy.Range_swigregister
Range_swigregister(Range)

def Range_fromString(value):
    return _VisusKernelPy.Range_fromString(value)
Range_fromString = _VisusKernelPy.Range_fromString

def Range_invalid():
    return _VisusKernelPy.Range_invalid()
Range_invalid = _VisusKernelPy.Range_invalid

class DType(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DType, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DType, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _VisusKernelPy.new_DType(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.DType_fromString)
    else:
        fromString = _VisusKernelPy.DType_fromString

    def toString(self):
        return _VisusKernelPy.DType_toString(self)

    def isDecimal(self):
        return _VisusKernelPy.DType_isDecimal(self)

    def __eq__(self, other):
        return _VisusKernelPy.DType___eq__(self, other)

    def __ne__(self, other):
        return _VisusKernelPy.DType___ne__(self, other)

    def valid(self):
        return _VisusKernelPy.DType_valid(self)

    def isVectorOf(self, other):
        return _VisusKernelPy.DType_isVectorOf(self, other)

    def ncomponents(self):
        return _VisusKernelPy.DType_ncomponents(self)

    def withNumberOfComponents(self, N):
        return _VisusKernelPy.DType_withNumberOfComponents(self, N)

    def getBitSize(self, *args):
        return _VisusKernelPy.DType_getBitSize(self, *args)

    def getByteSize(self, *args):
        return _VisusKernelPy.DType_getByteSize(self, *args)

    def isUnsigned(self):
        return _VisusKernelPy.DType_isUnsigned(self)

    def getBitsOffset(self, C):
        return _VisusKernelPy.DType_getBitsOffset(self, C)

    def get(self, C):
        return _VisusKernelPy.DType_get(self, C)

    def getDTypeRange(self, component=0):
        return _VisusKernelPy.DType_getDTypeRange(self, component)

    def withDTypeRange(self, value, component=0):
        return _VisusKernelPy.DType_withDTypeRange(self, value, component)
    __swig_destroy__ = _VisusKernelPy.delete_DType
    __del__ = lambda self: None
DType_swigregister = _VisusKernelPy.DType_swigregister
DType_swigregister(DType)

def DType_fromString(s):
    return _VisusKernelPy.DType_fromString(s)
DType_fromString = _VisusKernelPy.DType_fromString


def GetCppRange(dtype):
    return _VisusKernelPy.GetCppRange(dtype)
GetCppRange = _VisusKernelPy.GetCppRange
class DTypes(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DTypes, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DTypes, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["UINT1"] = _VisusKernelPy.DTypes_UINT1_set
    __swig_getmethods__["UINT1"] = _VisusKernelPy.DTypes_UINT1_get
    if _newclass:
        UINT1 = _swig_property(_VisusKernelPy.DTypes_UINT1_get, _VisusKernelPy.DTypes_UINT1_set)
    __swig_setmethods__["INT8"] = _VisusKernelPy.DTypes_INT8_set
    __swig_getmethods__["INT8"] = _VisusKernelPy.DTypes_INT8_get
    if _newclass:
        INT8 = _swig_property(_VisusKernelPy.DTypes_INT8_get, _VisusKernelPy.DTypes_INT8_set)
    __swig_setmethods__["INT8_GA"] = _VisusKernelPy.DTypes_INT8_GA_set
    __swig_getmethods__["INT8_GA"] = _VisusKernelPy.DTypes_INT8_GA_get
    if _newclass:
        INT8_GA = _swig_property(_VisusKernelPy.DTypes_INT8_GA_get, _VisusKernelPy.DTypes_INT8_GA_set)
    __swig_setmethods__["INT8_RGB"] = _VisusKernelPy.DTypes_INT8_RGB_set
    __swig_getmethods__["INT8_RGB"] = _VisusKernelPy.DTypes_INT8_RGB_get
    if _newclass:
        INT8_RGB = _swig_property(_VisusKernelPy.DTypes_INT8_RGB_get, _VisusKernelPy.DTypes_INT8_RGB_set)
    __swig_setmethods__["INT8_RGBA"] = _VisusKernelPy.DTypes_INT8_RGBA_set
    __swig_getmethods__["INT8_RGBA"] = _VisusKernelPy.DTypes_INT8_RGBA_get
    if _newclass:
        INT8_RGBA = _swig_property(_VisusKernelPy.DTypes_INT8_RGBA_get, _VisusKernelPy.DTypes_INT8_RGBA_set)
    __swig_setmethods__["UINT8"] = _VisusKernelPy.DTypes_UINT8_set
    __swig_getmethods__["UINT8"] = _VisusKernelPy.DTypes_UINT8_get
    if _newclass:
        UINT8 = _swig_property(_VisusKernelPy.DTypes_UINT8_get, _VisusKernelPy.DTypes_UINT8_set)
    __swig_setmethods__["UINT8_GA"] = _VisusKernelPy.DTypes_UINT8_GA_set
    __swig_getmethods__["UINT8_GA"] = _VisusKernelPy.DTypes_UINT8_GA_get
    if _newclass:
        UINT8_GA = _swig_property(_VisusKernelPy.DTypes_UINT8_GA_get, _VisusKernelPy.DTypes_UINT8_GA_set)
    __swig_setmethods__["UINT8_RGB"] = _VisusKernelPy.DTypes_UINT8_RGB_set
    __swig_getmethods__["UINT8_RGB"] = _VisusKernelPy.DTypes_UINT8_RGB_get
    if _newclass:
        UINT8_RGB = _swig_property(_VisusKernelPy.DTypes_UINT8_RGB_get, _VisusKernelPy.DTypes_UINT8_RGB_set)
    __swig_setmethods__["UINT8_RGBA"] = _VisusKernelPy.DTypes_UINT8_RGBA_set
    __swig_getmethods__["UINT8_RGBA"] = _VisusKernelPy.DTypes_UINT8_RGBA_get
    if _newclass:
        UINT8_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT8_RGBA_get, _VisusKernelPy.DTypes_UINT8_RGBA_set)
    __swig_setmethods__["INT16"] = _VisusKernelPy.DTypes_INT16_set
    __swig_getmethods__["INT16"] = _VisusKernelPy.DTypes_INT16_get
    if _newclass:
        INT16 = _swig_property(_VisusKernelPy.DTypes_INT16_get, _VisusKernelPy.DTypes_INT16_set)
    __swig_setmethods__["INT16_GA"] = _VisusKernelPy.DTypes_INT16_GA_set
    __swig_getmethods__["INT16_GA"] = _VisusKernelPy.DTypes_INT16_GA_get
    if _newclass:
        INT16_GA = _swig_property(_VisusKernelPy.DTypes_INT16_GA_get, _VisusKernelPy.DTypes_INT16_GA_set)
    __swig_setmethods__["INT16_RGB"] = _VisusKernelPy.DTypes_INT16_RGB_set
    __swig_getmethods__["INT16_RGB"] = _VisusKernelPy.DTypes_INT16_RGB_get
    if _newclass:
        INT16_RGB = _swig_property(_VisusKernelPy.DTypes_INT16_RGB_get, _VisusKernelPy.DTypes_INT16_RGB_set)
    __swig_setmethods__["INT16_RGBA"] = _VisusKernelPy.DTypes_INT16_RGBA_set
    __swig_getmethods__["INT16_RGBA"] = _VisusKernelPy.DTypes_INT16_RGBA_get
    if _newclass:
        INT16_RGBA = _swig_property(_VisusKernelPy.DTypes_INT16_RGBA_get, _VisusKernelPy.DTypes_INT16_RGBA_set)
    __swig_setmethods__["UINT16"] = _VisusKernelPy.DTypes_UINT16_set
    __swig_getmethods__["UINT16"] = _VisusKernelPy.DTypes_UINT16_get
    if _newclass:
        UINT16 = _swig_property(_VisusKernelPy.DTypes_UINT16_get, _VisusKernelPy.DTypes_UINT16_set)
    __swig_setmethods__["UINT16_GA"] = _VisusKernelPy.DTypes_UINT16_GA_set
    __swig_getmethods__["UINT16_GA"] = _VisusKernelPy.DTypes_UINT16_GA_get
    if _newclass:
        UINT16_GA = _swig_property(_VisusKernelPy.DTypes_UINT16_GA_get, _VisusKernelPy.DTypes_UINT16_GA_set)
    __swig_setmethods__["UINT16_RGB"] = _VisusKernelPy.DTypes_UINT16_RGB_set
    __swig_getmethods__["UINT16_RGB"] = _VisusKernelPy.DTypes_UINT16_RGB_get
    if _newclass:
        UINT16_RGB = _swig_property(_VisusKernelPy.DTypes_UINT16_RGB_get, _VisusKernelPy.DTypes_UINT16_RGB_set)
    __swig_setmethods__["UINT16_RGBA"] = _VisusKernelPy.DTypes_UINT16_RGBA_set
    __swig_getmethods__["UINT16_RGBA"] = _VisusKernelPy.DTypes_UINT16_RGBA_get
    if _newclass:
        UINT16_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT16_RGBA_get, _VisusKernelPy.DTypes_UINT16_RGBA_set)
    __swig_setmethods__["INT32"] = _VisusKernelPy.DTypes_INT32_set
    __swig_getmethods__["INT32"] = _VisusKernelPy.DTypes_INT32_get
    if _newclass:
        INT32 = _swig_property(_VisusKernelPy.DTypes_INT32_get, _VisusKernelPy.DTypes_INT32_set)
    __swig_setmethods__["INT32_GA"] = _VisusKernelPy.DTypes_INT32_GA_set
    __swig_getmethods__["INT32_GA"] = _VisusKernelPy.DTypes_INT32_GA_get
    if _newclass:
        INT32_GA = _swig_property(_VisusKernelPy.DTypes_INT32_GA_get, _VisusKernelPy.DTypes_INT32_GA_set)
    __swig_setmethods__["INT32_RGB"] = _VisusKernelPy.DTypes_INT32_RGB_set
    __swig_getmethods__["INT32_RGB"] = _VisusKernelPy.DTypes_INT32_RGB_get
    if _newclass:
        INT32_RGB = _swig_property(_VisusKernelPy.DTypes_INT32_RGB_get, _VisusKernelPy.DTypes_INT32_RGB_set)
    __swig_setmethods__["INT32_RGBA"] = _VisusKernelPy.DTypes_INT32_RGBA_set
    __swig_getmethods__["INT32_RGBA"] = _VisusKernelPy.DTypes_INT32_RGBA_get
    if _newclass:
        INT32_RGBA = _swig_property(_VisusKernelPy.DTypes_INT32_RGBA_get, _VisusKernelPy.DTypes_INT32_RGBA_set)
    __swig_setmethods__["UINT32"] = _VisusKernelPy.DTypes_UINT32_set
    __swig_getmethods__["UINT32"] = _VisusKernelPy.DTypes_UINT32_get
    if _newclass:
        UINT32 = _swig_property(_VisusKernelPy.DTypes_UINT32_get, _VisusKernelPy.DTypes_UINT32_set)
    __swig_setmethods__["UINT32_GA"] = _VisusKernelPy.DTypes_UINT32_GA_set
    __swig_getmethods__["UINT32_GA"] = _VisusKernelPy.DTypes_UINT32_GA_get
    if _newclass:
        UINT32_GA = _swig_property(_VisusKernelPy.DTypes_UINT32_GA_get, _VisusKernelPy.DTypes_UINT32_GA_set)
    __swig_setmethods__["UINT32_RGB"] = _VisusKernelPy.DTypes_UINT32_RGB_set
    __swig_getmethods__["UINT32_RGB"] = _VisusKernelPy.DTypes_UINT32_RGB_get
    if _newclass:
        UINT32_RGB = _swig_property(_VisusKernelPy.DTypes_UINT32_RGB_get, _VisusKernelPy.DTypes_UINT32_RGB_set)
    __swig_setmethods__["UINT32_RGBA"] = _VisusKernelPy.DTypes_UINT32_RGBA_set
    __swig_getmethods__["UINT32_RGBA"] = _VisusKernelPy.DTypes_UINT32_RGBA_get
    if _newclass:
        UINT32_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT32_RGBA_get, _VisusKernelPy.DTypes_UINT32_RGBA_set)
    __swig_setmethods__["INT64"] = _VisusKernelPy.DTypes_INT64_set
    __swig_getmethods__["INT64"] = _VisusKernelPy.DTypes_INT64_get
    if _newclass:
        INT64 = _swig_property(_VisusKernelPy.DTypes_INT64_get, _VisusKernelPy.DTypes_INT64_set)
    __swig_setmethods__["INT64_GA"] = _VisusKernelPy.DTypes_INT64_GA_set
    __swig_getmethods__["INT64_GA"] = _VisusKernelPy.DTypes_INT64_GA_get
    if _newclass:
        INT64_GA = _swig_property(_VisusKernelPy.DTypes_INT64_GA_get, _VisusKernelPy.DTypes_INT64_GA_set)
    __swig_setmethods__["INT64_RGB"] = _VisusKernelPy.DTypes_INT64_RGB_set
    __swig_getmethods__["INT64_RGB"] = _VisusKernelPy.DTypes_INT64_RGB_get
    if _newclass:
        INT64_RGB = _swig_property(_VisusKernelPy.DTypes_INT64_RGB_get, _VisusKernelPy.DTypes_INT64_RGB_set)
    __swig_setmethods__["INT64_RGBA"] = _VisusKernelPy.DTypes_INT64_RGBA_set
    __swig_getmethods__["INT64_RGBA"] = _VisusKernelPy.DTypes_INT64_RGBA_get
    if _newclass:
        INT64_RGBA = _swig_property(_VisusKernelPy.DTypes_INT64_RGBA_get, _VisusKernelPy.DTypes_INT64_RGBA_set)
    __swig_setmethods__["UINT64"] = _VisusKernelPy.DTypes_UINT64_set
    __swig_getmethods__["UINT64"] = _VisusKernelPy.DTypes_UINT64_get
    if _newclass:
        UINT64 = _swig_property(_VisusKernelPy.DTypes_UINT64_get, _VisusKernelPy.DTypes_UINT64_set)
    __swig_setmethods__["UINT64_GA"] = _VisusKernelPy.DTypes_UINT64_GA_set
    __swig_getmethods__["UINT64_GA"] = _VisusKernelPy.DTypes_UINT64_GA_get
    if _newclass:
        UINT64_GA = _swig_property(_VisusKernelPy.DTypes_UINT64_GA_get, _VisusKernelPy.DTypes_UINT64_GA_set)
    __swig_setmethods__["UINT64_RGB"] = _VisusKernelPy.DTypes_UINT64_RGB_set
    __swig_getmethods__["UINT64_RGB"] = _VisusKernelPy.DTypes_UINT64_RGB_get
    if _newclass:
        UINT64_RGB = _swig_property(_VisusKernelPy.DTypes_UINT64_RGB_get, _VisusKernelPy.DTypes_UINT64_RGB_set)
    __swig_setmethods__["UINT64_RGBA"] = _VisusKernelPy.DTypes_UINT64_RGBA_set
    __swig_getmethods__["UINT64_RGBA"] = _VisusKernelPy.DTypes_UINT64_RGBA_get
    if _newclass:
        UINT64_RGBA = _swig_property(_VisusKernelPy.DTypes_UINT64_RGBA_get, _VisusKernelPy.DTypes_UINT64_RGBA_set)
    __swig_setmethods__["FLOAT32"] = _VisusKernelPy.DTypes_FLOAT32_set
    __swig_getmethods__["FLOAT32"] = _VisusKernelPy.DTypes_FLOAT32_get
    if _newclass:
        FLOAT32 = _swig_property(_VisusKernelPy.DTypes_FLOAT32_get, _VisusKernelPy.DTypes_FLOAT32_set)
    __swig_setmethods__["FLOAT32_GA"] = _VisusKernelPy.DTypes_FLOAT32_GA_set
    __swig_getmethods__["FLOAT32_GA"] = _VisusKernelPy.DTypes_FLOAT32_GA_get
    if _newclass:
        FLOAT32_GA = _swig_property(_VisusKernelPy.DTypes_FLOAT32_GA_get, _VisusKernelPy.DTypes_FLOAT32_GA_set)
    __swig_setmethods__["FLOAT32_RGB"] = _VisusKernelPy.DTypes_FLOAT32_RGB_set
    __swig_getmethods__["FLOAT32_RGB"] = _VisusKernelPy.DTypes_FLOAT32_RGB_get
    if _newclass:
        FLOAT32_RGB = _swig_property(_VisusKernelPy.DTypes_FLOAT32_RGB_get, _VisusKernelPy.DTypes_FLOAT32_RGB_set)
    __swig_setmethods__["FLOAT32_RGBA"] = _VisusKernelPy.DTypes_FLOAT32_RGBA_set
    __swig_getmethods__["FLOAT32_RGBA"] = _VisusKernelPy.DTypes_FLOAT32_RGBA_get
    if _newclass:
        FLOAT32_RGBA = _swig_property(_VisusKernelPy.DTypes_FLOAT32_RGBA_get, _VisusKernelPy.DTypes_FLOAT32_RGBA_set)
    __swig_setmethods__["FLOAT64"] = _VisusKernelPy.DTypes_FLOAT64_set
    __swig_getmethods__["FLOAT64"] = _VisusKernelPy.DTypes_FLOAT64_get
    if _newclass:
        FLOAT64 = _swig_property(_VisusKernelPy.DTypes_FLOAT64_get, _VisusKernelPy.DTypes_FLOAT64_set)
    __swig_setmethods__["FLOAT64_GA"] = _VisusKernelPy.DTypes_FLOAT64_GA_set
    __swig_getmethods__["FLOAT64_GA"] = _VisusKernelPy.DTypes_FLOAT64_GA_get
    if _newclass:
        FLOAT64_GA = _swig_property(_VisusKernelPy.DTypes_FLOAT64_GA_get, _VisusKernelPy.DTypes_FLOAT64_GA_set)
    __swig_setmethods__["FLOAT64_RGB"] = _VisusKernelPy.DTypes_FLOAT64_RGB_set
    __swig_getmethods__["FLOAT64_RGB"] = _VisusKernelPy.DTypes_FLOAT64_RGB_get
    if _newclass:
        FLOAT64_RGB = _swig_property(_VisusKernelPy.DTypes_FLOAT64_RGB_get, _VisusKernelPy.DTypes_FLOAT64_RGB_set)
    __swig_setmethods__["FLOAT64_RGBA"] = _VisusKernelPy.DTypes_FLOAT64_RGBA_set
    __swig_getmethods__["FLOAT64_RGBA"] = _VisusKernelPy.DTypes_FLOAT64_RGBA_get
    if _newclass:
        FLOAT64_RGBA = _swig_property(_VisusKernelPy.DTypes_FLOAT64_RGBA_get, _VisusKernelPy.DTypes_FLOAT64_RGBA_set)
    __swig_destroy__ = _VisusKernelPy.delete_DTypes
    __del__ = lambda self: None
DTypes_swigregister = _VisusKernelPy.DTypes_swigregister
DTypes_swigregister(DTypes)

class Field(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Field, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Field, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _VisusKernelPy.Field_name_set
    __swig_getmethods__["name"] = _VisusKernelPy.Field_name_get
    if _newclass:
        name = _swig_property(_VisusKernelPy.Field_name_get, _VisusKernelPy.Field_name_set)
    __swig_setmethods__["dtype"] = _VisusKernelPy.Field_dtype_set
    __swig_getmethods__["dtype"] = _VisusKernelPy.Field_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusKernelPy.Field_dtype_get, _VisusKernelPy.Field_dtype_set)
    __swig_setmethods__["description"] = _VisusKernelPy.Field_description_set
    __swig_getmethods__["description"] = _VisusKernelPy.Field_description_get
    if _newclass:
        description = _swig_property(_VisusKernelPy.Field_description_get, _VisusKernelPy.Field_description_set)
    __swig_setmethods__["index"] = _VisusKernelPy.Field_index_set
    __swig_getmethods__["index"] = _VisusKernelPy.Field_index_get
    if _newclass:
        index = _swig_property(_VisusKernelPy.Field_index_get, _VisusKernelPy.Field_index_set)
    __swig_setmethods__["default_compression"] = _VisusKernelPy.Field_default_compression_set
    __swig_getmethods__["default_compression"] = _VisusKernelPy.Field_default_compression_get
    if _newclass:
        default_compression = _swig_property(_VisusKernelPy.Field_default_compression_get, _VisusKernelPy.Field_default_compression_set)
    __swig_setmethods__["default_layout"] = _VisusKernelPy.Field_default_layout_set
    __swig_getmethods__["default_layout"] = _VisusKernelPy.Field_default_layout_get
    if _newclass:
        default_layout = _swig_property(_VisusKernelPy.Field_default_layout_get, _VisusKernelPy.Field_default_layout_set)
    __swig_setmethods__["default_value"] = _VisusKernelPy.Field_default_value_set
    __swig_getmethods__["default_value"] = _VisusKernelPy.Field_default_value_get
    if _newclass:
        default_value = _swig_property(_VisusKernelPy.Field_default_value_get, _VisusKernelPy.Field_default_value_set)
    __swig_setmethods__["filter"] = _VisusKernelPy.Field_filter_set
    __swig_getmethods__["filter"] = _VisusKernelPy.Field_filter_get
    if _newclass:
        filter = _swig_property(_VisusKernelPy.Field_filter_get, _VisusKernelPy.Field_filter_set)
    __swig_setmethods__["params"] = _VisusKernelPy.Field_params_set
    __swig_getmethods__["params"] = _VisusKernelPy.Field_params_get
    if _newclass:
        params = _swig_property(_VisusKernelPy.Field_params_get, _VisusKernelPy.Field_params_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Field(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.Field_fromString)
    else:
        fromString = _VisusKernelPy.Field_fromString

    def valid(self):
        return _VisusKernelPy.Field_valid(self)

    def getDescription(self, bUseNameIfEmpty=True):
        return _VisusKernelPy.Field_getDescription(self, bUseNameIfEmpty)

    def setDescription(self, value):
        return _VisusKernelPy.Field_setDescription(self, value)

    def hasParam(self, key):
        return _VisusKernelPy.Field_hasParam(self, key)

    def getParam(self, *args):
        return _VisusKernelPy.Field_getParam(self, *args)

    def getDTypeRange(self, component=0):
        return _VisusKernelPy.Field_getDTypeRange(self, component)

    def setDTypeRange(self, value, component=0):
        return _VisusKernelPy.Field_setDTypeRange(self, value, component)

    def write(self, ar):
        return _VisusKernelPy.Field_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Field_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Field
    __del__ = lambda self: None
Field_swigregister = _VisusKernelPy.Field_swigregister
Field_swigregister(Field)

def Field_fromString(src):
    return _VisusKernelPy.Field_fromString(src)
Field_fromString = _VisusKernelPy.Field_fromString

class VectorOfField(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfField, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfField, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfField_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfField___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfField___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfField___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfField___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfField___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfField___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfField___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfField___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfField___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfField_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfField_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfField_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfField_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfField_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfField_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfField_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfField_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfField_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfField_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfField_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfField_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfField_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfField(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfField_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfField_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfField_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfField_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfField_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfField_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfField_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfField_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfField
    __del__ = lambda self: None
VectorOfField_swigregister = _VisusKernelPy.VectorOfField_swigregister
VectorOfField_swigregister(VectorOfField)

class Array(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Array, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Array, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dtype"] = _VisusKernelPy.Array_dtype_set
    __swig_getmethods__["dtype"] = _VisusKernelPy.Array_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusKernelPy.Array_dtype_get, _VisusKernelPy.Array_dtype_set)
    __swig_setmethods__["dims"] = _VisusKernelPy.Array_dims_set
    __swig_getmethods__["dims"] = _VisusKernelPy.Array_dims_get
    if _newclass:
        dims = _swig_property(_VisusKernelPy.Array_dims_get, _VisusKernelPy.Array_dims_set)
    __swig_setmethods__["url"] = _VisusKernelPy.Array_url_set
    __swig_getmethods__["url"] = _VisusKernelPy.Array_url_get
    if _newclass:
        url = _swig_property(_VisusKernelPy.Array_url_get, _VisusKernelPy.Array_url_set)
    __swig_setmethods__["layout"] = _VisusKernelPy.Array_layout_set
    __swig_getmethods__["layout"] = _VisusKernelPy.Array_layout_get
    if _newclass:
        layout = _swig_property(_VisusKernelPy.Array_layout_get, _VisusKernelPy.Array_layout_set)
    __swig_setmethods__["bounds"] = _VisusKernelPy.Array_bounds_set
    __swig_getmethods__["bounds"] = _VisusKernelPy.Array_bounds_get
    if _newclass:
        bounds = _swig_property(_VisusKernelPy.Array_bounds_get, _VisusKernelPy.Array_bounds_set)
    __swig_setmethods__["clipping"] = _VisusKernelPy.Array_clipping_set
    __swig_getmethods__["clipping"] = _VisusKernelPy.Array_clipping_get
    if _newclass:
        clipping = _swig_property(_VisusKernelPy.Array_clipping_get, _VisusKernelPy.Array_clipping_set)
    __swig_setmethods__["heap"] = _VisusKernelPy.Array_heap_set
    __swig_getmethods__["heap"] = _VisusKernelPy.Array_heap_get
    if _newclass:
        heap = _swig_property(_VisusKernelPy.Array_heap_get, _VisusKernelPy.Array_heap_set)
    __swig_setmethods__["alpha"] = _VisusKernelPy.Array_alpha_set
    __swig_getmethods__["alpha"] = _VisusKernelPy.Array_alpha_get
    if _newclass:
        alpha = _swig_property(_VisusKernelPy.Array_alpha_get, _VisusKernelPy.Array_alpha_set)
    __swig_setmethods__["texture"] = _VisusKernelPy.Array_texture_set
    __swig_getmethods__["texture"] = _VisusKernelPy.Array_texture_get
    if _newclass:
        texture = _swig_property(_VisusKernelPy.Array_texture_get, _VisusKernelPy.Array_texture_set)
    __swig_setmethods__["run_time_attributes"] = _VisusKernelPy.Array_run_time_attributes_set
    __swig_getmethods__["run_time_attributes"] = _VisusKernelPy.Array_run_time_attributes_get
    if _newclass:
        run_time_attributes = _swig_property(_VisusKernelPy.Array_run_time_attributes_get, _VisusKernelPy.Array_run_time_attributes_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Array(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Array
    __del__ = lambda self: None

    def clone(self):
        return _VisusKernelPy.Array_clone(self)

    def valid(self):
        return _VisusKernelPy.Array_valid(self)

    def getPointDim(self):
        return _VisusKernelPy.Array_getPointDim(self)

    def getWidth(self):
        return _VisusKernelPy.Array_getWidth(self)

    def getHeight(self):
        return _VisusKernelPy.Array_getHeight(self)

    def getDepth(self):
        return _VisusKernelPy.Array_getDepth(self)

    def getTotalNumberOfSamples(self):
        return _VisusKernelPy.Array_getTotalNumberOfSamples(self)

    def shareProperties(self, other):
        return _VisusKernelPy.Array_shareProperties(self, other)
    if _newclass:
        createView = staticmethod(_VisusKernelPy.Array_createView)
    else:
        createView = _VisusKernelPy.Array_createView

    def hasConstantValue(self, value):
        return _VisusKernelPy.Array_hasConstantValue(self, value)

    def isAllZero(self):
        return _VisusKernelPy.Array_isAllZero(self)

    def c_capacity(self):
        return _VisusKernelPy.Array_c_capacity(self)

    def c_size(self):
        return _VisusKernelPy.Array_c_size(self)

    def c_ptr(self):
        return _VisusKernelPy.Array_c_ptr(self)

    def c_address(self):
        return _VisusKernelPy.Array_c_address(self)

    def shrink(self):
        return _VisusKernelPy.Array_shrink(self)

    def fillWithValue(self, value):
        return _VisusKernelPy.Array_fillWithValue(self, value)

    def resize(self, *args):
        return _VisusKernelPy.Array_resize(self, *args)

    def getComponent(self, *args):
        return _VisusKernelPy.Array_getComponent(self, *args)

    def setComponent(self, *args):
        return _VisusKernelPy.Array_setComponent(self, *args)

    def __getitem__(self, index):
        return _VisusKernelPy.Array___getitem__(self, index)

    def __add__(self, other):
        return _VisusKernelPy.Array___add__(self, other)

    def __sub__(self, other):
        return _VisusKernelPy.Array___sub__(self, other)

    def __mul__(self, *args):
        return _VisusKernelPy.Array___mul__(self, *args)

    def __truediv__(self, *args):
        return _VisusKernelPy.Array___div__(self, *args)
    __div__ = __truediv__



    def __iadd__(self, other):
        return _VisusKernelPy.Array___iadd__(self, other)

    def __isub__(self, other):
        return _VisusKernelPy.Array___isub__(self, other)

    def __imul__(self, *args):
        return _VisusKernelPy.Array___imul__(self, *args)

    def __itruediv__(self, *args):
        return _VisusKernelPy.Array___itruediv__(self, *args)
    __idiv__ = __itruediv__




    # ////////////////////////////////////////////////////////
    def __rmul__(self, v):
        return self.__mul__(v)

    # ////////////////////////////////////////////////////////
    def toNumPy(src, bShareMem=False, bSqueeze=False):

    	import numpy

    # invalid arrray is a zero numpy,0 is "shape"
    	if not src.dtype.valid(): 
    		return numpy.zeros(0, dtype=numpy.float) 

    # dtype  (<: little-endian, >: big-endian, |: not-relevant) ; integer providing the number of bytes  ; i (integer) u (unsigned integer) f (floating point)
    	atomic_dtype=src.dtype.get(0)
    	typestr="".join([
    		"|" if atomic_dtype.getBitSize()==8 else "<",
    		"f" if atomic_dtype.isDecimal() else ("u" if atomic_dtype.isUnsigned() else "i"),
    		str(int(atomic_dtype.getBitSize()/8))
    	])  

    # shape (can be multi components)
    	shape=list(reversed([src.dims[I] for I in range(src.dims.getPointDim())]))
    	if src.dtype.ncomponents()>1 : 
    		shape.append(src.dtype.ncomponents())

    # no real data, just keep the "dimensions" of the data
    	if 0 in shape:

    		return numpy.zeros(shape, dtype=numpy.dtype(typestr))

    	else:

    		if bSqueeze: 
    			shape=[it for it in shape if it>1]

    		class MyNumPyHolder(object): 
    			pass

    		holder = MyNumPyHolder()

    		holder.__array_interface__ = {
    			'strides': None,
    			'shape': tuple(shape), 
    			'typestr': typestr, 
    			'data': (int(src.c_address()), False),  # The second entry in the tuple is a read-only flag (true means the data area is read-only).
    			'version': 3 
    		}

    		return numpy.array(holder, copy=False if bShareMem else True) 

    toNumPy = staticmethod(toNumPy)

    # ////////////////////////////////////////////////////////
    def fromNumPy(src, TargetDim=0, bShareMem=False):

    	import numpy

    # is not memory contigous...
    	bContiguos = src.__array_interface__["strides"] is None
    	if not bContiguos: 

    		if bShareMem: 
    			raise Exception("Cannot share memory since the original numpy array is not memory contiguous")

    		src=numpy.ascontiguousarray(src)

    # dtype
    	typestr = src.__array_interface__["typestr"]
    	dtype=DType(typestr[1]=="u", typestr[1]=="f", int(typestr[2])*8)

    # shape (reversed!)
    	shape   = src.__array_interface__["shape"]
    	shape=tuple(reversed(shape)) 
    	pdim=len(shape)
    	dims=PointNi.one(pdim)
    	for I in range(pdim):  
    		dims.set(I,shape[I]) 

    	if dims.innerProduct() == 0:
    		ret=Array(dims, dtype)

    	else:
    		c_address=str(src.__array_interface__["data"][0]) # [0] element is the address
    		ret=Array(dims, dtype, c_address, bShareMem)

    # example (3,512,512) uint8 TargetDim=2 -> (512,512) uint8[3]
    	if TargetDim > 0 and ret.dims.getPointDim() > TargetDim:
    		v=ret.dims.toVector()
    		A=1
    		for it in v[0:len(v)-TargetDim]: A*=it # first remaining elements
    		B=PointNi(v[-TargetDim:]) # last 'TargetDim' elements
    		ret.resize(B,DType(A,ret.dtype), "Array::fromNumPy",0)

    	return ret

    fromNumPy = staticmethod(fromNumPy)

Array_swigregister = _VisusKernelPy.Array_swigregister
Array_swigregister(Array)

def Array_createView(*args):
    return _VisusKernelPy.Array_createView(*args)
Array_createView = _VisusKernelPy.Array_createView

class VectorOfArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfArray, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfArray_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfArray___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfArray___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfArray___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfArray___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfArray___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfArray___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfArray___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfArray_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfArray_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfArray_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfArray_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfArray_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfArray_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfArray_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfArray_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfArray_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfArray_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfArray_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfArray_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfArray_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfArray(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfArray_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfArray_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfArray_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfArray_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfArray_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfArray_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfArray_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfArray_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfArray
    __del__ = lambda self: None
VectorOfArray_swigregister = _VisusKernelPy.VectorOfArray_swigregister
VectorOfArray_swigregister(VectorOfArray)

class ArrayUtils(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayUtils, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayUtils, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        loadImage = staticmethod(_VisusKernelPy.ArrayUtils_loadImage)
    else:
        loadImage = _VisusKernelPy.ArrayUtils_loadImage
    if _newclass:
        loadImageFromMemory = staticmethod(_VisusKernelPy.ArrayUtils_loadImageFromMemory)
    else:
        loadImageFromMemory = _VisusKernelPy.ArrayUtils_loadImageFromMemory
    if _newclass:
        statImage = staticmethod(_VisusKernelPy.ArrayUtils_statImage)
    else:
        statImage = _VisusKernelPy.ArrayUtils_statImage
    if _newclass:
        saveImage = staticmethod(_VisusKernelPy.ArrayUtils_saveImage)
    else:
        saveImage = _VisusKernelPy.ArrayUtils_saveImage
    if _newclass:
        saveImageUINT8 = staticmethod(_VisusKernelPy.ArrayUtils_saveImageUINT8)
    else:
        saveImageUINT8 = _VisusKernelPy.ArrayUtils_saveImageUINT8
    if _newclass:
        encodeArray = staticmethod(_VisusKernelPy.ArrayUtils_encodeArray)
    else:
        encodeArray = _VisusKernelPy.ArrayUtils_encodeArray
    if _newclass:
        decodeArray = staticmethod(_VisusKernelPy.ArrayUtils_decodeArray)
    else:
        decodeArray = _VisusKernelPy.ArrayUtils_decodeArray
    if _newclass:
        computeRange = staticmethod(_VisusKernelPy.ArrayUtils_computeRange)
    else:
        computeRange = _VisusKernelPy.ArrayUtils_computeRange
    if _newclass:
        compactDims = staticmethod(_VisusKernelPy.ArrayUtils_compactDims)
    else:
        compactDims = _VisusKernelPy.ArrayUtils_compactDims
    if _newclass:
        interleave = staticmethod(_VisusKernelPy.ArrayUtils_interleave)
    else:
        interleave = _VisusKernelPy.ArrayUtils_interleave
    if _newclass:
        split = staticmethod(_VisusKernelPy.ArrayUtils_split)
    else:
        split = _VisusKernelPy.ArrayUtils_split
    if _newclass:
        insert = staticmethod(_VisusKernelPy.ArrayUtils_insert)
    else:
        insert = _VisusKernelPy.ArrayUtils_insert
    if _newclass:
        paste = staticmethod(_VisusKernelPy.ArrayUtils_paste)
    else:
        paste = _VisusKernelPy.ArrayUtils_paste
    if _newclass:
        smartCast = staticmethod(_VisusKernelPy.ArrayUtils_smartCast)
    else:
        smartCast = _VisusKernelPy.ArrayUtils_smartCast
    if _newclass:
        crop = staticmethod(_VisusKernelPy.ArrayUtils_crop)
    else:
        crop = _VisusKernelPy.ArrayUtils_crop
    if _newclass:
        mirror = staticmethod(_VisusKernelPy.ArrayUtils_mirror)
    else:
        mirror = _VisusKernelPy.ArrayUtils_mirror
    if _newclass:
        downSample = staticmethod(_VisusKernelPy.ArrayUtils_downSample)
    else:
        downSample = _VisusKernelPy.ArrayUtils_downSample
    if _newclass:
        upSample = staticmethod(_VisusKernelPy.ArrayUtils_upSample)
    else:
        upSample = _VisusKernelPy.ArrayUtils_upSample
    if _newclass:
        splitAndGetFirst = staticmethod(_VisusKernelPy.ArrayUtils_splitAndGetFirst)
    else:
        splitAndGetFirst = _VisusKernelPy.ArrayUtils_splitAndGetFirst
    if _newclass:
        splitAndGetSecond = staticmethod(_VisusKernelPy.ArrayUtils_splitAndGetSecond)
    else:
        splitAndGetSecond = _VisusKernelPy.ArrayUtils_splitAndGetSecond
    if _newclass:
        cast = staticmethod(_VisusKernelPy.ArrayUtils_cast)
    else:
        cast = _VisusKernelPy.ArrayUtils_cast
    if _newclass:
        withNumberOfComponents = staticmethod(_VisusKernelPy.ArrayUtils_withNumberOfComponents)
    else:
        withNumberOfComponents = _VisusKernelPy.ArrayUtils_withNumberOfComponents
    if _newclass:
        sqrt = staticmethod(_VisusKernelPy.ArrayUtils_sqrt)
    else:
        sqrt = _VisusKernelPy.ArrayUtils_sqrt
    if _newclass:
        module2 = staticmethod(_VisusKernelPy.ArrayUtils_module2)
    else:
        module2 = _VisusKernelPy.ArrayUtils_module2
    if _newclass:
        module = staticmethod(_VisusKernelPy.ArrayUtils_module)
    else:
        module = _VisusKernelPy.ArrayUtils_module
    if _newclass:
        resample = staticmethod(_VisusKernelPy.ArrayUtils_resample)
    else:
        resample = _VisusKernelPy.ArrayUtils_resample
    if _newclass:
        convolve = staticmethod(_VisusKernelPy.ArrayUtils_convolve)
    else:
        convolve = _VisusKernelPy.ArrayUtils_convolve
    if _newclass:
        medianHybrid = staticmethod(_VisusKernelPy.ArrayUtils_medianHybrid)
    else:
        medianHybrid = _VisusKernelPy.ArrayUtils_medianHybrid
    InvalidOperation = _VisusKernelPy.ArrayUtils_InvalidOperation
    AddOperation = _VisusKernelPy.ArrayUtils_AddOperation
    SubOperation = _VisusKernelPy.ArrayUtils_SubOperation
    MulOperation = _VisusKernelPy.ArrayUtils_MulOperation
    DivOperation = _VisusKernelPy.ArrayUtils_DivOperation
    MinOperation = _VisusKernelPy.ArrayUtils_MinOperation
    MaxOperation = _VisusKernelPy.ArrayUtils_MaxOperation
    AverageOperation = _VisusKernelPy.ArrayUtils_AverageOperation
    StandardDeviationOperation = _VisusKernelPy.ArrayUtils_StandardDeviationOperation
    MedianOperation = _VisusKernelPy.ArrayUtils_MedianOperation
    if _newclass:
        executeOperation = staticmethod(_VisusKernelPy.ArrayUtils_executeOperation)
    else:
        executeOperation = _VisusKernelPy.ArrayUtils_executeOperation
    if _newclass:
        add = staticmethod(_VisusKernelPy.ArrayUtils_add)
    else:
        add = _VisusKernelPy.ArrayUtils_add
    if _newclass:
        sub = staticmethod(_VisusKernelPy.ArrayUtils_sub)
    else:
        sub = _VisusKernelPy.ArrayUtils_sub
    if _newclass:
        mul = staticmethod(_VisusKernelPy.ArrayUtils_mul)
    else:
        mul = _VisusKernelPy.ArrayUtils_mul
    if _newclass:
        div = staticmethod(_VisusKernelPy.ArrayUtils_div)
    else:
        div = _VisusKernelPy.ArrayUtils_div
    if _newclass:
        min = staticmethod(_VisusKernelPy.ArrayUtils_min)
    else:
        min = _VisusKernelPy.ArrayUtils_min
    if _newclass:
        max = staticmethod(_VisusKernelPy.ArrayUtils_max)
    else:
        max = _VisusKernelPy.ArrayUtils_max
    if _newclass:
        average = staticmethod(_VisusKernelPy.ArrayUtils_average)
    else:
        average = _VisusKernelPy.ArrayUtils_average
    if _newclass:
        standardDeviation = staticmethod(_VisusKernelPy.ArrayUtils_standardDeviation)
    else:
        standardDeviation = _VisusKernelPy.ArrayUtils_standardDeviation
    if _newclass:
        median = staticmethod(_VisusKernelPy.ArrayUtils_median)
    else:
        median = _VisusKernelPy.ArrayUtils_median
    if _newclass:
        threshold = staticmethod(_VisusKernelPy.ArrayUtils_threshold)
    else:
        threshold = _VisusKernelPy.ArrayUtils_threshold
    if _newclass:
        brightnessContrast = staticmethod(_VisusKernelPy.ArrayUtils_brightnessContrast)
    else:
        brightnessContrast = _VisusKernelPy.ArrayUtils_brightnessContrast
    if _newclass:
        invert = staticmethod(_VisusKernelPy.ArrayUtils_invert)
    else:
        invert = _VisusKernelPy.ArrayUtils_invert
    if _newclass:
        levels = staticmethod(_VisusKernelPy.ArrayUtils_levels)
    else:
        levels = _VisusKernelPy.ArrayUtils_levels
    if _newclass:
        hueSaturationBrightness = staticmethod(_VisusKernelPy.ArrayUtils_hueSaturationBrightness)
    else:
        hueSaturationBrightness = _VisusKernelPy.ArrayUtils_hueSaturationBrightness
    if _newclass:
        warpPerspective = staticmethod(_VisusKernelPy.ArrayUtils_warpPerspective)
    else:
        warpPerspective = _VisusKernelPy.ArrayUtils_warpPerspective
    if _newclass:
        setBufferColor = staticmethod(_VisusKernelPy.ArrayUtils_setBufferColor)
    else:
        setBufferColor = _VisusKernelPy.ArrayUtils_setBufferColor
    __swig_destroy__ = _VisusKernelPy.delete_ArrayUtils
    __del__ = lambda self: None
ArrayUtils_swigregister = _VisusKernelPy.ArrayUtils_swigregister
ArrayUtils_swigregister(ArrayUtils)

def ArrayUtils_loadImage(*args):
    return _VisusKernelPy.ArrayUtils_loadImage(*args)
ArrayUtils_loadImage = _VisusKernelPy.ArrayUtils_loadImage

def ArrayUtils_loadImageFromMemory(*args):
    return _VisusKernelPy.ArrayUtils_loadImageFromMemory(*args)
ArrayUtils_loadImageFromMemory = _VisusKernelPy.ArrayUtils_loadImageFromMemory

def ArrayUtils_statImage(url):
    return _VisusKernelPy.ArrayUtils_statImage(url)
ArrayUtils_statImage = _VisusKernelPy.ArrayUtils_statImage

def ArrayUtils_saveImage(*args):
    return _VisusKernelPy.ArrayUtils_saveImage(*args)
ArrayUtils_saveImage = _VisusKernelPy.ArrayUtils_saveImage

def ArrayUtils_saveImageUINT8(*args):
    return _VisusKernelPy.ArrayUtils_saveImageUINT8(*args)
ArrayUtils_saveImageUINT8 = _VisusKernelPy.ArrayUtils_saveImageUINT8

def ArrayUtils_encodeArray(compression, value):
    return _VisusKernelPy.ArrayUtils_encodeArray(compression, value)
ArrayUtils_encodeArray = _VisusKernelPy.ArrayUtils_encodeArray

def ArrayUtils_decodeArray(*args):
    return _VisusKernelPy.ArrayUtils_decodeArray(*args)
ArrayUtils_decodeArray = _VisusKernelPy.ArrayUtils_decodeArray

def ArrayUtils_computeRange(*args):
    return _VisusKernelPy.ArrayUtils_computeRange(*args)
ArrayUtils_computeRange = _VisusKernelPy.ArrayUtils_computeRange

def ArrayUtils_compactDims(src):
    return _VisusKernelPy.ArrayUtils_compactDims(src)
ArrayUtils_compactDims = _VisusKernelPy.ArrayUtils_compactDims

def ArrayUtils_interleave(*args):
    return _VisusKernelPy.ArrayUtils_interleave(*args)
ArrayUtils_interleave = _VisusKernelPy.ArrayUtils_interleave

def ArrayUtils_split(*args):
    return _VisusKernelPy.ArrayUtils_split(*args)
ArrayUtils_split = _VisusKernelPy.ArrayUtils_split

def ArrayUtils_insert(*args):
    return _VisusKernelPy.ArrayUtils_insert(*args)
ArrayUtils_insert = _VisusKernelPy.ArrayUtils_insert

def ArrayUtils_paste(*args):
    return _VisusKernelPy.ArrayUtils_paste(*args)
ArrayUtils_paste = _VisusKernelPy.ArrayUtils_paste

def ArrayUtils_smartCast(*args):
    return _VisusKernelPy.ArrayUtils_smartCast(*args)
ArrayUtils_smartCast = _VisusKernelPy.ArrayUtils_smartCast

def ArrayUtils_crop(*args):
    return _VisusKernelPy.ArrayUtils_crop(*args)
ArrayUtils_crop = _VisusKernelPy.ArrayUtils_crop

def ArrayUtils_mirror(*args):
    return _VisusKernelPy.ArrayUtils_mirror(*args)
ArrayUtils_mirror = _VisusKernelPy.ArrayUtils_mirror

def ArrayUtils_downSample(*args):
    return _VisusKernelPy.ArrayUtils_downSample(*args)
ArrayUtils_downSample = _VisusKernelPy.ArrayUtils_downSample

def ArrayUtils_upSample(*args):
    return _VisusKernelPy.ArrayUtils_upSample(*args)
ArrayUtils_upSample = _VisusKernelPy.ArrayUtils_upSample

def ArrayUtils_splitAndGetFirst(*args):
    return _VisusKernelPy.ArrayUtils_splitAndGetFirst(*args)
ArrayUtils_splitAndGetFirst = _VisusKernelPy.ArrayUtils_splitAndGetFirst

def ArrayUtils_splitAndGetSecond(*args):
    return _VisusKernelPy.ArrayUtils_splitAndGetSecond(*args)
ArrayUtils_splitAndGetSecond = _VisusKernelPy.ArrayUtils_splitAndGetSecond

def ArrayUtils_cast(*args):
    return _VisusKernelPy.ArrayUtils_cast(*args)
ArrayUtils_cast = _VisusKernelPy.ArrayUtils_cast

def ArrayUtils_withNumberOfComponents(*args):
    return _VisusKernelPy.ArrayUtils_withNumberOfComponents(*args)
ArrayUtils_withNumberOfComponents = _VisusKernelPy.ArrayUtils_withNumberOfComponents

def ArrayUtils_sqrt(*args):
    return _VisusKernelPy.ArrayUtils_sqrt(*args)
ArrayUtils_sqrt = _VisusKernelPy.ArrayUtils_sqrt

def ArrayUtils_module2(input, aborted):
    return _VisusKernelPy.ArrayUtils_module2(input, aborted)
ArrayUtils_module2 = _VisusKernelPy.ArrayUtils_module2

def ArrayUtils_module(input, aborted):
    return _VisusKernelPy.ArrayUtils_module(input, aborted)
ArrayUtils_module = _VisusKernelPy.ArrayUtils_module

def ArrayUtils_resample(*args):
    return _VisusKernelPy.ArrayUtils_resample(*args)
ArrayUtils_resample = _VisusKernelPy.ArrayUtils_resample

def ArrayUtils_convolve(*args):
    return _VisusKernelPy.ArrayUtils_convolve(*args)
ArrayUtils_convolve = _VisusKernelPy.ArrayUtils_convolve

def ArrayUtils_medianHybrid(*args):
    return _VisusKernelPy.ArrayUtils_medianHybrid(*args)
ArrayUtils_medianHybrid = _VisusKernelPy.ArrayUtils_medianHybrid

def ArrayUtils_executeOperation(*args):
    return _VisusKernelPy.ArrayUtils_executeOperation(*args)
ArrayUtils_executeOperation = _VisusKernelPy.ArrayUtils_executeOperation

def ArrayUtils_add(*args):
    return _VisusKernelPy.ArrayUtils_add(*args)
ArrayUtils_add = _VisusKernelPy.ArrayUtils_add

def ArrayUtils_sub(*args):
    return _VisusKernelPy.ArrayUtils_sub(*args)
ArrayUtils_sub = _VisusKernelPy.ArrayUtils_sub

def ArrayUtils_mul(*args):
    return _VisusKernelPy.ArrayUtils_mul(*args)
ArrayUtils_mul = _VisusKernelPy.ArrayUtils_mul

def ArrayUtils_div(*args):
    return _VisusKernelPy.ArrayUtils_div(*args)
ArrayUtils_div = _VisusKernelPy.ArrayUtils_div

def ArrayUtils_min(*args):
    return _VisusKernelPy.ArrayUtils_min(*args)
ArrayUtils_min = _VisusKernelPy.ArrayUtils_min

def ArrayUtils_max(*args):
    return _VisusKernelPy.ArrayUtils_max(*args)
ArrayUtils_max = _VisusKernelPy.ArrayUtils_max

def ArrayUtils_average(*args):
    return _VisusKernelPy.ArrayUtils_average(*args)
ArrayUtils_average = _VisusKernelPy.ArrayUtils_average

def ArrayUtils_standardDeviation(*args):
    return _VisusKernelPy.ArrayUtils_standardDeviation(*args)
ArrayUtils_standardDeviation = _VisusKernelPy.ArrayUtils_standardDeviation

def ArrayUtils_median(*args):
    return _VisusKernelPy.ArrayUtils_median(*args)
ArrayUtils_median = _VisusKernelPy.ArrayUtils_median

def ArrayUtils_threshold(*args):
    return _VisusKernelPy.ArrayUtils_threshold(*args)
ArrayUtils_threshold = _VisusKernelPy.ArrayUtils_threshold

def ArrayUtils_brightnessContrast(*args):
    return _VisusKernelPy.ArrayUtils_brightnessContrast(*args)
ArrayUtils_brightnessContrast = _VisusKernelPy.ArrayUtils_brightnessContrast

def ArrayUtils_invert(*args):
    return _VisusKernelPy.ArrayUtils_invert(*args)
ArrayUtils_invert = _VisusKernelPy.ArrayUtils_invert

def ArrayUtils_levels(*args):
    return _VisusKernelPy.ArrayUtils_levels(*args)
ArrayUtils_levels = _VisusKernelPy.ArrayUtils_levels

def ArrayUtils_hueSaturationBrightness(*args):
    return _VisusKernelPy.ArrayUtils_hueSaturationBrightness(*args)
ArrayUtils_hueSaturationBrightness = _VisusKernelPy.ArrayUtils_hueSaturationBrightness

def ArrayUtils_warpPerspective(dst, T, src, aborted):
    return _VisusKernelPy.ArrayUtils_warpPerspective(dst, T, src, aborted)
ArrayUtils_warpPerspective = _VisusKernelPy.ArrayUtils_warpPerspective

def ArrayUtils_setBufferColor(buffer, color):
    return _VisusKernelPy.ArrayUtils_setBufferColor(buffer, color)
ArrayUtils_setBufferColor = _VisusKernelPy.ArrayUtils_setBufferColor

class BlendBuffers(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, BlendBuffers, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, BlendBuffers, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pimpl"] = _VisusKernelPy.BlendBuffers_pimpl_set
    __swig_getmethods__["pimpl"] = _VisusKernelPy.BlendBuffers_pimpl_get
    if _newclass:
        pimpl = _swig_property(_VisusKernelPy.BlendBuffers_pimpl_get, _VisusKernelPy.BlendBuffers_pimpl_set)
    GenericBlend = _VisusKernelPy.BlendBuffers_GenericBlend
    NoBlend = _VisusKernelPy.BlendBuffers_NoBlend
    AverageBlend = _VisusKernelPy.BlendBuffers_AverageBlend
    VororoiBlend = _VisusKernelPy.BlendBuffers_VororoiBlend
    __swig_setmethods__["result"] = _VisusKernelPy.BlendBuffers_result_set
    __swig_getmethods__["result"] = _VisusKernelPy.BlendBuffers_result_get
    if _newclass:
        result = _swig_property(_VisusKernelPy.BlendBuffers_result_get, _VisusKernelPy.BlendBuffers_result_set)

    def __init__(self, type, aborted_):
        this = _VisusKernelPy.new_BlendBuffers(type, aborted_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_BlendBuffers
    __del__ = lambda self: None

    def getNumberOfArgs(self):
        return _VisusKernelPy.BlendBuffers_getNumberOfArgs(self)

    def addBlendArg(self, arg):
        return _VisusKernelPy.BlendBuffers_addBlendArg(self, arg)
BlendBuffers_swigregister = _VisusKernelPy.BlendBuffers_swigregister
BlendBuffers_swigregister(BlendBuffers)

class ArrayPlugin(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPlugin, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPlugin, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_ArrayPlugin
    __del__ = lambda self: None

    def handleStatImage(self, url):
        return _VisusKernelPy.ArrayPlugin_handleStatImage(self, url)

    def handleLoadImage(self, url, args):
        return _VisusKernelPy.ArrayPlugin_handleLoadImage(self, url, args)

    def handleSaveImage(self, url, src, args):
        return _VisusKernelPy.ArrayPlugin_handleSaveImage(self, url, src, args)

    def handleLoadImageFromMemory(self, src, args):
        return _VisusKernelPy.ArrayPlugin_handleLoadImageFromMemory(self, src, args)
ArrayPlugin_swigregister = _VisusKernelPy.ArrayPlugin_swigregister
ArrayPlugin_swigregister(ArrayPlugin)

class ArrayPlugins(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArrayPlugins, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ArrayPlugins, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    if _newclass:
        getSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_getSingleton)
    else:
        getSingleton = _VisusKernelPy.ArrayPlugins_getSingleton
    if _newclass:
        setSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_setSingleton)
    else:
        setSingleton = _VisusKernelPy.ArrayPlugins_setSingleton
    if _newclass:
        allocSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_allocSingleton)
    else:
        allocSingleton = _VisusKernelPy.ArrayPlugins_allocSingleton
    if _newclass:
        releaseSingleton = staticmethod(_VisusKernelPy.ArrayPlugins_releaseSingleton)
    else:
        releaseSingleton = _VisusKernelPy.ArrayPlugins_releaseSingleton
    __swig_setmethods__["values"] = _VisusKernelPy.ArrayPlugins_values_set
    __swig_getmethods__["values"] = _VisusKernelPy.ArrayPlugins_values_get
    if _newclass:
        values = _swig_property(_VisusKernelPy.ArrayPlugins_values_get, _VisusKernelPy.ArrayPlugins_values_set)
    __swig_destroy__ = _VisusKernelPy.delete_ArrayPlugins
    __del__ = lambda self: None
ArrayPlugins_swigregister = _VisusKernelPy.ArrayPlugins_swigregister
ArrayPlugins_swigregister(ArrayPlugins)

def ArrayPlugins_getSingleton():
    return _VisusKernelPy.ArrayPlugins_getSingleton()
ArrayPlugins_getSingleton = _VisusKernelPy.ArrayPlugins_getSingleton

def ArrayPlugins_setSingleton(value):
    return _VisusKernelPy.ArrayPlugins_setSingleton(value)
ArrayPlugins_setSingleton = _VisusKernelPy.ArrayPlugins_setSingleton

def ArrayPlugins_allocSingleton():
    return _VisusKernelPy.ArrayPlugins_allocSingleton()
ArrayPlugins_allocSingleton = _VisusKernelPy.ArrayPlugins_allocSingleton

def ArrayPlugins_releaseSingleton():
    return _VisusKernelPy.ArrayPlugins_releaseSingleton()
ArrayPlugins_releaseSingleton = _VisusKernelPy.ArrayPlugins_releaseSingleton

class HttpStatus(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HttpStatus, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HttpStatus, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    STATUS_NONE = _VisusKernelPy.HttpStatus_STATUS_NONE
    STATUS_CANCELLED = _VisusKernelPy.HttpStatus_STATUS_CANCELLED
    STATUS_CANT_RESOLVE = _VisusKernelPy.HttpStatus_STATUS_CANT_RESOLVE
    STATUS_CANT_RESOLVE_PROXY = _VisusKernelPy.HttpStatus_STATUS_CANT_RESOLVE_PROXY
    STATUS_CANT_CONNECT = _VisusKernelPy.HttpStatus_STATUS_CANT_CONNECT
    STATUS_CANT_CONNECT_PROXY = _VisusKernelPy.HttpStatus_STATUS_CANT_CONNECT_PROXY
    STATUS_SSL_FAILED = _VisusKernelPy.HttpStatus_STATUS_SSL_FAILED
    STATUS_IO_ERROR = _VisusKernelPy.HttpStatus_STATUS_IO_ERROR
    STATUS_MALFORMED = _VisusKernelPy.HttpStatus_STATUS_MALFORMED
    STATUS_TRY_AGAIN = _VisusKernelPy.HttpStatus_STATUS_TRY_AGAIN
    STATUS_CONTINUE = _VisusKernelPy.HttpStatus_STATUS_CONTINUE
    STATUS_SWITCHING_PROTOCOLS = _VisusKernelPy.HttpStatus_STATUS_SWITCHING_PROTOCOLS
    STATUS_PROCESSING = _VisusKernelPy.HttpStatus_STATUS_PROCESSING
    STATUS_OK = _VisusKernelPy.HttpStatus_STATUS_OK
    STATUS_CREATED = _VisusKernelPy.HttpStatus_STATUS_CREATED
    STATUS_ACCEPTED = _VisusKernelPy.HttpStatus_STATUS_ACCEPTED
    STATUS_NON_AUTHORITATIVE = _VisusKernelPy.HttpStatus_STATUS_NON_AUTHORITATIVE
    STATUS_NO_CONTENT = _VisusKernelPy.HttpStatus_STATUS_NO_CONTENT
    STATUS_RESET_CONTENT = _VisusKernelPy.HttpStatus_STATUS_RESET_CONTENT
    STATUS_PARTIAL_CONTENT = _VisusKernelPy.HttpStatus_STATUS_PARTIAL_CONTENT
    STATUS_MULTI_STATUS = _VisusKernelPy.HttpStatus_STATUS_MULTI_STATUS
    STATUS_MULTIPLE_CHOICES = _VisusKernelPy.HttpStatus_STATUS_MULTIPLE_CHOICES
    STATUS_MOVED_PERMANENTLY = _VisusKernelPy.HttpStatus_STATUS_MOVED_PERMANENTLY
    STATUS_FOUND = _VisusKernelPy.HttpStatus_STATUS_FOUND
    STATUS_MOVED_TEMPORARILY = _VisusKernelPy.HttpStatus_STATUS_MOVED_TEMPORARILY
    STATUS_SEE_OTHER = _VisusKernelPy.HttpStatus_STATUS_SEE_OTHER
    STATUS_NOT_MODIFIED = _VisusKernelPy.HttpStatus_STATUS_NOT_MODIFIED
    STATUS_USE_PROXY = _VisusKernelPy.HttpStatus_STATUS_USE_PROXY
    STATUS_NOT_APPEARING_IN_THIS_PROTOCOL = _VisusKernelPy.HttpStatus_STATUS_NOT_APPEARING_IN_THIS_PROTOCOL
    STATUS_TEMPORARY_REDIRECT = _VisusKernelPy.HttpStatus_STATUS_TEMPORARY_REDIRECT
    STATUS_BAD_REQUEST = _VisusKernelPy.HttpStatus_STATUS_BAD_REQUEST
    STATUS_UNAUTHORIZED = _VisusKernelPy.HttpStatus_STATUS_UNAUTHORIZED
    STATUS_PAYMENT_REQUIRED = _VisusKernelPy.HttpStatus_STATUS_PAYMENT_REQUIRED
    STATUS_FORBIDDEN = _VisusKernelPy.HttpStatus_STATUS_FORBIDDEN
    STATUS_NOT_FOUND = _VisusKernelPy.HttpStatus_STATUS_NOT_FOUND
    STATUS_METHOD_NOT_ALLOWED = _VisusKernelPy.HttpStatus_STATUS_METHOD_NOT_ALLOWED
    STATUS_NOT_ACCEPTABLE = _VisusKernelPy.HttpStatus_STATUS_NOT_ACCEPTABLE
    STATUS_PROXY_AUTHENTICATION_REQUIRED = _VisusKernelPy.HttpStatus_STATUS_PROXY_AUTHENTICATION_REQUIRED
    STATUS_PROXY_UNAUTHORIZED = _VisusKernelPy.HttpStatus_STATUS_PROXY_UNAUTHORIZED
    STATUS_REQUEST_TIMEOUT = _VisusKernelPy.HttpStatus_STATUS_REQUEST_TIMEOUT
    STATUS_CONFLICT = _VisusKernelPy.HttpStatus_STATUS_CONFLICT
    STATUS_GONE = _VisusKernelPy.HttpStatus_STATUS_GONE
    STATUS_LENGTH_REQUIRED = _VisusKernelPy.HttpStatus_STATUS_LENGTH_REQUIRED
    STATUS_PRECONDITION_FAILED = _VisusKernelPy.HttpStatus_STATUS_PRECONDITION_FAILED
    STATUS_REQUEST_ENTITY_TOO_LARGE = _VisusKernelPy.HttpStatus_STATUS_REQUEST_ENTITY_TOO_LARGE
    STATUS_REQUEST_URI_TOO_LONG = _VisusKernelPy.HttpStatus_STATUS_REQUEST_URI_TOO_LONG
    STATUS_UNSUPPORTED_MEDIA_TYPE = _VisusKernelPy.HttpStatus_STATUS_UNSUPPORTED_MEDIA_TYPE
    STATUS_REQUESTED_RANGE_NOT_SATISFIABLE = _VisusKernelPy.HttpStatus_STATUS_REQUESTED_RANGE_NOT_SATISFIABLE
    STATUS_INVALID_RANGE = _VisusKernelPy.HttpStatus_STATUS_INVALID_RANGE
    STATUS_EXPECTATION_FAILED = _VisusKernelPy.HttpStatus_STATUS_EXPECTATION_FAILED
    STATUS_UNPROCESSABLE_ENTITY = _VisusKernelPy.HttpStatus_STATUS_UNPROCESSABLE_ENTITY
    STATUS_LOCKED = _VisusKernelPy.HttpStatus_STATUS_LOCKED
    STATUS_FAILED_DEPENDENCY = _VisusKernelPy.HttpStatus_STATUS_FAILED_DEPENDENCY
    STATUS_INTERNAL_SERVER_ERROR = _VisusKernelPy.HttpStatus_STATUS_INTERNAL_SERVER_ERROR
    STATUS_NOT_IMPLEMENTED = _VisusKernelPy.HttpStatus_STATUS_NOT_IMPLEMENTED
    STATUS_BAD_GATEWAY = _VisusKernelPy.HttpStatus_STATUS_BAD_GATEWAY
    STATUS_SERVICE_UNAVAILABLE = _VisusKernelPy.HttpStatus_STATUS_SERVICE_UNAVAILABLE
    STATUS_GATEWAY_TIMEOUT = _VisusKernelPy.HttpStatus_STATUS_GATEWAY_TIMEOUT
    STATUS_HTTP_VERSION_NOT_SUPPORTED = _VisusKernelPy.HttpStatus_STATUS_HTTP_VERSION_NOT_SUPPORTED
    STATUS_INSUFFICIENT_STORAGE = _VisusKernelPy.HttpStatus_STATUS_INSUFFICIENT_STORAGE
    STATUS_NOT_EXTENDED = _VisusKernelPy.HttpStatus_STATUS_NOT_EXTENDED
    __swig_destroy__ = _VisusKernelPy.delete_HttpStatus
    __del__ = lambda self: None
HttpStatus_swigregister = _VisusKernelPy.HttpStatus_swigregister
HttpStatus_swigregister(HttpStatus)

class NetMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["headers"] = _VisusKernelPy.NetMessage_headers_set
    __swig_getmethods__["headers"] = _VisusKernelPy.NetMessage_headers_get
    if _newclass:
        headers = _swig_property(_VisusKernelPy.NetMessage_headers_get, _VisusKernelPy.NetMessage_headers_set)
    __swig_setmethods__["body"] = _VisusKernelPy.NetMessage_body_set
    __swig_getmethods__["body"] = _VisusKernelPy.NetMessage_body_get
    if _newclass:
        body = _swig_property(_VisusKernelPy.NetMessage_body_get, _VisusKernelPy.NetMessage_body_set)

    def __init__(self):
        this = _VisusKernelPy.new_NetMessage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetMessage
    __del__ = lambda self: None

    def getHeader(self, *args):
        return _VisusKernelPy.NetMessage_getHeader(self, *args)

    def setHeader(self, key, value):
        return _VisusKernelPy.NetMessage_setHeader(self, key, value)

    def eraseHeader(self, key):
        return _VisusKernelPy.NetMessage_eraseHeader(self, key)

    def hasHeader(self, key):
        return _VisusKernelPy.NetMessage_hasHeader(self, key)

    def getTextBody(self):
        return _VisusKernelPy.NetMessage_getTextBody(self)

    def setTextBody(self, value, bAsBinary=False):
        return _VisusKernelPy.NetMessage_setTextBody(self, value, bAsBinary)

    def setXmlBody(self, value):
        return _VisusKernelPy.NetMessage_setXmlBody(self, value)

    def setHtmlBody(self, value):
        return _VisusKernelPy.NetMessage_setHtmlBody(self, value)

    def setJSONBody(self, value):
        return _VisusKernelPy.NetMessage_setJSONBody(self, value)

    def setArrayBody(self, compression, value):
        return _VisusKernelPy.NetMessage_setArrayBody(self, compression, value)

    def getArrayBody(self):
        return _VisusKernelPy.NetMessage_getArrayBody(self)

    def getCompatibleArrayBody(self, requested_dims, requested_dtype):
        return _VisusKernelPy.NetMessage_getCompatibleArrayBody(self, requested_dims, requested_dtype)

    def hasContentLength(self):
        return _VisusKernelPy.NetMessage_hasContentLength(self)

    def getContentLength(self):
        return _VisusKernelPy.NetMessage_getContentLength(self)

    def setContentLength(self, value):
        return _VisusKernelPy.NetMessage_setContentLength(self, value)

    def hasContentType(self):
        return _VisusKernelPy.NetMessage_hasContentType(self)

    def getContentType(self):
        return _VisusKernelPy.NetMessage_getContentType(self)

    def setContentType(self, value):
        return _VisusKernelPy.NetMessage_setContentType(self, value)

    def eraseContentType(self):
        return _VisusKernelPy.NetMessage_eraseContentType(self)

    def hasAttachedFilename(self):
        return _VisusKernelPy.NetMessage_hasAttachedFilename(self)

    def getAttachedFilename(self):
        return _VisusKernelPy.NetMessage_getAttachedFilename(self)

    def setAttachedFilename(self, filename):
        return _VisusKernelPy.NetMessage_setAttachedFilename(self, filename)

    def hasErrorMessage(self):
        return _VisusKernelPy.NetMessage_hasErrorMessage(self)

    def getErrorMessage(self):
        return _VisusKernelPy.NetMessage_getErrorMessage(self)

    def setErrorMessage(self, value):
        return _VisusKernelPy.NetMessage_setErrorMessage(self, value)
NetMessage_swigregister = _VisusKernelPy.NetMessage_swigregister
NetMessage_swigregister(NetMessage)

class NetRequest(NetMessage):
    __swig_setmethods__ = {}
    for _s in [NetMessage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetRequest, name, value)
    __swig_getmethods__ = {}
    for _s in [NetMessage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetRequest, name)
    __repr__ = _swig_repr
    __swig_setmethods__["aborted"] = _VisusKernelPy.NetRequest_aborted_set
    __swig_getmethods__["aborted"] = _VisusKernelPy.NetRequest_aborted_get
    if _newclass:
        aborted = _swig_property(_VisusKernelPy.NetRequest_aborted_get, _VisusKernelPy.NetRequest_aborted_set)
    __swig_setmethods__["url"] = _VisusKernelPy.NetRequest_url_set
    __swig_getmethods__["url"] = _VisusKernelPy.NetRequest_url_get
    if _newclass:
        url = _swig_property(_VisusKernelPy.NetRequest_url_get, _VisusKernelPy.NetRequest_url_set)
    __swig_setmethods__["method"] = _VisusKernelPy.NetRequest_method_set
    __swig_getmethods__["method"] = _VisusKernelPy.NetRequest_method_get
    if _newclass:
        method = _swig_property(_VisusKernelPy.NetRequest_method_get, _VisusKernelPy.NetRequest_method_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_NetRequest(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetRequest
    __del__ = lambda self: None

    def valid(self):
        return _VisusKernelPy.NetRequest_valid(self)

    def getHeadersAsString(self):
        return _VisusKernelPy.NetRequest_getHeadersAsString(self)

    def setHeadersFromString(self, value):
        return _VisusKernelPy.NetRequest_setHeadersFromString(self, value)

    def toString(self):
        return _VisusKernelPy.NetRequest_toString(self)
NetRequest_swigregister = _VisusKernelPy.NetRequest_swigregister
NetRequest_swigregister(NetRequest)

class NetResponse(NetMessage):
    __swig_setmethods__ = {}
    for _s in [NetMessage]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetResponse, name, value)
    __swig_getmethods__ = {}
    for _s in [NetMessage]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, NetResponse, name)
    __repr__ = _swig_repr
    __swig_setmethods__["status"] = _VisusKernelPy.NetResponse_status_set
    __swig_getmethods__["status"] = _VisusKernelPy.NetResponse_status_get
    if _newclass:
        status = _swig_property(_VisusKernelPy.NetResponse_status_get, _VisusKernelPy.NetResponse_status_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_NetResponse(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetResponse
    __del__ = lambda self: None

    def isInformational(self):
        return _VisusKernelPy.NetResponse_isInformational(self)

    def isSuccessful(self):
        return _VisusKernelPy.NetResponse_isSuccessful(self)

    def isRedirection(self):
        return _VisusKernelPy.NetResponse_isRedirection(self)

    def isClientError(self):
        return _VisusKernelPy.NetResponse_isClientError(self)

    def isServerError(self):
        return _VisusKernelPy.NetResponse_isServerError(self)

    def getStatusDescription(self):
        return _VisusKernelPy.NetResponse_getStatusDescription(self)

    def getHeadersAsString(self):
        return _VisusKernelPy.NetResponse_getHeadersAsString(self)

    def setHeadersFromString(self, value):
        return _VisusKernelPy.NetResponse_setHeadersFromString(self, value)

    def toString(self):
        return _VisusKernelPy.NetResponse_toString(self)
    if _newclass:
        compose = staticmethod(_VisusKernelPy.NetResponse_compose)
    else:
        compose = _VisusKernelPy.NetResponse_compose
    if _newclass:
        decompose = staticmethod(_VisusKernelPy.NetResponse_decompose)
    else:
        decompose = _VisusKernelPy.NetResponse_decompose
NetResponse_swigregister = _VisusKernelPy.NetResponse_swigregister
NetResponse_swigregister(NetResponse)

def NetResponse_compose(responses):
    return _VisusKernelPy.NetResponse_compose(responses)
NetResponse_compose = _VisusKernelPy.NetResponse_compose

def NetResponse_decompose(RESPONSE):
    return _VisusKernelPy.NetResponse_decompose(RESPONSE)
NetResponse_decompose = _VisusKernelPy.NetResponse_decompose

class NetSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetSocket, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pimpl"] = _VisusKernelPy.NetSocket_pimpl_set
    __swig_getmethods__["pimpl"] = _VisusKernelPy.NetSocket_pimpl_get
    if _newclass:
        pimpl = _swig_property(_VisusKernelPy.NetSocket_pimpl_get, _VisusKernelPy.NetSocket_pimpl_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_NetSocket(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetSocket
    __del__ = lambda self: None

    def shutdownSend(self):
        return _VisusKernelPy.NetSocket_shutdownSend(self)

    def close(self):
        return _VisusKernelPy.NetSocket_close(self)

    def connect(self, url):
        return _VisusKernelPy.NetSocket_connect(self, url)

    def bind(self, url):
        return _VisusKernelPy.NetSocket_bind(self, url)

    def acceptConnection(self):
        return _VisusKernelPy.NetSocket_acceptConnection(self)

    def sendRequest(self, request):
        return _VisusKernelPy.NetSocket_sendRequest(self, request)

    def sendResponse(self, response):
        return _VisusKernelPy.NetSocket_sendResponse(self, response)

    def receiveRequest(self):
        return _VisusKernelPy.NetSocket_receiveRequest(self)

    def receiveResponse(self):
        return _VisusKernelPy.NetSocket_receiveResponse(self)
NetSocket_swigregister = _VisusKernelPy.NetSocket_swigregister
NetSocket_swigregister(NetSocket)

class NetGlobalStats(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetGlobalStats, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetGlobalStats, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _VisusKernelPy.new_NetGlobalStats()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def resetStats(self):
        return _VisusKernelPy.NetGlobalStats_resetStats(self)

    def getNumRequests(self):
        return _VisusKernelPy.NetGlobalStats_getNumRequests(self)

    def getReadBytes(self):
        return _VisusKernelPy.NetGlobalStats_getReadBytes(self)

    def getWriteBytes(self):
        return _VisusKernelPy.NetGlobalStats_getWriteBytes(self)
    __swig_destroy__ = _VisusKernelPy.delete_NetGlobalStats
    __del__ = lambda self: None
NetGlobalStats_swigregister = _VisusKernelPy.NetGlobalStats_swigregister
NetGlobalStats_swigregister(NetGlobalStats)

class NetService(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetService, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetService, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pimpl"] = _VisusKernelPy.NetService_pimpl_set
    __swig_getmethods__["pimpl"] = _VisusKernelPy.NetService_pimpl_get
    if _newclass:
        pimpl = _swig_property(_VisusKernelPy.NetService_pimpl_get, _VisusKernelPy.NetService_pimpl_set)
    if _newclass:
        global_stats = staticmethod(_VisusKernelPy.NetService_global_stats)
    else:
        global_stats = _VisusKernelPy.NetService_global_stats

    def __init__(self, nconnections, bVerbose=True):
        this = _VisusKernelPy.new_NetService(nconnections, bVerbose)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetService
    __del__ = lambda self: None
    if _newclass:
        attach = staticmethod(_VisusKernelPy.NetService_attach)
    else:
        attach = _VisusKernelPy.NetService_attach
    if _newclass:
        detach = staticmethod(_VisusKernelPy.NetService_detach)
    else:
        detach = _VisusKernelPy.NetService_detach

    def setVerbose(self, value):
        return _VisusKernelPy.NetService_setVerbose(self, value)

    def getConnectTimeout(self):
        return _VisusKernelPy.NetService_getConnectTimeout(self)

    def setConnectTimeout(self, value):
        return _VisusKernelPy.NetService_setConnectTimeout(self, value)
    if _newclass:
        push = staticmethod(_VisusKernelPy.NetService_push)
    else:
        push = _VisusKernelPy.NetService_push
    if _newclass:
        getNetResponse = staticmethod(_VisusKernelPy.NetService_getNetResponse)
    else:
        getNetResponse = _VisusKernelPy.NetService_getNetResponse
    if _newclass:
        testSpeed = staticmethod(_VisusKernelPy.NetService_testSpeed)
    else:
        testSpeed = _VisusKernelPy.NetService_testSpeed
NetService_swigregister = _VisusKernelPy.NetService_swigregister
NetService_swigregister(NetService)

def NetService_global_stats():
    return _VisusKernelPy.NetService_global_stats()
NetService_global_stats = _VisusKernelPy.NetService_global_stats

def NetService_attach():
    return _VisusKernelPy.NetService_attach()
NetService_attach = _VisusKernelPy.NetService_attach

def NetService_detach():
    return _VisusKernelPy.NetService_detach()
NetService_detach = _VisusKernelPy.NetService_detach

def NetService_push(service, request):
    return _VisusKernelPy.NetService_push(service, request)
NetService_push = _VisusKernelPy.NetService_push

def NetService_getNetResponse(request):
    return _VisusKernelPy.NetService_getNetResponse(request)
NetService_getNetResponse = _VisusKernelPy.NetService_getNetResponse

def NetService_testSpeed(nconnections, nrequests, urls):
    return _VisusKernelPy.NetService_testSpeed(nconnections, nrequests, urls)
NetService_testSpeed = _VisusKernelPy.NetService_testSpeed

class NetServerModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetServerModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetServerModule, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusKernelPy.delete_NetServerModule
    __del__ = lambda self: None

    def handleRequest(self, request):
        return _VisusKernelPy.NetServerModule_handleRequest(self, request)
NetServerModule_swigregister = _VisusKernelPy.NetServerModule_swigregister
NetServerModule_swigregister(NetServerModule)

class NetServer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NetServer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NetServer, name)
    __repr__ = _swig_repr

    def __init__(self, port, disown, nthreads=8):
        this = _VisusKernelPy.new_NetServer(port, disown, nthreads)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_NetServer
    __del__ = lambda self: None

    def signalExit(self):
        return _VisusKernelPy.NetServer_signalExit(self)

    def setVerbose(self, value):
        return _VisusKernelPy.NetServer_setVerbose(self, value)

    def runInThisThread(self):
        return _VisusKernelPy.NetServer_runInThisThread(self)

    def runInBackground(self):
        return _VisusKernelPy.NetServer_runInBackground(self)

    def waitForExit(self):
        return _VisusKernelPy.NetServer_waitForExit(self)
NetServer_swigregister = _VisusKernelPy.NetServer_swigregister
NetServer_swigregister(NetServer)

class SingleTransferFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SingleTransferFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SingleTransferFunction, name)
    __repr__ = _swig_repr
    __swig_setmethods__["values"] = _VisusKernelPy.SingleTransferFunction_values_set
    __swig_getmethods__["values"] = _VisusKernelPy.SingleTransferFunction_values_get
    if _newclass:
        values = _swig_property(_VisusKernelPy.SingleTransferFunction_values_get, _VisusKernelPy.SingleTransferFunction_values_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_SingleTransferFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_SingleTransferFunction
    __del__ = lambda self: None

    def getNumberOfSamples(self):
        return _VisusKernelPy.SingleTransferFunction_getNumberOfSamples(self)

    def getValue(self, x):
        return _VisusKernelPy.SingleTransferFunction_getValue(self, x)

    def write(self, ar):
        return _VisusKernelPy.SingleTransferFunction_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.SingleTransferFunction_read(self, ar)

    def encode(self, root_name):
        return _VisusKernelPy.SingleTransferFunction_encode(self, root_name)

    def decode(self, arg2):
        return _VisusKernelPy.SingleTransferFunction_decode(self, arg2)
SingleTransferFunction_swigregister = _VisusKernelPy.SingleTransferFunction_swigregister
SingleTransferFunction_swigregister(SingleTransferFunction)

class TransferFunction(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransferFunction, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TransferFunction, name)
    __repr__ = _swig_repr
    FieldRange = _VisusKernelPy.TransferFunction_FieldRange
    ComputeRangePerComponent = _VisusKernelPy.TransferFunction_ComputeRangePerComponent
    ComputeRangeOverall = _VisusKernelPy.TransferFunction_ComputeRangeOverall
    UserRange = _VisusKernelPy.TransferFunction_UserRange
    __swig_setmethods__["R"] = _VisusKernelPy.TransferFunction_R_set
    __swig_getmethods__["R"] = _VisusKernelPy.TransferFunction_R_get
    if _newclass:
        R = _swig_property(_VisusKernelPy.TransferFunction_R_get, _VisusKernelPy.TransferFunction_R_set)
    __swig_setmethods__["G"] = _VisusKernelPy.TransferFunction_G_set
    __swig_getmethods__["G"] = _VisusKernelPy.TransferFunction_G_get
    if _newclass:
        G = _swig_property(_VisusKernelPy.TransferFunction_G_get, _VisusKernelPy.TransferFunction_G_set)
    __swig_setmethods__["B"] = _VisusKernelPy.TransferFunction_B_set
    __swig_getmethods__["B"] = _VisusKernelPy.TransferFunction_B_get
    if _newclass:
        B = _swig_property(_VisusKernelPy.TransferFunction_B_get, _VisusKernelPy.TransferFunction_B_set)
    __swig_setmethods__["A"] = _VisusKernelPy.TransferFunction_A_set
    __swig_getmethods__["A"] = _VisusKernelPy.TransferFunction_A_get
    if _newclass:
        A = _swig_property(_VisusKernelPy.TransferFunction_A_get, _VisusKernelPy.TransferFunction_A_set)
    __swig_setmethods__["texture"] = _VisusKernelPy.TransferFunction_texture_set
    __swig_getmethods__["texture"] = _VisusKernelPy.TransferFunction_texture_get
    if _newclass:
        texture = _swig_property(_VisusKernelPy.TransferFunction_texture_get, _VisusKernelPy.TransferFunction_texture_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_TransferFunction(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_TransferFunction
    __del__ = lambda self: None
    if _newclass:
        fromArray = staticmethod(_VisusKernelPy.TransferFunction_fromArray)
    else:
        fromArray = _VisusKernelPy.TransferFunction_fromArray
    if _newclass:
        fromString = staticmethod(_VisusKernelPy.TransferFunction_fromString)
    else:
        fromString = _VisusKernelPy.TransferFunction_fromString

    def getTypeName(self):
        return _VisusKernelPy.TransferFunction_getTypeName(self)

    def getFunctions(self):
        return _VisusKernelPy.TransferFunction_getFunctions(self)

    def setRed(self, value):
        return _VisusKernelPy.TransferFunction_setRed(self, value)

    def setGreen(self, value):
        return _VisusKernelPy.TransferFunction_setGreen(self, value)

    def setBlue(self, value):
        return _VisusKernelPy.TransferFunction_setBlue(self, value)

    def setAlpha(self, value):
        return _VisusKernelPy.TransferFunction_setAlpha(self, value)

    def getNumberOfSamples(self):
        return _VisusKernelPy.TransferFunction_getNumberOfSamples(self)

    def valid(self):
        return _VisusKernelPy.TransferFunction_valid(self)

    def isDefault(self):
        return _VisusKernelPy.TransferFunction_isDefault(self)

    def getDefaultName(self):
        return _VisusKernelPy.TransferFunction_getDefaultName(self)

    def getAttenuation(self):
        return _VisusKernelPy.TransferFunction_getAttenuation(self)

    def setAttenutation(self, value):
        return _VisusKernelPy.TransferFunction_setAttenutation(self, value)

    def getNormalizationMode(self):
        return _VisusKernelPy.TransferFunction_getNormalizationMode(self)

    def setNormalizationMode(self, value):
        return _VisusKernelPy.TransferFunction_setNormalizationMode(self, value)

    def getUserRange(self):
        return _VisusKernelPy.TransferFunction_getUserRange(self)

    def setUserRange(self, range):
        return _VisusKernelPy.TransferFunction_setUserRange(self, range)

    def drawValues(self, function, x1, x2, values):
        return _VisusKernelPy.TransferFunction_drawValues(self, function, x1, x2, values)

    def drawLine(self, function, x1, y1, x2, y2):
        return _VisusKernelPy.TransferFunction_drawLine(self, function, x1, y1, x2, y2)
    if _newclass:
        getDefaults = staticmethod(_VisusKernelPy.TransferFunction_getDefaults)
    else:
        getDefaults = _VisusKernelPy.TransferFunction_getDefaults
    if _newclass:
        getDefault = staticmethod(_VisusKernelPy.TransferFunction_getDefault)
    else:
        getDefault = _VisusKernelPy.TransferFunction_getDefault

    def setDefault(self, name):
        return _VisusKernelPy.TransferFunction_setDefault(self, name)
    if _newclass:
        getDefaultOpacities = staticmethod(_VisusKernelPy.TransferFunction_getDefaultOpacities)
    else:
        getDefaultOpacities = _VisusKernelPy.TransferFunction_getDefaultOpacities
    if _newclass:
        getDefaultOpacity = staticmethod(_VisusKernelPy.TransferFunction_getDefaultOpacity)
    else:
        getDefaultOpacity = _VisusKernelPy.TransferFunction_getDefaultOpacity

    def setOpacity(self, name):
        return _VisusKernelPy.TransferFunction_setOpacity(self, name)
    if _newclass:
        ComputeRange = staticmethod(_VisusKernelPy.TransferFunction_ComputeRange)
    else:
        ComputeRange = _VisusKernelPy.TransferFunction_ComputeRange

    def toArray(self):
        return _VisusKernelPy.TransferFunction_toArray(self)
    if _newclass:
        importTransferFunction = staticmethod(_VisusKernelPy.TransferFunction_importTransferFunction)
    else:
        importTransferFunction = _VisusKernelPy.TransferFunction_importTransferFunction

    def exportTransferFunction(self, filename):
        return _VisusKernelPy.TransferFunction_exportTransferFunction(self, filename)

    def execute(self, ar):
        return _VisusKernelPy.TransferFunction_execute(self, ar)

    def write(self, ar):
        return _VisusKernelPy.TransferFunction_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.TransferFunction_read(self, ar)
TransferFunction_swigregister = _VisusKernelPy.TransferFunction_swigregister
TransferFunction_swigregister(TransferFunction)

def TransferFunction_fromArray(*args):
    return _VisusKernelPy.TransferFunction_fromArray(*args)
TransferFunction_fromArray = _VisusKernelPy.TransferFunction_fromArray

def TransferFunction_fromString(content):
    return _VisusKernelPy.TransferFunction_fromString(content)
TransferFunction_fromString = _VisusKernelPy.TransferFunction_fromString

def TransferFunction_getDefaults():
    return _VisusKernelPy.TransferFunction_getDefaults()
TransferFunction_getDefaults = _VisusKernelPy.TransferFunction_getDefaults

def TransferFunction_getDefault(name):
    return _VisusKernelPy.TransferFunction_getDefault(name)
TransferFunction_getDefault = _VisusKernelPy.TransferFunction_getDefault

def TransferFunction_getDefaultOpacities():
    return _VisusKernelPy.TransferFunction_getDefaultOpacities()
TransferFunction_getDefaultOpacities = _VisusKernelPy.TransferFunction_getDefaultOpacities

def TransferFunction_getDefaultOpacity(name):
    return _VisusKernelPy.TransferFunction_getDefaultOpacity(name)
TransferFunction_getDefaultOpacity = _VisusKernelPy.TransferFunction_getDefaultOpacity

def TransferFunction_ComputeRange(*args):
    return _VisusKernelPy.TransferFunction_ComputeRange(*args)
TransferFunction_ComputeRange = _VisusKernelPy.TransferFunction_ComputeRange

def TransferFunction_importTransferFunction(content):
    return _VisusKernelPy.TransferFunction_importTransferFunction(content)
TransferFunction_importTransferFunction = _VisusKernelPy.TransferFunction_importTransferFunction

class VectorOfCamera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfCamera, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfCamera_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfCamera___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfCamera___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfCamera___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfCamera___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfCamera___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfCamera___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfCamera___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfCamera___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfCamera___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfCamera_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfCamera_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfCamera_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfCamera_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfCamera_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfCamera_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfCamera_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfCamera_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfCamera_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfCamera_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfCamera_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfCamera_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfCamera_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfCamera(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfCamera_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfCamera_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfCamera_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfCamera_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfCamera_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfCamera_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfCamera_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfCamera_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfCamera
    __del__ = lambda self: None
VectorOfCamera_swigregister = _VisusKernelPy.VectorOfCamera_swigregister
VectorOfCamera_swigregister(VectorOfCamera)

class VectorOfMatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfMatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfMatch, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfMatch_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfMatch___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfMatch___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfMatch___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfMatch___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfMatch___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfMatch___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfMatch___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfMatch___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfMatch___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfMatch_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfMatch_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfMatch_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfMatch_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfMatch_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfMatch_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfMatch_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfMatch_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfMatch_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfMatch_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfMatch_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfMatch_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfMatch_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfMatch(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfMatch_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfMatch_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfMatch_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfMatch_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfMatch_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfMatch_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfMatch_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfMatch_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfMatch
    __del__ = lambda self: None
VectorOfMatch_swigregister = _VisusKernelPy.VectorOfMatch_swigregister
VectorOfMatch_swigregister(VectorOfMatch)

class VectorOfKeyPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfKeyPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfKeyPoint, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusKernelPy.VectorOfKeyPoint_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusKernelPy.VectorOfKeyPoint___nonzero__(self)

    def __bool__(self):
        return _VisusKernelPy.VectorOfKeyPoint___bool__(self)

    def __len__(self):
        return _VisusKernelPy.VectorOfKeyPoint___len__(self)

    def __getslice__(self, i, j):
        return _VisusKernelPy.VectorOfKeyPoint___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusKernelPy.VectorOfKeyPoint___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint___setitem__(self, *args)

    def pop(self):
        return _VisusKernelPy.VectorOfKeyPoint_pop(self)

    def append(self, x):
        return _VisusKernelPy.VectorOfKeyPoint_append(self, x)

    def empty(self):
        return _VisusKernelPy.VectorOfKeyPoint_empty(self)

    def size(self):
        return _VisusKernelPy.VectorOfKeyPoint_size(self)

    def swap(self, v):
        return _VisusKernelPy.VectorOfKeyPoint_swap(self, v)

    def begin(self):
        return _VisusKernelPy.VectorOfKeyPoint_begin(self)

    def end(self):
        return _VisusKernelPy.VectorOfKeyPoint_end(self)

    def rbegin(self):
        return _VisusKernelPy.VectorOfKeyPoint_rbegin(self)

    def rend(self):
        return _VisusKernelPy.VectorOfKeyPoint_rend(self)

    def clear(self):
        return _VisusKernelPy.VectorOfKeyPoint_clear(self)

    def get_allocator(self):
        return _VisusKernelPy.VectorOfKeyPoint_get_allocator(self)

    def pop_back(self):
        return _VisusKernelPy.VectorOfKeyPoint_pop_back(self)

    def erase(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint_erase(self, *args)

    def __init__(self, *args):
        this = _VisusKernelPy.new_VectorOfKeyPoint(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _VisusKernelPy.VectorOfKeyPoint_push_back(self, x)

    def front(self):
        return _VisusKernelPy.VectorOfKeyPoint_front(self)

    def back(self):
        return _VisusKernelPy.VectorOfKeyPoint_back(self)

    def assign(self, n, x):
        return _VisusKernelPy.VectorOfKeyPoint_assign(self, n, x)

    def resize(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint_resize(self, *args)

    def insert(self, *args):
        return _VisusKernelPy.VectorOfKeyPoint_insert(self, *args)

    def reserve(self, n):
        return _VisusKernelPy.VectorOfKeyPoint_reserve(self, n)

    def capacity(self):
        return _VisusKernelPy.VectorOfKeyPoint_capacity(self)
    __swig_destroy__ = _VisusKernelPy.delete_VectorOfKeyPoint
    __del__ = lambda self: None
VectorOfKeyPoint_swigregister = _VisusKernelPy.VectorOfKeyPoint_swigregister
VectorOfKeyPoint_swigregister(VectorOfKeyPoint)

class Pose(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pose, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pose, name)
    __repr__ = _swig_repr
    __swig_setmethods__["q"] = _VisusKernelPy.Pose_q_set
    __swig_getmethods__["q"] = _VisusKernelPy.Pose_q_get
    if _newclass:
        q = _swig_property(_VisusKernelPy.Pose_q_get, _VisusKernelPy.Pose_q_set)
    __swig_setmethods__["t"] = _VisusKernelPy.Pose_t_set
    __swig_getmethods__["t"] = _VisusKernelPy.Pose_t_get
    if _newclass:
        t = _swig_property(_VisusKernelPy.Pose_t_get, _VisusKernelPy.Pose_t_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Pose(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        identity = staticmethod(_VisusKernelPy.Pose_identity)
    else:
        identity = _VisusKernelPy.Pose_identity
    if _newclass:
        lookingDown = staticmethod(_VisusKernelPy.Pose_lookingDown)
    else:
        lookingDown = _VisusKernelPy.Pose_lookingDown

    def R(self):
        return _VisusKernelPy.Pose_R(self)

    def isIdentity(self):
        return _VisusKernelPy.Pose_isIdentity(self)

    def toMatrix(self):
        return _VisusKernelPy.Pose_toMatrix(self)

    def __mul__(self, p2):
        return _VisusKernelPy.Pose___mul__(self, p2)

    def inverse(self):
        return _VisusKernelPy.Pose_inverse(self)

    def worldToCamera(self, worldpos):
        return _VisusKernelPy.Pose_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusKernelPy.Pose_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusKernelPy.Pose_getWorldCenter(self)

    def write(self, ar):
        return _VisusKernelPy.Pose_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Pose_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Pose
    __del__ = lambda self: None
Pose_swigregister = _VisusKernelPy.Pose_swigregister
Pose_swigregister(Pose)

def Pose_identity():
    return _VisusKernelPy.Pose_identity()
Pose_identity = _VisusKernelPy.Pose_identity

def Pose_lookingDown(t):
    return _VisusKernelPy.Pose_lookingDown(t)
Pose_lookingDown = _VisusKernelPy.Pose_lookingDown

class Calibration(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Calibration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Calibration, name)
    __repr__ = _swig_repr
    __swig_setmethods__["f"] = _VisusKernelPy.Calibration_f_set
    __swig_getmethods__["f"] = _VisusKernelPy.Calibration_f_get
    if _newclass:
        f = _swig_property(_VisusKernelPy.Calibration_f_get, _VisusKernelPy.Calibration_f_set)
    __swig_setmethods__["cx"] = _VisusKernelPy.Calibration_cx_set
    __swig_getmethods__["cx"] = _VisusKernelPy.Calibration_cx_get
    if _newclass:
        cx = _swig_property(_VisusKernelPy.Calibration_cx_get, _VisusKernelPy.Calibration_cx_set)
    __swig_setmethods__["cy"] = _VisusKernelPy.Calibration_cy_set
    __swig_getmethods__["cy"] = _VisusKernelPy.Calibration_cy_get
    if _newclass:
        cy = _swig_property(_VisusKernelPy.Calibration_cy_get, _VisusKernelPy.Calibration_cy_set)
    __swig_setmethods__["bFixed"] = _VisusKernelPy.Calibration_bFixed_set
    __swig_getmethods__["bFixed"] = _VisusKernelPy.Calibration_bFixed_get
    if _newclass:
        bFixed = _swig_property(_VisusKernelPy.Calibration_bFixed_get, _VisusKernelPy.Calibration_bFixed_set)

    def __init__(self, f_=1, cx_=0, cy_=0):
        this = _VisusKernelPy.new_Calibration(f_, cx_, cy_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def toMatrix(self):
        return _VisusKernelPy.Calibration_toMatrix(self)

    def screenToCamera(self, screen):
        return _VisusKernelPy.Calibration_screenToCamera(self, screen)

    def cameraToScreen(self, eye):
        return _VisusKernelPy.Calibration_cameraToScreen(self, eye)

    def write(self, ar):
        return _VisusKernelPy.Calibration_write(self, ar)

    def read(self, ar):
        return _VisusKernelPy.Calibration_read(self, ar)
    __swig_destroy__ = _VisusKernelPy.delete_Calibration
    __del__ = lambda self: None
Calibration_swigregister = _VisusKernelPy.Calibration_swigregister
Calibration_swigregister(Calibration)

class KeyPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KeyPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KeyPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _VisusKernelPy.KeyPoint_x_set
    __swig_getmethods__["x"] = _VisusKernelPy.KeyPoint_x_get
    if _newclass:
        x = _swig_property(_VisusKernelPy.KeyPoint_x_get, _VisusKernelPy.KeyPoint_x_set)
    __swig_setmethods__["y"] = _VisusKernelPy.KeyPoint_y_set
    __swig_getmethods__["y"] = _VisusKernelPy.KeyPoint_y_get
    if _newclass:
        y = _swig_property(_VisusKernelPy.KeyPoint_y_get, _VisusKernelPy.KeyPoint_y_set)
    __swig_setmethods__["size"] = _VisusKernelPy.KeyPoint_size_set
    __swig_getmethods__["size"] = _VisusKernelPy.KeyPoint_size_get
    if _newclass:
        size = _swig_property(_VisusKernelPy.KeyPoint_size_get, _VisusKernelPy.KeyPoint_size_set)
    __swig_setmethods__["angle"] = _VisusKernelPy.KeyPoint_angle_set
    __swig_getmethods__["angle"] = _VisusKernelPy.KeyPoint_angle_get
    if _newclass:
        angle = _swig_property(_VisusKernelPy.KeyPoint_angle_get, _VisusKernelPy.KeyPoint_angle_set)
    __swig_setmethods__["response"] = _VisusKernelPy.KeyPoint_response_set
    __swig_getmethods__["response"] = _VisusKernelPy.KeyPoint_response_get
    if _newclass:
        response = _swig_property(_VisusKernelPy.KeyPoint_response_get, _VisusKernelPy.KeyPoint_response_set)
    __swig_setmethods__["octave"] = _VisusKernelPy.KeyPoint_octave_set
    __swig_getmethods__["octave"] = _VisusKernelPy.KeyPoint_octave_get
    if _newclass:
        octave = _swig_property(_VisusKernelPy.KeyPoint_octave_get, _VisusKernelPy.KeyPoint_octave_set)
    __swig_setmethods__["class_id"] = _VisusKernelPy.KeyPoint_class_id_set
    __swig_getmethods__["class_id"] = _VisusKernelPy.KeyPoint_class_id_get
    if _newclass:
        class_id = _swig_property(_VisusKernelPy.KeyPoint_class_id_get, _VisusKernelPy.KeyPoint_class_id_set)

    def __init__(self, _x=0, _y=0, _size=0, _angle=-1, _response=0, _octave=0, _class_id=-1):
        this = _VisusKernelPy.new_KeyPoint(_x, _y, _size, _angle, _response, _octave, _class_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    if _newclass:
        adaptiveNonMaximalSuppression = staticmethod(_VisusKernelPy.KeyPoint_adaptiveNonMaximalSuppression)
    else:
        adaptiveNonMaximalSuppression = _VisusKernelPy.KeyPoint_adaptiveNonMaximalSuppression
    __swig_destroy__ = _VisusKernelPy.delete_KeyPoint
    __del__ = lambda self: None
KeyPoint_swigregister = _VisusKernelPy.KeyPoint_swigregister
KeyPoint_swigregister(KeyPoint)

def KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms):
    return _VisusKernelPy.KeyPoint_adaptiveNonMaximalSuppression(responses, xs, ys, anms)
KeyPoint_adaptiveNonMaximalSuppression = _VisusKernelPy.KeyPoint_adaptiveNonMaximalSuppression

class Match(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Match, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Match, name)
    __repr__ = _swig_repr
    __swig_setmethods__["queryIdx"] = _VisusKernelPy.Match_queryIdx_set
    __swig_getmethods__["queryIdx"] = _VisusKernelPy.Match_queryIdx_get
    if _newclass:
        queryIdx = _swig_property(_VisusKernelPy.Match_queryIdx_get, _VisusKernelPy.Match_queryIdx_set)
    __swig_setmethods__["trainIdx"] = _VisusKernelPy.Match_trainIdx_set
    __swig_getmethods__["trainIdx"] = _VisusKernelPy.Match_trainIdx_get
    if _newclass:
        trainIdx = _swig_property(_VisusKernelPy.Match_trainIdx_get, _VisusKernelPy.Match_trainIdx_set)
    __swig_setmethods__["imgIdx"] = _VisusKernelPy.Match_imgIdx_set
    __swig_getmethods__["imgIdx"] = _VisusKernelPy.Match_imgIdx_get
    if _newclass:
        imgIdx = _swig_property(_VisusKernelPy.Match_imgIdx_get, _VisusKernelPy.Match_imgIdx_set)
    __swig_setmethods__["distance"] = _VisusKernelPy.Match_distance_set
    __swig_getmethods__["distance"] = _VisusKernelPy.Match_distance_get
    if _newclass:
        distance = _swig_property(_VisusKernelPy.Match_distance_get, _VisusKernelPy.Match_distance_set)

    def __init__(self, *args):
        this = _VisusKernelPy.new_Match(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def __lt__(self, m):
        return _VisusKernelPy.Match___lt__(self, m)
    __swig_destroy__ = _VisusKernelPy.delete_Match
    __del__ = lambda self: None
Match_swigregister = _VisusKernelPy.Match_swigregister
Match_swigregister(Match)

class SlamEdge(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SlamEdge, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SlamEdge, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _VisusKernelPy.SlamEdge_origin_set
    __swig_getmethods__["origin"] = _VisusKernelPy.SlamEdge_origin_get
    if _newclass:
        origin = _swig_property(_VisusKernelPy.SlamEdge_origin_get, _VisusKernelPy.SlamEdge_origin_set)
    __swig_setmethods__["other"] = _VisusKernelPy.SlamEdge_other_set
    __swig_getmethods__["other"] = _VisusKernelPy.SlamEdge_other_get
    if _newclass:
        other = _swig_property(_VisusKernelPy.SlamEdge_other_get, _VisusKernelPy.SlamEdge_other_set)
    __swig_setmethods__["text"] = _VisusKernelPy.SlamEdge_text_set
    __swig_getmethods__["text"] = _VisusKernelPy.SlamEdge_text_get
    if _newclass:
        text = _swig_property(_VisusKernelPy.SlamEdge_text_get, _VisusKernelPy.SlamEdge_text_set)
    __swig_setmethods__["matches"] = _VisusKernelPy.SlamEdge_matches_set
    __swig_getmethods__["matches"] = _VisusKernelPy.SlamEdge_matches_get
    if _newclass:
        matches = _swig_property(_VisusKernelPy.SlamEdge_matches_get, _VisusKernelPy.SlamEdge_matches_set)

    def __init__(self, origin_, other_):
        this = _VisusKernelPy.new_SlamEdge(origin_, other_)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def getNumberOfMatches(self):
        return _VisusKernelPy.SlamEdge_getNumberOfMatches(self)

    def isGood(self):
        return _VisusKernelPy.SlamEdge_isGood(self)

    def setMatches(self, matches, text):
        return _VisusKernelPy.SlamEdge_setMatches(self, matches, text)
    __swig_destroy__ = _VisusKernelPy.delete_SlamEdge
    __del__ = lambda self: None
SlamEdge_swigregister = _VisusKernelPy.SlamEdge_swigregister
SlamEdge_swigregister(SlamEdge)

class Camera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Camera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Camera, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _VisusKernelPy.Camera_id_set
    __swig_getmethods__["id"] = _VisusKernelPy.Camera_id_get
    if _newclass:
        id = _swig_property(_VisusKernelPy.Camera_id_get, _VisusKernelPy.Camera_id_set)
    __swig_setmethods__["idx_filename"] = _VisusKernelPy.Camera_idx_filename_set
    __swig_getmethods__["idx_filename"] = _VisusKernelPy.Camera_idx_filename_get
    if _newclass:
        idx_filename = _swig_property(_VisusKernelPy.Camera_idx_filename_get, _VisusKernelPy.Camera_idx_filename_set)
    __swig_setmethods__["filenames"] = _VisusKernelPy.Camera_filenames_set
    __swig_getmethods__["filenames"] = _VisusKernelPy.Camera_filenames_get
    if _newclass:
        filenames = _swig_property(_VisusKernelPy.Camera_filenames_get, _VisusKernelPy.Camera_filenames_set)
    __swig_setmethods__["color"] = _VisusKernelPy.Camera_color_set
    __swig_getmethods__["color"] = _VisusKernelPy.Camera_color_get
    if _newclass:
        color = _swig_property(_VisusKernelPy.Camera_color_get, _VisusKernelPy.Camera_color_set)
    __swig_setmethods__["keypoints"] = _VisusKernelPy.Camera_keypoints_set
    __swig_getmethods__["keypoints"] = _VisusKernelPy.Camera_keypoints_get
    if _newclass:
        keypoints = _swig_property(_VisusKernelPy.Camera_keypoints_get, _VisusKernelPy.Camera_keypoints_set)
    __swig_setmethods__["descriptors"] = _VisusKernelPy.Camera_descriptors_set
    __swig_getmethods__["descriptors"] = _VisusKernelPy.Camera_descriptors_get
    if _newclass:
        descriptors = _swig_property(_VisusKernelPy.Camera_descriptors_get, _VisusKernelPy.Camera_descriptors_set)
    __swig_setmethods__["pose"] = _VisusKernelPy.Camera_pose_set
    __swig_getmethods__["pose"] = _VisusKernelPy.Camera_pose_get
    if _newclass:
        pose = _swig_property(_VisusKernelPy.Camera_pose_get, _VisusKernelPy.Camera_pose_set)
    __swig_setmethods__["bFixed"] = _VisusKernelPy.Camera_bFixed_set
    __swig_getmethods__["bFixed"] = _VisusKernelPy.Camera_bFixed_get
    if _newclass:
        bFixed = _swig_property(_VisusKernelPy.Camera_bFixed_get, _VisusKernelPy.Camera_bFixed_set)
    __swig_setmethods__["edges"] = _VisusKernelPy.Camera_edges_set
    __swig_getmethods__["edges"] = _VisusKernelPy.Camera_edges_get
    if _newclass:
        edges = _swig_property(_VisusKernelPy.Camera_edges_get, _VisusKernelPy.Camera_edges_set)
    __swig_setmethods__["homography"] = _VisusKernelPy.Camera_homography_set
    __swig_getmethods__["homography"] = _VisusKernelPy.Camera_homography_get
    if _newclass:
        homography = _swig_property(_VisusKernelPy.Camera_homography_get, _VisusKernelPy.Camera_homography_set)
    __swig_setmethods__["quad"] = _VisusKernelPy.Camera_quad_set
    __swig_getmethods__["quad"] = _VisusKernelPy.Camera_quad_get
    if _newclass:
        quad = _swig_property(_VisusKernelPy.Camera_quad_get, _VisusKernelPy.Camera_quad_set)

    def __init__(self):
        this = _VisusKernelPy.new_Camera()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Camera
    __del__ = lambda self: None

    def getNumberOfKeyPoints(self):
        return _VisusKernelPy.Camera_getNumberOfKeyPoints(self)

    def worldToCamera(self, worldpos):
        return _VisusKernelPy.Camera_worldToCamera(self, worldpos)

    def cameraToWorld(self, eye):
        return _VisusKernelPy.Camera_cameraToWorld(self, eye)

    def getWorldCenter(self):
        return _VisusKernelPy.Camera_getWorldCenter(self)

    def getWorldViewDirection(self):
        return _VisusKernelPy.Camera_getWorldViewDirection(self)

    def addLocalCamera(self, camera1):
        return _VisusKernelPy.Camera_addLocalCamera(self, camera1)

    def getEdge(self, other):
        return _VisusKernelPy.Camera_getEdge(self, other)

    def removeLocalCamera(self, camera1):
        return _VisusKernelPy.Camera_removeLocalCamera(self, camera1)

    def getAllLocalCameras(self):
        return _VisusKernelPy.Camera_getAllLocalCameras(self)

    def getGoodLocalCameras(self):
        return _VisusKernelPy.Camera_getGoodLocalCameras(self)
Camera_swigregister = _VisusKernelPy.Camera_swigregister
Camera_swigregister(Camera)

class Slam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Slam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Slam, name)
    __repr__ = _swig_repr
    __swig_setmethods__["url"] = _VisusKernelPy.Slam_url_set
    __swig_getmethods__["url"] = _VisusKernelPy.Slam_url_get
    if _newclass:
        url = _swig_property(_VisusKernelPy.Slam_url_get, _VisusKernelPy.Slam_url_set)
    __swig_setmethods__["width"] = _VisusKernelPy.Slam_width_set
    __swig_getmethods__["width"] = _VisusKernelPy.Slam_width_get
    if _newclass:
        width = _swig_property(_VisusKernelPy.Slam_width_get, _VisusKernelPy.Slam_width_set)
    __swig_setmethods__["height"] = _VisusKernelPy.Slam_height_set
    __swig_getmethods__["height"] = _VisusKernelPy.Slam_height_get
    if _newclass:
        height = _swig_property(_VisusKernelPy.Slam_height_get, _VisusKernelPy.Slam_height_set)
    __swig_setmethods__["dtype"] = _VisusKernelPy.Slam_dtype_set
    __swig_getmethods__["dtype"] = _VisusKernelPy.Slam_dtype_get
    if _newclass:
        dtype = _swig_property(_VisusKernelPy.Slam_dtype_get, _VisusKernelPy.Slam_dtype_set)
    __swig_setmethods__["cameras"] = _VisusKernelPy.Slam_cameras_set
    __swig_getmethods__["cameras"] = _VisusKernelPy.Slam_cameras_get
    if _newclass:
        cameras = _swig_property(_VisusKernelPy.Slam_cameras_get, _VisusKernelPy.Slam_cameras_set)
    __swig_setmethods__["calibration"] = _VisusKernelPy.Slam_calibration_set
    __swig_getmethods__["calibration"] = _VisusKernelPy.Slam_calibration_get
    if _newclass:
        calibration = _swig_property(_VisusKernelPy.Slam_calibration_get, _VisusKernelPy.Slam_calibration_set)

    def __init__(self):
        if self.__class__ == Slam:
            _self = None
        else:
            _self = self
        this = _VisusKernelPy.new_Slam(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _VisusKernelPy.delete_Slam
    __del__ = lambda self: None

    def addCamera(self, disown):
        return _VisusKernelPy.Slam_addCamera(self, disown)

    def previousCamera(self, camera):
        return _VisusKernelPy.Slam_previousCamera(self, camera)

    def nextCamera(self, camera):
        return _VisusKernelPy.Slam_nextCamera(self, camera)

    def removeCamera(self, camera2):
        return _VisusKernelPy.Slam_removeCamera(self, camera2)

    def findGroups(self):
        return _VisusKernelPy.Slam_findGroups(self)

    def removeDisconnectedCameras(self):
        return _VisusKernelPy.Slam_removeDisconnectedCameras(self)

    def removeCamerasWithTooMuchSkew(self):
        return _VisusKernelPy.Slam_removeCamerasWithTooMuchSkew(self)

    def computeWorldQuad(self, camera):
        return _VisusKernelPy.Slam_computeWorldQuad(self, camera)

    def getQuadsBox(self):
        return _VisusKernelPy.Slam_getQuadsBox(self)

    def refreshQuads(self):
        return _VisusKernelPy.Slam_refreshQuads(self)

    def loadKeyPoints(self, camera2, filename):
        return _VisusKernelPy.Slam_loadKeyPoints(self, camera2, filename)

    def saveKeyPoints(self, camera2, filename):
        return _VisusKernelPy.Slam_saveKeyPoints(self, camera2, filename)

    def removeOutlierMatches(self, max_reproj_error):
        return _VisusKernelPy.Slam_removeOutlierMatches(self, max_reproj_error)

    def bundleAdjustment(self, *args):
        return _VisusKernelPy.Slam_bundleAdjustment(self, *args)

    def doPostIterationAction(self):
        return _VisusKernelPy.Slam_doPostIterationAction(self)
    def __disown__(self):
        self.this.disown()
        _VisusKernelPy.disown_Slam(self)
        return weakref_proxy(self)
Slam_swigregister = _VisusKernelPy.Slam_swigregister
Slam_swigregister(Slam)


def convert_dtype(value):

	import numpy

# get first component
	if isinstance(value,DType):
		value=value.get(0).toString() 

	if isinstance(value,str):
		if value=="uint8":    return numpy.uint8
		if value=="int8":     return numpy.int8
		if value=="uint16":   return numpy.uint16
		if value=="int16":    return numpy.int16
		if value=="uint32":   return numpy.uint32
		if value=="int32":    return numpy.int32
		if value=="float32":  return numpy.float32
		if value=="float64":  return numpy.float64

	if isinstance(value,numpy):
		if value==numpy.uint8:   return "uint8"
		if value==numpy.int8:    return "int8"
		if value==numpy.uint16:  return "uint16"
		if value==numpy.int16:   return "int16"
		if value==numpy.uint32:  return "uint32"
		if value==numpy.int32:   return "int32"
		if value==numpy.float32: return "float32"
		if value==numpy.float64: return "float64"

	raise Exception("Internal error")

# This file is compatible with both classic and new-style classes.


