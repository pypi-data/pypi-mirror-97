# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusDbPy
else:
    import _VisusDbPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_SwigPyIterator

    def value(self):
        return _VisusDbPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusDbPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusDbPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusDbPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusDbPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusDbPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusDbPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusDbPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusDbPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusDbPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusDbPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusDbPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusDbPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusDbPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusDbPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusDbPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusDbPy:
_VisusDbPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusDbPy.SHARED_PTR_DISOWN
import VisusKernelPy

def LoadDataset(url):
	from OpenVisus.dataset import PyDataset
	return PyDataset(LoadDatasetCpp(url))

def LoadIdxDataset(url):
	return LoadDataset(url)

class DbModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusDbPy.DbModule_bAttached_get, _VisusDbPy.DbModule_bAttached_set)

    @staticmethod
    def detach():
        return _VisusDbPy.DbModule_detach()

    @staticmethod
    def attach():
        return _VisusDbPy.DbModule_attach()

    def __init__(self):
        _VisusDbPy.DbModule_swiginit(self, _VisusDbPy.new_DbModule())
    __swig_destroy__ = _VisusDbPy.delete_DbModule

# Register DbModule in _VisusDbPy:
_VisusDbPy.DbModule_swigregister(DbModule)
cvar = _VisusDbPy.cvar

def DbModule_detach():
    return _VisusDbPy.DbModule_detach()

def DbModule_attach():
    return _VisusDbPy.DbModule_attach()

class Access(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    name = property(_VisusDbPy.Access_name_get, _VisusDbPy.Access_name_set)
    can_read = property(_VisusDbPy.Access_can_read_get, _VisusDbPy.Access_can_read_set)
    can_write = property(_VisusDbPy.Access_can_write_get, _VisusDbPy.Access_can_write_set)
    bitsperblock = property(_VisusDbPy.Access_bitsperblock_get, _VisusDbPy.Access_bitsperblock_set)
    statistics = property(_VisusDbPy.Access_statistics_get, _VisusDbPy.Access_statistics_set)
    bVerbose = property(_VisusDbPy.Access_bVerbose_get, _VisusDbPy.Access_bVerbose_set)
    bDisableWriteLocks = property(_VisusDbPy.Access_bDisableWriteLocks_get, _VisusDbPy.Access_bDisableWriteLocks_set)
    __swig_destroy__ = _VisusDbPy.delete_Access

    def disableWriteLock(self):
        return _VisusDbPy.Access_disableWriteLock(self)

    def getSamplesPerBlock(self):
        return _VisusDbPy.Access_getSamplesPerBlock(self)

    def getFilename(self, *args):
        return _VisusDbPy.Access_getFilename(self, *args)

    def getStartAddress(self, block_id):
        return _VisusDbPy.Access_getStartAddress(self, block_id)

    def getEndAddress(self, block_id):
        return _VisusDbPy.Access_getEndAddress(self, block_id)

    def getMode(self):
        return _VisusDbPy.Access_getMode(self)

    def isWriting(self):
        return _VisusDbPy.Access_isWriting(self)

    def isReading(self):
        return _VisusDbPy.Access_isReading(self)

    def beginIO(self, mode):
        return _VisusDbPy.Access_beginIO(self, mode)

    def endIO(self):
        return _VisusDbPy.Access_endIO(self)

    def readBlock(self, query):
        return _VisusDbPy.Access_readBlock(self, query)

    def writeBlock(self, query):
        return _VisusDbPy.Access_writeBlock(self, query)

    def beginRead(self):
        return _VisusDbPy.Access_beginRead(self)

    def endRead(self):
        return _VisusDbPy.Access_endRead(self)

    def beginWrite(self):
        return _VisusDbPy.Access_beginWrite(self)

    def endWrite(self):
        return _VisusDbPy.Access_endWrite(self)

    def acquireWriteLock(self, query):
        return _VisusDbPy.Access_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _VisusDbPy.Access_releaseWriteLock(self, query)

    def resetStatistics(self):
        return _VisusDbPy.Access_resetStatistics(self)

    def printStatistics(self):
        return _VisusDbPy.Access_printStatistics(self)

    def write(self, ar):
        return _VisusDbPy.Access_write(self, ar)

    def read(self, ar):
        return _VisusDbPy.Access_read(self, ar)

    def readOk(self, query):
        return _VisusDbPy.Access_readOk(self, query)

    def readFailed(self, query):
        return _VisusDbPy.Access_readFailed(self, query)

    def writeOk(self, query):
        return _VisusDbPy.Access_writeOk(self, query)

    def writeFailed(self, query):
        return _VisusDbPy.Access_writeFailed(self, query)

# Register Access in _VisusDbPy:
_VisusDbPy.Access_swigregister(Access)
Access.DefaultChMod = _VisusDbPy.cvar.Access_DefaultChMod

class LogicSamples(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    logic_box = property(_VisusDbPy.LogicSamples_logic_box_get, _VisusDbPy.LogicSamples_logic_box_set)
    nsamples = property(_VisusDbPy.LogicSamples_nsamples_get, _VisusDbPy.LogicSamples_nsamples_set)
    delta = property(_VisusDbPy.LogicSamples_delta_get, _VisusDbPy.LogicSamples_delta_set)
    shift = property(_VisusDbPy.LogicSamples_shift_get, _VisusDbPy.LogicSamples_shift_set)

    def __init__(self, *args):
        _VisusDbPy.LogicSamples_swiginit(self, _VisusDbPy.new_LogicSamples(*args))

    @staticmethod
    def invalid():
        return _VisusDbPy.LogicSamples_invalid()

    def valid(self):
        return _VisusDbPy.LogicSamples_valid(self)

    def __eq__(self, other):
        return _VisusDbPy.LogicSamples___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.LogicSamples___ne__(self, other)

    def pixelToLogic(self, value):
        return _VisusDbPy.LogicSamples_pixelToLogic(self, value)

    def logicToPixel(self, value):
        return _VisusDbPy.LogicSamples_logicToPixel(self, value)

    def alignBox(self, value):
        return _VisusDbPy.LogicSamples_alignBox(self, value)
    __swig_destroy__ = _VisusDbPy.delete_LogicSamples

# Register LogicSamples in _VisusDbPy:
_VisusDbPy.LogicSamples_swigregister(LogicSamples)

def LogicSamples_invalid():
    return _VisusDbPy.LogicSamples_invalid()

class Query(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    QueryCreated = _VisusDbPy.Query_QueryCreated
    QueryRunning = _VisusDbPy.Query_QueryRunning
    QueryFailed = _VisusDbPy.Query_QueryFailed
    QueryOk = _VisusDbPy.Query_QueryOk
    dataset = property(_VisusDbPy.Query_dataset_get, _VisusDbPy.Query_dataset_set)
    mode = property(_VisusDbPy.Query_mode_get, _VisusDbPy.Query_mode_set)
    field = property(_VisusDbPy.Query_field_get, _VisusDbPy.Query_field_set)
    time = property(_VisusDbPy.Query_time_get, _VisusDbPy.Query_time_set)
    aborted = property(_VisusDbPy.Query_aborted_get, _VisusDbPy.Query_aborted_set)
    buffer = property(_VisusDbPy.Query_buffer_get, _VisusDbPy.Query_buffer_set)
    status = property(_VisusDbPy.Query_status_get, _VisusDbPy.Query_status_set)
    errormsg = property(_VisusDbPy.Query_errormsg_get, _VisusDbPy.Query_errormsg_set)
    done = property(_VisusDbPy.Query_done_get, _VisusDbPy.Query_done_set)

    def __init__(self):
        _VisusDbPy.Query_swiginit(self, _VisusDbPy.new_Query())
    __swig_destroy__ = _VisusDbPy.delete_Query

    def getStatus(self):
        return _VisusDbPy.Query_getStatus(self)

    def setStatus(self, value):
        return _VisusDbPy.Query_setStatus(self, value)

    def ok(self):
        return _VisusDbPy.Query_ok(self)

    def failed(self):
        return _VisusDbPy.Query_failed(self)

    def isRunning(self):
        return _VisusDbPy.Query_isRunning(self)

    def setRunning(self):
        return _VisusDbPy.Query_setRunning(self)

    def setOk(self):
        return _VisusDbPy.Query_setOk(self)

    def setFailed(self, *args):
        return _VisusDbPy.Query_setFailed(self, *args)

# Register Query in _VisusDbPy:
_VisusDbPy.Query_swigregister(Query)

class BlockQueryGlobalStats(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusDbPy.BlockQueryGlobalStats_swiginit(self, _VisusDbPy.new_BlockQueryGlobalStats())

    def resetStats(self):
        return _VisusDbPy.BlockQueryGlobalStats_resetStats(self)

    def getNumRead(self):
        return _VisusDbPy.BlockQueryGlobalStats_getNumRead(self)

    def getNumWrite(self):
        return _VisusDbPy.BlockQueryGlobalStats_getNumWrite(self)
    __swig_destroy__ = _VisusDbPy.delete_BlockQueryGlobalStats

# Register BlockQueryGlobalStats in _VisusDbPy:
_VisusDbPy.BlockQueryGlobalStats_swigregister(BlockQueryGlobalStats)

class BlockQuery(Query):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    blockid = property(_VisusDbPy.BlockQuery_blockid_get, _VisusDbPy.BlockQuery_blockid_set)
    H = property(_VisusDbPy.BlockQuery_H_get, _VisusDbPy.BlockQuery_H_set)
    logic_samples = property(_VisusDbPy.BlockQuery_logic_samples_get, _VisusDbPy.BlockQuery_logic_samples_set)

    def __init__(self):
        _VisusDbPy.BlockQuery_swiginit(self, _VisusDbPy.new_BlockQuery())

    @staticmethod
    def global_stats():
        return _VisusDbPy.BlockQuery_global_stats()

    @staticmethod
    def readBlockEvent():
        return _VisusDbPy.BlockQuery_readBlockEvent()

    @staticmethod
    def writeBlockEvent():
        return _VisusDbPy.BlockQuery_writeBlockEvent()

    def getNumberOfSamples(self):
        return _VisusDbPy.BlockQuery_getNumberOfSamples(self)

    def getByteSize(self):
        return _VisusDbPy.BlockQuery_getByteSize(self)

    def getLogicBox(self):
        return _VisusDbPy.BlockQuery_getLogicBox(self)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.BlockQuery_allocateBufferIfNeeded(self)
    __swig_destroy__ = _VisusDbPy.delete_BlockQuery

# Register BlockQuery in _VisusDbPy:
_VisusDbPy.BlockQuery_swigregister(BlockQuery)

def BlockQuery_global_stats():
    return _VisusDbPy.BlockQuery_global_stats()

def BlockQuery_readBlockEvent():
    return _VisusDbPy.BlockQuery_readBlockEvent()

def BlockQuery_writeBlockEvent():
    return _VisusDbPy.BlockQuery_writeBlockEvent()

QueryGuessProgression = _VisusDbPy.QueryGuessProgression
QueryNoProgression = _VisusDbPy.QueryNoProgression
QueryDefaultQuality = _VisusDbPy.QueryDefaultQuality
class BoxQuery(Query):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    logic_box = property(_VisusDbPy.BoxQuery_logic_box_get, _VisusDbPy.BoxQuery_logic_box_set)
    logic_samples = property(_VisusDbPy.BoxQuery_logic_samples_get, _VisusDbPy.BoxQuery_logic_samples_set)
    start_resolution = property(_VisusDbPy.BoxQuery_start_resolution_get, _VisusDbPy.BoxQuery_start_resolution_set)
    cur_resolution = property(_VisusDbPy.BoxQuery_cur_resolution_get, _VisusDbPy.BoxQuery_cur_resolution_set)
    end_resolution = property(_VisusDbPy.BoxQuery_end_resolution_get, _VisusDbPy.BoxQuery_end_resolution_set)
    end_resolutions = property(_VisusDbPy.BoxQuery_end_resolutions_get, _VisusDbPy.BoxQuery_end_resolutions_set)

    def __init__(self):
        _VisusDbPy.BoxQuery_swiginit(self, _VisusDbPy.new_BoxQuery())

    def canExecute(self):
        return _VisusDbPy.BoxQuery_canExecute(self)

    def getNumberOfSamples(self):
        return _VisusDbPy.BoxQuery_getNumberOfSamples(self)

    def allocateBufferIfNeeded(self):
        return _VisusDbPy.BoxQuery_allocateBufferIfNeeded(self)

    def getByteSize(self):
        return _VisusDbPy.BoxQuery_getByteSize(self)

    def getCurrentResolution(self):
        return _VisusDbPy.BoxQuery_getCurrentResolution(self)

    def setCurrentResolution(self, value):
        return _VisusDbPy.BoxQuery_setCurrentResolution(self, value)

    def getEndResolution(self):
        return _VisusDbPy.BoxQuery_getEndResolution(self)

    def setResolutionRange(self, A, B):
        return _VisusDbPy.BoxQuery_setResolutionRange(self, A, B)

    def disableFilters(self):
        return _VisusDbPy.BoxQuery_disableFilters(self)

    def enableFilters(self):
        return _VisusDbPy.BoxQuery_enableFilters(self)
    __swig_destroy__ = _VisusDbPy.delete_BoxQuery

# Register BoxQuery in _VisusDbPy:
_VisusDbPy.BoxQuery_swigregister(BoxQuery)

class PointQuery(Query):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    logic_position = property(_VisusDbPy.PointQuery_logic_position_get, _VisusDbPy.PointQuery_logic_position_set)
    npoints = property(_VisusDbPy.PointQuery_npoints_get, _VisusDbPy.PointQuery_npoints_set)
    points = property(_VisusDbPy.PointQuery_points_get, _VisusDbPy.PointQuery_points_set)
    start_resolution = property(_VisusDbPy.PointQuery_start_resolution_get, _VisusDbPy.PointQuery_start_resolution_set)
    cur_resolution = property(_VisusDbPy.PointQuery_cur_resolution_get, _VisusDbPy.PointQuery_cur_resolution_set)
    end_resolution = property(_VisusDbPy.PointQuery_end_resolution_get, _VisusDbPy.PointQuery_end_resolution_set)
    end_resolutions = property(_VisusDbPy.PointQuery_end_resolutions_get, _VisusDbPy.PointQuery_end_resolutions_set)
    offsets = property(_VisusDbPy.PointQuery_offsets_get, _VisusDbPy.PointQuery_offsets_set)

    def __init__(self):
        _VisusDbPy.PointQuery_swiginit(self, _VisusDbPy.new_PointQuery())

    def getNumberOfPoints(self):
        return _VisusDbPy.PointQuery_getNumberOfPoints(self)

    def getByteSize(self):
        return _VisusDbPy.PointQuery_getByteSize(self)

    def setPoints(self, nsamples):
        return _VisusDbPy.PointQuery_setPoints(self, nsamples)

    def getCurrentResolution(self):
        return _VisusDbPy.PointQuery_getCurrentResolution(self)

    def setCurrentResolution(self, value):
        return _VisusDbPy.PointQuery_setCurrentResolution(self, value)

    def getEndResolution(self):
        return _VisusDbPy.PointQuery_getEndResolution(self)
    __swig_destroy__ = _VisusDbPy.delete_PointQuery

# Register PointQuery in _VisusDbPy:
_VisusDbPy.PointQuery_swigregister(PointQuery)

class IdxFile(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    version = property(_VisusDbPy.IdxFile_version_get, _VisusDbPy.IdxFile_version_set)
    bitmask = property(_VisusDbPy.IdxFile_bitmask_get, _VisusDbPy.IdxFile_bitmask_set)
    logic_box = property(_VisusDbPy.IdxFile_logic_box_get, _VisusDbPy.IdxFile_logic_box_set)
    bounds = property(_VisusDbPy.IdxFile_bounds_get, _VisusDbPy.IdxFile_bounds_set)
    fields = property(_VisusDbPy.IdxFile_fields_get, _VisusDbPy.IdxFile_fields_set)
    timesteps = property(_VisusDbPy.IdxFile_timesteps_get, _VisusDbPy.IdxFile_timesteps_set)
    bitsperblock = property(_VisusDbPy.IdxFile_bitsperblock_get, _VisusDbPy.IdxFile_bitsperblock_set)
    blocksperfile = property(_VisusDbPy.IdxFile_blocksperfile_get, _VisusDbPy.IdxFile_blocksperfile_set)
    block_interleaving = property(_VisusDbPy.IdxFile_block_interleaving_get, _VisusDbPy.IdxFile_block_interleaving_set)
    filename_template = property(_VisusDbPy.IdxFile_filename_template_get, _VisusDbPy.IdxFile_filename_template_set)
    time_template = property(_VisusDbPy.IdxFile_time_template_get, _VisusDbPy.IdxFile_time_template_set)
    missing_blocks = property(_VisusDbPy.IdxFile_missing_blocks_get, _VisusDbPy.IdxFile_missing_blocks_set)

    def __init__(self, version_=0):
        _VisusDbPy.IdxFile_swiginit(self, _VisusDbPy.new_IdxFile(version_))

    def load(self, *args):
        return _VisusDbPy.IdxFile_load(self, *args)

    def save(self, filename):
        return _VisusDbPy.IdxFile_save(self, filename)

    @staticmethod
    def parseFields(content):
        return _VisusDbPy.IdxFile_parseFields(content)

    def getBlockPositionInFile(self, blockid):
        return _VisusDbPy.IdxFile_getBlockPositionInFile(self, blockid)

    def getFirstBlockInFile(self, blockid):
        return _VisusDbPy.IdxFile_getFirstBlockInFile(self, blockid)

    def guessFilenameTemplate(self, url):
        return _VisusDbPy.IdxFile_guessFilenameTemplate(self, url)

    def validate(self, url):
        return _VisusDbPy.IdxFile_validate(self, url)

    def read(self, ar):
        return _VisusDbPy.IdxFile_read(self, ar)

    def write(self, ar):
        return _VisusDbPy.IdxFile_write(self, ar)

    def toString(self):
        return _VisusDbPy.IdxFile_toString(self)

    def readFromOldFormat(self, content):
        return _VisusDbPy.IdxFile_readFromOldFormat(self, content)

    def writeToOldFormat(self):
        return _VisusDbPy.IdxFile_writeToOldFormat(self)
    __swig_destroy__ = _VisusDbPy.delete_IdxFile

# Register IdxFile in _VisusDbPy:
_VisusDbPy.IdxFile_swigregister(IdxFile)

def IdxFile_parseFields(content):
    return _VisusDbPy.IdxFile_parseFields(content)

class DatasetBitmask(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusDbPy.DatasetBitmask_swiginit(self, _VisusDbPy.new_DatasetBitmask())

    @staticmethod
    def fromString(pattern):
        return _VisusDbPy.DatasetBitmask_fromString(pattern)

    @staticmethod
    def guess(first_letter, dims, makeRegularAsSoonAsPossible=True):
        return _VisusDbPy.DatasetBitmask_guess(first_letter, dims, makeRegularAsSoonAsPossible)

    @staticmethod
    def invalid():
        return _VisusDbPy.DatasetBitmask_invalid()

    def empty(self):
        return _VisusDbPy.DatasetBitmask_empty(self)

    def valid(self):
        return _VisusDbPy.DatasetBitmask_valid(self)

    def getMaxResolution(self):
        return _VisusDbPy.DatasetBitmask_getMaxResolution(self)

    def getPointDim(self):
        return _VisusDbPy.DatasetBitmask_getPointDim(self)

    def getPow2Dims(self):
        return _VisusDbPy.DatasetBitmask_getPow2Dims(self)

    def getPow2Box(self):
        return _VisusDbPy.DatasetBitmask_getPow2Box(self)

    def __getitem__(self, I):
        return _VisusDbPy.DatasetBitmask___getitem__(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetBitmask___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetBitmask___ne__(self, other)

    def deinterleave(self, z, max_resolution):
        return _VisusDbPy.DatasetBitmask_deinterleave(self, z, max_resolution)

    def toString(self):
        return _VisusDbPy.DatasetBitmask_toString(self)

    @staticmethod
    def add(a, b):
        return _VisusDbPy.DatasetBitmask_add(a, b)
    __swig_destroy__ = _VisusDbPy.delete_DatasetBitmask

# Register DatasetBitmask in _VisusDbPy:
_VisusDbPy.DatasetBitmask_swigregister(DatasetBitmask)

def DatasetBitmask_fromString(pattern):
    return _VisusDbPy.DatasetBitmask_fromString(pattern)

def DatasetBitmask_guess(first_letter, dims, makeRegularAsSoonAsPossible=True):
    return _VisusDbPy.DatasetBitmask_guess(first_letter, dims, makeRegularAsSoonAsPossible)

def DatasetBitmask_invalid():
    return _VisusDbPy.DatasetBitmask_invalid()

def DatasetBitmask_add(a, b):
    return _VisusDbPy.DatasetBitmask_add(a, b)

class DatasetTimesteps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _VisusDbPy.DatasetTimesteps_swiginit(self, _VisusDbPy.new_DatasetTimesteps(*args))
    __swig_destroy__ = _VisusDbPy.delete_DatasetTimesteps

    @staticmethod
    def star():
        return _VisusDbPy.DatasetTimesteps_star()

    def clear(self):
        return _VisusDbPy.DatasetTimesteps_clear(self)

    def empty(self):
        return _VisusDbPy.DatasetTimesteps_empty(self)

    def size(self):
        return _VisusDbPy.DatasetTimesteps_size(self)

    def getAt(self, I):
        return _VisusDbPy.DatasetTimesteps_getAt(self, I)

    def __eq__(self, other):
        return _VisusDbPy.DatasetTimesteps___eq__(self, other)

    def __ne__(self, other):
        return _VisusDbPy.DatasetTimesteps___ne__(self, other)

    def containsTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_containsTimestep(self, t)

    def addTimesteps(self, *args):
        return _VisusDbPy.DatasetTimesteps_addTimesteps(self, *args)

    def addTimestep(self, t):
        return _VisusDbPy.DatasetTimesteps_addTimestep(self, t)

    def getDefault(self):
        return _VisusDbPy.DatasetTimesteps_getDefault(self)

    def getMin(self):
        return _VisusDbPy.DatasetTimesteps_getMin(self)

    def getMax(self):
        return _VisusDbPy.DatasetTimesteps_getMax(self)

    def getRange(self):
        return _VisusDbPy.DatasetTimesteps_getRange(self)

    def asVector(self):
        return _VisusDbPy.DatasetTimesteps_asVector(self)

    def toString(self):
        return _VisusDbPy.DatasetTimesteps_toString(self)

    def write(self, ar):
        return _VisusDbPy.DatasetTimesteps_write(self, ar)

    def read(self, ar):
        return _VisusDbPy.DatasetTimesteps_read(self, ar)

# Register DatasetTimesteps in _VisusDbPy:
_VisusDbPy.DatasetTimesteps_swigregister(DatasetTimesteps)

def DatasetTimesteps_star():
    return _VisusDbPy.DatasetTimesteps_star()

class KdQueryMode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    NotSpecified = _VisusDbPy.KdQueryMode_NotSpecified
    UseBlockQuery = _VisusDbPy.KdQueryMode_UseBlockQuery
    UseBoxQuery = _VisusDbPy.KdQueryMode_UseBoxQuery

    @staticmethod
    def fromString(value):
        return _VisusDbPy.KdQueryMode_fromString(value)

    @staticmethod
    def toString(value):
        return _VisusDbPy.KdQueryMode_toString(value)
    __swig_destroy__ = _VisusDbPy.delete_KdQueryMode

# Register KdQueryMode in _VisusDbPy:
_VisusDbPy.KdQueryMode_swigregister(KdQueryMode)

def KdQueryMode_fromString(value):
    return _VisusDbPy.KdQueryMode_fromString(value)

def KdQueryMode_toString(value):
    return _VisusDbPy.KdQueryMode_toString(value)

class Dataset(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    idxfile = property(_VisusDbPy.Dataset_idxfile_get, _VisusDbPy.Dataset_idxfile_set)
    color = property(_VisusDbPy.Dataset_color_get, _VisusDbPy.Dataset_color_set)
    logic_to_LOGIC = property(_VisusDbPy.Dataset_logic_to_LOGIC_get, _VisusDbPy.Dataset_logic_to_LOGIC_set)
    annotations = property(_VisusDbPy.Dataset_annotations_get, _VisusDbPy.Dataset_annotations_set)
    level_samples = property(_VisusDbPy.Dataset_level_samples_get, _VisusDbPy.Dataset_level_samples_set)
    block_samples = property(_VisusDbPy.Dataset_block_samples_get, _VisusDbPy.Dataset_block_samples_set)
    __swig_destroy__ = _VisusDbPy.delete_Dataset

    def getDatasetTypeName(self):
        return _VisusDbPy.Dataset_getDatasetTypeName(self)

    def getPointDim(self):
        return _VisusDbPy.Dataset_getPointDim(self)

    def getBitmask(self):
        return _VisusDbPy.Dataset_getBitmask(self)

    def blocksFullRes(self):
        return _VisusDbPy.Dataset_blocksFullRes(self)

    def isServerMode(self):
        return _VisusDbPy.Dataset_isServerMode(self)

    def setServerMode(self, value):
        return _VisusDbPy.Dataset_setServerMode(self, value)

    def getTimesteps(self):
        return _VisusDbPy.Dataset_getTimesteps(self)

    def setTimesteps(self, value):
        return _VisusDbPy.Dataset_setTimesteps(self, value)

    def getTime(self):
        return _VisusDbPy.Dataset_getTime(self)

    def getAccessConfigs(self):
        return _VisusDbPy.Dataset_getAccessConfigs(self)

    def getDefaultAccessConfig(self):
        return _VisusDbPy.Dataset_getDefaultAccessConfig(self)

    def getKdQueryMode(self):
        return _VisusDbPy.Dataset_getKdQueryMode(self)

    def setKdQueryMode(self, value):
        return _VisusDbPy.Dataset_setKdQueryMode(self, value)

    def getDatasetBody(self):
        return _VisusDbPy.Dataset_getDatasetBody(self)

    def setDatasetBody(self, value):
        return _VisusDbPy.Dataset_setDatasetBody(self, value)

    def getUrl(self):
        return _VisusDbPy.Dataset_getUrl(self)

    def getDefaultBitsPerBlock(self):
        return _VisusDbPy.Dataset_getDefaultBitsPerBlock(self)

    def setDefaultBitsPerBlock(self, value):
        return _VisusDbPy.Dataset_setDefaultBitsPerBlock(self, value)

    def getMaxResolution(self):
        return _VisusDbPy.Dataset_getMaxResolution(self)

    def getTotalNumberOfBlocks(self):
        return _VisusDbPy.Dataset_getTotalNumberOfBlocks(self)

    def setEnableAnnotations(self, value):
        return _VisusDbPy.Dataset_setEnableAnnotations(self, value)

    def getEnableAnnotations(self):
        return _VisusDbPy.Dataset_getEnableAnnotations(self)

    def getLogicBox(self):
        return _VisusDbPy.Dataset_getLogicBox(self)

    def setLogicBox(self, value):
        return _VisusDbPy.Dataset_setLogicBox(self, value)

    def getDatasetBounds(self):
        return _VisusDbPy.Dataset_getDatasetBounds(self)

    def setDatasetBounds(self, value):
        return _VisusDbPy.Dataset_setDatasetBounds(self, value)

    def logicToPhysic(self, *args):
        return _VisusDbPy.Dataset_logicToPhysic(self, *args)

    def physicToLogic(self, *args):
        return _VisusDbPy.Dataset_physicToLogic(self, *args)

    def logicToScreen(self, physic_to_screen):
        return _VisusDbPy.Dataset_logicToScreen(self, physic_to_screen)

    def physicToScreen(self, logic_to_screen):
        return _VisusDbPy.Dataset_physicToScreen(self, logic_to_screen)

    def getFields(self):
        return _VisusDbPy.Dataset_getFields(self)

    def getField(self, *args):
        return _VisusDbPy.Dataset_getField(self, *args)

    def getFieldEx(self, name):
        return _VisusDbPy.Dataset_getFieldEx(self, name)

    def addField(self, *args):
        return _VisusDbPy.Dataset_addField(self, *args)

    def clearFields(self):
        return _VisusDbPy.Dataset_clearFields(self)

    def createAccess(self, *args):
        return _VisusDbPy.Dataset_createAccess(self, *args)

    def createAccessForBlockQuery(self, *args):
        return _VisusDbPy.Dataset_createAccessForBlockQuery(self, *args)

    def createBlockQuery(self, *args):
        return _VisusDbPy.Dataset_createBlockQuery(self, *args)

    def getBlockQuerySamples(self, blockid, H):
        return _VisusDbPy.Dataset_getBlockQuerySamples(self, blockid, H)

    def executeBlockQuery(self, access, query):
        return _VisusDbPy.Dataset_executeBlockQuery(self, access, query)

    def executeBlockQueryAndWait(self, access, query):
        return _VisusDbPy.Dataset_executeBlockQueryAndWait(self, access, query)

    def convertBlockQueryToRowMajor(self, block_query):
        return _VisusDbPy.Dataset_convertBlockQueryToRowMajor(self, block_query)

    def createEquivalentBoxQuery(self, mode, block_query):
        return _VisusDbPy.Dataset_createEquivalentBoxQuery(self, mode, block_query)

    def createBoxQuery(self, *args):
        return _VisusDbPy.Dataset_createBoxQuery(self, *args)

    def createBlockQueriesForBoxQuery(self, query):
        return _VisusDbPy.Dataset_createBlockQueriesForBoxQuery(self, query)

    def guessBoxQueryEndResolution(self, logic_to_screen, logic_position):
        return _VisusDbPy.Dataset_guessBoxQueryEndResolution(self, logic_to_screen, logic_position)

    def beginBoxQuery(self, query):
        return _VisusDbPy.Dataset_beginBoxQuery(self, query)

    def nextBoxQuery(self, query):
        return _VisusDbPy.Dataset_nextBoxQuery(self, query)

    def executeBoxQuery(self, access, query):
        return _VisusDbPy.Dataset_executeBoxQuery(self, access, query)

    def mergeBoxQueryWithBlockQuery(self, query, block_query):
        return _VisusDbPy.Dataset_mergeBoxQueryWithBlockQuery(self, query, block_query)

    def setBoxQueryEndResolution(self, query, value):
        return _VisusDbPy.Dataset_setBoxQueryEndResolution(self, query, value)

    def createBoxQueryRequest(self, query):
        return _VisusDbPy.Dataset_createBoxQueryRequest(self, query)

    def executeBoxQueryOnServer(self, query):
        return _VisusDbPy.Dataset_executeBoxQueryOnServer(self, query)

    def createPointQuery(self, *args):
        return _VisusDbPy.Dataset_createPointQuery(self, *args)

    def createBlockQueriesForPointQuery(self, query):
        return _VisusDbPy.Dataset_createBlockQueriesForPointQuery(self, query)

    def guessPointQueryEndResolution(self, logic_to_screen, logic_position):
        return _VisusDbPy.Dataset_guessPointQueryEndResolution(self, logic_to_screen, logic_position)

    def guessPointQueryNumberOfSamples(self, logic_to_screen, logic_position, end_resolution):
        return _VisusDbPy.Dataset_guessPointQueryNumberOfSamples(self, logic_to_screen, logic_position, end_resolution)

    def beginPointQuery(self, query):
        return _VisusDbPy.Dataset_beginPointQuery(self, query)

    def executePointQuery(self, access, query):
        return _VisusDbPy.Dataset_executePointQuery(self, access, query)

    def mergePointQueryWithBlockQuery(self, query, block_query):
        return _VisusDbPy.Dataset_mergePointQueryWithBlockQuery(self, query, block_query)

    def nextPointQuery(self, query):
        return _VisusDbPy.Dataset_nextPointQuery(self, query)

    def createPointQueryRequest(self, query):
        return _VisusDbPy.Dataset_createPointQueryRequest(self, query)

    def executePointQueryOnServer(self, query):
        return _VisusDbPy.Dataset_executePointQueryOnServer(self, query)

    def adjustBoxQueryFilterBox(self, query, filter, box, H):
        return _VisusDbPy.Dataset_adjustBoxQueryFilterBox(self, query, filter, box, H)

    def createFilter(self, field):
        return _VisusDbPy.Dataset_createFilter(self, field)

    def computeFilter(self, *args):
        return _VisusDbPy.Dataset_computeFilter(self, *args)

    def executeBlockQuerWithFilters(self, access, query, filter):
        return _VisusDbPy.Dataset_executeBlockQuerWithFilters(self, access, query, filter)

    @staticmethod
    def insertSamples(Wsamples, Wbuffer, Rsamples, Rbuffer, aborted):
        return _VisusDbPy.Dataset_insertSamples(Wsamples, Wbuffer, Rsamples, Rbuffer, aborted)

    def compressDataset(self, *args):
        return _VisusDbPy.Dataset_compressDataset(self, *args)

    def readDatasetFromArchive(self, ar):
        return _VisusDbPy.Dataset_readDatasetFromArchive(self, ar)

# Register Dataset in _VisusDbPy:
_VisusDbPy.Dataset_swigregister(Dataset)

def Dataset_insertSamples(Wsamples, Wbuffer, Rsamples, Rbuffer, aborted):
    return _VisusDbPy.Dataset_insertSamples(Wsamples, Wbuffer, Rsamples, Rbuffer, aborted)

class DatasetFactory(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _VisusDbPy.DatasetFactory_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _VisusDbPy.DatasetFactory_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _VisusDbPy.DatasetFactory_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _VisusDbPy.DatasetFactory_releaseSingleton()

    def registerDatasetType(self, TypeName, createInstance):
        return _VisusDbPy.DatasetFactory_registerDatasetType(self, TypeName, createInstance)

    def createInstance(self, TypeName):
        return _VisusDbPy.DatasetFactory_createInstance(self, TypeName)
    __swig_destroy__ = _VisusDbPy.delete_DatasetFactory

# Register DatasetFactory in _VisusDbPy:
_VisusDbPy.DatasetFactory_swigregister(DatasetFactory)

def DatasetFactory_getSingleton():
    return _VisusDbPy.DatasetFactory_getSingleton()

def DatasetFactory_setSingleton(value):
    return _VisusDbPy.DatasetFactory_setSingleton(value)

def DatasetFactory_allocSingleton():
    return _VisusDbPy.DatasetFactory_allocSingleton()

def DatasetFactory_releaseSingleton():
    return _VisusDbPy.DatasetFactory_releaseSingleton()


def FindDatasetConfig(ar, url):
    return _VisusDbPy.FindDatasetConfig(ar, url)

def LoadDatasetEx(ar):
    return _VisusDbPy.LoadDatasetEx(ar)

def LoadDatasetCpp(url):
    return _VisusDbPy.LoadDatasetCpp(url)
class ModVisus(VisusKernelPy.NetServerModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    default_public = property(_VisusDbPy.ModVisus_default_public_get, _VisusDbPy.ModVisus_default_public_set)

    def __init__(self):
        _VisusDbPy.ModVisus_swiginit(self, _VisusDbPy.new_ModVisus())
    __swig_destroy__ = _VisusDbPy.delete_ModVisus

    def configureDatasets(self, *args):
        return _VisusDbPy.ModVisus_configureDatasets(self, *args)

    def handleRequest(self, request):
        return _VisusDbPy.ModVisus_handleRequest(self, request)

# Register ModVisus in _VisusDbPy:
_VisusDbPy.ModVisus_swigregister(ModVisus)

class IdxDataset(Dataset):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusDbPy.IdxDataset_swiginit(self, _VisusDbPy.new_IdxDataset())
    __swig_destroy__ = _VisusDbPy.delete_IdxDataset

    @staticmethod
    def castFrom(db):
        return _VisusDbPy.IdxDataset_castFrom(db)

    def getDatasetTypeName(self):
        return _VisusDbPy.IdxDataset_getDatasetTypeName(self)

    def createBlockQueriesForBoxQuery(self, query):
        return _VisusDbPy.IdxDataset_createBlockQueriesForBoxQuery(self, query)

    def mergeBoxQueryWithBlockQuery(self, query, block_query):
        return _VisusDbPy.IdxDataset_mergeBoxQueryWithBlockQuery(self, query, block_query)

    def createBlockQueriesForPointQuery(self, query):
        return _VisusDbPy.IdxDataset_createBlockQueriesForPointQuery(self, query)

    def readDatasetFromArchive(self, ar):
        return _VisusDbPy.IdxDataset_readDatasetFromArchive(self, ar)

# Register IdxDataset in _VisusDbPy:
_VisusDbPy.IdxDataset_swigregister(IdxDataset)

def IdxDataset_castFrom(db):
    return _VisusDbPy.IdxDataset_castFrom(db)


def SelfTestIdx(max_seconds=300):
    return _VisusDbPy.SelfTestIdx(max_seconds)
class IdxDiskAccess(Access):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusDbPy.delete_IdxDiskAccess

    @staticmethod
    def create(dataset):
        return _VisusDbPy.IdxDiskAccess_create(dataset)

    def disableAsync(self):
        return _VisusDbPy.IdxDiskAccess_disableAsync(self)

    def disableWriteLock(self):
        return _VisusDbPy.IdxDiskAccess_disableWriteLock(self)

    def getFilename(self, field, time, blockid):
        return _VisusDbPy.IdxDiskAccess_getFilename(self, field, time, blockid)

    def beginIO(self, mode):
        return _VisusDbPy.IdxDiskAccess_beginIO(self, mode)

    def readBlock(self, query):
        return _VisusDbPy.IdxDiskAccess_readBlock(self, query)

    def writeBlock(self, query):
        return _VisusDbPy.IdxDiskAccess_writeBlock(self, query)

    def endIO(self):
        return _VisusDbPy.IdxDiskAccess_endIO(self)

    def acquireWriteLock(self, query):
        return _VisusDbPy.IdxDiskAccess_acquireWriteLock(self, query)

    def releaseWriteLock(self, query):
        return _VisusDbPy.IdxDiskAccess_releaseWriteLock(self, query)

# Register IdxDiskAccess in _VisusDbPy:
_VisusDbPy.IdxDiskAccess_swigregister(IdxDiskAccess)

def IdxDiskAccess_create(dataset):
    return _VisusDbPy.IdxDiskAccess_create(dataset)

class IdxMultipleDataset(IdxDataset):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    DebugSaveImages = _VisusDbPy.IdxMultipleDataset_DebugSaveImages
    DebugSkipReading = _VisusDbPy.IdxMultipleDataset_DebugSkipReading
    DebugAll = _VisusDbPy.IdxMultipleDataset_DebugAll
    debug_mode = property(_VisusDbPy.IdxMultipleDataset_debug_mode_get, _VisusDbPy.IdxMultipleDataset_debug_mode_set)
    down_datasets = property(_VisusDbPy.IdxMultipleDataset_down_datasets_get, _VisusDbPy.IdxMultipleDataset_down_datasets_set)

    def __init__(self):
        _VisusDbPy.IdxMultipleDataset_swiginit(self, _VisusDbPy.new_IdxMultipleDataset())
    __swig_destroy__ = _VisusDbPy.delete_IdxMultipleDataset

    @staticmethod
    def castFrom(db):
        return _VisusDbPy.IdxMultipleDataset_castFrom(db)

    def getDatasetTypeName(self):
        return _VisusDbPy.IdxMultipleDataset_getDatasetTypeName(self)

    def getChild(self, name):
        return _VisusDbPy.IdxMultipleDataset_getChild(self, name)

    def getFirstChild(self):
        return _VisusDbPy.IdxMultipleDataset_getFirstChild(self)

    def addChild(self, name, value):
        return _VisusDbPy.IdxMultipleDataset_addChild(self, name, value)

    def getFieldEx(self, name):
        return _VisusDbPy.IdxMultipleDataset_getFieldEx(self, name)

    def beginBoxQuery(self, query):
        return _VisusDbPy.IdxMultipleDataset_beginBoxQuery(self, query)

    def nextBoxQuery(self, QUERY):
        return _VisusDbPy.IdxMultipleDataset_nextBoxQuery(self, QUERY)

    def executeBoxQuery(self, ACCESS, QUERY):
        return _VisusDbPy.IdxMultipleDataset_executeBoxQuery(self, ACCESS, QUERY)

    @staticmethod
    def getInputName(dataset_name, fieldname):
        return _VisusDbPy.IdxMultipleDataset_getInputName(dataset_name, fieldname)

    def executeDownQuery(self, QUERY, ACCESS, dataset_name, fieldname):
        return _VisusDbPy.IdxMultipleDataset_executeDownQuery(self, QUERY, ACCESS, dataset_name, fieldname)

    def computeOuput(self, QUERY, ACCESS, aborted, CODE):
        return _VisusDbPy.IdxMultipleDataset_computeOuput(self, QUERY, ACCESS, aborted, CODE)

    def readDatasetFromArchive(self, ar):
        return _VisusDbPy.IdxMultipleDataset_readDatasetFromArchive(self, ar)

# Register IdxMultipleDataset in _VisusDbPy:
_VisusDbPy.IdxMultipleDataset_swigregister(IdxMultipleDataset)

def IdxMultipleDataset_castFrom(db):
    return _VisusDbPy.IdxMultipleDataset_castFrom(db)

def IdxMultipleDataset_getInputName(dataset_name, fieldname):
    return _VisusDbPy.IdxMultipleDataset_getInputName(dataset_name, fieldname)

class VisusConvert(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _VisusDbPy.VisusConvert_swiginit(self, _VisusDbPy.new_VisusConvert())

    def getHelp(self):
        return _VisusDbPy.VisusConvert_getHelp(self)

    def runFromArgs(self, args):
        return _VisusDbPy.VisusConvert_runFromArgs(self, args)
    __swig_destroy__ = _VisusDbPy.delete_VisusConvert

# Register VisusConvert in _VisusDbPy:
_VisusDbPy.VisusConvert_swigregister(VisusConvert)



