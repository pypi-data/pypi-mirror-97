# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



import os,sys,platform,math

__this_dir__= os.path.dirname(os.path.abspath(__file__))

WIN32=platform.system()=="Windows" or platform.system()=="win32"
if WIN32:

# this is needed to find swig generated *.py file and DLLs
	def AddSysPath(value):
		os.environ['PATH'] = value + os.pathsep + os.environ['PATH']
		sys.path.insert(0,value)
		if hasattr(os,'add_dll_directory'): 
			os.add_dll_directory(value) # this is needed for python 38  

	AddSysPath(__this_dir__)
	AddSysPath(os.path.join(__this_dir__,"bin"))

else:

# this is needed to find swig generated *.py file
	sys.path.append(__this_dir__)




from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _VisusXIdxPy
else:
    import _VisusXIdxPy

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _VisusXIdxPy.delete_SwigPyIterator

    def value(self):
        return _VisusXIdxPy.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _VisusXIdxPy.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _VisusXIdxPy.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _VisusXIdxPy.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _VisusXIdxPy.SwigPyIterator_equal(self, x)

    def copy(self):
        return _VisusXIdxPy.SwigPyIterator_copy(self)

    def next(self):
        return _VisusXIdxPy.SwigPyIterator_next(self)

    def __next__(self):
        return _VisusXIdxPy.SwigPyIterator___next__(self)

    def previous(self):
        return _VisusXIdxPy.SwigPyIterator_previous(self)

    def advance(self, n):
        return _VisusXIdxPy.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _VisusXIdxPy.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _VisusXIdxPy.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _VisusXIdxPy.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _VisusXIdxPy.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _VisusXIdxPy.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _VisusXIdxPy.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _VisusXIdxPy:
_VisusXIdxPy.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _VisusXIdxPy.SHARED_PTR_DISOWN
import VisusKernelPy
class XIdxModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_VisusXIdxPy.XIdxModule_bAttached_get, _VisusXIdxPy.XIdxModule_bAttached_set)

    @staticmethod
    def attach():
        return _VisusXIdxPy.XIdxModule_attach()

    @staticmethod
    def detach():
        return _VisusXIdxPy.XIdxModule_detach()

    def __init__(self):
        _VisusXIdxPy.XIdxModule_swiginit(self, _VisusXIdxPy.new_XIdxModule())
    __swig_destroy__ = _VisusXIdxPy.delete_XIdxModule

# Register XIdxModule in _VisusXIdxPy:
_VisusXIdxPy.XIdxModule_swigregister(XIdxModule)
cvar = _VisusXIdxPy.cvar

def XIdxModule_attach():
    return _VisusXIdxPy.XIdxModule_attach()

def XIdxModule_detach():
    return _VisusXIdxPy.XIdxModule_detach()

class VectorOfAttribute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfAttribute_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfAttribute___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfAttribute___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfAttribute___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfAttribute___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfAttribute___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfAttribute___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfAttribute_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfAttribute_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfAttribute_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfAttribute_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfAttribute_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfAttribute_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfAttribute_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfAttribute_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfAttribute_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfAttribute_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfAttribute_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfAttribute_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfAttribute_erase(self, *args)

    def __init__(self, *args):
        _VisusXIdxPy.VectorOfAttribute_swiginit(self, _VisusXIdxPy.new_VectorOfAttribute(*args))

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfAttribute_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfAttribute_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfAttribute_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfAttribute_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfAttribute_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfAttribute_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfAttribute_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfAttribute_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfAttribute

# Register VectorOfAttribute in _VisusXIdxPy:
_VisusXIdxPy.VectorOfAttribute_swigregister(VectorOfAttribute)

class VectorOfDataItem(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfDataItem_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfDataItem___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfDataItem___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfDataItem___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataItem___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataItem___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataItem___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfDataItem_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfDataItem_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfDataItem_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfDataItem_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfDataItem_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfDataItem_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfDataItem_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfDataItem_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfDataItem_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfDataItem_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfDataItem_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfDataItem_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfDataItem_erase(self, *args)

    def __init__(self, *args):
        _VisusXIdxPy.VectorOfDataItem_swiginit(self, _VisusXIdxPy.new_VectorOfDataItem(*args))

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfDataItem_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfDataItem_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfDataItem_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfDataItem_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfDataItem_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfDataItem_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfDataItem_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfDataItem_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfDataItem

# Register VectorOfDataItem in _VisusXIdxPy:
_VisusXIdxPy.VectorOfDataItem_swigregister(VectorOfDataItem)

class VectorOfXIdxElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfXIdxElement_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfXIdxElement___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfXIdxElement___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfXIdxElement___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfXIdxElement___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfXIdxElement___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfXIdxElement_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfXIdxElement_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfXIdxElement_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfXIdxElement_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfXIdxElement_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfXIdxElement_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfXIdxElement_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfXIdxElement_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfXIdxElement_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfXIdxElement_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfXIdxElement_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfXIdxElement_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement_erase(self, *args)

    def __init__(self, *args):
        _VisusXIdxPy.VectorOfXIdxElement_swiginit(self, _VisusXIdxPy.new_VectorOfXIdxElement(*args))

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfXIdxElement_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfXIdxElement_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfXIdxElement_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfXIdxElement_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfXIdxElement_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfXIdxElement_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfXIdxElement_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfXIdxElement

# Register VectorOfXIdxElement in _VisusXIdxPy:
_VisusXIdxPy.VectorOfXIdxElement_swigregister(VectorOfXIdxElement)

class VectorOfGroup(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfGroup_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfGroup___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfGroup___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfGroup___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfGroup___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfGroup___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfGroup___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfGroup_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfGroup_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfGroup_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfGroup_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfGroup_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfGroup_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfGroup_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfGroup_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfGroup_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfGroup_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfGroup_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfGroup_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfGroup_erase(self, *args)

    def __init__(self, *args):
        _VisusXIdxPy.VectorOfGroup_swiginit(self, _VisusXIdxPy.new_VectorOfGroup(*args))

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfGroup_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfGroup_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfGroup_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfGroup_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfGroup_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfGroup_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfGroup_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfGroup_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfGroup

# Register VectorOfGroup in _VisusXIdxPy:
_VisusXIdxPy.VectorOfGroup_swigregister(VectorOfGroup)

class VectorOfVariable(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfVariable_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfVariable___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfVariable___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfVariable___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfVariable___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfVariable___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfVariable___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfVariable_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfVariable_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfVariable_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfVariable_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfVariable_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfVariable_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfVariable_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfVariable_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfVariable_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfVariable_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfVariable_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfVariable_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfVariable_erase(self, *args)

    def __init__(self, *args):
        _VisusXIdxPy.VectorOfVariable_swiginit(self, _VisusXIdxPy.new_VectorOfVariable(*args))

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfVariable_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfVariable_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfVariable_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfVariable_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfVariable_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfVariable_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfVariable_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfVariable_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfVariable

# Register VectorOfVariable in _VisusXIdxPy:
_VisusXIdxPy.VectorOfVariable_swigregister(VectorOfVariable)

class VectorOfDataSource(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _VisusXIdxPy.VectorOfDataSource_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _VisusXIdxPy.VectorOfDataSource___nonzero__(self)

    def __bool__(self):
        return _VisusXIdxPy.VectorOfDataSource___bool__(self)

    def __len__(self):
        return _VisusXIdxPy.VectorOfDataSource___len__(self)

    def __getslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataSource___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _VisusXIdxPy.VectorOfDataSource___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___delitem__(self, *args)

    def __getitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___getitem__(self, *args)

    def __setitem__(self, *args):
        return _VisusXIdxPy.VectorOfDataSource___setitem__(self, *args)

    def pop(self):
        return _VisusXIdxPy.VectorOfDataSource_pop(self)

    def append(self, x):
        return _VisusXIdxPy.VectorOfDataSource_append(self, x)

    def empty(self):
        return _VisusXIdxPy.VectorOfDataSource_empty(self)

    def size(self):
        return _VisusXIdxPy.VectorOfDataSource_size(self)

    def swap(self, v):
        return _VisusXIdxPy.VectorOfDataSource_swap(self, v)

    def begin(self):
        return _VisusXIdxPy.VectorOfDataSource_begin(self)

    def end(self):
        return _VisusXIdxPy.VectorOfDataSource_end(self)

    def rbegin(self):
        return _VisusXIdxPy.VectorOfDataSource_rbegin(self)

    def rend(self):
        return _VisusXIdxPy.VectorOfDataSource_rend(self)

    def clear(self):
        return _VisusXIdxPy.VectorOfDataSource_clear(self)

    def get_allocator(self):
        return _VisusXIdxPy.VectorOfDataSource_get_allocator(self)

    def pop_back(self):
        return _VisusXIdxPy.VectorOfDataSource_pop_back(self)

    def erase(self, *args):
        return _VisusXIdxPy.VectorOfDataSource_erase(self, *args)

    def __init__(self, *args):
        _VisusXIdxPy.VectorOfDataSource_swiginit(self, _VisusXIdxPy.new_VectorOfDataSource(*args))

    def push_back(self, x):
        return _VisusXIdxPy.VectorOfDataSource_push_back(self, x)

    def front(self):
        return _VisusXIdxPy.VectorOfDataSource_front(self)

    def back(self):
        return _VisusXIdxPy.VectorOfDataSource_back(self)

    def assign(self, n, x):
        return _VisusXIdxPy.VectorOfDataSource_assign(self, n, x)

    def resize(self, *args):
        return _VisusXIdxPy.VectorOfDataSource_resize(self, *args)

    def insert(self, *args):
        return _VisusXIdxPy.VectorOfDataSource_insert(self, *args)

    def reserve(self, n):
        return _VisusXIdxPy.VectorOfDataSource_reserve(self, n)

    def capacity(self):
        return _VisusXIdxPy.VectorOfDataSource_capacity(self)
    __swig_destroy__ = _VisusXIdxPy.delete_VectorOfDataSource

# Register VectorOfDataSource in _VisusXIdxPy:
_VisusXIdxPy.VectorOfDataSource_swigregister(VectorOfDataSource)


def XIdxFormatString(*args):
    return _VisusXIdxPy.XIdxFormatString(*args)
class XIdxElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.XIdxElement_getXIdxTypeName(self)
    name = property(_VisusXIdxPy.XIdxElement_name_get, _VisusXIdxPy.XIdxElement_name_set)

    def __init__(self, *args):
        _VisusXIdxPy.XIdxElement_swiginit(self, _VisusXIdxPy.new_XIdxElement(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_XIdxElement

    def getParent(self):
        return _VisusXIdxPy.XIdxElement_getParent(self)

    def hasChild(self, child):
        return _VisusXIdxPy.XIdxElement_hasChild(self, child)

    @staticmethod
    def addEdge(parent, child):
        return _VisusXIdxPy.XIdxElement_addEdge(parent, child)

    @staticmethod
    def removeEdge(parent, child):
        return _VisusXIdxPy.XIdxElement_removeEdge(parent, child)

    def getXPathPrefix(self):
        return _VisusXIdxPy.XIdxElement_getXPathPrefix(self)

    def findChildWithName(self, name):
        return _VisusXIdxPy.XIdxElement_findChildWithName(self, name)

    def write(self, ar):
        return _VisusXIdxPy.XIdxElement_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.XIdxElement_read(self, ar)

# Register XIdxElement in _VisusXIdxPy:
_VisusXIdxPy.XIdxElement_swigregister(XIdxElement)

def XIdxElement_addEdge(parent, child):
    return _VisusXIdxPy.XIdxElement_addEdge(parent, child)

def XIdxElement_removeEdge(parent, child):
    return _VisusXIdxPy.XIdxElement_removeEdge(parent, child)

class DataSource(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.DataSource_getXIdxTypeName(self)
    url = property(_VisusXIdxPy.DataSource_url_get, _VisusXIdxPy.DataSource_url_set)
    use_cdata = property(_VisusXIdxPy.DataSource_use_cdata_get, _VisusXIdxPy.DataSource_use_cdata_set)

    def __init__(self, *args):
        _VisusXIdxPy.DataSource_swiginit(self, _VisusXIdxPy.new_DataSource(*args))

    def getXPathPrefix(self):
        return _VisusXIdxPy.DataSource_getXPathPrefix(self)

    def write(self, ar):
        return _VisusXIdxPy.DataSource_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.DataSource_read(self, ar)
    __swig_destroy__ = _VisusXIdxPy.delete_DataSource

# Register DataSource in _VisusXIdxPy:
_VisusXIdxPy.DataSource_swigregister(DataSource)

class Attribute(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Attribute_getXIdxTypeName(self)
    value = property(_VisusXIdxPy.Attribute_value_get, _VisusXIdxPy.Attribute_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.Attribute_swiginit(self, _VisusXIdxPy.new_Attribute(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_Attribute

    def write(self, ar):
        return _VisusXIdxPy.Attribute_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Attribute_read(self, ar)

# Register Attribute in _VisusXIdxPy:
_VisusXIdxPy.Attribute_swigregister(Attribute)

class Endianess(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    LITTLE_ENDIANESS = _VisusXIdxPy.Endianess_LITTLE_ENDIANESS
    BIG_ENDIANESS = _VisusXIdxPy.Endianess_BIG_ENDIANESS
    NATIVE_ENDIANESS = _VisusXIdxPy.Endianess_NATIVE_ENDIANESS
    END_ENUM = _VisusXIdxPy.Endianess_END_ENUM
    value = property(_VisusXIdxPy.Endianess_value_get, _VisusXIdxPy.Endianess_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.Endianess_swiginit(self, _VisusXIdxPy.new_Endianess(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.Endianess_fromString(value)

    def toString(self):
        return _VisusXIdxPy.Endianess_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.Endianess___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_Endianess

# Register Endianess in _VisusXIdxPy:
_VisusXIdxPy.Endianess_swigregister(Endianess)

def Endianess_fromString(value):
    return _VisusXIdxPy.Endianess_fromString(value)

class FormatType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    XML_FORMAT = _VisusXIdxPy.FormatType_XML_FORMAT
    HDF_FORMAT = _VisusXIdxPy.FormatType_HDF_FORMAT
    BINARY_FORMAT = _VisusXIdxPy.FormatType_BINARY_FORMAT
    TIFF_FORMAT = _VisusXIdxPy.FormatType_TIFF_FORMAT
    IDX_FORMAT = _VisusXIdxPy.FormatType_IDX_FORMAT
    END_ENUM = _VisusXIdxPy.FormatType_END_ENUM
    value = property(_VisusXIdxPy.FormatType_value_get, _VisusXIdxPy.FormatType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.FormatType_swiginit(self, _VisusXIdxPy.new_FormatType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.FormatType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.FormatType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.FormatType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_FormatType

# Register FormatType in _VisusXIdxPy:
_VisusXIdxPy.FormatType_swigregister(FormatType)

def FormatType_fromString(value):
    return _VisusXIdxPy.FormatType_fromString(value)

class DataItem(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    dimensions = property(_VisusXIdxPy.DataItem_dimensions_get, _VisusXIdxPy.DataItem_dimensions_set)
    reference = property(_VisusXIdxPy.DataItem_reference_get, _VisusXIdxPy.DataItem_reference_set)
    endian_type = property(_VisusXIdxPy.DataItem_endian_type_get, _VisusXIdxPy.DataItem_endian_type_set)
    format_type = property(_VisusXIdxPy.DataItem_format_type_get, _VisusXIdxPy.DataItem_format_type_set)
    dtype = property(_VisusXIdxPy.DataItem_dtype_get, _VisusXIdxPy.DataItem_dtype_set)
    text = property(_VisusXIdxPy.DataItem_text_get, _VisusXIdxPy.DataItem_text_set)
    values = property(_VisusXIdxPy.DataItem_values_get, _VisusXIdxPy.DataItem_values_set)
    attributes = property(_VisusXIdxPy.DataItem_attributes_get, _VisusXIdxPy.DataItem_attributes_set)
    data_source = property(_VisusXIdxPy.DataItem_data_source_get, _VisusXIdxPy.DataItem_data_source_set)

    def __init__(self, *args):
        _VisusXIdxPy.DataItem_swiginit(self, _VisusXIdxPy.new_DataItem(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_DataItem

    def setDataSource(self, disown):
        return _VisusXIdxPy.DataItem_setDataSource(self, disown)

    def addAttribute(self, disown):
        return _VisusXIdxPy.DataItem_addAttribute(self, disown)

    def getVolume(self):
        return _VisusXIdxPy.DataItem_getVolume(self)

    def setValues(self, values, stride=1):
        return _VisusXIdxPy.DataItem_setValues(self, values, stride)

    def addValue(self, val, stride=1):
        return _VisusXIdxPy.DataItem_addValue(self, val, stride)

    def getXPathPrefix(self):
        return _VisusXIdxPy.DataItem_getXPathPrefix(self)

    def findDataSource(self):
        return _VisusXIdxPy.DataItem_findDataSource(self)

    def write(self, ar):
        return _VisusXIdxPy.DataItem_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.DataItem_read(self, ar)

# Register DataItem in _VisusXIdxPy:
_VisusXIdxPy.DataItem_swigregister(DataItem)

class CenterType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NODE_CENTER = _VisusXIdxPy.CenterType_NODE_CENTER
    CELL_CENTER = _VisusXIdxPy.CenterType_CELL_CENTER
    GRID_CENTER = _VisusXIdxPy.CenterType_GRID_CENTER
    FACE_CENTER = _VisusXIdxPy.CenterType_FACE_CENTER
    EDGE_CENTER = _VisusXIdxPy.CenterType_EDGE_CENTER
    END_ENUM = _VisusXIdxPy.CenterType_END_ENUM
    value = property(_VisusXIdxPy.CenterType_value_get, _VisusXIdxPy.CenterType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.CenterType_swiginit(self, _VisusXIdxPy.new_CenterType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.CenterType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.CenterType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.CenterType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_CenterType

# Register CenterType in _VisusXIdxPy:
_VisusXIdxPy.CenterType_swigregister(CenterType)

def CenterType_fromString(value):
    return _VisusXIdxPy.CenterType_fromString(value)

class Variable(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Variable_getXIdxTypeName(self)
    center_type = property(_VisusXIdxPy.Variable_center_type_get, _VisusXIdxPy.Variable_center_type_set)
    attributes = property(_VisusXIdxPy.Variable_attributes_get, _VisusXIdxPy.Variable_attributes_set)
    data_items = property(_VisusXIdxPy.Variable_data_items_get, _VisusXIdxPy.Variable_data_items_set)

    def __init__(self, *args):
        _VisusXIdxPy.Variable_swiginit(self, _VisusXIdxPy.new_Variable(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_Variable

    def setValues(self, values, stride=1):
        return _VisusXIdxPy.Variable_setValues(self, values, stride)

    def getValues(self, axis=0):
        return _VisusXIdxPy.Variable_getValues(self, axis)

    def getVolume(self):
        return _VisusXIdxPy.Variable_getVolume(self)

    def addAttribute(self, *args):
        return _VisusXIdxPy.Variable_addAttribute(self, *args)

    def addDataItem(self, disown):
        return _VisusXIdxPy.Variable_addDataItem(self, disown)

    def addValue(self, v):
        return _VisusXIdxPy.Variable_addValue(self, v)

    def write(self, ar):
        return _VisusXIdxPy.Variable_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Variable_read(self, ar)

# Register Variable in _VisusXIdxPy:
_VisusXIdxPy.Variable_swigregister(Variable)

class DomainType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    HYPER_SLAB_DOMAIN_TYPE = _VisusXIdxPy.DomainType_HYPER_SLAB_DOMAIN_TYPE
    LIST_DOMAIN_TYPE = _VisusXIdxPy.DomainType_LIST_DOMAIN_TYPE
    MULTIAXIS_DOMAIN_TYPE = _VisusXIdxPy.DomainType_MULTIAXIS_DOMAIN_TYPE
    SPATIAL_DOMAIN_TYPE = _VisusXIdxPy.DomainType_SPATIAL_DOMAIN_TYPE
    RANGE_DOMAIN_TYPE = _VisusXIdxPy.DomainType_RANGE_DOMAIN_TYPE
    END_ENUM = _VisusXIdxPy.DomainType_END_ENUM
    value = property(_VisusXIdxPy.DomainType_value_get, _VisusXIdxPy.DomainType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.DomainType_swiginit(self, _VisusXIdxPy.new_DomainType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.DomainType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.DomainType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.DomainType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_DomainType

# Register DomainType in _VisusXIdxPy:
_VisusXIdxPy.DomainType_swigregister(DomainType)

def DomainType_fromString(value):
    return _VisusXIdxPy.DomainType_fromString(value)

class Domain(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Domain_getXIdxTypeName(self)
    type = property(_VisusXIdxPy.Domain_type_get, _VisusXIdxPy.Domain_type_set)
    attributes = property(_VisusXIdxPy.Domain_attributes_get, _VisusXIdxPy.Domain_attributes_set)
    data_items = property(_VisusXIdxPy.Domain_data_items_get, _VisusXIdxPy.Domain_data_items_set)
    __swig_destroy__ = _VisusXIdxPy.delete_Domain

    def ensureDataItem(self):
        return _VisusXIdxPy.Domain_ensureDataItem(self)

    @staticmethod
    def createDomain(type):
        return _VisusXIdxPy.Domain_createDomain(type)

    def addDataItem(self, disown):
        return _VisusXIdxPy.Domain_addDataItem(self, disown)

    def addAttribute(self, *args):
        return _VisusXIdxPy.Domain_addAttribute(self, *args)

    def getVolume(self):
        return _VisusXIdxPy.Domain_getVolume(self)

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.Domain_getLinearizedIndexSpace(self)

    def write(self, ar):
        return _VisusXIdxPy.Domain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Domain_read(self, ar)

# Register Domain in _VisusXIdxPy:
_VisusXIdxPy.Domain_swigregister(Domain)

def Domain_createDomain(type):
    return _VisusXIdxPy.Domain_createDomain(type)

class GroupType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    SPATIAL_GROUP_TYPE = _VisusXIdxPy.GroupType_SPATIAL_GROUP_TYPE
    TEMPORAL_GROUP_TYPE = _VisusXIdxPy.GroupType_TEMPORAL_GROUP_TYPE
    END_ENUM = _VisusXIdxPy.GroupType_END_ENUM
    value = property(_VisusXIdxPy.GroupType_value_get, _VisusXIdxPy.GroupType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.GroupType_swiginit(self, _VisusXIdxPy.new_GroupType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.GroupType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.GroupType_toString(self)
    __swig_destroy__ = _VisusXIdxPy.delete_GroupType

# Register GroupType in _VisusXIdxPy:
_VisusXIdxPy.GroupType_swigregister(GroupType)

def GroupType_fromString(value):
    return _VisusXIdxPy.GroupType_fromString(value)

class VariabilityType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    STATIC_VARIABILITY_TYPE = _VisusXIdxPy.VariabilityType_STATIC_VARIABILITY_TYPE
    VARIABLE_VARIABILITY_TYPE = _VisusXIdxPy.VariabilityType_VARIABLE_VARIABILITY_TYPE
    END_ENUM = _VisusXIdxPy.VariabilityType_END_ENUM
    value = property(_VisusXIdxPy.VariabilityType_value_get, _VisusXIdxPy.VariabilityType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.VariabilityType_swiginit(self, _VisusXIdxPy.new_VariabilityType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.VariabilityType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.VariabilityType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.VariabilityType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_VariabilityType

# Register VariabilityType in _VisusXIdxPy:
_VisusXIdxPy.VariabilityType_swigregister(VariabilityType)

def VariabilityType_fromString(value):
    return _VisusXIdxPy.VariabilityType_fromString(value)

class Group(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Group_getXIdxTypeName(self)
    domain_index = property(_VisusXIdxPy.Group_domain_index_get, _VisusXIdxPy.Group_domain_index_set)
    file_pattern = property(_VisusXIdxPy.Group_file_pattern_get, _VisusXIdxPy.Group_file_pattern_set)
    group_type = property(_VisusXIdxPy.Group_group_type_get, _VisusXIdxPy.Group_group_type_set)
    variability_type = property(_VisusXIdxPy.Group_variability_type_get, _VisusXIdxPy.Group_variability_type_set)
    domain = property(_VisusXIdxPy.Group_domain_get, _VisusXIdxPy.Group_domain_set)
    variables = property(_VisusXIdxPy.Group_variables_get, _VisusXIdxPy.Group_variables_set)
    data_sources = property(_VisusXIdxPy.Group_data_sources_get, _VisusXIdxPy.Group_data_sources_set)
    attributes = property(_VisusXIdxPy.Group_attributes_get, _VisusXIdxPy.Group_attributes_set)
    groups = property(_VisusXIdxPy.Group_groups_get, _VisusXIdxPy.Group_groups_set)

    def __init__(self, *args):
        _VisusXIdxPy.Group_swiginit(self, _VisusXIdxPy.new_Group(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_Group

    def setDomain(self, disown):
        return _VisusXIdxPy.Group_setDomain(self, disown)

    def getDomain(self):
        return _VisusXIdxPy.Group_getDomain(self)

    def getGroup(self, index):
        return _VisusXIdxPy.Group_getGroup(self, index)

    def addVariable(self, *args):
        return _VisusXIdxPy.Group_addVariable(self, *args)

    def addAttribute(self, disown):
        return _VisusXIdxPy.Group_addAttribute(self, disown)

    def addDataSource(self, disown):
        return _VisusXIdxPy.Group_addDataSource(self, disown)

    def addGroup(self, disown):
        return _VisusXIdxPy.Group_addGroup(self, disown)

    def getXPathPrefix(self):
        return _VisusXIdxPy.Group_getXPathPrefix(self)

    def write(self, ar):
        return _VisusXIdxPy.Group_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Group_read(self, ar)

# Register Group in _VisusXIdxPy:
_VisusXIdxPy.Group_swigregister(Group)

class XIdxFile(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    groups = property(_VisusXIdxPy.XIdxFile_groups_get, _VisusXIdxPy.XIdxFile_groups_set)
    file_pattern = property(_VisusXIdxPy.XIdxFile_file_pattern_get, _VisusXIdxPy.XIdxFile_file_pattern_set)

    def __init__(self, *args):
        _VisusXIdxPy.XIdxFile_swiginit(self, _VisusXIdxPy.new_XIdxFile(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_XIdxFile

    def addGroup(self, disown):
        return _VisusXIdxPy.XIdxFile_addGroup(self, disown)

    def getXPathPrefix(self):
        return _VisusXIdxPy.XIdxFile_getXPathPrefix(self)

    def getGroup(self, type):
        return _VisusXIdxPy.XIdxFile_getGroup(self, type)

    @staticmethod
    def load(filename):
        return _VisusXIdxPy.XIdxFile_load(filename)

    def save(self, filename):
        return _VisusXIdxPy.XIdxFile_save(self, filename)

    def write(self, ar):
        return _VisusXIdxPy.XIdxFile_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.XIdxFile_read(self, ar)

# Register XIdxFile in _VisusXIdxPy:
_VisusXIdxPy.XIdxFile_swigregister(XIdxFile)

def XIdxFile_load(filename):
    return _VisusXIdxPy.XIdxFile_load(filename)

class ListDomain(Domain):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.ListDomain_getXIdxTypeName(self)
    stride = property(_VisusXIdxPy.ListDomain_stride_get, _VisusXIdxPy.ListDomain_stride_set)
    values = property(_VisusXIdxPy.ListDomain_values_get, _VisusXIdxPy.ListDomain_values_set)

    def __init__(self, *args):
        _VisusXIdxPy.ListDomain_swiginit(self, _VisusXIdxPy.new_ListDomain(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_ListDomain

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.ListDomain_getLinearizedIndexSpace(self)

    def addDomainItems(self, vals):
        return _VisusXIdxPy.ListDomain_addDomainItems(self, vals)

    def addDomainItem(self, phy):
        return _VisusXIdxPy.ListDomain_addDomainItem(self, phy)

    def write(self, ar):
        return _VisusXIdxPy.ListDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.ListDomain_read(self, ar)

# Register ListDomain in _VisusXIdxPy:
_VisusXIdxPy.ListDomain_swigregister(ListDomain)

class HyperSlabDomain(ListDomain):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.HyperSlabDomain_getXIdxTypeName(self)
    start = property(_VisusXIdxPy.HyperSlabDomain_start_get, _VisusXIdxPy.HyperSlabDomain_start_set)
    step = property(_VisusXIdxPy.HyperSlabDomain_step_get, _VisusXIdxPy.HyperSlabDomain_step_set)
    count = property(_VisusXIdxPy.HyperSlabDomain_count_get, _VisusXIdxPy.HyperSlabDomain_count_set)

    def __init__(self, *args):
        _VisusXIdxPy.HyperSlabDomain_swiginit(self, _VisusXIdxPy.new_HyperSlabDomain(*args))

    def setDomain(self, start_, step_, count_):
        return _VisusXIdxPy.HyperSlabDomain_setDomain(self, start_, step_, count_)

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.HyperSlabDomain_getLinearizedIndexSpace(self)

    def write(self, ar):
        return _VisusXIdxPy.HyperSlabDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.HyperSlabDomain_read(self, ar)
    __swig_destroy__ = _VisusXIdxPy.delete_HyperSlabDomain

# Register HyperSlabDomain in _VisusXIdxPy:
_VisusXIdxPy.HyperSlabDomain_swigregister(HyperSlabDomain)

class MultiAxisDomain(Domain):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.MultiAxisDomain_getXIdxTypeName(self)
    axis = property(_VisusXIdxPy.MultiAxisDomain_axis_get, _VisusXIdxPy.MultiAxisDomain_axis_set)

    def __init__(self, *args):
        _VisusXIdxPy.MultiAxisDomain_swiginit(self, _VisusXIdxPy.new_MultiAxisDomain(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_MultiAxisDomain

    def addAxis(self, disown):
        return _VisusXIdxPy.MultiAxisDomain_addAxis(self, disown)

    def getLinearizedIndexSpace(self, *args):
        return _VisusXIdxPy.MultiAxisDomain_getLinearizedIndexSpace(self, *args)

    def write(self, ar):
        return _VisusXIdxPy.MultiAxisDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.MultiAxisDomain_read(self, ar)

# Register MultiAxisDomain in _VisusXIdxPy:
_VisusXIdxPy.MultiAxisDomain_swigregister(MultiAxisDomain)

class TopologyType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    NO_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_NO_TOPOLOGY_TYPE
    RECT_2D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_RECT_2D_MESH_TOPOLOGY_TYPE
    CORECT_2D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_CORECT_2D_MESH_TOPOLOGY_TYPE
    RECT_3D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_RECT_3D_MESH_TOPOLOGY_TYPE
    CORECT_3D_MESH_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_CORECT_3D_MESH_TOPOLOGY_TYPE
    DIM_1D_TOPOLOGY_TYPE = _VisusXIdxPy.TopologyType_DIM_1D_TOPOLOGY_TYPE
    END_ENUM = _VisusXIdxPy.TopologyType_END_ENUM
    value = property(_VisusXIdxPy.TopologyType_value_get, _VisusXIdxPy.TopologyType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.TopologyType_swiginit(self, _VisusXIdxPy.new_TopologyType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.TopologyType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.TopologyType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.TopologyType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_TopologyType

# Register TopologyType in _VisusXIdxPy:
_VisusXIdxPy.TopologyType_swigregister(TopologyType)

def TopologyType_fromString(value):
    return _VisusXIdxPy.TopologyType_fromString(value)

class Topology(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Topology_getXIdxTypeName(self)
    type = property(_VisusXIdxPy.Topology_type_get, _VisusXIdxPy.Topology_type_set)
    dimensions = property(_VisusXIdxPy.Topology_dimensions_get, _VisusXIdxPy.Topology_dimensions_set)
    attributes = property(_VisusXIdxPy.Topology_attributes_get, _VisusXIdxPy.Topology_attributes_set)
    data_items = property(_VisusXIdxPy.Topology_data_items_get, _VisusXIdxPy.Topology_data_items_set)

    def __init__(self, *args):
        _VisusXIdxPy.Topology_swiginit(self, _VisusXIdxPy.new_Topology(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_Topology

    def addAttribute(self, disown):
        return _VisusXIdxPy.Topology_addAttribute(self, disown)

    def addDataItem(self, disown):
        return _VisusXIdxPy.Topology_addDataItem(self, disown)

    def write(self, ar):
        return _VisusXIdxPy.Topology_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Topology_read(self, ar)

# Register Topology in _VisusXIdxPy:
_VisusXIdxPy.Topology_swigregister(Topology)

class GeometryType(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    XYZ_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_XYZ_GEOMETRY_TYPE
    XY_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_XY_GEOMETRY_TYPE
    X_Y_Z_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_X_Y_Z_GEOMETRY_TYPE
    VXVYVZ_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_VXVYVZ_GEOMETRY_TYPE
    ORIGIN_DXDYDZ_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_ORIGIN_DXDYDZ_GEOMETRY_TYPE
    ORIGIN_DXDY_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_ORIGIN_DXDY_GEOMETRY_TYPE
    RECT_GEOMETRY_TYPE = _VisusXIdxPy.GeometryType_RECT_GEOMETRY_TYPE
    END_ENUM = _VisusXIdxPy.GeometryType_END_ENUM
    value = property(_VisusXIdxPy.GeometryType_value_get, _VisusXIdxPy.GeometryType_value_set)

    def __init__(self, *args):
        _VisusXIdxPy.GeometryType_swiginit(self, _VisusXIdxPy.new_GeometryType(*args))

    @staticmethod
    def fromString(value):
        return _VisusXIdxPy.GeometryType_fromString(value)

    def toString(self):
        return _VisusXIdxPy.GeometryType_toString(self)

    def __eq__(self, other):
        return _VisusXIdxPy.GeometryType___eq__(self, other)
    __swig_destroy__ = _VisusXIdxPy.delete_GeometryType

# Register GeometryType in _VisusXIdxPy:
_VisusXIdxPy.GeometryType_swigregister(GeometryType)

def GeometryType_fromString(value):
    return _VisusXIdxPy.GeometryType_fromString(value)

class Geometry(XIdxElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.Geometry_getXIdxTypeName(self)
    type = property(_VisusXIdxPy.Geometry_type_get, _VisusXIdxPy.Geometry_type_set)
    data_items = property(_VisusXIdxPy.Geometry_data_items_get, _VisusXIdxPy.Geometry_data_items_set)

    def __init__(self, *args):
        _VisusXIdxPy.Geometry_swiginit(self, _VisusXIdxPy.new_Geometry(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_Geometry

    def addDataItem(self, disown):
        return _VisusXIdxPy.Geometry_addDataItem(self, disown)

    def getVolume(self):
        return _VisusXIdxPy.Geometry_getVolume(self)

    def write(self, ar):
        return _VisusXIdxPy.Geometry_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.Geometry_read(self, ar)

# Register Geometry in _VisusXIdxPy:
_VisusXIdxPy.Geometry_swigregister(Geometry)

class SpatialDomain(Domain):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def getXIdxTypeName(self):
        return _VisusXIdxPy.SpatialDomain_getXIdxTypeName(self)
    topology = property(_VisusXIdxPy.SpatialDomain_topology_get, _VisusXIdxPy.SpatialDomain_topology_set)
    geometry = property(_VisusXIdxPy.SpatialDomain_geometry_get, _VisusXIdxPy.SpatialDomain_geometry_set)

    def __init__(self, *args):
        _VisusXIdxPy.SpatialDomain_swiginit(self, _VisusXIdxPy.new_SpatialDomain(*args))
    __swig_destroy__ = _VisusXIdxPy.delete_SpatialDomain

    def setTopology(self, disown):
        return _VisusXIdxPy.SpatialDomain_setTopology(self, disown)

    def setGeometry(self, disown):
        return _VisusXIdxPy.SpatialDomain_setGeometry(self, disown)

    def getLinearizedIndexSpace(self):
        return _VisusXIdxPy.SpatialDomain_getLinearizedIndexSpace(self)

    def getVolume(self):
        return _VisusXIdxPy.SpatialDomain_getVolume(self)

    def write(self, ar):
        return _VisusXIdxPy.SpatialDomain_write(self, ar)

    def read(self, ar):
        return _VisusXIdxPy.SpatialDomain_read(self, ar)

# Register SpatialDomain in _VisusXIdxPy:
_VisusXIdxPy.SpatialDomain_swigregister(SpatialDomain)



