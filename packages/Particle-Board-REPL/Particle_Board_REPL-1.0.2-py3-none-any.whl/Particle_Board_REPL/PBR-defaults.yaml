REPL:
    prompt        : 'PBR:> '
ssh:
    pemfile       : 'server.pem'
    ssh_server    : 'ubuntu@ec2-11-111-111-11.us-east-2.compute.amazonaws.com'

images:
    flash   : 'SomeBin.bin'
    test    : 'SomeTest.bin'
    tinker  : 'tinker-image.bin'

files:
    logfile       : 'PBR.log'
    loglevel      : 'info'

    config_file   : 'PBRConfig.yaml'

serial:
    baudrate      : 9600

particle:
# Used by Particle product add (Beta) invalid command at 1.52.
    product_id    : 'XXXXX'

test:
    start_string    : 'Test Response string'
    response_string : '!'
    fail_regex      : '^F:.*'
    done_regex      : '^I:Test All Done'
    do_qqc_regex    : '^I:Now Setting Serial Number'
    do_qqc_func     : input-serial

dialogs :
    title : 'Particle Board Interface'

exec:
    # function name to autoexec when asked to run
    autoexec : hello

    help: particle-help

    functions :
         id-it :
            fn  : get reset wait pause pause identify
            doc : 'Id the board. get, then identify. Need the reset and pauses for consistent success'
         id-it-w-dialog :
            fn  : dialog-start id-it
            doc : 'Give a start dialog, get, then identify.'
         setup :
            fn  : update wait pause setup-done
            doc : 'Update the os and mark the setup bit done.'
         nuke :
            fn  : tinker wait update wait get id-it
            doc : 'Try to reset the board to a sane state.'
        # We need the pause after waiting for the usb device, /dev/ttyUSB...,
        # to reappear,  Because it's permissions have not yet been changed by
        # udev rules, so a pause of # a few seconds, maybe 1, solves that.

        # Down to here we now have start, setup, add, testit, and flash,
        # for the major sections of the process. All of these partial processes
        # are tested and working.
        # How we put them together with dialogs or cli messages is up to us.

        # The program automatically puts the failed and continue with another
        # dialog windows at the end, when appropriate.
         testit :
            doc: 'flash the test, handshake and process the results.'
            fn: flash-test wait pause handshake
         ckit:
            fn  : id-it cloud-status inspect
            doc : 'Id, and check it over.'
         claimit :
            fn  : product-add wait add
            doc : 'Do a product add followed by device add.'
         claimit-3ways :
            fn  : product-add wait add wait claim
            doc : 'Do a product add, device add, cloud claim.'
         full-without-dialogs :
            fn  : id-it setup add wait testit flash archive-log
            doc : 'This is the whole process, dialogs only at the beginning and end.'
         full-with-dialogs :
            fn  : id-it-w-dialog setup add wait dialog-test testit dialog-flash flash archive-log
            doc : 'This is the whole process, dialogs everywhere.'
