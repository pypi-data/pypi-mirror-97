import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "qwaylandclient.h"
        name: "QWaylandClient"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandClient 1.0",
            "QtWayland.Compositor/WaylandClient 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "compositor"; type: "QWaylandCompositor"; isReadonly: true; isPointer: true }
        Property { name: "userId"; type: "qlonglong"; isReadonly: true }
        Property { name: "groupId"; type: "qlonglong"; isReadonly: true }
        Property { name: "processId"; type: "qlonglong"; isReadonly: true }
        Method { name: "close" }
        Method {
            name: "kill"
            Parameter { name: "signal"; type: "int" }
        }
        Method { name: "kill" }
    }
    Component {
        file: "qwaylandcompositor.h"
        name: "QWaylandCompositor"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandCompositorBase 1.0",
            "QtWayland.Compositor/WaylandCompositorBase 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "ShmFormat"
            values: [
                "ShmFormat_ARGB8888",
                "ShmFormat_XRGB8888",
                "ShmFormat_C8",
                "ShmFormat_XRGB4444",
                "ShmFormat_ARGB4444",
                "ShmFormat_XRGB1555",
                "ShmFormat_RGB565",
                "ShmFormat_RGB888",
                "ShmFormat_XBGR8888",
                "ShmFormat_ABGR8888",
                "ShmFormat_XRGB2101010",
                "ShmFormat_XBGR2101010",
                "ShmFormat_ARGB2101010",
                "ShmFormat_ABGR2101010"
            ]
        }
        Property { name: "socketName"; type: "QByteArray" }
        Property { name: "created"; type: "bool"; isReadonly: true }
        Property { name: "retainedSelection"; type: "bool" }
        Property { name: "defaultOutput"; type: "QWaylandOutput"; isPointer: true }
        Property { name: "useHardwareIntegrationExtension"; type: "bool" }
        Property { name: "defaultSeat"; type: "QWaylandSeat"; isReadonly: true; isPointer: true }
        Property { name: "additionalShmFormats"; revision: 1536; type: "QList<ShmFormat>" }
        Signal {
            name: "socketNameChanged"
            Parameter { name: "socketName"; type: "QByteArray" }
        }
        Signal {
            name: "retainedSelectionChanged"
            Parameter { name: "retainedSelection"; type: "bool" }
        }
        Signal {
            name: "surfaceRequested"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
            Parameter { name: "id"; type: "uint" }
            Parameter { name: "version"; type: "int" }
        }
        Signal {
            name: "surfaceCreated"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "surfaceAboutToBeDestroyed"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "subsurfaceChanged"
            Parameter { name: "child"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "parent"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "defaultSeatChanged"
            Parameter { name: "newDevice"; type: "QWaylandSeat"; isPointer: true }
            Parameter { name: "oldDevice"; type: "QWaylandSeat"; isPointer: true }
        }
        Signal {
            name: "outputAdded"
            Parameter { name: "output"; type: "QWaylandOutput"; isPointer: true }
        }
        Signal {
            name: "outputRemoved"
            Parameter { name: "output"; type: "QWaylandOutput"; isPointer: true }
        }
        Method { name: "processWaylandEvents" }
        Method {
            name: "addSocketDescriptor"
            Parameter { name: "fd"; type: "int" }
        }
        Method {
            name: "destroyClientForSurface"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "destroyClient"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
        Method {
            name: "outputFor"
            type: "QWaylandOutput*"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
    }
    Component {
        file: "qwaylandcompositorextension.h"
        name: "QWaylandCompositorExtension"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandExtension 1.0",
            "QtWayland.Compositor/WaylandExtension 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
    }
    Component {
        file: "qwaylanddrag.h"
        name: "QWaylandDrag"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandDrag 1.0",
            "QtWayland.Compositor/WaylandDrag 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "icon"; type: "QWaylandSurface"; isReadonly: true; isPointer: true }
        Property { name: "visible"; type: "bool"; isReadonly: true }
        Signal { name: "dragStarted" }
        Method {
            name: "dragMove"
            Parameter { name: "target"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "pos"; type: "QPointF" }
        }
        Method { name: "drop" }
        Method { name: "cancelDrag" }
    }
    Component { name: "QWaylandIdleInhibitManagerV1"; accessSemantics: "reference" }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandIdleInhibitManagerV1QuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandIdleInhibitManagerV1"
        exports: [
            "QtWayland.Compositor/IdleInhibitManagerV1 1.0",
            "QtWayland.Compositor/IdleInhibitManagerV1 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        file: "qwaylandkeymap.h"
        name: "QWaylandKeymap"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandKeymap 1.0",
            "QtWayland.Compositor/WaylandKeymap 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "layout"; type: "QString" }
        Property { name: "variant"; type: "QString" }
        Property { name: "options"; type: "QString" }
        Property { name: "rules"; type: "QString" }
        Property { name: "model"; type: "QString" }
    }
    Component {
        file: "private/qwaylandmousetracker_p.h"
        name: "QWaylandMouseTracker"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtWayland.Compositor/WaylandMouseTracker 1.0",
            "QtWayland.Compositor/WaylandMouseTracker 2.0",
            "QtWayland.Compositor/WaylandMouseTracker 2.1",
            "QtWayland.Compositor/WaylandMouseTracker 2.4",
            "QtWayland.Compositor/WaylandMouseTracker 2.7",
            "QtWayland.Compositor/WaylandMouseTracker 2.11",
            "QtWayland.Compositor/WaylandMouseTracker 6.0"
        ]
        exportMetaObjectRevisions: [256, 512, 513, 516, 519, 523, 1536]
        Property { name: "mouseX"; type: "double"; isReadonly: true }
        Property { name: "mouseY"; type: "double"; isReadonly: true }
        Property { name: "containsMouse"; type: "bool"; isReadonly: true }
        Property { name: "windowSystemCursorEnabled"; type: "bool" }
        Signal { name: "hoveredChanged" }
    }
    Component { name: "QWaylandObject"; accessSemantics: "reference"; prototype: "QObject" }
    Component {
        file: "qwaylandoutput.h"
        name: "QWaylandOutput"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandOutputBase 1.0",
            "QtWayland.Compositor/WaylandOutputBase 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "Subpixel"
            values: [
                "SubpixelUnknown",
                "SubpixelNone",
                "SubpixelHorizontalRgb",
                "SubpixelHorizontalBgr",
                "SubpixelVerticalRgb",
                "SubpixelVerticalBgr"
            ]
        }
        Enum {
            name: "Transform"
            values: [
                "TransformNormal",
                "Transform90",
                "Transform180",
                "Transform270",
                "TransformFlipped",
                "TransformFlipped90",
                "TransformFlipped180",
                "TransformFlipped270"
            ]
        }
        Property { name: "compositor"; type: "QWaylandCompositor"; isPointer: true }
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Property { name: "manufacturer"; type: "QString" }
        Property { name: "model"; type: "QString" }
        Property { name: "position"; type: "QPoint" }
        Property { name: "geometry"; type: "QRect"; isReadonly: true }
        Property { name: "availableGeometry"; type: "QRect" }
        Property { name: "physicalSize"; type: "QSize" }
        Property { name: "subpixel"; type: "QWaylandOutput::Subpixel" }
        Property { name: "transform"; type: "QWaylandOutput::Transform" }
        Property { name: "scaleFactor"; type: "int" }
        Property { name: "sizeFollowsWindow"; type: "bool" }
        Signal { name: "modeAdded" }
        Signal { name: "currentModeChanged" }
        Signal { name: "physicalSizeFollowsSizeChanged" }
        Signal { name: "windowDestroyed" }
        Method { name: "_q_handleMaybeWindowPixelSizeChanged" }
        Method { name: "_q_handleWindowDestroyed" }
    }
    Component { name: "QWaylandQtTextInputMethodManager"; accessSemantics: "reference" }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandQtTextInputMethodManagerQuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandQtTextInputMethodManager"
        exports: [
            "QtWayland.Compositor/QtTextInputMethodManager 1.0",
            "QtWayland.Compositor/QtTextInputMethodManager 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "QWaylandQtWindowManager"
        accessSemantics: "reference"
        Property { name: "showIsFullScreen"; type: "bool" }
        Signal {
            name: "openUrl"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
            Parameter { name: "url"; type: "QUrl" }
        }
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandQtWindowManagerQuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandQtWindowManager"
        exports: [
            "QtWayland.Compositor/QtWindowManager 1.0",
            "QtWayland.Compositor/QtWindowManager 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        file: "qwaylandcompositor.h"
        name: "QWaylandQuickCompositor"
        accessSemantics: "reference"
        prototype: "QWaylandCompositor"
    }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandQuickCompositorQuickExtensionContainer"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandQuickCompositor"
        exports: [
            "QtWayland.Compositor/WaylandCompositor 1.0",
            "QtWayland.Compositor/WaylandCompositor 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property {
            name: "extensions"
            type: "QWaylandCompositorExtension"
            isList: true
            isReadonly: true
        }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        file: "private/qwaylandquickhardwarelayer_p.h"
        name: "QWaylandQuickHardwareLayer"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "QtWayland.Compositor/WaylandHardwareLayer 1.2",
            "QtWayland.Compositor/WaylandHardwareLayer 6.0"
        ]
        exportMetaObjectRevisions: [258, 1536]
        Property { name: "stackingLevel"; type: "int" }
    }
    Component {
        file: "qwaylandquickitem.h"
        name: "QWaylandQuickItem"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: [
            "QtWayland.Compositor/WaylandQuickItem 1.0",
            "QtWayland.Compositor/WaylandQuickItem 1.13",
            "QtWayland.Compositor/WaylandQuickItem 2.0",
            "QtWayland.Compositor/WaylandQuickItem 2.1",
            "QtWayland.Compositor/WaylandQuickItem 2.4",
            "QtWayland.Compositor/WaylandQuickItem 2.7",
            "QtWayland.Compositor/WaylandQuickItem 2.11",
            "QtWayland.Compositor/WaylandQuickItem 6.0"
        ]
        exportMetaObjectRevisions: [256, 269, 512, 513, 516, 519, 523, 1536]
        Property { name: "compositor"; type: "QWaylandCompositor"; isReadonly: true; isPointer: true }
        Property { name: "surface"; type: "QWaylandSurface"; isPointer: true }
        Property { name: "paintEnabled"; type: "bool" }
        Property { name: "touchEventsEnabled"; type: "bool" }
        Property { name: "origin"; type: "QWaylandSurface::Origin"; isReadonly: true }
        Property { name: "inputEventsEnabled"; type: "bool" }
        Property { name: "focusOnClick"; type: "bool" }
        Property { name: "subsurfaceHandler"; type: "QObject"; isPointer: true }
        Property { name: "output"; type: "QWaylandOutput"; isPointer: true }
        Property { name: "bufferLocked"; type: "bool" }
        Property { name: "allowDiscardFrontBuffer"; type: "bool" }
        Signal { name: "surfaceDestroyed" }
        Signal {
            name: "mouseMove"
            Parameter { name: "windowPosition"; type: "QPointF" }
        }
        Signal { name: "mouseRelease" }
        Method {
            name: "takeFocus"
            Parameter { name: "device"; type: "QWaylandSeat"; isPointer: true }
        }
        Method { name: "takeFocus" }
        Method {
            name: "setPaintEnabled"
            Parameter { name: "paintEnabled"; type: "bool" }
        }
        Method { name: "raise" }
        Method { name: "lower" }
        Method {
            name: "sendMouseMoveEvent"
            Parameter { name: "position"; type: "QPointF" }
            Parameter { name: "seat"; type: "QWaylandSeat"; isPointer: true }
        }
        Method {
            name: "sendMouseMoveEvent"
            Parameter { name: "position"; type: "QPointF" }
        }
        Method { name: "surfaceMappedChanged" }
        Method { name: "handleSurfaceChanged" }
        Method {
            name: "parentChanged"
            Parameter { name: "newParent"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldParent"; type: "QWaylandSurface"; isPointer: true }
        }
        Method { name: "updateSize" }
        Method {
            name: "updateBuffer"
            Parameter { name: "hasBuffer"; type: "bool" }
        }
        Method { name: "updateWindow" }
        Method { name: "updateOutput" }
        Method { name: "beforeSync" }
        Method {
            name: "handleSubsurfaceAdded"
            Parameter { name: "childSurface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "handleSubsurfacePosition"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "handlePlaceAbove"
            Parameter { name: "referenceSurface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "handlePlaceBelow"
            Parameter { name: "referenceSurface"; type: "QWaylandSurface"; isPointer: true }
        }
        Method {
            name: "handleDragStarted"
            Parameter { name: "drag"; type: "QWaylandDrag"; isPointer: true }
        }
        Method {
            name: "updateInputMethod"
            Parameter { name: "queries"; type: "Qt::InputMethodQueries" }
        }
        Method {
            name: "mapToSurface"
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromSurface"
            revision: 269
            type: "QPointF"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "inputMethodQuery"
            type: "QVariant"
            Parameter { name: "query"; type: "Qt::InputMethodQuery" }
            Parameter { name: "argument"; type: "QVariant" }
        }
        Method { name: "setPrimary" }
    }
    Component {
        file: "qwaylandquickoutput.h"
        name: "QWaylandQuickOutput"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandOutput"
        exports: [
            "QtWayland.Compositor/WaylandOutput 1.0",
            "QtWayland.Compositor/WaylandOutput 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "automaticFrameCallback"; type: "bool" }
        Method { name: "updateStarted" }
    }
    Component {
        file: "qwaylandquickshellsurfaceitem.h"
        name: "QWaylandQuickShellSurfaceItem"
        accessSemantics: "reference"
        prototype: "QWaylandQuickItem"
        exports: [
            "QtWayland.Compositor/ShellSurfaceItem 1.0",
            "QtWayland.Compositor/ShellSurfaceItem 1.13",
            "QtWayland.Compositor/ShellSurfaceItem 2.0",
            "QtWayland.Compositor/ShellSurfaceItem 2.1",
            "QtWayland.Compositor/ShellSurfaceItem 2.4",
            "QtWayland.Compositor/ShellSurfaceItem 2.7",
            "QtWayland.Compositor/ShellSurfaceItem 2.11",
            "QtWayland.Compositor/ShellSurfaceItem 6.0"
        ]
        exportMetaObjectRevisions: [256, 269, 512, 513, 516, 519, 523, 1536]
        Property { name: "shellSurface"; type: "QWaylandShellSurface"; isPointer: true }
        Property { name: "moveItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "autoCreatePopupItems"; type: "bool" }
    }
    Component {
        file: "qwaylandquicksurface.h"
        name: "QWaylandQuickSurface"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandSurface"
        exports: [
            "QtWayland.Compositor/WaylandSurface 1.0",
            "QtWayland.Compositor/WaylandSurface 1.13",
            "QtWayland.Compositor/WaylandSurface 1.14",
            "QtWayland.Compositor/WaylandSurface 6.0"
        ]
        exportMetaObjectRevisions: [256, 269, 270, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "useTextureAlpha"; type: "bool" }
    }
    Component {
        file: "qwaylandresource.h"
        name: "QWaylandResource"
        accessSemantics: "value"
        exports: [
            "QtWayland.Compositor/waylandresource 1.0",
            "QtWayland.Compositor/waylandresource 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
    }
    Component {
        file: "qwaylandseat.h"
        name: "QWaylandSeat"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandSeat 1.0",
            "QtWayland.Compositor/WaylandSeat 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "CapabilityFlags"
            alias: "CapabilityFlag"
            values: ["Pointer", "Keyboard", "Touch", "DefaultCapabilities"]
        }
        Property { name: "drag"; type: "QWaylandDrag"; isReadonly: true; isPointer: true }
        Property { name: "keymap"; type: "QWaylandKeymap"; isReadonly: true; isPointer: true }
        Signal {
            name: "mouseFocusChanged"
            Parameter { name: "newFocus"; type: "QWaylandView"; isPointer: true }
            Parameter { name: "oldFocus"; type: "QWaylandView"; isPointer: true }
        }
        Signal {
            name: "keyboardFocusChanged"
            Parameter { name: "newFocus"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldFocus"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "cursorSurfaceRequest"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "hotspotX"; type: "int" }
            Parameter { name: "hotspotY"; type: "int" }
        }
        Method {
            name: "sendKeyEvent"
            Parameter { name: "qtKey"; type: "int" }
            Parameter { name: "pressed"; type: "bool" }
        }
        Method {
            name: "sendTouchPointPressed"
            type: "uint"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "id"; type: "int" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "sendTouchPointReleased"
            type: "uint"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "id"; type: "int" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "sendTouchPointMoved"
            type: "uint"
            Parameter { name: "surface"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "id"; type: "int" }
            Parameter { name: "position"; type: "QPointF" }
        }
        Method {
            name: "sendTouchFrameEvent"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
        Method {
            name: "sendTouchCancelEvent"
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
        }
    }
    Component {
        file: "qwaylandshell.h"
        name: "QWaylandShell"
        accessSemantics: "reference"
        prototype: "QWaylandCompositorExtension"
        exports: [
            "QtWayland.Compositor/Shell 1.0",
            "QtWayland.Compositor/Shell 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Enum {
            name: "FocusPolicy"
            values: ["AutomaticFocus", "ManualFocus"]
        }
        Property { name: "focusPolicy"; type: "FocusPolicy" }
    }
    Component {
        file: "qwaylandshellsurface.h"
        name: "QWaylandShellSurface"
        accessSemantics: "reference"
        prototype: "QWaylandCompositorExtension"
        exports: [
            "QtWayland.Compositor/ShellSurface 1.0",
            "QtWayland.Compositor/ShellSurface 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "windowType"; type: "Qt::WindowType"; isReadonly: true }
    }
    Component {
        file: "qwaylandsurface.h"
        name: "QWaylandSurface"
        accessSemantics: "reference"
        prototype: "QWaylandObject"
        exports: [
            "QtWayland.Compositor/WaylandSurfaceBase 1.0",
            "QtWayland.Compositor/WaylandSurfaceBase 1.13",
            "QtWayland.Compositor/WaylandSurfaceBase 1.14",
            "QtWayland.Compositor/WaylandSurfaceBase 6.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256, 269, 270, 1536]
        Enum {
            name: "Origin"
            values: ["OriginTopLeft", "OriginBottomLeft"]
        }
        Property { name: "client"; type: "QWaylandClient"; isReadonly: true; isPointer: true }
        Property { name: "sourceGeometry"; revision: 269; type: "QRectF"; isReadonly: true }
        Property { name: "destinationSize"; revision: 269; type: "QSize"; isReadonly: true }
        Property { name: "bufferSize"; revision: 269; type: "QSize"; isReadonly: true }
        Property { name: "bufferScale"; type: "int"; isReadonly: true }
        Property { name: "contentOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "origin"; type: "QWaylandSurface::Origin"; isReadonly: true }
        Property { name: "hasContent"; type: "bool"; isReadonly: true }
        Property { name: "cursorSurface"; type: "bool" }
        Property { name: "inhibitsIdle"; revision: 270; type: "bool"; isReadonly: true }
        Signal {
            name: "damaged"
            Parameter { name: "rect"; type: "QRegion" }
        }
        Signal {
            name: "parentChanged"
            Parameter { name: "newParent"; type: "QWaylandSurface"; isPointer: true }
            Parameter { name: "oldParent"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "childAdded"
            Parameter { name: "child"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal { name: "sourceGeometryChanged"; revision: 269 }
        Signal { name: "destinationSizeChanged"; revision: 269 }
        Signal { name: "bufferSizeChanged"; revision: 269 }
        Signal {
            name: "offsetForNextFrame"
            Parameter { name: "offset"; type: "QPoint" }
        }
        Signal { name: "surfaceDestroyed" }
        Signal {
            name: "subsurfacePositionChanged"
            Parameter { name: "position"; type: "QPoint" }
        }
        Signal {
            name: "subsurfacePlaceAbove"
            Parameter { name: "sibling"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "subsurfacePlaceBelow"
            Parameter { name: "sibling"; type: "QWaylandSurface"; isPointer: true }
        }
        Signal {
            name: "dragStarted"
            Parameter { name: "drag"; type: "QWaylandDrag"; isPointer: true }
        }
        Signal { name: "inhibitsIdleChanged"; revision: 65294 }
        Signal {
            name: "configure"
            Parameter { name: "hasBuffer"; type: "bool" }
        }
        Signal { name: "redraw" }
        Method { name: "updateSelection" }
        Method {
            name: "initialize"
            Parameter { name: "compositor"; type: "QWaylandCompositor"; isPointer: true }
            Parameter { name: "client"; type: "QWaylandClient"; isPointer: true }
            Parameter { name: "id"; type: "uint" }
            Parameter { name: "version"; type: "int" }
        }
        Method { name: "destroy" }
        Method { name: "isDestroyed"; type: "bool" }
        Method { name: "frameStarted" }
        Method { name: "sendFrameCallbacks" }
    }
    Component { name: "QWaylandTextInputManager"; accessSemantics: "reference" }
    Component {
        file: "private/qwaylandcompositorquickextensions_p.h"
        name: "QWaylandTextInputManagerQuickExtension"
        accessSemantics: "reference"
        defaultProperty: "data"
        prototype: "QWaylandTextInputManager"
        exports: [
            "QtWayland.Compositor/TextInputManager 1.0",
            "QtWayland.Compositor/TextInputManager 6.0"
        ]
        exportMetaObjectRevisions: [256, 1536]
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
    }
}
