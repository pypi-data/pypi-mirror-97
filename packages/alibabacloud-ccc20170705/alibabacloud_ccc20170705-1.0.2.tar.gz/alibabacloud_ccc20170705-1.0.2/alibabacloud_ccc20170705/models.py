# -*- coding: utf-8 -*-
# This file is auto-generated, don't edit it. Thanks.
from Tea.model import TeaModel
from typing import Dict, List


class AddAgentDeviceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        client_ip: str = None,
        client_port: str = None,
        browser_version: str = None,
        remark: str = None,
    ):
        self.instance_id = instance_id
        self.client_ip = client_ip
        self.client_port = client_port
        self.browser_version = browser_version
        self.remark = remark

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        if self.browser_version is not None:
            result['BrowserVersion'] = self.browser_version
        if self.remark is not None:
            result['Remark'] = self.remark
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        if m.get('BrowserVersion') is not None:
            self.browser_version = m.get('BrowserVersion')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        return self


class AddAgentDeviceResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        agent_device_id: int = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.agent_device_id = agent_device_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.agent_device_id is not None:
            result['AgentDeviceId'] = self.agent_device_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('AgentDeviceId') is not None:
            self.agent_device_id = m.get('AgentDeviceId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddAgentDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AddAgentDeviceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddAgentDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddBulkPhoneNumbersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        usage: str = None,
        contact_flow_id: str = None,
        phone_number: List[str] = None,
        skill_group_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.usage = usage
        self.contact_flow_id = contact_flow_id
        self.phone_number = phone_number
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers(TeaModel):
    def __init__(
        self,
        arrearage_phone_number: List[str] = None,
    ):
        self.arrearage_phone_number = arrearage_phone_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.arrearage_phone_number is not None:
            result['ArrearagePhoneNumber'] = self.arrearage_phone_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ArrearagePhoneNumber') is not None:
            self.arrearage_phone_number = m.get('ArrearagePhoneNumber')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup(TeaModel):
    def __init__(
        self,
        skill_group_name: str = None,
        skill_group_id: str = None,
    ):
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups(TeaModel):
    def __init__(
        self,
        skill_group: List[AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup] = None,
    ):
        self.skill_group = skill_group

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow(TeaModel):
    def __init__(
        self,
        type: str = None,
        contact_flow_description: str = None,
        contact_flow_name: str = None,
        instance_id: str = None,
        contact_flow_id: str = None,
    ):
        self.type = type
        self.contact_flow_description = contact_flow_description
        self.contact_flow_name = contact_flow_name
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        skill_groups: AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups = None,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        contact_flow: AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow = None,
        phone_number_id: str = None,
    ):
        self.skill_groups = skill_groups
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.contact_flow = contact_flow
        self.phone_number_id = phone_number_id

    def validate(self):
        if self.skill_groups:
            self.skill_groups.validate()
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        result = dict()
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroups') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('ContactFlow') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class AddBulkPhoneNumbersResponseBodyPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers(TeaModel):
    def __init__(
        self,
        failed_phone_number: List[str] = None,
    ):
        self.failed_phone_number = failed_phone_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.failed_phone_number is not None:
            result['FailedPhoneNumber'] = self.failed_phone_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FailedPhoneNumber') is not None:
            self.failed_phone_number = m.get('FailedPhoneNumber')
        return self


class AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers(TeaModel):
    def __init__(
        self,
        userd_phone_number: List[str] = None,
    ):
        self.userd_phone_number = userd_phone_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.userd_phone_number is not None:
            result['UserdPhoneNumber'] = self.userd_phone_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserdPhoneNumber') is not None:
            self.userd_phone_number = m.get('UserdPhoneNumber')
        return self


class AddBulkPhoneNumbersResponseBody(TeaModel):
    def __init__(
        self,
        arrearage_phone_numbers: AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers = None,
        phone_numbers: AddBulkPhoneNumbersResponseBodyPhoneNumbers = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        failed_phone_numbers: AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers = None,
        userd_phone_numbers: AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers = None,
        code: str = None,
        success: bool = None,
    ):
        self.arrearage_phone_numbers = arrearage_phone_numbers
        self.phone_numbers = phone_numbers
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.failed_phone_numbers = failed_phone_numbers
        self.userd_phone_numbers = userd_phone_numbers
        self.code = code
        self.success = success

    def validate(self):
        if self.arrearage_phone_numbers:
            self.arrearage_phone_numbers.validate()
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.failed_phone_numbers:
            self.failed_phone_numbers.validate()
        if self.userd_phone_numbers:
            self.userd_phone_numbers.validate()

    def to_map(self):
        result = dict()
        if self.arrearage_phone_numbers is not None:
            result['ArrearagePhoneNumbers'] = self.arrearage_phone_numbers.to_map()
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.failed_phone_numbers is not None:
            result['FailedPhoneNumbers'] = self.failed_phone_numbers.to_map()
        if self.userd_phone_numbers is not None:
            result['UserdPhoneNumbers'] = self.userd_phone_numbers.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ArrearagePhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyArrearagePhoneNumbers()
            self.arrearage_phone_numbers = temp_model.from_map(m['ArrearagePhoneNumbers'])
        if m.get('PhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('FailedPhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyFailedPhoneNumbers()
            self.failed_phone_numbers = temp_model.from_map(m['FailedPhoneNumbers'])
        if m.get('UserdPhoneNumbers') is not None:
            temp_model = AddBulkPhoneNumbersResponseBodyUserdPhoneNumbers()
            self.userd_phone_numbers = temp_model.from_map(m['UserdPhoneNumbers'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddBulkPhoneNumbersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AddBulkPhoneNumbersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddBulkPhoneNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddPhoneNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        phone_number: str = None,
        usage: str = None,
        contact_flow_id: str = None,
    ):
        self.instance_id = instance_id
        self.phone_number = phone_number
        self.usage = usage
        self.contact_flow_id = contact_flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        return self


class AddPhoneNumberResponseBodyPhoneNumberContactFlow(TeaModel):
    def __init__(
        self,
        type: str = None,
        contact_flow_description: str = None,
        contact_flow_name: str = None,
        instance_id: str = None,
        contact_flow_id: str = None,
    ):
        self.type = type
        self.contact_flow_description = contact_flow_description
        self.contact_flow_name = contact_flow_name
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        return self


class AddPhoneNumberResponseBodyPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        contact_flow: AddPhoneNumberResponseBodyPhoneNumberContactFlow = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.contact_flow = contact_flow
        self.phone_number_id = phone_number_id

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('ContactFlow') is not None:
            temp_model = AddPhoneNumberResponseBodyPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class AddPhoneNumberResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        phone_number: AddPhoneNumberResponseBodyPhoneNumber = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.phone_number = phone_number
        self.code = code
        self.success = success

    def validate(self):
        if self.phone_number:
            self.phone_number.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PhoneNumber') is not None:
            temp_model = AddPhoneNumberResponseBodyPhoneNumber()
            self.phone_number = temp_model.from_map(m['PhoneNumber'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddPhoneNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AddPhoneNumberResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddPhoneNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AddPhoneTagsRequest(TeaModel):
    def __init__(
        self,
        service_tag: str = None,
        region_name_province: str = None,
        region_name_city: str = None,
        type: int = None,
        concurrency: int = None,
        instance_id: str = None,
        provider: str = None,
        sip_tag: str = None,
        phone_number_list: List[str] = None,
    ):
        self.service_tag = service_tag
        self.region_name_province = region_name_province
        self.region_name_city = region_name_city
        self.type = type
        self.concurrency = concurrency
        self.instance_id = instance_id
        self.provider = provider
        self.sip_tag = sip_tag
        self.phone_number_list = phone_number_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.service_tag is not None:
            result['ServiceTag'] = self.service_tag
        if self.region_name_province is not None:
            result['RegionNameProvince'] = self.region_name_province
        if self.region_name_city is not None:
            result['RegionNameCity'] = self.region_name_city
        if self.type is not None:
            result['Type'] = self.type
        if self.concurrency is not None:
            result['Concurrency'] = self.concurrency
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.provider is not None:
            result['Provider'] = self.provider
        if self.sip_tag is not None:
            result['SipTag'] = self.sip_tag
        if self.phone_number_list is not None:
            result['PhoneNumberList'] = self.phone_number_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ServiceTag') is not None:
            self.service_tag = m.get('ServiceTag')
        if m.get('RegionNameProvince') is not None:
            self.region_name_province = m.get('RegionNameProvince')
        if m.get('RegionNameCity') is not None:
            self.region_name_city = m.get('RegionNameCity')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Concurrency') is not None:
            self.concurrency = m.get('Concurrency')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Provider') is not None:
            self.provider = m.get('Provider')
        if m.get('SipTag') is not None:
            self.sip_tag = m.get('SipTag')
        if m.get('PhoneNumberList') is not None:
            self.phone_number_list = m.get('PhoneNumberList')
        return self


class AddPhoneTagsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AddPhoneTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AddPhoneTagsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AddPhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        group_id: str = None,
        scenario_id: str = None,
        strategy_json: str = None,
        calling_number: List[str] = None,
        jobs_json: List[str] = None,
    ):
        self.instance_id = instance_id
        self.group_id = group_id
        self.scenario_id = scenario_id
        self.strategy_json = strategy_json
        self.calling_number = calling_number
        self.jobs_json = jobs_json

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        return self


class AssignJobsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        group_id: str = None,
    ):
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.group_id = group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        return self


class AssignJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AssignJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AssignJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class AssignUsersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_ram_id: List[str] = None,
        role_id: List[str] = None,
        skill_group_id: List[str] = None,
        skill_level: List[int] = None,
    ):
        self.instance_id = instance_id
        self.user_ram_id = user_ram_id
        self.role_id = role_id
        self.skill_group_id = skill_group_id
        self.skill_level = skill_level

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_ram_id is not None:
            result['UserRamId'] = self.user_ram_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserRamId') is not None:
            self.user_ram_id = m.get('UserRamId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class AssignUsersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class AssignUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: AssignUsersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = AssignUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CallOnlinePrivacyNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        tel_a: str = None,
        tel_b: str = None,
    ):
        self.instance_id = instance_id
        self.tel_a = tel_a
        self.tel_b = tel_b

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.tel_a is not None:
            result['TelA'] = self.tel_a
        if self.tel_b is not None:
            result['TelB'] = self.tel_b
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TelA') is not None:
            self.tel_a = m.get('TelA')
        if m.get('TelB') is not None:
            self.tel_b = m.get('TelB')
        return self


class CallOnlinePrivacyNumberResponseBodyData(TeaModel):
    def __init__(
        self,
        represent: str = None,
        status_code: str = None,
        call_id: str = None,
        date_created: str = None,
        tel_x: str = None,
    ):
        self.represent = represent
        self.status_code = status_code
        self.call_id = call_id
        self.date_created = date_created
        self.tel_x = tel_x

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.represent is not None:
            result['Represent'] = self.represent
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.date_created is not None:
            result['DateCreated'] = self.date_created
        if self.tel_x is not None:
            result['TelX'] = self.tel_x
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Represent') is not None:
            self.represent = m.get('Represent')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('DateCreated') is not None:
            self.date_created = m.get('DateCreated')
        if m.get('TelX') is not None:
            self.tel_x = m.get('TelX')
        return self


class CallOnlinePrivacyNumberResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        data: CallOnlinePrivacyNumberResponseBodyData = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.data = data
        self.code = code
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Data') is not None:
            temp_model = CallOnlinePrivacyNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CallOnlinePrivacyNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CallOnlinePrivacyNumberResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CallOnlinePrivacyNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CancelJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        all: bool = None,
        scenario_id: str = None,
        group_id: str = None,
        job_id: List[str] = None,
        job_reference_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.all = all
        self.scenario_id = scenario_id
        self.group_id = group_id
        self.job_id = job_id
        self.job_reference_id = job_reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.all is not None:
            result['All'] = self.all
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        return self


class CancelJobsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CancelJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CancelJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CancelJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CheckNumberAvaliableRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        callee: str = None,
        caller: str = None,
    ):
        self.instance_id = instance_id
        self.callee = callee
        self.caller = caller

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.caller is not None:
            result['Caller'] = self.caller
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        return self


class CheckNumberAvaliableResponseBodyCallerAvaliable(TeaModel):
    def __init__(
        self,
        avaliable: bool = None,
        reason: str = None,
    ):
        self.avaliable = avaliable
        self.reason = reason

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.avaliable is not None:
            result['Avaliable'] = self.avaliable
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Avaliable') is not None:
            self.avaliable = m.get('Avaliable')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class CheckNumberAvaliableResponseBodyCalleeAvaliable(TeaModel):
    def __init__(
        self,
        avaliable: bool = None,
        reason: str = None,
    ):
        self.avaliable = avaliable
        self.reason = reason

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.avaliable is not None:
            result['Avaliable'] = self.avaliable
        if self.reason is not None:
            result['Reason'] = self.reason
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Avaliable') is not None:
            self.avaliable = m.get('Avaliable')
        if m.get('Reason') is not None:
            self.reason = m.get('Reason')
        return self


class CheckNumberAvaliableResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        caller_avaliable: CheckNumberAvaliableResponseBodyCallerAvaliable = None,
        success: bool = None,
        callee_avaliable: CheckNumberAvaliableResponseBodyCalleeAvaliable = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.caller_avaliable = caller_avaliable
        self.success = success
        self.callee_avaliable = callee_avaliable

    def validate(self):
        if self.caller_avaliable:
            self.caller_avaliable.validate()
        if self.callee_avaliable:
            self.callee_avaliable.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.caller_avaliable is not None:
            result['CallerAvaliable'] = self.caller_avaliable.to_map()
        if self.success is not None:
            result['Success'] = self.success
        if self.callee_avaliable is not None:
            result['CalleeAvaliable'] = self.callee_avaliable.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('CallerAvaliable') is not None:
            temp_model = CheckNumberAvaliableResponseBodyCallerAvaliable()
            self.caller_avaliable = temp_model.from_map(m['CallerAvaliable'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('CalleeAvaliable') is not None:
            temp_model = CheckNumberAvaliableResponseBodyCalleeAvaliable()
            self.callee_avaliable = temp_model.from_map(m['CalleeAvaliable'])
        return self


class CheckNumberAvaliableResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CheckNumberAvaliableResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CheckNumberAvaliableResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CommitContactFlowVersionModificationRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_flow_version_id: str = None,
        canvas: str = None,
        content: str = None,
    ):
        self.instance_id = instance_id
        self.contact_flow_version_id = contact_flow_version_id
        self.canvas = canvas
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class CommitContactFlowVersionModificationResponseBodyContactFlowVersion(TeaModel):
    def __init__(
        self,
        status: str = None,
        last_modified: str = None,
        canvas: str = None,
        locked_by: str = None,
        version: str = None,
        contact_flow_version_id: str = None,
        last_modified_by: str = None,
        contact_flow_version_description: str = None,
        content: str = None,
    ):
        self.status = status
        self.last_modified = last_modified
        self.canvas = canvas
        self.locked_by = locked_by
        self.version = version
        self.contact_flow_version_id = contact_flow_version_id
        self.last_modified_by = last_modified_by
        self.contact_flow_version_description = contact_flow_version_description
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.locked_by is not None:
            result['LockedBy'] = self.locked_by
        if self.version is not None:
            result['Version'] = self.version
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('LockedBy') is not None:
            self.locked_by = m.get('LockedBy')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class CommitContactFlowVersionModificationResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        contact_flow_version: CommitContactFlowVersionModificationResponseBodyContactFlowVersion = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.contact_flow_version = contact_flow_version
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.contact_flow_version:
            self.contact_flow_version.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.contact_flow_version is not None:
            result['ContactFlowVersion'] = self.contact_flow_version.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ContactFlowVersion') is not None:
            temp_model = CommitContactFlowVersionModificationResponseBodyContactFlowVersion()
            self.contact_flow_version = temp_model.from_map(m['ContactFlowVersion'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CommitContactFlowVersionModificationResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CommitContactFlowVersionModificationResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CommitContactFlowVersionModificationResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateBatchJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        scenario_id: str = None,
        strategy_json: str = None,
        job_file_path: str = None,
        submitted: bool = None,
        calling_number: List[str] = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.scenario_id = scenario_id
        self.strategy_json = strategy_json
        self.job_file_path = job_file_path
        self.submitted = submitted
        self.calling_number = calling_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.submitted is not None:
            result['Submitted'] = self.submitted
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('Submitted') is not None:
            self.submitted = m.get('Submitted')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        return self


class CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class CreateBatchJobsResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy_name: str = None,
        max_attempts_per_day: int = None,
        working_time: List[CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        strategy_id: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        strategy_description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
    ):
        self.type = type
        self.strategy_name = strategy_name
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.strategy_id = strategy_id
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.strategy_description = strategy_description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateBatchJobsResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        return self


class CreateBatchJobsResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        job_group_id: str = None,
        scenario_id: str = None,
        creation_time: int = None,
        strategy: CreateBatchJobsResponseBodyJobGroupStrategy = None,
        calling_numbers: List[str] = None,
        job_group_name: str = None,
        job_file_path: str = None,
        job_group_description: str = None,
    ):
        self.job_group_id = job_group_id
        self.scenario_id = scenario_id
        self.creation_time = creation_time
        self.strategy = strategy
        self.calling_numbers = calling_numbers
        self.job_group_name = job_group_name
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        result = dict()
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Strategy') is not None:
            temp_model = CreateBatchJobsResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        return self


class CreateBatchJobsResponseBody(TeaModel):
    def __init__(
        self,
        job_group: CreateBatchJobsResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        result = dict()
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobGroup') is not None:
            temp_model = CreateBatchJobsResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateBatchJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateBatchJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateCabInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_name: str = None,
        instance_description: str = None,
        max_concurrent_conversation: int = None,
        call_center_instance_id: str = None,
    ):
        self.instance_name = instance_name
        self.instance_description = instance_description
        self.max_concurrent_conversation = max_concurrent_conversation
        self.call_center_instance_id = call_center_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        return self


class CreateCabInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        call_center_instance_id: str = None,
        owner: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
        instance_id: str = None,
        instance_description: str = None,
    ):
        self.creation_time = creation_time
        self.call_center_instance_id = call_center_instance_id
        self.owner = owner
        self.instance_name = instance_name
        self.max_concurrent_conversation = max_concurrent_conversation
        self.instance_id = instance_id
        self.instance_description = instance_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        return self


class CreateCabInstanceResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        instance: CreateCabInstanceResponseBodyInstance = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.instance = instance
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Instance') is not None:
            temp_model = CreateCabInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateCabInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateCabInstanceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateCabInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateContactFlowRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        type: str = None,
        canvas: str = None,
        content: str = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.type = type
        self.canvas = canvas
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.type is not None:
            result['Type'] = self.type
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class CreateContactFlowResponseBodyContactFlowPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = CreateContactFlowResponseBodyContactFlowPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion(TeaModel):
    def __init__(
        self,
        status: str = None,
        last_modified: str = None,
        canvas: str = None,
        locked_by: str = None,
        version: str = None,
        contact_flow_version_id: str = None,
        last_modified_by: str = None,
        contact_flow_version_description: str = None,
        content: str = None,
    ):
        self.status = status
        self.last_modified = last_modified
        self.canvas = canvas
        self.locked_by = locked_by
        self.version = version
        self.contact_flow_version_id = contact_flow_version_id
        self.last_modified_by = last_modified_by
        self.contact_flow_version_description = contact_flow_version_description
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.canvas is not None:
            result['Canvas'] = self.canvas
        if self.locked_by is not None:
            result['LockedBy'] = self.locked_by
        if self.version is not None:
            result['Version'] = self.version
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('Canvas') is not None:
            self.canvas = m.get('Canvas')
        if m.get('LockedBy') is not None:
            self.locked_by = m.get('LockedBy')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class CreateContactFlowResponseBodyContactFlowVersions(TeaModel):
    def __init__(
        self,
        contact_flow_version: List[CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion] = None,
    ):
        self.contact_flow_version = contact_flow_version

    def validate(self):
        if self.contact_flow_version:
            for k in self.contact_flow_version:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['ContactFlowVersion'] = []
        if self.contact_flow_version is not None:
            for k in self.contact_flow_version:
                result['ContactFlowVersion'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contact_flow_version = []
        if m.get('ContactFlowVersion') is not None:
            for k in m.get('ContactFlowVersion'):
                temp_model = CreateContactFlowResponseBodyContactFlowVersionsContactFlowVersion()
                self.contact_flow_version.append(temp_model.from_map(k))
        return self


class CreateContactFlowResponseBodyContactFlow(TeaModel):
    def __init__(
        self,
        contact_flow_description: str = None,
        type: str = None,
        phone_numbers: CreateContactFlowResponseBodyContactFlowPhoneNumbers = None,
        contact_flow_name: str = None,
        versions: CreateContactFlowResponseBodyContactFlowVersions = None,
        instance_id: str = None,
        contact_flow_id: str = None,
        applied_version: str = None,
    ):
        self.contact_flow_description = contact_flow_description
        self.type = type
        self.phone_numbers = phone_numbers
        self.contact_flow_name = contact_flow_name
        self.versions = versions
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id
        self.applied_version = applied_version

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.versions:
            self.versions.validate()

    def to_map(self):
        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.type is not None:
            result['Type'] = self.type
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.versions is not None:
            result['Versions'] = self.versions.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('PhoneNumbers') is not None:
            temp_model = CreateContactFlowResponseBodyContactFlowPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('Versions') is not None:
            temp_model = CreateContactFlowResponseBodyContactFlowVersions()
            self.versions = temp_model.from_map(m['Versions'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        return self


class CreateContactFlowResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        contact_flow: CreateContactFlowResponseBodyContactFlow = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.contact_flow = contact_flow
        self.success = success

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactFlow') is not None:
            temp_model = CreateContactFlowResponseBodyContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateContactFlowResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateContactFlowResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateContactFlowResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateFaultRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        agent_id: int = None,
        connect_id: str = None,
        agent_oss_file_name: str = None,
        agent_file_path: str = None,
        custom_oss_file_name: str = None,
        custom_file_path: str = None,
        description: str = None,
        client_ip: str = None,
        client_port: str = None,
        operating_system_version: str = None,
        browser_version: str = None,
        microphone_list: str = None,
        microphone_equipment: str = None,
        speaker_list: str = None,
        speaker_equipment: str = None,
        start_time: int = None,
        end_time: int = None,
        service_ip: str = None,
        service_port: str = None,
    ):
        self.instance_id = instance_id
        self.agent_id = agent_id
        self.connect_id = connect_id
        self.agent_oss_file_name = agent_oss_file_name
        self.agent_file_path = agent_file_path
        self.custom_oss_file_name = custom_oss_file_name
        self.custom_file_path = custom_file_path
        self.description = description
        self.client_ip = client_ip
        self.client_port = client_port
        self.operating_system_version = operating_system_version
        self.browser_version = browser_version
        self.microphone_list = microphone_list
        self.microphone_equipment = microphone_equipment
        self.speaker_list = speaker_list
        self.speaker_equipment = speaker_equipment
        self.start_time = start_time
        self.end_time = end_time
        self.service_ip = service_ip
        self.service_port = service_port

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.connect_id is not None:
            result['ConnectId'] = self.connect_id
        if self.agent_oss_file_name is not None:
            result['AgentOssFileName'] = self.agent_oss_file_name
        if self.agent_file_path is not None:
            result['AgentFilePath'] = self.agent_file_path
        if self.custom_oss_file_name is not None:
            result['CustomOssFileName'] = self.custom_oss_file_name
        if self.custom_file_path is not None:
            result['CustomFilePath'] = self.custom_file_path
        if self.description is not None:
            result['Description'] = self.description
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        if self.operating_system_version is not None:
            result['OperatingSystemVersion'] = self.operating_system_version
        if self.browser_version is not None:
            result['BrowserVersion'] = self.browser_version
        if self.microphone_list is not None:
            result['MicrophoneList'] = self.microphone_list
        if self.microphone_equipment is not None:
            result['MicrophoneEquipment'] = self.microphone_equipment
        if self.speaker_list is not None:
            result['SpeakerList'] = self.speaker_list
        if self.speaker_equipment is not None:
            result['SpeakerEquipment'] = self.speaker_equipment
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.service_ip is not None:
            result['ServiceIp'] = self.service_ip
        if self.service_port is not None:
            result['ServicePort'] = self.service_port
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('ConnectId') is not None:
            self.connect_id = m.get('ConnectId')
        if m.get('AgentOssFileName') is not None:
            self.agent_oss_file_name = m.get('AgentOssFileName')
        if m.get('AgentFilePath') is not None:
            self.agent_file_path = m.get('AgentFilePath')
        if m.get('CustomOssFileName') is not None:
            self.custom_oss_file_name = m.get('CustomOssFileName')
        if m.get('CustomFilePath') is not None:
            self.custom_file_path = m.get('CustomFilePath')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        if m.get('OperatingSystemVersion') is not None:
            self.operating_system_version = m.get('OperatingSystemVersion')
        if m.get('BrowserVersion') is not None:
            self.browser_version = m.get('BrowserVersion')
        if m.get('MicrophoneList') is not None:
            self.microphone_list = m.get('MicrophoneList')
        if m.get('MicrophoneEquipment') is not None:
            self.microphone_equipment = m.get('MicrophoneEquipment')
        if m.get('SpeakerList') is not None:
            self.speaker_list = m.get('SpeakerList')
        if m.get('SpeakerEquipment') is not None:
            self.speaker_equipment = m.get('SpeakerEquipment')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ServiceIp') is not None:
            self.service_ip = m.get('ServiceIp')
        if m.get('ServicePort') is not None:
            self.service_port = m.get('ServicePort')
        return self


class CreateFaultResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateFaultResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateFaultResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateFaultResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateInstanceRequest(TeaModel):
    def __init__(
        self,
        name: str = None,
        description: str = None,
        domain_name: str = None,
        storage_max_days: int = None,
        storage_max_size: int = None,
        directory_id: str = None,
        phone_number: str = None,
        admin_ram_id: List[str] = None,
        phone_numbers: List[str] = None,
        user_object: List[str] = None,
    ):
        self.name = name
        self.description = description
        self.domain_name = domain_name
        self.storage_max_days = storage_max_days
        self.storage_max_size = storage_max_size
        self.directory_id = directory_id
        self.phone_number = phone_number
        self.admin_ram_id = admin_ram_id
        self.phone_numbers = phone_numbers
        self.user_object = user_object

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.admin_ram_id is not None:
            result['AdminRamId'] = self.admin_ram_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.user_object is not None:
            result['UserObject'] = self.user_object
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('AdminRamId') is not None:
            self.admin_ram_id = m.get('AdminRamId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('UserObject') is not None:
            self.user_object = m.get('UserObject')
        return self


class CreateInstanceResponseBodyInstanceSuccessLoginNames(TeaModel):
    def __init__(
        self,
        success_login_name: List[str] = None,
    ):
        self.success_login_name = success_login_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.success_login_name is not None:
            result['SuccessLoginName'] = self.success_login_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SuccessLoginName') is not None:
            self.success_login_name = m.get('SuccessLoginName')
        return self


class CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class CreateInstanceResponseBodyInstancePhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = CreateInstanceResponseBodyInstancePhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class CreateInstanceResponseBodyInstanceSuccessPhoneNumbers(TeaModel):
    def __init__(
        self,
        success_phone_number: List[str] = None,
    ):
        self.success_phone_number = success_phone_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.success_phone_number is not None:
            result['SuccessPhoneNumber'] = self.success_phone_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SuccessPhoneNumber') is not None:
            self.success_phone_number = m.get('SuccessPhoneNumber')
        return self


class CreateInstanceResponseBodyInstanceFailLoginNames(TeaModel):
    def __init__(
        self,
        fail_login_name: List[str] = None,
    ):
        self.fail_login_name = fail_login_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.fail_login_name is not None:
            result['FailLoginName'] = self.fail_login_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FailLoginName') is not None:
            self.fail_login_name = m.get('FailLoginName')
        return self


class CreateInstanceResponseBodyInstanceFailPhoneNumbers(TeaModel):
    def __init__(
        self,
        fail_phone_number: List[str] = None,
    ):
        self.fail_phone_number = fail_phone_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.fail_phone_number is not None:
            result['FailPhoneNumber'] = self.fail_phone_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FailPhoneNumber') is not None:
            self.fail_phone_number = m.get('FailPhoneNumber')
        return self


class CreateInstanceResponseBodyInstanceAdminUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class CreateInstanceResponseBodyInstanceAdminUser(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: CreateInstanceResponseBodyInstanceAdminUserDetail = None,
    ):
        self.user_id = user_id
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = CreateInstanceResponseBodyInstanceAdminUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class CreateInstanceResponseBodyInstanceAdmin(TeaModel):
    def __init__(
        self,
        user: List[CreateInstanceResponseBodyInstanceAdminUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = CreateInstanceResponseBodyInstanceAdminUser()
                self.user.append(temp_model.from_map(k))
        return self


class CreateInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        status: str = None,
        owner: str = None,
        storage_max_size: int = None,
        storage_max_days: int = None,
        max_online_agents: int = None,
        success_login_names: CreateInstanceResponseBodyInstanceSuccessLoginNames = None,
        instance_id: str = None,
        domain_name: str = None,
        instance_description: str = None,
        phone_numbers: CreateInstanceResponseBodyInstancePhoneNumbers = None,
        console_url: str = None,
        success_phone_numbers: CreateInstanceResponseBodyInstanceSuccessPhoneNumbers = None,
        fail_login_names: CreateInstanceResponseBodyInstanceFailLoginNames = None,
        instance_name: str = None,
        storage_bucket: str = None,
        fail_phone_numbers: CreateInstanceResponseBodyInstanceFailPhoneNumbers = None,
        created_time: int = None,
        directory_id: str = None,
        admin: CreateInstanceResponseBodyInstanceAdmin = None,
        tenant_id: str = None,
    ):
        self.status = status
        self.owner = owner
        self.storage_max_size = storage_max_size
        self.storage_max_days = storage_max_days
        self.max_online_agents = max_online_agents
        self.success_login_names = success_login_names
        self.instance_id = instance_id
        self.domain_name = domain_name
        self.instance_description = instance_description
        self.phone_numbers = phone_numbers
        self.console_url = console_url
        self.success_phone_numbers = success_phone_numbers
        self.fail_login_names = fail_login_names
        self.instance_name = instance_name
        self.storage_bucket = storage_bucket
        self.fail_phone_numbers = fail_phone_numbers
        self.created_time = created_time
        self.directory_id = directory_id
        self.admin = admin
        self.tenant_id = tenant_id

    def validate(self):
        if self.success_login_names:
            self.success_login_names.validate()
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.success_phone_numbers:
            self.success_phone_numbers.validate()
        if self.fail_login_names:
            self.fail_login_names.validate()
        if self.fail_phone_numbers:
            self.fail_phone_numbers.validate()
        if self.admin:
            self.admin.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.max_online_agents is not None:
            result['MaxOnlineAgents'] = self.max_online_agents
        if self.success_login_names is not None:
            result['SuccessLoginNames'] = self.success_login_names.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.console_url is not None:
            result['ConsoleUrl'] = self.console_url
        if self.success_phone_numbers is not None:
            result['SuccessPhoneNumbers'] = self.success_phone_numbers.to_map()
        if self.fail_login_names is not None:
            result['FailLoginNames'] = self.fail_login_names.to_map()
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.storage_bucket is not None:
            result['StorageBucket'] = self.storage_bucket
        if self.fail_phone_numbers is not None:
            result['FailPhoneNumbers'] = self.fail_phone_numbers.to_map()
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.admin is not None:
            result['Admin'] = self.admin.to_map()
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('MaxOnlineAgents') is not None:
            self.max_online_agents = m.get('MaxOnlineAgents')
        if m.get('SuccessLoginNames') is not None:
            temp_model = CreateInstanceResponseBodyInstanceSuccessLoginNames()
            self.success_login_names = temp_model.from_map(m['SuccessLoginNames'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('PhoneNumbers') is not None:
            temp_model = CreateInstanceResponseBodyInstancePhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('ConsoleUrl') is not None:
            self.console_url = m.get('ConsoleUrl')
        if m.get('SuccessPhoneNumbers') is not None:
            temp_model = CreateInstanceResponseBodyInstanceSuccessPhoneNumbers()
            self.success_phone_numbers = temp_model.from_map(m['SuccessPhoneNumbers'])
        if m.get('FailLoginNames') is not None:
            temp_model = CreateInstanceResponseBodyInstanceFailLoginNames()
            self.fail_login_names = temp_model.from_map(m['FailLoginNames'])
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('StorageBucket') is not None:
            self.storage_bucket = m.get('StorageBucket')
        if m.get('FailPhoneNumbers') is not None:
            temp_model = CreateInstanceResponseBodyInstanceFailPhoneNumbers()
            self.fail_phone_numbers = temp_model.from_map(m['FailPhoneNumbers'])
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('Admin') is not None:
            temp_model = CreateInstanceResponseBodyInstanceAdmin()
            self.admin = temp_model.from_map(m['Admin'])
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class CreateInstanceResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        instance: CreateInstanceResponseBodyInstance = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.instance = instance
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Instance') is not None:
            temp_model = CreateInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateInstanceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateJobGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        scenario_id: str = None,
        strategy_json: str = None,
        calling_number: List[str] = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.scenario_id = scenario_id
        self.strategy_json = strategy_json
        self.calling_number = calling_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        return self


class CreateJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        from_: str = None,
        to: str = None,
    ):
        self.from_ = from_
        self.to = to

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.from_ is not None:
            result['From'] = self.from_
        if self.to is not None:
            result['To'] = self.to
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('From') is not None:
            self.from_ = m.get('From')
        if m.get('To') is not None:
            self.to = m.get('To')
        return self


class CreateJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy_name: str = None,
        max_attempts_per_day: int = None,
        working_time: List[CreateJobGroupResponseBodyJobGroupStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        strategy_id: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        strategy_description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
    ):
        self.type = type
        self.strategy_name = strategy_name
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.strategy_id = strategy_id
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.strategy_description = strategy_description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        return self


class CreateJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        job_group_id: str = None,
        scenario_id: str = None,
        creation_time: int = None,
        strategy: CreateJobGroupResponseBodyJobGroupStrategy = None,
        calling_numbers: List[str] = None,
        job_group_name: str = None,
        job_file_path: str = None,
        job_group_description: str = None,
    ):
        self.job_group_id = job_group_id
        self.scenario_id = scenario_id
        self.creation_time = creation_time
        self.strategy = strategy
        self.calling_numbers = calling_numbers
        self.job_group_name = job_group_name
        self.job_file_path = job_file_path
        self.job_group_description = job_group_description

    def validate(self):
        if self.strategy:
            self.strategy.validate()

    def to_map(self):
        result = dict()
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.job_group_name is not None:
            result['JobGroupName'] = self.job_group_name
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.job_group_description is not None:
            result['JobGroupDescription'] = self.job_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Strategy') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('JobGroupName') is not None:
            self.job_group_name = m.get('JobGroupName')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('JobGroupDescription') is not None:
            self.job_group_description = m.get('JobGroupDescription')
        return self


class CreateJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        job_group: CreateJobGroupResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        result = dict()
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobGroup') is not None:
            temp_model = CreateJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateMediaRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        file_name: str = None,
        type: str = None,
        content: str = None,
        oss_file_name: str = None,
        oss_file_path: str = None,
        upload_result: str = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.file_name = file_name
        self.type = type
        self.content = content
        self.oss_file_name = oss_file_name
        self.oss_file_path = oss_file_path
        self.upload_result = upload_result

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.type is not None:
            result['Type'] = self.type
        if self.content is not None:
            result['Content'] = self.content
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.oss_file_path is not None:
            result['OssFilePath'] = self.oss_file_path
        if self.upload_result is not None:
            result['UploadResult'] = self.upload_result
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('OssFilePath') is not None:
            self.oss_file_path = m.get('OssFilePath')
        if m.get('UploadResult') is not None:
            self.upload_result = m.get('UploadResult')
        return self


class CreateMediaResponseBodyMediaUploadParam(TeaModel):
    def __init__(
        self,
        instance: str = None,
        oss_file_path: str = None,
        file_name: str = None,
        name: str = None,
        id: str = None,
        oss_file_name: str = None,
    ):
        self.instance = instance
        self.oss_file_path = oss_file_path
        self.file_name = file_name
        self.name = name
        self.id = id
        self.oss_file_name = oss_file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.oss_file_path is not None:
            result['OssFilePath'] = self.oss_file_path
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('OssFilePath') is not None:
            self.oss_file_path = m.get('OssFilePath')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        return self


class CreateMediaResponseBody(TeaModel):
    def __init__(
        self,
        media_upload_param: CreateMediaResponseBodyMediaUploadParam = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.media_upload_param = media_upload_param
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.media_upload_param:
            self.media_upload_param.validate()

    def to_map(self):
        result = dict()
        if self.media_upload_param is not None:
            result['MediaUploadParam'] = self.media_upload_param.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MediaUploadParam') is not None:
            temp_model = CreateMediaResponseBodyMediaUploadParam()
            self.media_upload_param = temp_model.from_map(m['MediaUploadParam'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateMediaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateMediaResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateMediaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreatePredictiveJobGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        strategy_json: str = None,
        name: str = None,
        description: str = None,
        timing_schedule: bool = None,
        job_file_path: str = None,
        is_draft: bool = None,
        jobs_json: List[str] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.strategy_json = strategy_json
        self.name = name
        self.description = description
        self.timing_schedule = timing_schedule
        self.job_file_path = job_file_path
        self.is_draft = is_draft
        self.jobs_json = jobs_json

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.timing_schedule is not None:
            result['TimingSchedule'] = self.timing_schedule
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.is_draft is not None:
            result['IsDraft'] = self.is_draft
        if self.jobs_json is not None:
            result['JobsJson'] = self.jobs_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('TimingSchedule') is not None:
            self.timing_schedule = m.get('TimingSchedule')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('IsDraft') is not None:
            self.is_draft = m.get('IsDraft')
        if m.get('JobsJson') is not None:
            self.jobs_json = m.get('JobsJson')
        return self


class CreatePredictiveJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        job_group_id: str = None,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.job_group_id = job_group_id
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreatePredictiveJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreatePredictiveJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreatePredictiveJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScenarioRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        strategy_json: str = None,
        type: str = None,
        surveys_json: List[str] = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.strategy_json = strategy_json
        self.type = type
        self.surveys_json = surveys_json

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.strategy_json is not None:
            result['StrategyJson'] = self.strategy_json
        if self.type is not None:
            result['Type'] = self.type
        if self.surveys_json is not None:
            result['SurveysJson'] = self.surveys_json
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('StrategyJson') is not None:
            self.strategy_json = m.get('StrategyJson')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('SurveysJson') is not None:
            self.surveys_json = m.get('SurveysJson')
        return self


class CreateScenarioResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class CreateScenarioResponseBodyScenarioStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy_name: str = None,
        max_attempts_per_day: int = None,
        working_time: List[CreateScenarioResponseBodyScenarioStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        strategy_id: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        strategy_description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
    ):
        self.type = type
        self.strategy_name = strategy_name
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.strategy_id = strategy_id
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.strategy_description = strategy_description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateScenarioResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        return self


class CreateScenarioResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        intent_id: str = None,
    ):
        self.node_id = node_id
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class CreateScenarioResponseBodyScenarioSurveys(TeaModel):
    def __init__(
        self,
        round: int = None,
        survey_description: str = None,
        beebot_id: str = None,
        intents: List[CreateScenarioResponseBodyScenarioSurveysIntents] = None,
        survey_name: str = None,
        role: str = None,
        survey_id: str = None,
    ):
        self.round = round
        self.survey_description = survey_description
        self.beebot_id = beebot_id
        self.intents = intents
        self.survey_name = survey_name
        self.role = role
        self.survey_id = survey_id

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.round is not None:
            result['Round'] = self.round
        if self.survey_description is not None:
            result['SurveyDescription'] = self.survey_description
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.survey_name is not None:
            result['SurveyName'] = self.survey_name
        if self.role is not None:
            result['Role'] = self.role
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SurveyDescription') is not None:
            self.survey_description = m.get('SurveyDescription')
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = CreateScenarioResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('SurveyName') is not None:
            self.survey_name = m.get('SurveyName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class CreateScenarioResponseBodyScenarioVariables(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class CreateScenarioResponseBodyScenario(TeaModel):
    def __init__(
        self,
        type: str = None,
        scenario_id: str = None,
        strategy: CreateScenarioResponseBodyScenarioStrategy = None,
        is_template: bool = None,
        scenario_description: str = None,
        scenario_name: str = None,
        surveys: List[CreateScenarioResponseBodyScenarioSurveys] = None,
        variables: List[CreateScenarioResponseBodyScenarioVariables] = None,
    ):
        self.type = type
        self.scenario_id = scenario_id
        self.strategy = strategy
        self.is_template = is_template
        self.scenario_description = scenario_description
        self.scenario_name = scenario_name
        self.surveys = surveys
        self.variables = variables

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.scenario_description is not None:
            result['ScenarioDescription'] = self.scenario_description
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = CreateScenarioResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('ScenarioDescription') is not None:
            self.scenario_description = m.get('ScenarioDescription')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = CreateScenarioResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = CreateScenarioResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class CreateScenarioResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        scenario: CreateScenarioResponseBodyScenario = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.scenario = scenario

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Scenario') is not None:
            temp_model = CreateScenarioResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        return self


class CreateScenarioResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateScenarioResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateScenarioFromTemplateRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        template_id: str = None,
        variables: str = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.template_id = template_id
        self.variables = variables

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.template_id is not None:
            result['TemplateId'] = self.template_id
        if self.variables is not None:
            result['Variables'] = self.variables
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('TemplateId') is not None:
            self.template_id = m.get('TemplateId')
        if m.get('Variables') is not None:
            self.variables = m.get('Variables')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy_name: str = None,
        max_attempts_per_day: int = None,
        working_time: List[CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        strategy_id: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        strategy_description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
    ):
        self.type = type
        self.strategy_name = strategy_name
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.strategy_id = strategy_id
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.strategy_description = strategy_description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        intent_id: str = None,
    ):
        self.node_id = node_id
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioSurveys(TeaModel):
    def __init__(
        self,
        round: int = None,
        survey_description: str = None,
        beebot_id: str = None,
        intents: List[CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents] = None,
        survey_name: str = None,
        role: str = None,
        survey_id: str = None,
    ):
        self.round = round
        self.survey_description = survey_description
        self.beebot_id = beebot_id
        self.intents = intents
        self.survey_name = survey_name
        self.role = role
        self.survey_id = survey_id

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.round is not None:
            result['Round'] = self.round
        if self.survey_description is not None:
            result['SurveyDescription'] = self.survey_description
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.survey_name is not None:
            result['SurveyName'] = self.survey_name
        if self.role is not None:
            result['Role'] = self.role
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SurveyDescription') is not None:
            self.survey_description = m.get('SurveyDescription')
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('SurveyName') is not None:
            self.survey_name = m.get('SurveyName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class CreateScenarioFromTemplateResponseBodyScenarioVariables(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class CreateScenarioFromTemplateResponseBodyScenario(TeaModel):
    def __init__(
        self,
        type: str = None,
        scenario_id: str = None,
        strategy: CreateScenarioFromTemplateResponseBodyScenarioStrategy = None,
        is_template: bool = None,
        scenario_description: str = None,
        scenario_name: str = None,
        surveys: List[CreateScenarioFromTemplateResponseBodyScenarioSurveys] = None,
        variables: List[CreateScenarioFromTemplateResponseBodyScenarioVariables] = None,
    ):
        self.type = type
        self.scenario_id = scenario_id
        self.strategy = strategy
        self.is_template = is_template
        self.scenario_description = scenario_description
        self.scenario_name = scenario_name
        self.surveys = surveys
        self.variables = variables

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.scenario_description is not None:
            result['ScenarioDescription'] = self.scenario_description
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = CreateScenarioFromTemplateResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('ScenarioDescription') is not None:
            self.scenario_description = m.get('ScenarioDescription')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = CreateScenarioFromTemplateResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class CreateScenarioFromTemplateResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        scenario: CreateScenarioFromTemplateResponseBodyScenario = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.scenario = scenario

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Scenario') is not None:
            temp_model = CreateScenarioFromTemplateResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        return self


class CreateScenarioFromTemplateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateScenarioFromTemplateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateScenarioFromTemplateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        description: str = None,
        routing_strategy: str = None,
        allow_private_outbound_number: bool = None,
        outbound_phone_number_id: List[str] = None,
        user_id: List[str] = None,
        skill_level: List[int] = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.description = description
        self.routing_strategy = routing_strategy
        self.allow_private_outbound_number = allow_private_outbound_number
        self.outbound_phone_number_id = outbound_phone_number_id
        self.user_id = user_id
        self.skill_level = skill_level

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.allow_private_outbound_number is not None:
            result['AllowPrivateOutboundNumber'] = self.allow_private_outbound_number
        if self.outbound_phone_number_id is not None:
            result['OutboundPhoneNumberId'] = self.outbound_phone_number_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('AllowPrivateOutboundNumber') is not None:
            self.allow_private_outbound_number = m.get('AllowPrivateOutboundNumber')
        if m.get('OutboundPhoneNumberId') is not None:
            self.outbound_phone_number_id = m.get('OutboundPhoneNumberId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class CreateSkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        skill_group_id: str = None,
        code: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.skill_group_id = skill_group_id
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateSkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateSkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateSurveyRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
        name: str = None,
        description: str = None,
        flow_json: str = None,
        corpora: str = None,
        speech_optimization_param: str = None,
        global_questions: str = None,
        role: str = None,
        round: int = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        self.name = name
        self.description = description
        self.flow_json = flow_json
        self.corpora = corpora
        self.speech_optimization_param = speech_optimization_param
        self.global_questions = global_questions
        self.role = role
        self.round = round

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        return self


class CreateSurveyResponseBodySurveyAsrCustomModel(TeaModel):
    def __init__(
        self,
        custom_model_status: int = None,
        corpora: str = None,
    ):
        self.custom_model_status = custom_model_status
        self.corpora = corpora

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        return self


class CreateSurveyResponseBodySurveyFlow(TeaModel):
    def __init__(
        self,
        is_published: bool = None,
        flow_json: str = None,
        flow_id: str = None,
    ):
        self.is_published = is_published
        self.flow_json = flow_json
        self.flow_id = flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        return self


class CreateSurveyResponseBodySurvey(TeaModel):
    def __init__(
        self,
        global_questions: str = None,
        round: int = None,
        speech_optimization_param: str = None,
        description: str = None,
        hot_words: str = None,
        asr_custom_model: CreateSurveyResponseBodySurveyAsrCustomModel = None,
        flow: CreateSurveyResponseBodySurveyFlow = None,
        role: str = None,
        name: str = None,
        scenario_uuid: str = None,
        id: str = None,
    ):
        self.global_questions = global_questions
        self.round = round
        self.speech_optimization_param = speech_optimization_param
        self.description = description
        self.hot_words = hot_words
        self.asr_custom_model = asr_custom_model
        self.flow = flow
        self.role = role
        self.name = name
        self.scenario_uuid = scenario_uuid
        self.id = id

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        result = dict()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.round is not None:
            result['Round'] = self.round
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.description is not None:
            result['Description'] = self.description
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.role is not None:
            result['Role'] = self.role
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('AsrCustomModel') is not None:
            temp_model = CreateSurveyResponseBodySurveyAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Flow') is not None:
            temp_model = CreateSurveyResponseBodySurveyFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class CreateSurveyResponseBody(TeaModel):
    def __init__(
        self,
        survey: CreateSurveyResponseBodySurvey = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.survey = survey
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.survey:
            self.survey.validate()

    def to_map(self):
        result = dict()
        if self.survey is not None:
            result['Survey'] = self.survey.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Survey') is not None:
            temp_model = CreateSurveyResponseBodySurvey()
            self.survey = temp_model.from_map(m['Survey'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateSurveyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateSurveyResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateUserRequest(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        instance_id: str = None,
        login_name: str = None,
        phone: str = None,
        email: str = None,
        private_outbound_number_id: str = None,
        role_id: List[str] = None,
        skill_group_id: List[str] = None,
        skill_level: List[int] = None,
    ):
        self.display_name = display_name
        self.instance_id = instance_id
        self.login_name = login_name
        self.phone = phone
        self.email = email
        self.private_outbound_number_id = private_outbound_number_id
        self.role_id = role_id
        self.skill_group_id = skill_group_id
        self.skill_level = skill_level

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.email is not None:
            result['Email'] = self.email
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class CreateUserResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        user_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.user_id = user_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class CreateVoiceAppraiseRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_flow_version_id: str = None,
        content: str = None,
        is_appraise: bool = None,
    ):
        self.instance_id = instance_id
        self.contact_flow_version_id = contact_flow_version_id
        self.content = content
        self.is_appraise = is_appraise

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.content is not None:
            result['Content'] = self.content
        if self.is_appraise is not None:
            result['IsAppraise'] = self.is_appraise
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('IsAppraise') is not None:
            self.is_appraise = m.get('IsAppraise')
        return self


class CreateVoiceAppraiseResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class CreateVoiceAppraiseResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: CreateVoiceAppraiseResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = CreateVoiceAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class DeleteInstanceResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteInstanceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteJobGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DeleteJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteMediaRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
    ):
        self.instance_id = instance_id
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class DeleteMediaResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteMediaResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteMediaResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteMediaResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeletePhoneTagsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        phone_number_list: List[str] = None,
    ):
        self.instance_id = instance_id
        self.phone_number_list = phone_number_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_list is not None:
            result['PhoneNumberList'] = self.phone_number_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberList') is not None:
            self.phone_number_list = m.get('PhoneNumberList')
        return self


class DeletePhoneTagsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeletePhoneTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeletePhoneTagsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeletePhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class DeleteSkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteSkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DeleteSurveyRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
        survey_id: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        self.survey_id = survey_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class DeleteSurveyResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DeleteSurveyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DeleteSurveyResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DeleteSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DialExRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        caller: str = None,
        callee: str = None,
        rout_point: str = None,
        answer_mode: int = None,
        provider: str = None,
    ):
        self.instance_id = instance_id
        self.caller = caller
        self.callee = callee
        self.rout_point = rout_point
        self.answer_mode = answer_mode
        self.provider = provider

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.rout_point is not None:
            result['RoutPoint'] = self.rout_point
        if self.answer_mode is not None:
            result['AnswerMode'] = self.answer_mode
        if self.provider is not None:
            result['Provider'] = self.provider
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('RoutPoint') is not None:
            self.rout_point = m.get('RoutPoint')
        if m.get('AnswerMode') is not None:
            self.answer_mode = m.get('AnswerMode')
        if m.get('Provider') is not None:
            self.provider = m.get('Provider')
        return self


class DialExResponseBody(TeaModel):
    def __init__(
        self,
        status_desc: str = None,
        task_id: str = None,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        status_code: str = None,
        code: str = None,
        success: bool = None,
        time_stamp: str = None,
    ):
        self.status_desc = status_desc
        self.task_id = task_id
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.status_code = status_code
        self.code = code
        self.success = success
        self.time_stamp = time_stamp

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status_desc is not None:
            result['StatusDesc'] = self.status_desc
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StatusDesc') is not None:
            self.status_desc = m.get('StatusDesc')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class DialExResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DialExResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DialExResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DialogueRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        call_id: str = None,
        call_type: str = None,
        scenario_id: str = None,
        task_id: str = None,
        utterance: str = None,
        action_key: str = None,
        action_params: str = None,
        calling_number: str = None,
        called_number: str = None,
        instance_owner_id: int = None,
    ):
        self.instance_id = instance_id
        self.call_id = call_id
        self.call_type = call_type
        self.scenario_id = scenario_id
        self.task_id = task_id
        self.utterance = utterance
        self.action_key = action_key
        self.action_params = action_params
        self.calling_number = calling_number
        self.called_number = called_number
        self.instance_owner_id = instance_owner_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.call_type is not None:
            result['CallType'] = self.call_type
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.utterance is not None:
            result['Utterance'] = self.utterance
        if self.action_key is not None:
            result['ActionKey'] = self.action_key
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallType') is not None:
            self.call_type = m.get('CallType')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('Utterance') is not None:
            self.utterance = m.get('Utterance')
        if m.get('ActionKey') is not None:
            self.action_key = m.get('ActionKey')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        return self


class DialogueResponseBodyFeedback(TeaModel):
    def __init__(
        self,
        action: str = None,
        interruptible: bool = None,
        action_params: str = None,
        content: str = None,
    ):
        self.action = action
        self.interruptible = interruptible
        self.action_params = action_params
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.action is not None:
            result['Action'] = self.action
        if self.interruptible is not None:
            result['Interruptible'] = self.interruptible
        if self.action_params is not None:
            result['ActionParams'] = self.action_params
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Action') is not None:
            self.action = m.get('Action')
        if m.get('Interruptible') is not None:
            self.interruptible = m.get('Interruptible')
        if m.get('ActionParams') is not None:
            self.action_params = m.get('ActionParams')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class DialogueResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        feedback: DialogueResponseBodyFeedback = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.feedback = feedback
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.feedback:
            self.feedback.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.feedback is not None:
            result['Feedback'] = self.feedback.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Feedback') is not None:
            temp_model = DialogueResponseBodyFeedback()
            self.feedback = temp_model.from_map(m['Feedback'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DialogueResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DialogueResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DialogueResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DisableTrunkProvidersRequest(TeaModel):
    def __init__(
        self,
        provider_name: List[str] = None,
    ):
        self.provider_name = provider_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        return self


class DisableTrunkProvidersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DisableTrunkProvidersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DisableTrunkProvidersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DisableTrunkProvidersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadAllTypeRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_id: str = None,
        channel: str = None,
    ):
        self.instance_id = instance_id
        self.contact_id = contact_id
        self.channel = channel

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.channel is not None:
            result['Channel'] = self.channel
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        return self


class DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
        file_name: str = None,
    ):
        self.signature_url = signature_url
        self.file_name = file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        if self.file_name is not None:
            result['FileName'] = self.file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        return self


class DownloadAllTypeRecordingResponseBodyMediaDownloadParamList(TeaModel):
    def __init__(
        self,
        media_download_param: List[DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam] = None,
    ):
        self.media_download_param = media_download_param

    def validate(self):
        if self.media_download_param:
            for k in self.media_download_param:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['MediaDownloadParam'] = []
        if self.media_download_param is not None:
            for k in self.media_download_param:
                result['MediaDownloadParam'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.media_download_param = []
        if m.get('MediaDownloadParam') is not None:
            for k in m.get('MediaDownloadParam'):
                temp_model = DownloadAllTypeRecordingResponseBodyMediaDownloadParamListMediaDownloadParam()
                self.media_download_param.append(temp_model.from_map(k))
        return self


class DownloadAllTypeRecordingResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        media_download_param_list: DownloadAllTypeRecordingResponseBodyMediaDownloadParamList = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.media_download_param_list = media_download_param_list
        self.code = code
        self.success = success

    def validate(self):
        if self.media_download_param_list:
            self.media_download_param_list.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.media_download_param_list is not None:
            result['MediaDownloadParamList'] = self.media_download_param_list.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('MediaDownloadParamList') is not None:
            temp_model = DownloadAllTypeRecordingResponseBodyMediaDownloadParamList()
            self.media_download_param_list = temp_model.from_map(m['MediaDownloadParamList'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadAllTypeRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DownloadAllTypeRecordingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadAllTypeRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadCabRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        task_id: str = None,
    ):
        self.instance_id = instance_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class DownloadCabRecordingResponseBodyMediaDownloadParam(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
        file_name: str = None,
    ):
        self.signature_url = signature_url
        self.file_name = file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        if self.file_name is not None:
            result['FileName'] = self.file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        return self


class DownloadCabRecordingResponseBody(TeaModel):
    def __init__(
        self,
        media_download_param: DownloadCabRecordingResponseBodyMediaDownloadParam = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.media_download_param = media_download_param
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.media_download_param:
            self.media_download_param.validate()

    def to_map(self):
        result = dict()
        if self.media_download_param is not None:
            result['MediaDownloadParam'] = self.media_download_param.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MediaDownloadParam') is not None:
            temp_model = DownloadCabRecordingResponseBodyMediaDownloadParam()
            self.media_download_param = temp_model.from_map(m['MediaDownloadParam'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadCabRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DownloadCabRecordingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadCabRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadOriginalStatisticsReportRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DownloadOriginalStatisticsReportResponseBodyDownloadParams(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
    ):
        self.signature_url = signature_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadOriginalStatisticsReportResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        download_params: DownloadOriginalStatisticsReportResponseBodyDownloadParams = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.download_params = download_params
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadOriginalStatisticsReportResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadOriginalStatisticsReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DownloadOriginalStatisticsReportResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadOriginalStatisticsReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        file_name: str = None,
        channel: str = None,
    ):
        self.instance_id = instance_id
        self.file_name = file_name
        self.channel = channel

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.channel is not None:
            result['Channel'] = self.channel
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        return self


class DownloadRecordingResponseBodyMediaDownloadParam(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
        file_name: str = None,
    ):
        self.signature_url = signature_url
        self.file_name = file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        if self.file_name is not None:
            result['FileName'] = self.file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        return self


class DownloadRecordingResponseBody(TeaModel):
    def __init__(
        self,
        media_download_param: DownloadRecordingResponseBodyMediaDownloadParam = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.media_download_param = media_download_param
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.media_download_param:
            self.media_download_param.validate()

    def to_map(self):
        result = dict()
        if self.media_download_param is not None:
            result['MediaDownloadParam'] = self.media_download_param.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('MediaDownloadParam') is not None:
            temp_model = DownloadRecordingResponseBodyMediaDownloadParam()
            self.media_download_param = temp_model.from_map(m['MediaDownloadParam'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DownloadRecordingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class DownloadUnreachableContactsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class DownloadUnreachableContactsResponseBodyDownloadParams(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
    ):
        self.signature_url = signature_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class DownloadUnreachableContactsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        download_params: DownloadUnreachableContactsResponseBodyDownloadParams = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.download_params = download_params
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('DownloadParams') is not None:
            temp_model = DownloadUnreachableContactsResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class DownloadUnreachableContactsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: DownloadUnreachableContactsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = DownloadUnreachableContactsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class FindUsersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        criteria: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.criteria = criteria
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        skill_group_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel(TeaModel):
    def __init__(
        self,
        skill: FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = FindUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class FindUsersResponseBodyUsersListUserSkillLevels(TeaModel):
    def __init__(
        self,
        skill_level: List[FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel] = None,
    ):
        self.skill_level = skill_level

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = FindUsersResponseBodyUsersListUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class FindUsersResponseBodyUsersListUserRolesRole(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        instance_id: str = None,
        role_name: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.instance_id = instance_id
        self.role_name = role_name
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class FindUsersResponseBodyUsersListUserRoles(TeaModel):
    def __init__(
        self,
        role: List[FindUsersResponseBodyUsersListUserRolesRole] = None,
    ):
        self.role = role

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = FindUsersResponseBodyUsersListUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class FindUsersResponseBodyUsersListUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class FindUsersResponseBodyUsersListUser(TeaModel):
    def __init__(
        self,
        skill_levels: FindUsersResponseBodyUsersListUserSkillLevels = None,
        private_outbound_number_id: str = None,
        user_id: str = None,
        roles: FindUsersResponseBodyUsersListUserRoles = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: FindUsersResponseBodyUsersListUserDetail = None,
    ):
        self.skill_levels = skill_levels
        self.private_outbound_number_id = private_outbound_number_id
        self.user_id = user_id
        self.roles = roles
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()
        if self.roles:
            self.roles.validate()
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillLevels') is not None:
            temp_model = FindUsersResponseBodyUsersListUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('Roles') is not None:
            temp_model = FindUsersResponseBodyUsersListUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = FindUsersResponseBodyUsersListUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class FindUsersResponseBodyUsersList(TeaModel):
    def __init__(
        self,
        user: List[FindUsersResponseBodyUsersListUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = FindUsersResponseBodyUsersListUser()
                self.user.append(temp_model.from_map(k))
        return self


class FindUsersResponseBodyUsers(TeaModel):
    def __init__(
        self,
        list: FindUsersResponseBodyUsersList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = FindUsersResponseBodyUsersList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class FindUsersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        users: FindUsersResponseBodyUsers = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.users = users
        self.code = code
        self.success = success

    def validate(self):
        if self.users:
            self.users.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.users is not None:
            result['Users'] = self.users.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Users') is not None:
            temp_model = FindUsersResponseBodyUsers()
            self.users = temp_model.from_map(m['Users'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class FindUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: FindUsersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = FindUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GenerateAgentStatisticReportRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        agent_id: str = None,
        start_date: str = None,
        end_date: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.agent_id = agent_id
        self.start_date = start_date
        self.end_date = end_date
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.start_date is not None:
            result['StartDate'] = self.start_date
        if self.end_date is not None:
            result['EndDate'] = self.end_date
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('StartDate') is not None:
            self.start_date = m.get('StartDate')
        if m.get('EndDate') is not None:
            self.end_date = m.get('EndDate')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_talk_time: int = None,
        average_talk_time: int = None,
        total_hold_time: int = None,
        max_hold_time: int = None,
        average_hold_time: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_work_time: int = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        satisfaction_index: float = None,
        calls_offered: int = None,
        calls_handled: int = None,
        handle_rate: float = None,
        total_ring_time: int = None,
        max_ring_time: int = None,
        average_ring_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_talk_time = max_talk_time
        self.average_talk_time = average_talk_time
        self.total_hold_time = total_hold_time
        self.max_hold_time = max_hold_time
        self.average_hold_time = average_hold_time
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_work_time = average_work_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.satisfaction_index = satisfaction_index
        self.calls_offered = calls_offered
        self.calls_handled = calls_handled
        self.handle_rate = handle_rate
        self.total_ring_time = total_ring_time
        self.max_ring_time = max_ring_time
        self.average_ring_time = average_ring_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_talk_time: int = None,
        average_talk_time: int = None,
        total_hold_time: int = None,
        max_hold_time: int = None,
        average_hold_time: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_work_time: int = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        satisfaction_index: float = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        answer_rate: float = None,
        total_dialing_time: int = None,
        max_dialing_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_talk_time = max_talk_time
        self.average_talk_time = average_talk_time
        self.total_hold_time = total_hold_time
        self.max_hold_time = max_hold_time
        self.average_hold_time = average_hold_time
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_work_time = average_work_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.satisfaction_index = satisfaction_index
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.answer_rate = answer_rate
        self.total_dialing_time = total_dialing_time
        self.max_dialing_time = max_dialing_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_talk_time: int = None,
        average_talk_time: int = None,
        total_hold_time: int = None,
        max_hold_time: int = None,
        average_hold_time: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_work_time: int = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        satisfaction_index: float = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_talk_time = max_talk_time
        self.average_talk_time = average_talk_time
        self.total_hold_time = total_hold_time
        self.max_hold_time = max_hold_time
        self.average_hold_time = average_hold_time
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_work_time = average_work_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.satisfaction_index = satisfaction_index
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic(TeaModel):
    def __init__(
        self,
        agent_id: str = None,
        login_name: str = None,
        agent_name: str = None,
        skill_group_ids: str = None,
        skill_group_names: str = None,
        instance_id: str = None,
        record_date: str = None,
        total_logged_in_time: int = None,
        total_break_time: int = None,
        occupancy_rate: float = None,
        total_ready_time: int = None,
        max_ready_time: int = None,
        average_ready_time: int = None,
        inbound: GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound = None,
        outbound: GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound = None,
        overall: GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall = None,
    ):
        self.agent_id = agent_id
        self.login_name = login_name
        self.agent_name = agent_name
        self.skill_group_ids = skill_group_ids
        self.skill_group_names = skill_group_names
        self.instance_id = instance_id
        self.record_date = record_date
        self.total_logged_in_time = total_logged_in_time
        self.total_break_time = total_break_time
        self.occupancy_rate = occupancy_rate
        self.total_ready_time = total_ready_time
        self.max_ready_time = max_ready_time
        self.average_ready_time = average_ready_time
        self.inbound = inbound
        self.outbound = outbound
        self.overall = overall

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.record_date is not None:
            result['RecordDate'] = self.record_date
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordDate') is not None:
            self.record_date = m.get('RecordDate')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('Inbound') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatisticOverall()
            self.overall = temp_model.from_map(m['Overall'])
        return self


class GenerateAgentStatisticReportResponseBodyDataListList(TeaModel):
    def __init__(
        self,
        generate_agent_statistic: List[GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic] = None,
    ):
        self.generate_agent_statistic = generate_agent_statistic

    def validate(self):
        if self.generate_agent_statistic:
            for k in self.generate_agent_statistic:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['GenerateAgentStatistic'] = []
        if self.generate_agent_statistic is not None:
            for k in self.generate_agent_statistic:
                result['GenerateAgentStatistic'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.generate_agent_statistic = []
        if m.get('GenerateAgentStatistic') is not None:
            for k in m.get('GenerateAgentStatistic'):
                temp_model = GenerateAgentStatisticReportResponseBodyDataListListGenerateAgentStatistic()
                self.generate_agent_statistic.append(temp_model.from_map(k))
        return self


class GenerateAgentStatisticReportResponseBodyDataList(TeaModel):
    def __init__(
        self,
        total_count: int = None,
        page_number: int = None,
        page_size: int = None,
        list: GenerateAgentStatisticReportResponseBodyDataListList = None,
    ):
        self.total_count = total_count
        self.page_number = page_number
        self.page_size = page_size
        self.list = list

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.list is not None:
            result['List'] = self.list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('List') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataListList()
            self.list = temp_model.from_map(m['List'])
        return self


class GenerateAgentStatisticReportResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: bool = None,
        code: str = None,
        message: str = None,
        http_status_code: int = None,
        data_list: GenerateAgentStatisticReportResponseBodyDataList = None,
    ):
        self.request_id = request_id
        self.success = success
        self.code = code
        self.message = message
        self.http_status_code = http_status_code
        self.data_list = data_list

    def validate(self):
        if self.data_list:
            self.data_list.validate()

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data_list is not None:
            result['DataList'] = self.data_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('DataList') is not None:
            temp_model = GenerateAgentStatisticReportResponseBodyDataList()
            self.data_list = temp_model.from_map(m['DataList'])
        return self


class GenerateAgentStatisticReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GenerateAgentStatisticReportResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GenerateAgentStatisticReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetAgentDataRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        start_day: str = None,
        end_day: str = None,
        user_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.start_day = start_day
        self.end_day = end_day
        self.user_id = user_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_day is not None:
            result['StartDay'] = self.start_day
        if self.end_day is not None:
            result['EndDay'] = self.end_day
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartDay') is not None:
            self.start_day = m.get('StartDay')
        if m.get('EndDay') is not None:
            self.end_day = m.get('EndDay')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetAgentDataResponseBodyDataListListInbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_talk_time: int = None,
        average_talk_time: int = None,
        total_hold_time: int = None,
        max_hold_time: int = None,
        average_hold_time: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_work_time: int = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        satisfaction_index: float = None,
        calls_offered: int = None,
        calls_handled: int = None,
        handle_rate: float = None,
        total_ring_time: int = None,
        max_ring_time: int = None,
        average_ring_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_talk_time = max_talk_time
        self.average_talk_time = average_talk_time
        self.total_hold_time = total_hold_time
        self.max_hold_time = max_hold_time
        self.average_hold_time = average_hold_time
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_work_time = average_work_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.satisfaction_index = satisfaction_index
        self.calls_offered = calls_offered
        self.calls_handled = calls_handled
        self.handle_rate = handle_rate
        self.total_ring_time = total_ring_time
        self.max_ring_time = max_ring_time
        self.average_ring_time = average_ring_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        return self


class GetAgentDataResponseBodyDataListListOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_talk_time: int = None,
        average_talk_time: int = None,
        total_hold_time: int = None,
        max_hold_time: int = None,
        average_hold_time: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_work_time: int = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        satisfaction_index: float = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        answer_rate: float = None,
        total_dialing_time: int = None,
        max_dialing_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_talk_time = max_talk_time
        self.average_talk_time = average_talk_time
        self.total_hold_time = total_hold_time
        self.max_hold_time = max_hold_time
        self.average_hold_time = average_hold_time
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_work_time = average_work_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.satisfaction_index = satisfaction_index
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.answer_rate = answer_rate
        self.total_dialing_time = total_dialing_time
        self.max_dialing_time = max_dialing_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class GetAgentDataResponseBodyDataListListOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_talk_time: int = None,
        average_talk_time: int = None,
        total_hold_time: int = None,
        max_hold_time: int = None,
        average_hold_time: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_work_time: int = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        satisfaction_index: float = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_talk_time = max_talk_time
        self.average_talk_time = average_talk_time
        self.total_hold_time = total_hold_time
        self.max_hold_time = max_hold_time
        self.average_hold_time = average_hold_time
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_work_time = average_work_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.satisfaction_index = satisfaction_index
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.total_hold_time is not None:
            result['TotalHoldTime'] = self.total_hold_time
        if self.max_hold_time is not None:
            result['MaxHoldTime'] = self.max_hold_time
        if self.average_hold_time is not None:
            result['AverageHoldTime'] = self.average_hold_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('TotalHoldTime') is not None:
            self.total_hold_time = m.get('TotalHoldTime')
        if m.get('MaxHoldTime') is not None:
            self.max_hold_time = m.get('MaxHoldTime')
        if m.get('AverageHoldTime') is not None:
            self.average_hold_time = m.get('AverageHoldTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class GetAgentDataResponseBodyDataListList(TeaModel):
    def __init__(
        self,
        agent_id: str = None,
        login_name: str = None,
        agent_name: str = None,
        skill_group_ids: str = None,
        skill_group_names: str = None,
        instance_id: str = None,
        record_date: str = None,
        total_logged_in_time: int = None,
        total_break_time: int = None,
        occupancy_rate: float = None,
        total_ready_time: int = None,
        max_ready_time: int = None,
        average_ready_time: int = None,
        inbound: GetAgentDataResponseBodyDataListListInbound = None,
        outbound: GetAgentDataResponseBodyDataListListOutbound = None,
        overall: GetAgentDataResponseBodyDataListListOverall = None,
    ):
        self.agent_id = agent_id
        self.login_name = login_name
        self.agent_name = agent_name
        self.skill_group_ids = skill_group_ids
        self.skill_group_names = skill_group_names
        self.instance_id = instance_id
        self.record_date = record_date
        self.total_logged_in_time = total_logged_in_time
        self.total_break_time = total_break_time
        self.occupancy_rate = occupancy_rate
        self.total_ready_time = total_ready_time
        self.max_ready_time = max_ready_time
        self.average_ready_time = average_ready_time
        self.inbound = inbound
        self.outbound = outbound
        self.overall = overall

    def validate(self):
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()
        if self.overall:
            self.overall.validate()

    def to_map(self):
        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.record_date is not None:
            result['RecordDate'] = self.record_date
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordDate') is not None:
            self.record_date = m.get('RecordDate')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('Inbound') is not None:
            temp_model = GetAgentDataResponseBodyDataListListInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = GetAgentDataResponseBodyDataListListOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Overall') is not None:
            temp_model = GetAgentDataResponseBodyDataListListOverall()
            self.overall = temp_model.from_map(m['Overall'])
        return self


class GetAgentDataResponseBodyDataList(TeaModel):
    def __init__(
        self,
        total_count: int = None,
        page_number: int = None,
        page_size: int = None,
        list: List[GetAgentDataResponseBodyDataListList] = None,
    ):
        self.total_count = total_count
        self.page_number = page_number
        self.page_size = page_size
        self.list = list

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetAgentDataResponseBodyDataListList()
                self.list.append(temp_model.from_map(k))
        return self


class GetAgentDataResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: bool = None,
        code: str = None,
        message: str = None,
        http_status_code: int = None,
        data_list: GetAgentDataResponseBodyDataList = None,
    ):
        self.request_id = request_id
        self.success = success
        self.code = code
        self.message = message
        self.http_status_code = http_status_code
        self.data_list = data_list

    def validate(self):
        if self.data_list:
            self.data_list.validate()

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data_list is not None:
            result['DataList'] = self.data_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('DataList') is not None:
            temp_model = GetAgentDataResponseBodyDataList()
            self.data_list = temp_model.from_map(m['DataList'])
        return self


class GetAgentDataResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetAgentDataResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetAgentDataResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetCallMeasureSummaryReportRequest(TeaModel):
    def __init__(
        self,
        interval_type: str = None,
        year: int = None,
        month: int = None,
        day: int = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.interval_type = interval_type
        self.year = year
        self.month = month
        self.day = day
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.interval_type is not None:
            result['IntervalType'] = self.interval_type
        if self.year is not None:
            result['Year'] = self.year
        if self.month is not None:
            result['Month'] = self.month
        if self.day is not None:
            result['Day'] = self.day
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IntervalType') is not None:
            self.interval_type = m.get('IntervalType')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport(TeaModel):
    def __init__(
        self,
        day: int = None,
        year: int = None,
        inbound_duration_by_minute: int = None,
        outbound_count: int = None,
        outbound_duration_by_minute: int = None,
        number: str = None,
        inbound_count: int = None,
        month: int = None,
    ):
        self.day = day
        self.year = year
        self.inbound_duration_by_minute = inbound_duration_by_minute
        self.outbound_count = outbound_count
        self.outbound_duration_by_minute = outbound_duration_by_minute
        self.number = number
        self.inbound_count = inbound_count
        self.month = month

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.year is not None:
            result['Year'] = self.year
        if self.inbound_duration_by_minute is not None:
            result['InboundDurationByMinute'] = self.inbound_duration_by_minute
        if self.outbound_count is not None:
            result['OutboundCount'] = self.outbound_count
        if self.outbound_duration_by_minute is not None:
            result['OutboundDurationByMinute'] = self.outbound_duration_by_minute
        if self.number is not None:
            result['Number'] = self.number
        if self.inbound_count is not None:
            result['InboundCount'] = self.inbound_count
        if self.month is not None:
            result['Month'] = self.month
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        if m.get('InboundDurationByMinute') is not None:
            self.inbound_duration_by_minute = m.get('InboundDurationByMinute')
        if m.get('OutboundCount') is not None:
            self.outbound_count = m.get('OutboundCount')
        if m.get('OutboundDurationByMinute') is not None:
            self.outbound_duration_by_minute = m.get('OutboundDurationByMinute')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InboundCount') is not None:
            self.inbound_count = m.get('InboundCount')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        return self


class GetCallMeasureSummaryReportResponseBodyNumberReportsList(TeaModel):
    def __init__(
        self,
        number_report: List[GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport] = None,
    ):
        self.number_report = number_report

    def validate(self):
        if self.number_report:
            for k in self.number_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['NumberReport'] = []
        if self.number_report is not None:
            for k in self.number_report:
                result['NumberReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.number_report = []
        if m.get('NumberReport') is not None:
            for k in m.get('NumberReport'):
                temp_model = GetCallMeasureSummaryReportResponseBodyNumberReportsListNumberReport()
                self.number_report.append(temp_model.from_map(k))
        return self


class GetCallMeasureSummaryReportResponseBodyNumberReports(TeaModel):
    def __init__(
        self,
        list: GetCallMeasureSummaryReportResponseBodyNumberReportsList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBodyNumberReportsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetCallMeasureSummaryReportResponseBodySummaryReport(TeaModel):
    def __init__(
        self,
        day: int = None,
        year: int = None,
        inbound_duration_by_minute: int = None,
        outbound_count: int = None,
        outbound_duration_by_minute: int = None,
        inbound_count: int = None,
        month: int = None,
    ):
        self.day = day
        self.year = year
        self.inbound_duration_by_minute = inbound_duration_by_minute
        self.outbound_count = outbound_count
        self.outbound_duration_by_minute = outbound_duration_by_minute
        self.inbound_count = inbound_count
        self.month = month

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.year is not None:
            result['Year'] = self.year
        if self.inbound_duration_by_minute is not None:
            result['InboundDurationByMinute'] = self.inbound_duration_by_minute
        if self.outbound_count is not None:
            result['OutboundCount'] = self.outbound_count
        if self.outbound_duration_by_minute is not None:
            result['OutboundDurationByMinute'] = self.outbound_duration_by_minute
        if self.inbound_count is not None:
            result['InboundCount'] = self.inbound_count
        if self.month is not None:
            result['Month'] = self.month
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        if m.get('InboundDurationByMinute') is not None:
            self.inbound_duration_by_minute = m.get('InboundDurationByMinute')
        if m.get('OutboundCount') is not None:
            self.outbound_count = m.get('OutboundCount')
        if m.get('OutboundDurationByMinute') is not None:
            self.outbound_duration_by_minute = m.get('OutboundDurationByMinute')
        if m.get('InboundCount') is not None:
            self.inbound_count = m.get('InboundCount')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        return self


class GetCallMeasureSummaryReportResponseBody(TeaModel):
    def __init__(
        self,
        number_reports: GetCallMeasureSummaryReportResponseBodyNumberReports = None,
        summary_report: GetCallMeasureSummaryReportResponseBodySummaryReport = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.number_reports = number_reports
        self.summary_report = summary_report
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.number_reports:
            self.number_reports.validate()
        if self.summary_report:
            self.summary_report.validate()

    def to_map(self):
        result = dict()
        if self.number_reports is not None:
            result['NumberReports'] = self.number_reports.to_map()
        if self.summary_report is not None:
            result['SummaryReport'] = self.summary_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NumberReports') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBodyNumberReports()
            self.number_reports = temp_model.from_map(m['NumberReports'])
        if m.get('SummaryReport') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBodySummaryReport()
            self.summary_report = temp_model.from_map(m['SummaryReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetCallMeasureSummaryReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetCallMeasureSummaryReportResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetCallMeasureSummaryReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConfigRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name: str = None,
        object_id: str = None,
        object_type: str = None,
    ):
        self.instance_id = instance_id
        self.name = name
        self.object_id = object_id
        self.object_type = object_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name is not None:
            result['Name'] = self.name
        if self.object_id is not None:
            result['ObjectId'] = self.object_id
        if self.object_type is not None:
            result['ObjectType'] = self.object_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ObjectId') is not None:
            self.object_id = m.get('ObjectId')
        if m.get('ObjectType') is not None:
            self.object_type = m.get('ObjectType')
        return self


class GetConfigResponseBodyConfigItem(TeaModel):
    def __init__(
        self,
        value: str = None,
        name: str = None,
    ):
        self.value = value
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.value is not None:
            result['Value'] = self.value
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Value') is not None:
            self.value = m.get('Value')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetConfigResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        config_item: GetConfigResponseBodyConfigItem = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.config_item = config_item
        self.code = code
        self.success = success

    def validate(self):
        if self.config_item:
            self.config_item.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.config_item is not None:
            result['ConfigItem'] = self.config_item.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('ConfigItem') is not None:
            temp_model = GetConfigResponseBodyConfigItem()
            self.config_item = temp_model.from_map(m['ConfigItem'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetConfigResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConversationDetailByContactIdRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.contact_id = contact_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase(TeaModel):
    def __init__(
        self,
        words: str = None,
        begin: int = None,
        identity: str = None,
        end: int = None,
        role: str = None,
    ):
        self.words = words
        self.begin = begin
        self.identity = identity
        self.end = end
        self.role = role

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.words is not None:
            result['Words'] = self.words
        if self.begin is not None:
            result['Begin'] = self.begin
        if self.identity is not None:
            result['Identity'] = self.identity
        if self.end is not None:
            result['End'] = self.end
        if self.role is not None:
            result['Role'] = self.role
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Words') is not None:
            self.words = m.get('Words')
        if m.get('Begin') is not None:
            self.begin = m.get('Begin')
        if m.get('Identity') is not None:
            self.identity = m.get('Identity')
        if m.get('End') is not None:
            self.end = m.get('End')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        return self


class GetConversationDetailByContactIdResponseBodyDataListList(TeaModel):
    def __init__(
        self,
        quality_check_phrase: List[GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase] = None,
    ):
        self.quality_check_phrase = quality_check_phrase

    def validate(self):
        if self.quality_check_phrase:
            for k in self.quality_check_phrase:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['QualityCheckPhrase'] = []
        if self.quality_check_phrase is not None:
            for k in self.quality_check_phrase:
                result['QualityCheckPhrase'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.quality_check_phrase = []
        if m.get('QualityCheckPhrase') is not None:
            for k in m.get('QualityCheckPhrase'):
                temp_model = GetConversationDetailByContactIdResponseBodyDataListListQualityCheckPhrase()
                self.quality_check_phrase.append(temp_model.from_map(k))
        return self


class GetConversationDetailByContactIdResponseBodyDataList(TeaModel):
    def __init__(
        self,
        list: GetConversationDetailByContactIdResponseBodyDataListList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = GetConversationDetailByContactIdResponseBodyDataListList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetConversationDetailByContactIdResponseBody(TeaModel):
    def __init__(
        self,
        data_list: GetConversationDetailByContactIdResponseBodyDataList = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.data_list = data_list
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.data_list:
            self.data_list.validate()

    def to_map(self):
        result = dict()
        if self.data_list is not None:
            result['DataList'] = self.data_list.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DataList') is not None:
            temp_model = GetConversationDetailByContactIdResponseBodyDataList()
            self.data_list = temp_model.from_map(m['DataList'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConversationDetailByContactIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetConversationDetailByContactIdResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetConversationDetailByContactIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetConversationListRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        task_id: str = None,
    ):
        self.instance_id = instance_id
        self.task_id = task_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class GetConversationListResponseBodyConversationsSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        category: str = None,
        content: str = None,
    ):
        self.summary_name = summary_name
        self.category = category
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class GetConversationListResponseBodyConversations(TeaModel):
    def __init__(
        self,
        summary: List[GetConversationListResponseBodyConversationsSummary] = None,
        speaker: str = None,
        timestamp: int = None,
        script: str = None,
    ):
        self.summary = summary
        self.speaker = speaker
        self.timestamp = timestamp
        self.script = script

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.script is not None:
            result['Script'] = self.script
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetConversationListResponseBodyConversationsSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        return self


class GetConversationListResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        conversations: List[GetConversationListResponseBodyConversations] = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.conversations = conversations
        self.code = code
        self.success = success

    def validate(self):
        if self.conversations:
            for k in self.conversations:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Conversations'] = []
        if self.conversations is not None:
            for k in self.conversations:
                result['Conversations'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.conversations = []
        if m.get('Conversations') is not None:
            for k in m.get('Conversations'):
                temp_model = GetConversationListResponseBodyConversations()
                self.conversations.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetConversationListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetConversationListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetConversationListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class GetInstanceResponseBodyInstancePhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = GetInstanceResponseBodyInstancePhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class GetInstanceResponseBodyInstanceAdminUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class GetInstanceResponseBodyInstanceAdminUser(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: GetInstanceResponseBodyInstanceAdminUserDetail = None,
    ):
        self.user_id = user_id
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = GetInstanceResponseBodyInstanceAdminUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class GetInstanceResponseBodyInstanceAdmin(TeaModel):
    def __init__(
        self,
        user: List[GetInstanceResponseBodyInstanceAdminUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = GetInstanceResponseBodyInstanceAdminUser()
                self.user.append(temp_model.from_map(k))
        return self


class GetInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        status: str = None,
        owner: str = None,
        storage_max_size: int = None,
        storage_max_days: int = None,
        max_online_agents: int = None,
        instance_id: str = None,
        domain_name: str = None,
        instance_description: str = None,
        phone_numbers: GetInstanceResponseBodyInstancePhoneNumbers = None,
        console_url: str = None,
        storage_bucket: str = None,
        instance_name: str = None,
        created_time: int = None,
        directory_id: str = None,
        admin: GetInstanceResponseBodyInstanceAdmin = None,
        tenant_id: str = None,
    ):
        self.status = status
        self.owner = owner
        self.storage_max_size = storage_max_size
        self.storage_max_days = storage_max_days
        self.max_online_agents = max_online_agents
        self.instance_id = instance_id
        self.domain_name = domain_name
        self.instance_description = instance_description
        self.phone_numbers = phone_numbers
        self.console_url = console_url
        self.storage_bucket = storage_bucket
        self.instance_name = instance_name
        self.created_time = created_time
        self.directory_id = directory_id
        self.admin = admin
        self.tenant_id = tenant_id

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.admin:
            self.admin.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.max_online_agents is not None:
            result['MaxOnlineAgents'] = self.max_online_agents
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.console_url is not None:
            result['ConsoleUrl'] = self.console_url
        if self.storage_bucket is not None:
            result['StorageBucket'] = self.storage_bucket
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.admin is not None:
            result['Admin'] = self.admin.to_map()
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('MaxOnlineAgents') is not None:
            self.max_online_agents = m.get('MaxOnlineAgents')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('PhoneNumbers') is not None:
            temp_model = GetInstanceResponseBodyInstancePhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('ConsoleUrl') is not None:
            self.console_url = m.get('ConsoleUrl')
        if m.get('StorageBucket') is not None:
            self.storage_bucket = m.get('StorageBucket')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('Admin') is not None:
            temp_model = GetInstanceResponseBodyInstanceAdmin()
            self.admin = temp_model.from_map(m['Admin'])
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class GetInstanceResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        instance: GetInstanceResponseBodyInstance = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.instance = instance
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Instance') is not None:
            temp_model = GetInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetInstanceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceStateRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount(TeaModel):
    def __init__(
        self,
        state: str = None,
        count: int = None,
    ):
        self.state = state
        self.count = count

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.state is not None:
            result['State'] = self.state
        if self.count is not None:
            result['Count'] = self.count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        return self


class GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions(TeaModel):
    def __init__(
        self,
        agent_state_count: List[GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount] = None,
    ):
        self.agent_state_count = agent_state_count

    def validate(self):
        if self.agent_state_count:
            for k in self.agent_state_count:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentStateCount'] = []
        if self.agent_state_count is not None:
            for k in self.agent_state_count:
                result['AgentStateCount'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_state_count = []
        if m.get('AgentStateCount') is not None:
            for k in m.get('AgentStateCount'):
                temp_model = GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributionsAgentStateCount()
                self.agent_state_count.append(temp_model.from_map(k))
        return self


class GetInstanceStateResponseBodyRealTimeInstanceState(TeaModel):
    def __init__(
        self,
        agent_state_distributions: GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions = None,
    ):
        self.agent_state_distributions = agent_state_distributions

    def validate(self):
        if self.agent_state_distributions:
            self.agent_state_distributions.validate()

    def to_map(self):
        result = dict()
        if self.agent_state_distributions is not None:
            result['AgentStateDistributions'] = self.agent_state_distributions.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentStateDistributions') is not None:
            temp_model = GetInstanceStateResponseBodyRealTimeInstanceStateAgentStateDistributions()
            self.agent_state_distributions = temp_model.from_map(m['AgentStateDistributions'])
        return self


class GetInstanceStateResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        real_time_instance_state: GetInstanceStateResponseBodyRealTimeInstanceState = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.real_time_instance_state = real_time_instance_state

    def validate(self):
        if self.real_time_instance_state:
            self.real_time_instance_state.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.real_time_instance_state is not None:
            result['RealTimeInstanceState'] = self.real_time_instance_state.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('RealTimeInstanceState') is not None:
            temp_model = GetInstanceStateResponseBodyRealTimeInstanceState()
            self.real_time_instance_state = temp_model.from_map(m['RealTimeInstanceState'])
        return self


class GetInstanceStateResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetInstanceStateResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceStateResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceSummaryReportRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        start_time: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        total_logged_in_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        total_break_time: int = None,
        total_ready_time: int = None,
        max_talk_time: int = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.total_logged_in_time = total_logged_in_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.total_break_time = total_break_time
        self.total_ready_time = total_ready_time
        self.max_talk_time = max_talk_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound(TeaModel):
    def __init__(
        self,
        calls_incoming_line: int = None,
        average_ring_time: int = None,
        calls_handled: int = None,
        total_work_time: int = None,
        calls_abandoned_in_ivr: int = None,
        max_work_time: int = None,
        average_wait_time: int = None,
        calls_incoming_queue: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        total_wait_time: int = None,
        total_ring_time: int = None,
        max_talk_time: str = None,
        max_ring_time: int = None,
        total_talk_time: int = None,
        calls_incoming_ivr: int = None,
        calls_offered: int = None,
        max_wait_time: int = None,
        service_level_20: float = None,
        average_talk_time: int = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        calls_abandoned_in_queue: int = None,
    ):
        self.calls_incoming_line = calls_incoming_line
        self.average_ring_time = average_ring_time
        self.calls_handled = calls_handled
        self.total_work_time = total_work_time
        self.calls_abandoned_in_ivr = calls_abandoned_in_ivr
        self.max_work_time = max_work_time
        self.average_wait_time = average_wait_time
        self.calls_incoming_queue = calls_incoming_queue
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.total_wait_time = total_wait_time
        self.total_ring_time = total_ring_time
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time
        self.total_talk_time = total_talk_time
        self.calls_incoming_ivr = calls_incoming_ivr
        self.calls_offered = calls_offered
        self.max_wait_time = max_wait_time
        self.service_level_20 = service_level_20
        self.average_talk_time = average_talk_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.calls_abandoned_in_queue = calls_abandoned_in_queue

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.calls_incoming_line is not None:
            result['CallsIncomingLine'] = self.calls_incoming_line
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.calls_abandoned_in_ivr is not None:
            result['CallsAbandonedInIVR'] = self.calls_abandoned_in_ivr
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_wait_time is not None:
            result['AverageWaitTime'] = self.average_wait_time
        if self.calls_incoming_queue is not None:
            result['CallsIncomingQueue'] = self.calls_incoming_queue
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.total_wait_time is not None:
            result['TotalWaitTime'] = self.total_wait_time
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.calls_incoming_ivr is not None:
            result['CallsIncomingIVR'] = self.calls_incoming_ivr
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.max_wait_time is not None:
            result['MaxWaitTime'] = self.max_wait_time
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.calls_abandoned_in_queue is not None:
            result['CallsAbandonedInQueue'] = self.calls_abandoned_in_queue
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallsIncomingLine') is not None:
            self.calls_incoming_line = m.get('CallsIncomingLine')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('CallsAbandonedInIVR') is not None:
            self.calls_abandoned_in_ivr = m.get('CallsAbandonedInIVR')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWaitTime') is not None:
            self.average_wait_time = m.get('AverageWaitTime')
        if m.get('CallsIncomingQueue') is not None:
            self.calls_incoming_queue = m.get('CallsIncomingQueue')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('TotalWaitTime') is not None:
            self.total_wait_time = m.get('TotalWaitTime')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('CallsIncomingIVR') is not None:
            self.calls_incoming_ivr = m.get('CallsIncomingIVR')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('MaxWaitTime') is not None:
            self.max_wait_time = m.get('MaxWaitTime')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('CallsAbandonedInQueue') is not None:
            self.calls_abandoned_in_queue = m.get('CallsAbandonedInQueue')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class GetInstanceSummaryReportResponseBodyInstanceSummaryReport(TeaModel):
    def __init__(
        self,
        overall: GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall = None,
        inbound: GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound = None,
        outbound: GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound = None,
        instance_id: str = None,
    ):
        self.overall = overall
        self.inbound = inbound
        self.outbound = outbound
        self.instance_id = instance_id

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('Inbound') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetInstanceSummaryReportResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        instance_summary_report: GetInstanceSummaryReportResponseBodyInstanceSummaryReport = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.instance_summary_report = instance_summary_report
        self.code = code
        self.success = success

    def validate(self):
        if self.instance_summary_report:
            self.instance_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_summary_report is not None:
            result['InstanceSummaryReport'] = self.instance_summary_report.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceSummaryReport') is not None:
            temp_model = GetInstanceSummaryReportResponseBodyInstanceSummaryReport()
            self.instance_summary_report = temp_model.from_map(m['InstanceSummaryReport'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceSummaryReportResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetInstanceSummaryReportResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceSummaryReportResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceSummaryReportByIntervalRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        interval: str = None,
        start_time: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.interval = interval
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        total_logged_in_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        total_break_time: int = None,
        total_ready_time: int = None,
        max_talk_time: int = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.total_logged_in_time = total_logged_in_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.total_break_time = total_break_time
        self.total_ready_time = total_ready_time
        self.max_talk_time = max_talk_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound(TeaModel):
    def __init__(
        self,
        calls_incoming_line: int = None,
        average_ring_time: int = None,
        calls_handled: int = None,
        total_work_time: int = None,
        calls_abandoned_in_ivr: int = None,
        max_work_time: int = None,
        average_wait_time: int = None,
        calls_incoming_queue: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        total_wait_time: int = None,
        total_ring_time: int = None,
        max_talk_time: str = None,
        max_ring_time: int = None,
        total_talk_time: int = None,
        calls_incoming_ivr: int = None,
        calls_offered: int = None,
        max_wait_time: int = None,
        service_level_20: float = None,
        average_talk_time: int = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        calls_abandoned_in_queue: int = None,
    ):
        self.calls_incoming_line = calls_incoming_line
        self.average_ring_time = average_ring_time
        self.calls_handled = calls_handled
        self.total_work_time = total_work_time
        self.calls_abandoned_in_ivr = calls_abandoned_in_ivr
        self.max_work_time = max_work_time
        self.average_wait_time = average_wait_time
        self.calls_incoming_queue = calls_incoming_queue
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.total_wait_time = total_wait_time
        self.total_ring_time = total_ring_time
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time
        self.total_talk_time = total_talk_time
        self.calls_incoming_ivr = calls_incoming_ivr
        self.calls_offered = calls_offered
        self.max_wait_time = max_wait_time
        self.service_level_20 = service_level_20
        self.average_talk_time = average_talk_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.calls_abandoned_in_queue = calls_abandoned_in_queue

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.calls_incoming_line is not None:
            result['CallsIncomingLine'] = self.calls_incoming_line
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.calls_abandoned_in_ivr is not None:
            result['CallsAbandonedInIVR'] = self.calls_abandoned_in_ivr
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_wait_time is not None:
            result['AverageWaitTime'] = self.average_wait_time
        if self.calls_incoming_queue is not None:
            result['CallsIncomingQueue'] = self.calls_incoming_queue
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.total_wait_time is not None:
            result['TotalWaitTime'] = self.total_wait_time
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.calls_incoming_ivr is not None:
            result['CallsIncomingIVR'] = self.calls_incoming_ivr
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.max_wait_time is not None:
            result['MaxWaitTime'] = self.max_wait_time
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.calls_abandoned_in_queue is not None:
            result['CallsAbandonedInQueue'] = self.calls_abandoned_in_queue
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallsIncomingLine') is not None:
            self.calls_incoming_line = m.get('CallsIncomingLine')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('CallsAbandonedInIVR') is not None:
            self.calls_abandoned_in_ivr = m.get('CallsAbandonedInIVR')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWaitTime') is not None:
            self.average_wait_time = m.get('AverageWaitTime')
        if m.get('CallsIncomingQueue') is not None:
            self.calls_incoming_queue = m.get('CallsIncomingQueue')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('TotalWaitTime') is not None:
            self.total_wait_time = m.get('TotalWaitTime')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('CallsIncomingIVR') is not None:
            self.calls_incoming_ivr = m.get('CallsIncomingIVR')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('MaxWaitTime') is not None:
            self.max_wait_time = m.get('MaxWaitTime')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('CallsAbandonedInQueue') is not None:
            self.calls_abandoned_in_queue = m.get('CallsAbandonedInQueue')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport(TeaModel):
    def __init__(
        self,
        overall: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall = None,
        inbound: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound = None,
        outbound: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound = None,
        instance_id: str = None,
        timestamp: str = None,
    ):
        self.overall = overall
        self.inbound = inbound
        self.outbound = outbound
        self.instance_id = instance_id
        self.timestamp = timestamp

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('Inbound') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList(TeaModel):
    def __init__(
        self,
        instance_summary_report: List[GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport] = None,
    ):
        self.instance_summary_report = instance_summary_report

    def validate(self):
        if self.instance_summary_report:
            for k in self.instance_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['InstanceSummaryReport'] = []
        if self.instance_summary_report is not None:
            for k in self.instance_summary_report:
                result['InstanceSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.instance_summary_report = []
        if m.get('InstanceSummaryReport') is not None:
            for k in m.get('InstanceSummaryReport'):
                temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalListInstanceSummaryReport()
                self.instance_summary_report.append(temp_model.from_map(k))
        return self


class GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        interval_list: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList = None,
    ):
        self.instance_id = instance_id
        self.interval_list = interval_list

    def validate(self):
        if self.interval_list:
            self.interval_list.validate()

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.interval_list is not None:
            result['IntervalList'] = self.interval_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IntervalList') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReportIntervalList()
            self.interval_list = temp_model.from_map(m['IntervalList'])
        return self


class GetInstanceSummaryReportByIntervalResponseBody(TeaModel):
    def __init__(
        self,
        instance_time_interval_report: GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.instance_time_interval_report = instance_time_interval_report
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.instance_time_interval_report:
            self.instance_time_interval_report.validate()

    def to_map(self):
        result = dict()
        if self.instance_time_interval_report is not None:
            result['InstanceTimeIntervalReport'] = self.instance_time_interval_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceTimeIntervalReport') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBodyInstanceTimeIntervalReport()
            self.instance_time_interval_report = temp_model.from_map(m['InstanceTimeIntervalReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceSummaryReportByIntervalResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetInstanceSummaryReportByIntervalResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceSummaryReportByIntervalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetInstanceSummaryReportSinceMidnightRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        total_logged_in_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        total_break_time: int = None,
        total_ready_time: int = None,
        max_talk_time: int = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.total_logged_in_time = total_logged_in_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.total_break_time = total_break_time
        self.total_ready_time = total_ready_time
        self.max_talk_time = max_talk_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound(TeaModel):
    def __init__(
        self,
        calls_incoming_line: int = None,
        average_ring_time: int = None,
        calls_handled: int = None,
        total_work_time: int = None,
        calls_abandoned_in_ivr: int = None,
        max_work_time: int = None,
        average_wait_time: int = None,
        calls_incoming_queue: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        total_wait_time: int = None,
        total_ring_time: int = None,
        max_talk_time: str = None,
        max_ring_time: int = None,
        total_talk_time: int = None,
        calls_incoming_ivr: int = None,
        calls_offered: int = None,
        max_wait_time: int = None,
        service_level_20: float = None,
        average_talk_time: int = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        calls_abandoned_in_queue: int = None,
    ):
        self.calls_incoming_line = calls_incoming_line
        self.average_ring_time = average_ring_time
        self.calls_handled = calls_handled
        self.total_work_time = total_work_time
        self.calls_abandoned_in_ivr = calls_abandoned_in_ivr
        self.max_work_time = max_work_time
        self.average_wait_time = average_wait_time
        self.calls_incoming_queue = calls_incoming_queue
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.total_wait_time = total_wait_time
        self.total_ring_time = total_ring_time
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time
        self.total_talk_time = total_talk_time
        self.calls_incoming_ivr = calls_incoming_ivr
        self.calls_offered = calls_offered
        self.max_wait_time = max_wait_time
        self.service_level_20 = service_level_20
        self.average_talk_time = average_talk_time
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.calls_abandoned_in_queue = calls_abandoned_in_queue

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.calls_incoming_line is not None:
            result['CallsIncomingLine'] = self.calls_incoming_line
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.calls_abandoned_in_ivr is not None:
            result['CallsAbandonedInIVR'] = self.calls_abandoned_in_ivr
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_wait_time is not None:
            result['AverageWaitTime'] = self.average_wait_time
        if self.calls_incoming_queue is not None:
            result['CallsIncomingQueue'] = self.calls_incoming_queue
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.total_wait_time is not None:
            result['TotalWaitTime'] = self.total_wait_time
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.calls_incoming_ivr is not None:
            result['CallsIncomingIVR'] = self.calls_incoming_ivr
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.max_wait_time is not None:
            result['MaxWaitTime'] = self.max_wait_time
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.calls_abandoned_in_queue is not None:
            result['CallsAbandonedInQueue'] = self.calls_abandoned_in_queue
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallsIncomingLine') is not None:
            self.calls_incoming_line = m.get('CallsIncomingLine')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('CallsAbandonedInIVR') is not None:
            self.calls_abandoned_in_ivr = m.get('CallsAbandonedInIVR')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageWaitTime') is not None:
            self.average_wait_time = m.get('AverageWaitTime')
        if m.get('CallsIncomingQueue') is not None:
            self.calls_incoming_queue = m.get('CallsIncomingQueue')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('TotalWaitTime') is not None:
            self.total_wait_time = m.get('TotalWaitTime')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('CallsIncomingIVR') is not None:
            self.calls_incoming_ivr = m.get('CallsIncomingIVR')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('MaxWaitTime') is not None:
            self.max_wait_time = m.get('MaxWaitTime')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('CallsAbandonedInQueue') is not None:
            self.calls_abandoned_in_queue = m.get('CallsAbandonedInQueue')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport(TeaModel):
    def __init__(
        self,
        overall: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall = None,
        inbound: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound = None,
        outbound: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound = None,
        instance_id: str = None,
        timestamp: str = None,
    ):
        self.overall = overall
        self.inbound = inbound
        self.outbound = outbound
        self.instance_id = instance_id
        self.timestamp = timestamp

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('Inbound') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        return self


class GetInstanceSummaryReportSinceMidnightResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        instance_summary_report: GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.instance_summary_report = instance_summary_report
        self.code = code
        self.success = success

    def validate(self):
        if self.instance_summary_report:
            self.instance_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.instance_summary_report is not None:
            result['InstanceSummaryReport'] = self.instance_summary_report.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('InstanceSummaryReport') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBodyInstanceSummaryReport()
            self.instance_summary_report = temp_model.from_map(m['InstanceSummaryReport'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetInstanceSummaryReportSinceMidnightResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetInstanceSummaryReportSinceMidnightResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetInstanceSummaryReportSinceMidnightResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetJobResponseBodyJobContacts(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class GetJobResponseBodyJobSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        category: str = None,
        content: str = None,
    ):
        self.summary_name = summary_name
        self.category = category
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class GetJobResponseBodyJobExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobResponseBodyJobTasksContact(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class GetJobResponseBodyJobTasksConversationSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        category: str = None,
        content: str = None,
    ):
        self.summary_name = summary_name
        self.category = category
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class GetJobResponseBodyJobTasksConversation(TeaModel):
    def __init__(
        self,
        summary: List[GetJobResponseBodyJobTasksConversationSummary] = None,
        speaker: str = None,
        timestamp: int = None,
        script: str = None,
    ):
        self.summary = summary
        self.speaker = speaker
        self.timestamp = timestamp
        self.script = script

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.script is not None:
            result['Script'] = self.script
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobResponseBodyJobTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        return self


class GetJobResponseBodyJobTasks(TeaModel):
    def __init__(
        self,
        status: str = None,
        planed_time: int = None,
        chatbot_id: str = None,
        actual_time: int = None,
        called_number: str = None,
        scenario_id: str = None,
        contact: GetJobResponseBodyJobTasksContact = None,
        job_id: str = None,
        call_id: str = None,
        calling_number: str = None,
        brief: str = None,
        duration: int = None,
        task_id: str = None,
        conversation: List[GetJobResponseBodyJobTasksConversation] = None,
    ):
        self.status = status
        self.planed_time = planed_time
        self.chatbot_id = chatbot_id
        self.actual_time = actual_time
        self.called_number = called_number
        self.scenario_id = scenario_id
        self.contact = contact
        self.job_id = job_id
        self.call_id = call_id
        self.calling_number = calling_number
        self.brief = brief
        self.duration = duration
        self.task_id = task_id
        self.conversation = conversation

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Contact') is not None:
            temp_model = GetJobResponseBodyJobTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = GetJobResponseBodyJobTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        return self


class GetJobResponseBodyJob(TeaModel):
    def __init__(
        self,
        status: str = None,
        calling_numbers: List[str] = None,
        contacts: List[GetJobResponseBodyJobContacts] = None,
        summary: List[GetJobResponseBodyJobSummary] = None,
        priority: int = None,
        failure_reason: str = None,
        system_priority: int = None,
        extras: List[GetJobResponseBodyJobExtras] = None,
        reference_id: str = None,
        scenario_id: str = None,
        tasks: List[GetJobResponseBodyJobTasks] = None,
        strategy_id: str = None,
        group_id: str = None,
        job_id: str = None,
    ):
        self.status = status
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.summary = summary
        self.priority = priority
        self.failure_reason = failure_reason
        self.system_priority = system_priority
        self.extras = extras
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.tasks = tasks
        self.strategy_id = strategy_id
        self.group_id = group_id
        self.job_id = job_id

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = GetJobResponseBodyJobContacts()
                self.contacts.append(temp_model.from_map(k))
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobResponseBodyJobSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = GetJobResponseBodyJobExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = GetJobResponseBodyJobTasks()
                self.tasks.append(temp_model.from_map(k))
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetJobResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        job: GetJobResponseBodyJob = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.job = job
        self.code = code
        self.success = success

    def validate(self):
        if self.job:
            self.job.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job is not None:
            result['Job'] = self.job.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Job') is not None:
            temp_model = GetJobResponseBodyJob()
            self.job = temp_model.from_map(m['Job'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobDataUploadParamsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        file_name: str = None,
    ):
        self.instance_id = instance_id
        self.file_name = file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        return self


class GetJobDataUploadParamsResponseBodyUploadParams(TeaModel):
    def __init__(
        self,
        signature: str = None,
        host: str = None,
        policy: str = None,
        folder: str = None,
        access_id: str = None,
        expire: int = None,
    ):
        self.signature = signature
        self.host = host
        self.policy = policy
        self.folder = folder
        self.access_id = access_id
        self.expire = expire

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.host is not None:
            result['Host'] = self.host
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.folder is not None:
            result['Folder'] = self.folder
        if self.access_id is not None:
            result['AccessId'] = self.access_id
        if self.expire is not None:
            result['Expire'] = self.expire
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Folder') is not None:
            self.folder = m.get('Folder')
        if m.get('AccessId') is not None:
            self.access_id = m.get('AccessId')
        if m.get('Expire') is not None:
            self.expire = m.get('Expire')
        return self


class GetJobDataUploadParamsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        upload_params: GetJobDataUploadParamsResponseBodyUploadParams = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.upload_params = upload_params
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.upload_params:
            self.upload_params.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.upload_params is not None:
            result['UploadParams'] = self.upload_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('UploadParams') is not None:
            temp_model = GetJobDataUploadParamsResponseBodyUploadParams()
            self.upload_params = temp_model.from_map(m['UploadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobDataUploadParamsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobDataUploadParamsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobDataUploadParamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobFileUploadUrlRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        file_name: str = None,
    ):
        self.instance_id = instance_id
        self.file_name = file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        return self


class GetJobFileUploadUrlResponseBody(TeaModel):
    def __init__(
        self,
        file_path: str = None,
        upload_url: str = None,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.file_path = file_path
        self.upload_url = upload_url
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.upload_url is not None:
            result['UploadUrl'] = self.upload_url
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('UploadUrl') is not None:
            self.upload_url = m.get('UploadUrl')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobFileUploadUrlResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobFileUploadUrlResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobFileUploadUrlResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class GetJobGroupResponseBodyJobGroupStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class GetJobGroupResponseBodyJobGroupStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        max_attempts_per_day: int = None,
        working_time: List[GetJobGroupResponseBodyJobGroupStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.description = description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.name = name
        self.id = id

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.description is not None:
            result['Description'] = self.description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetJobGroupResponseBodyJobGroupStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetJobGroupResponseBodyJobGroupProgressCategories(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobGroupResponseBodyJobGroupProgress(TeaModel):
    def __init__(
        self,
        status: str = None,
        total_not_answered: int = None,
        start_time: int = None,
        categories: List[GetJobGroupResponseBodyJobGroupProgressCategories] = None,
        total_jobs: int = None,
        total_completed: int = None,
        duration: int = None,
    ):
        self.status = status
        self.total_not_answered = total_not_answered
        self.start_time = start_time
        self.categories = categories
        self.total_jobs = total_jobs
        self.total_completed = total_completed
        self.duration = duration

    def validate(self):
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.duration is not None:
            result['Duration'] = self.duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = GetJobGroupResponseBodyJobGroupProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        return self


class GetJobGroupResponseBodyJobGroup(TeaModel):
    def __init__(
        self,
        scenario_id: str = None,
        creation_time: int = None,
        strategy: GetJobGroupResponseBodyJobGroupStrategy = None,
        calling_numbers: List[str] = None,
        progress: GetJobGroupResponseBodyJobGroupProgress = None,
        description: str = None,
        job_file_path: str = None,
        name: str = None,
        id: str = None,
    ):
        self.scenario_id = scenario_id
        self.creation_time = creation_time
        self.strategy = strategy
        self.calling_numbers = calling_numbers
        self.progress = progress
        self.description = description
        self.job_file_path = job_file_path
        self.name = name
        self.id = id

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.progress:
            self.progress.validate()

    def to_map(self):
        result = dict()
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Strategy') is not None:
            temp_model = GetJobGroupResponseBodyJobGroupStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('Progress') is not None:
            temp_model = GetJobGroupResponseBodyJobGroupProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        job_group: GetJobGroupResponseBodyJobGroup = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.job_group = job_group
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.job_group:
            self.job_group.validate()

    def to_map(self):
        result = dict()
        if self.job_group is not None:
            result['JobGroup'] = self.job_group.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('JobGroup') is not None:
            temp_model = GetJobGroupResponseBodyJobGroup()
            self.job_group = temp_model.from_map(m['JobGroup'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobListRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        status: int = None,
        query_all: bool = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.status = status
        self.query_all = query_all
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.status is not None:
            result['Status'] = self.status
        if self.query_all is not None:
            result['QueryAll'] = self.query_all
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('QueryAll') is not None:
            self.query_all = m.get('QueryAll')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class GetJobListResponseBodyJobsListSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        group_id: str = None,
        job_id: str = None,
        category: str = None,
        content: str = None,
        summary_id: str = None,
        task_id: str = None,
        conversation_detail_id: str = None,
    ):
        self.summary_name = summary_name
        self.group_id = group_id
        self.job_id = job_id
        self.category = category
        self.content = content
        self.summary_id = summary_id
        self.task_id = task_id
        self.conversation_detail_id = conversation_detail_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        return self


class GetJobListResponseBodyJobsListContacts(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class GetJobListResponseBodyJobsListExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobListResponseBodyJobsList(TeaModel):
    def __init__(
        self,
        status: str = None,
        calling_numbers: List[str] = None,
        summary: List[GetJobListResponseBodyJobsListSummary] = None,
        contacts: List[GetJobListResponseBodyJobsListContacts] = None,
        priority: int = None,
        failure_reason: str = None,
        system_priority: int = None,
        extras: List[GetJobListResponseBodyJobsListExtras] = None,
        reference_id: str = None,
        scenario_id: str = None,
        strategy_id: str = None,
        group_id: str = None,
        job_id: str = None,
    ):
        self.status = status
        self.calling_numbers = calling_numbers
        self.summary = summary
        self.contacts = contacts
        self.priority = priority
        self.failure_reason = failure_reason
        self.system_priority = system_priority
        self.extras = extras
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.strategy_id = strategy_id
        self.group_id = group_id
        self.job_id = job_id

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobListResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = GetJobListResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = GetJobListResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetJobListResponseBodyJobs(TeaModel):
    def __init__(
        self,
        list: List[GetJobListResponseBodyJobsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = GetJobListResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class GetJobListResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        jobs: GetJobListResponseBodyJobs = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.jobs = jobs
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Jobs') is not None:
            temp_model = GetJobListResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobStatusByCallIdRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        call_id: str = None,
    ):
        self.instance_id = instance_id
        self.call_id = call_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        return self


class GetJobStatusByCallIdResponseBodyJobContacts(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class GetJobStatusByCallIdResponseBodyJobSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        category: str = None,
        content: str = None,
        summary_id: str = None,
    ):
        self.summary_name = summary_name
        self.category = category
        self.content = content
        self.summary_id = summary_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        return self


class GetJobStatusByCallIdResponseBodyJobExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetJobStatusByCallIdResponseBodyJobTasksContact(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class GetJobStatusByCallIdResponseBodyJobTasksConversationSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        category: str = None,
        content: str = None,
        summary_id: str = None,
    ):
        self.summary_name = summary_name
        self.category = category
        self.content = content
        self.summary_id = summary_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        return self


class GetJobStatusByCallIdResponseBodyJobTasksConversation(TeaModel):
    def __init__(
        self,
        summary: List[GetJobStatusByCallIdResponseBodyJobTasksConversationSummary] = None,
        speaker: str = None,
        timestamp: int = None,
        script: str = None,
        task_id: str = None,
        conversation_detail_id: str = None,
    ):
        self.summary = summary
        self.speaker = speaker
        self.timestamp = timestamp
        self.script = script
        self.task_id = task_id
        self.conversation_detail_id = conversation_detail_id

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.script is not None:
            result['Script'] = self.script
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobStatusByCallIdResponseBodyJobTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        return self


class GetJobStatusByCallIdResponseBodyJobTasks(TeaModel):
    def __init__(
        self,
        status: str = None,
        planed_time: int = None,
        chatbot_id: str = None,
        actual_time: int = None,
        called_number: str = None,
        end_time: int = None,
        scenario_id: str = None,
        contact: GetJobStatusByCallIdResponseBodyJobTasksContact = None,
        job_id: str = None,
        call_id: str = None,
        calling_number: str = None,
        brief: str = None,
        duration: int = None,
        task_id: str = None,
        conversation: List[GetJobStatusByCallIdResponseBodyJobTasksConversation] = None,
    ):
        self.status = status
        self.planed_time = planed_time
        self.chatbot_id = chatbot_id
        self.actual_time = actual_time
        self.called_number = called_number
        self.end_time = end_time
        self.scenario_id = scenario_id
        self.contact = contact
        self.job_id = job_id
        self.call_id = call_id
        self.calling_number = calling_number
        self.brief = brief
        self.duration = duration
        self.task_id = task_id
        self.conversation = conversation

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Contact') is not None:
            temp_model = GetJobStatusByCallIdResponseBodyJobTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = GetJobStatusByCallIdResponseBodyJobTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        return self


class GetJobStatusByCallIdResponseBodyJob(TeaModel):
    def __init__(
        self,
        status: str = None,
        calling_numbers: List[str] = None,
        contacts: List[GetJobStatusByCallIdResponseBodyJobContacts] = None,
        summary: List[GetJobStatusByCallIdResponseBodyJobSummary] = None,
        priority: int = None,
        failure_reason: str = None,
        extras: List[GetJobStatusByCallIdResponseBodyJobExtras] = None,
        reference_id: str = None,
        scenario_id: str = None,
        tasks: List[GetJobStatusByCallIdResponseBodyJobTasks] = None,
        strategy_id: str = None,
        group_id: str = None,
        job_id: str = None,
    ):
        self.status = status
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.summary = summary
        self.priority = priority
        self.failure_reason = failure_reason
        self.extras = extras
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.tasks = tasks
        self.strategy_id = strategy_id
        self.group_id = group_id
        self.job_id = job_id

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = GetJobStatusByCallIdResponseBodyJobContacts()
                self.contacts.append(temp_model.from_map(k))
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetJobStatusByCallIdResponseBodyJobSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = GetJobStatusByCallIdResponseBodyJobExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = GetJobStatusByCallIdResponseBodyJobTasks()
                self.tasks.append(temp_model.from_map(k))
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetJobStatusByCallIdResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        job: GetJobStatusByCallIdResponseBodyJob = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.job = job
        self.code = code
        self.success = success

    def validate(self):
        if self.job:
            self.job.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.job is not None:
            result['Job'] = self.job.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Job') is not None:
            temp_model = GetJobStatusByCallIdResponseBodyJob()
            self.job = temp_model.from_map(m['Job'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobStatusByCallIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobStatusByCallIdResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobStatusByCallIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetJobTemplateDownloadParamsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class GetJobTemplateDownloadParamsResponseBodyDownloadParams(TeaModel):
    def __init__(
        self,
        signature_url: str = None,
    ):
        self.signature_url = signature_url

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature_url is not None:
            result['SignatureUrl'] = self.signature_url
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SignatureUrl') is not None:
            self.signature_url = m.get('SignatureUrl')
        return self


class GetJobTemplateDownloadParamsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        download_params: GetJobTemplateDownloadParamsResponseBodyDownloadParams = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.download_params = download_params
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.download_params:
            self.download_params.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.download_params is not None:
            result['DownloadParams'] = self.download_params.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('DownloadParams') is not None:
            temp_model = GetJobTemplateDownloadParamsResponseBodyDownloadParams()
            self.download_params = temp_model.from_map(m['DownloadParams'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetJobTemplateDownloadParamsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetJobTemplateDownloadParamsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetJobTemplateDownloadParamsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetNumberRegionInfoRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        number: str = None,
    ):
        self.instance_id = instance_id
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class GetNumberRegionInfoResponseBodyPhoneNumber(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class GetNumberRegionInfoResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        phone_number: GetNumberRegionInfoResponseBodyPhoneNumber = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.phone_number = phone_number
        self.code = code
        self.success = success

    def validate(self):
        if self.phone_number:
            self.phone_number.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('PhoneNumber') is not None:
            temp_model = GetNumberRegionInfoResponseBodyPhoneNumber()
            self.phone_number = temp_model.from_map(m['PhoneNumber'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetNumberRegionInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetNumberRegionInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetNumberRegionInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRecordOssUploadParamRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        file_name: str = None,
    ):
        self.instance_id = instance_id
        self.file_name = file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.file_name is not None:
            result['FileName'] = self.file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        return self


class GetRecordOssUploadParamResponseBody(TeaModel):
    def __init__(
        self,
        policy: str = None,
        message: str = None,
        request_id: str = None,
        signature: str = None,
        http_status_code: int = None,
        oss_file_name: str = None,
        host: str = None,
        expires: str = None,
        dir: str = None,
        code: str = None,
        oss_access_key_id: str = None,
        success: bool = None,
    ):
        self.policy = policy
        self.message = message
        self.request_id = request_id
        self.signature = signature
        self.http_status_code = http_status_code
        self.oss_file_name = oss_file_name
        self.host = host
        self.expires = expires
        self.dir = dir
        self.code = code
        self.oss_access_key_id = oss_access_key_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.policy is not None:
            result['Policy'] = self.policy
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        if self.host is not None:
            result['Host'] = self.host
        if self.expires is not None:
            result['Expires'] = self.expires
        if self.dir is not None:
            result['Dir'] = self.dir
        if self.code is not None:
            result['Code'] = self.code
        if self.oss_access_key_id is not None:
            result['OssAccessKeyId'] = self.oss_access_key_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Policy') is not None:
            self.policy = m.get('Policy')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        if m.get('Host') is not None:
            self.host = m.get('Host')
        if m.get('Expires') is not None:
            self.expires = m.get('Expires')
        if m.get('Dir') is not None:
            self.dir = m.get('Dir')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('OssAccessKeyId') is not None:
            self.oss_access_key_id = m.get('OssAccessKeyId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetRecordOssUploadParamResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetRecordOssUploadParamResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetRecordOssUploadParamResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetRoutePointRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_flow_id: str = None,
    ):
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        return self


class GetRoutePointResponseBody(TeaModel):
    def __init__(
        self,
        status_desc: str = None,
        route_point: str = None,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        status_code: str = None,
        code: str = None,
        success: bool = None,
    ):
        self.status_desc = status_desc
        self.route_point = route_point
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.status_code = status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status_desc is not None:
            result['StatusDesc'] = self.status_desc
        if self.route_point is not None:
            result['RoutePoint'] = self.route_point
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StatusDesc') is not None:
            self.status_desc = m.get('StatusDesc')
        if m.get('RoutePoint') is not None:
            self.route_point = m.get('RoutePoint')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetRoutePointResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetRoutePointResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetRoutePointResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetScenarioRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class GetScenarioResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class GetScenarioResponseBodyScenarioStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        max_attempts_per_day: int = None,
        working_time: List[GetScenarioResponseBodyScenarioStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.description = description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.name = name
        self.id = id

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.description is not None:
            result['Description'] = self.description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = GetScenarioResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetScenarioResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        intent_id: str = None,
    ):
        self.node_id = node_id
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class GetScenarioResponseBodyScenarioSurveys(TeaModel):
    def __init__(
        self,
        round: int = None,
        description: str = None,
        beebot_id: str = None,
        intents: List[GetScenarioResponseBodyScenarioSurveysIntents] = None,
        name: str = None,
        role: str = None,
        id: str = None,
    ):
        self.round = round
        self.description = description
        self.beebot_id = beebot_id
        self.intents = intents
        self.name = name
        self.role = role
        self.id = id

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.round is not None:
            result['Round'] = self.round
        if self.description is not None:
            result['Description'] = self.description
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = GetScenarioResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetScenarioResponseBodyScenarioVariables(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class GetScenarioResponseBodyScenario(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy: GetScenarioResponseBodyScenarioStrategy = None,
        is_template: bool = None,
        description: str = None,
        surveys: List[GetScenarioResponseBodyScenarioSurveys] = None,
        variables: List[GetScenarioResponseBodyScenarioVariables] = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.strategy = strategy
        self.is_template = is_template
        self.description = description
        self.surveys = surveys
        self.variables = variables
        self.name = name
        self.id = id

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.description is not None:
            result['Description'] = self.description
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Strategy') is not None:
            temp_model = GetScenarioResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = GetScenarioResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = GetScenarioResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetScenarioResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        scenario: GetScenarioResponseBodyScenario = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.scenario = scenario

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Scenario') is not None:
            temp_model = GetScenarioResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        return self


class GetScenarioResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetScenarioResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetServiceExtensionsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        service_type: str = None,
    ):
        self.instance_id = instance_id
        self.service_type = service_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.service_type is not None:
            result['ServiceType'] = self.service_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ServiceType') is not None:
            self.service_type = m.get('ServiceType')
        return self


class GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension(TeaModel):
    def __init__(
        self,
        number: str = None,
        name: str = None,
    ):
        self.number = number
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class GetServiceExtensionsResponseBodyServiceExtensions(TeaModel):
    def __init__(
        self,
        service_extension: List[GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension] = None,
    ):
        self.service_extension = service_extension

    def validate(self):
        if self.service_extension:
            for k in self.service_extension:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['ServiceExtension'] = []
        if self.service_extension is not None:
            for k in self.service_extension:
                result['ServiceExtension'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.service_extension = []
        if m.get('ServiceExtension') is not None:
            for k in m.get('ServiceExtension'):
                temp_model = GetServiceExtensionsResponseBodyServiceExtensionsServiceExtension()
                self.service_extension.append(temp_model.from_map(k))
        return self


class GetServiceExtensionsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        service_extensions: GetServiceExtensionsResponseBodyServiceExtensions = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.service_extensions = service_extensions
        self.code = code
        self.success = success

    def validate(self):
        if self.service_extensions:
            self.service_extensions.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.service_extensions is not None:
            result['ServiceExtensions'] = self.service_extensions.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('ServiceExtensions') is not None:
            temp_model = GetServiceExtensionsResponseBodyServiceExtensions()
            self.service_extensions = temp_model.from_map(m['ServiceExtensions'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetServiceExtensionsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetServiceExtensionsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetServiceExtensionsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSmsConfigRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario: List[int] = None,
    ):
        self.instance_id = instance_id
        self.scenario = scenario

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        return self


class GetSmsConfigResponseBodySmsConfigsSmsConfig(TeaModel):
    def __init__(
        self,
        instance: str = None,
        description: str = None,
        template_code: str = None,
        gmt_create: str = None,
        scenario: int = None,
        gmt_modified: str = None,
        name: str = None,
        extra: str = None,
        sign_name: str = None,
        id: int = None,
    ):
        self.instance = instance
        self.description = description
        self.template_code = template_code
        self.gmt_create = gmt_create
        self.scenario = scenario
        self.gmt_modified = gmt_modified
        self.name = name
        self.extra = extra
        self.sign_name = sign_name
        self.id = id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.description is not None:
            result['Description'] = self.description
        if self.template_code is not None:
            result['TemplateCode'] = self.template_code
        if self.gmt_create is not None:
            result['GmtCreate'] = self.gmt_create
        if self.scenario is not None:
            result['Scenario'] = self.scenario
        if self.gmt_modified is not None:
            result['GmtModified'] = self.gmt_modified
        if self.name is not None:
            result['Name'] = self.name
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.sign_name is not None:
            result['SignName'] = self.sign_name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('TemplateCode') is not None:
            self.template_code = m.get('TemplateCode')
        if m.get('GmtCreate') is not None:
            self.gmt_create = m.get('GmtCreate')
        if m.get('Scenario') is not None:
            self.scenario = m.get('Scenario')
        if m.get('GmtModified') is not None:
            self.gmt_modified = m.get('GmtModified')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('SignName') is not None:
            self.sign_name = m.get('SignName')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetSmsConfigResponseBodySmsConfigs(TeaModel):
    def __init__(
        self,
        sms_config: List[GetSmsConfigResponseBodySmsConfigsSmsConfig] = None,
    ):
        self.sms_config = sms_config

    def validate(self):
        if self.sms_config:
            for k in self.sms_config:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SmsConfig'] = []
        if self.sms_config is not None:
            for k in self.sms_config:
                result['SmsConfig'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.sms_config = []
        if m.get('SmsConfig') is not None:
            for k in m.get('SmsConfig'):
                temp_model = GetSmsConfigResponseBodySmsConfigsSmsConfig()
                self.sms_config.append(temp_model.from_map(k))
        return self


class GetSmsConfigResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        sms_configs: GetSmsConfigResponseBodySmsConfigs = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.sms_configs = sms_configs
        self.code = code
        self.success = success

    def validate(self):
        if self.sms_configs:
            self.sms_configs.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.sms_configs is not None:
            result['SmsConfigs'] = self.sms_configs.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('SmsConfigs') is not None:
            temp_model = GetSmsConfigResponseBodySmsConfigs()
            self.sms_configs = temp_model.from_map(m['SmsConfigs'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetSmsConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetSmsConfigResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetSmsConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetSurveyRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
        survey_id: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        self.survey_id = survey_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class GetSurveyResponseBodySurveyAsrCustomModel(TeaModel):
    def __init__(
        self,
        custom_model_status: int = None,
        corpora: str = None,
    ):
        self.custom_model_status = custom_model_status
        self.corpora = corpora

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        return self


class GetSurveyResponseBodySurveyFlow(TeaModel):
    def __init__(
        self,
        is_published: bool = None,
        flow_json: str = None,
        flow_id: str = None,
    ):
        self.is_published = is_published
        self.flow_json = flow_json
        self.flow_id = flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        return self


class GetSurveyResponseBodySurvey(TeaModel):
    def __init__(
        self,
        global_questions: str = None,
        round: int = None,
        speech_optimization_param: str = None,
        description: str = None,
        hot_words: str = None,
        asr_custom_model: GetSurveyResponseBodySurveyAsrCustomModel = None,
        flow: GetSurveyResponseBodySurveyFlow = None,
        role: str = None,
        name: str = None,
        scenario_uuid: str = None,
        id: str = None,
    ):
        self.global_questions = global_questions
        self.round = round
        self.speech_optimization_param = speech_optimization_param
        self.description = description
        self.hot_words = hot_words
        self.asr_custom_model = asr_custom_model
        self.flow = flow
        self.role = role
        self.name = name
        self.scenario_uuid = scenario_uuid
        self.id = id

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        result = dict()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.round is not None:
            result['Round'] = self.round
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.description is not None:
            result['Description'] = self.description
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.role is not None:
            result['Role'] = self.role
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('AsrCustomModel') is not None:
            temp_model = GetSurveyResponseBodySurveyAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Flow') is not None:
            temp_model = GetSurveyResponseBodySurveyFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class GetSurveyResponseBody(TeaModel):
    def __init__(
        self,
        survey: GetSurveyResponseBodySurvey = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.survey = survey
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.survey:
            self.survey.validate()

    def to_map(self):
        result = dict()
        if self.survey is not None:
            result['Survey'] = self.survey.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Survey') is not None:
            temp_model = GetSurveyResponseBodySurvey()
            self.survey = temp_model.from_map(m['Survey'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetSurveyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetSurveyResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTaskListRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class GetTaskListResponseBodyTasksContact(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class GetTaskListResponseBodyTasksConversationSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        category: str = None,
        content: str = None,
    ):
        self.summary_name = summary_name
        self.category = category
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class GetTaskListResponseBodyTasksConversation(TeaModel):
    def __init__(
        self,
        summary: List[GetTaskListResponseBodyTasksConversationSummary] = None,
        speaker: str = None,
        timestamp: int = None,
        script: str = None,
    ):
        self.summary = summary
        self.speaker = speaker
        self.timestamp = timestamp
        self.script = script

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.speaker is not None:
            result['Speaker'] = self.speaker
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.script is not None:
            result['Script'] = self.script
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = GetTaskListResponseBodyTasksConversationSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Speaker') is not None:
            self.speaker = m.get('Speaker')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('Script') is not None:
            self.script = m.get('Script')
        return self


class GetTaskListResponseBodyTasks(TeaModel):
    def __init__(
        self,
        status: str = None,
        planed_time: int = None,
        chatbot_id: str = None,
        actual_time: int = None,
        called_number: str = None,
        scenario_id: str = None,
        contact: GetTaskListResponseBodyTasksContact = None,
        job_id: str = None,
        call_id: str = None,
        calling_number: str = None,
        brief: str = None,
        duration: int = None,
        task_id: str = None,
        conversation: List[GetTaskListResponseBodyTasksConversation] = None,
    ):
        self.status = status
        self.planed_time = planed_time
        self.chatbot_id = chatbot_id
        self.actual_time = actual_time
        self.called_number = called_number
        self.scenario_id = scenario_id
        self.contact = contact
        self.job_id = job_id
        self.call_id = call_id
        self.calling_number = calling_number
        self.brief = brief
        self.duration = duration
        self.task_id = task_id
        self.conversation = conversation

    def validate(self):
        if self.contact:
            self.contact.validate()
        if self.conversation:
            for k in self.conversation:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        result['Conversation'] = []
        if self.conversation is not None:
            for k in self.conversation:
                result['Conversation'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Contact') is not None:
            temp_model = GetTaskListResponseBodyTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        self.conversation = []
        if m.get('Conversation') is not None:
            for k in m.get('Conversation'):
                temp_model = GetTaskListResponseBodyTasksConversation()
                self.conversation.append(temp_model.from_map(k))
        return self


class GetTaskListResponseBody(TeaModel):
    def __init__(
        self,
        tasks: List[GetTaskListResponseBodyTasks] = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.tasks = tasks
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = GetTaskListResponseBodyTasks()
                self.tasks.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetTaskListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetTaskListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTaskListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTURNCredentialsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_name: str = None,
    ):
        self.instance_id = instance_id
        self.user_name = user_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_name is not None:
            result['UserName'] = self.user_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        return self


class GetTURNCredentialsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        username: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        password: str = None,
    ):
        self.request_id = request_id
        self.message = message
        self.username = username
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.password = password

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.username is not None:
            result['Username'] = self.username
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.password is not None:
            result['Password'] = self.password
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('Username') is not None:
            self.username = m.get('Username')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Password') is not None:
            self.password = m.get('Password')
        return self


class GetTURNCredentialsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetTURNCredentialsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTURNCredentialsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetTURNServerListRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class GetTURNServerListResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        turn_server_list_config: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.turn_server_list_config = turn_server_list_config
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.turn_server_list_config is not None:
            result['TurnServerListConfig'] = self.turn_server_list_config
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('TurnServerListConfig') is not None:
            self.turn_server_list_config = m.get('TurnServerListConfig')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetTURNServerListResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetTURNServerListResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetTURNServerListResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_id: str = None,
    ):
        self.instance_id = instance_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class GetUserResponseBodyUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        skill_group_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class GetUserResponseBodyUserSkillLevelsSkillLevel(TeaModel):
    def __init__(
        self,
        skill: GetUserResponseBodyUserSkillLevelsSkillLevelSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = GetUserResponseBodyUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class GetUserResponseBodyUserSkillLevels(TeaModel):
    def __init__(
        self,
        skill_level: List[GetUserResponseBodyUserSkillLevelsSkillLevel] = None,
    ):
        self.skill_level = skill_level

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = GetUserResponseBodyUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class GetUserResponseBodyUserRolesRole(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        instance_id: str = None,
        role_name: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.instance_id = instance_id
        self.role_name = role_name
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class GetUserResponseBodyUserRoles(TeaModel):
    def __init__(
        self,
        role: List[GetUserResponseBodyUserRolesRole] = None,
    ):
        self.role = role

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = GetUserResponseBodyUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class GetUserResponseBodyUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class GetUserResponseBodyUser(TeaModel):
    def __init__(
        self,
        skill_levels: GetUserResponseBodyUserSkillLevels = None,
        user_id: str = None,
        roles: GetUserResponseBodyUserRoles = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: GetUserResponseBodyUserDetail = None,
    ):
        self.skill_levels = skill_levels
        self.user_id = user_id
        self.roles = roles
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()
        if self.roles:
            self.roles.validate()
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillLevels') is not None:
            temp_model = GetUserResponseBodyUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('Roles') is not None:
            temp_model = GetUserResponseBodyUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = GetUserResponseBodyUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class GetUserResponseBody(TeaModel):
    def __init__(
        self,
        user: GetUserResponseBodyUser = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.user = user
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.user:
            self.user.validate()

    def to_map(self):
        result = dict()
        if self.user is not None:
            result['User'] = self.user.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('User') is not None:
            temp_model = GetUserResponseBodyUser()
            self.user = temp_model.from_map(m['User'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class GetUserByExtensionRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        extension: str = None,
    ):
        self.instance_id = instance_id
        self.extension = extension

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.extension is not None:
            result['Extension'] = self.extension
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        return self


class GetUserByExtensionResponseBodyUserSkillLevelsSkill(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        skill_group_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class GetUserByExtensionResponseBodyUserSkillLevels(TeaModel):
    def __init__(
        self,
        skill: GetUserByExtensionResponseBodyUserSkillLevelsSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = GetUserByExtensionResponseBodyUserSkillLevelsSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class GetUserByExtensionResponseBodyUserRoles(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        instance_id: str = None,
        role_name: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.instance_id = instance_id
        self.role_name = role_name
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class GetUserByExtensionResponseBodyUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        extension: str = None,
        login_name: str = None,
        email: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.extension = extension
        self.login_name = login_name
        self.email = email
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.email is not None:
            result['Email'] = self.email
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class GetUserByExtensionResponseBodyUser(TeaModel):
    def __init__(
        self,
        skill_levels: List[GetUserByExtensionResponseBodyUserSkillLevels] = None,
        user_id: str = None,
        roles: List[GetUserByExtensionResponseBodyUserRoles] = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: GetUserByExtensionResponseBodyUserDetail = None,
    ):
        self.skill_levels = skill_levels
        self.user_id = user_id
        self.roles = roles
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.skill_levels:
            for k in self.skill_levels:
                if k:
                    k.validate()
        if self.roles:
            for k in self.roles:
                if k:
                    k.validate()
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        result['SkillLevels'] = []
        if self.skill_levels is not None:
            for k in self.skill_levels:
                result['SkillLevels'].append(k.to_map() if k else None)
        if self.user_id is not None:
            result['UserId'] = self.user_id
        result['Roles'] = []
        if self.roles is not None:
            for k in self.roles:
                result['Roles'].append(k.to_map() if k else None)
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_levels = []
        if m.get('SkillLevels') is not None:
            for k in m.get('SkillLevels'):
                temp_model = GetUserByExtensionResponseBodyUserSkillLevels()
                self.skill_levels.append(temp_model.from_map(k))
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        self.roles = []
        if m.get('Roles') is not None:
            for k in m.get('Roles'):
                temp_model = GetUserByExtensionResponseBodyUserRoles()
                self.roles.append(temp_model.from_map(k))
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = GetUserByExtensionResponseBodyUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class GetUserByExtensionResponseBody(TeaModel):
    def __init__(
        self,
        user: GetUserByExtensionResponseBodyUser = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.user = user
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.user:
            self.user.validate()

    def to_map(self):
        result = dict()
        if self.user is not None:
            result['User'] = self.user.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('User') is not None:
            temp_model = GetUserByExtensionResponseBodyUser()
            self.user = temp_model.from_map(m['User'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class GetUserByExtensionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: GetUserByExtensionResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = GetUserByExtensionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class InflightTaskTimeoutRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        task_id: str = None,
        instance_owner_id: int = None,
    ):
        self.instance_id = instance_id
        self.task_id = task_id
        self.instance_owner_id = instance_owner_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        return self


class InflightTaskTimeoutResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class InflightTaskTimeoutResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: InflightTaskTimeoutResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = InflightTaskTimeoutResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LaunchAppraiseRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        acid: str = None,
    ):
        self.instance_id = instance_id
        self.acid = acid

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.acid is not None:
            result['Acid'] = self.acid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Acid') is not None:
            self.acid = m.get('Acid')
        return self


class LaunchAppraiseResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class LaunchAppraiseResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: LaunchAppraiseResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = LaunchAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class LaunchShortMessageAppraiseRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        acid: str = None,
        skill_group_id: str = None,
        contact_type: int = None,
        phone_numbers: str = None,
    ):
        self.instance_id = instance_id
        self.acid = acid
        self.skill_group_id = skill_group_id
        self.contact_type = contact_type
        self.phone_numbers = phone_numbers

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.acid is not None:
            result['Acid'] = self.acid
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Acid') is not None:
            self.acid = m.get('Acid')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        return self


class LaunchShortMessageAppraiseResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class LaunchShortMessageAppraiseResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: LaunchShortMessageAppraiseResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = LaunchShortMessageAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentDevicesRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        ram_ids: str = None,
        start_time: int = None,
        stop_time: int = None,
    ):
        self.instance_id = instance_id
        self.ram_ids = ram_ids
        self.start_time = start_time
        self.stop_time = stop_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_ids is not None:
            result['RamIds'] = self.ram_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamIds') is not None:
            self.ram_ids = m.get('RamIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        return self


class ListAgentDevicesResponseBodyAgentDeviceListAgentDevice(TeaModel):
    def __init__(
        self,
        login_time: int = None,
        client_port: str = None,
        remark: str = None,
        browser_version: str = None,
        client_ip: str = None,
        instance_id: str = None,
        is_login: int = None,
        ram_id: int = None,
    ):
        self.login_time = login_time
        self.client_port = client_port
        self.remark = remark
        self.browser_version = browser_version
        self.client_ip = client_ip
        self.instance_id = instance_id
        self.is_login = is_login
        self.ram_id = ram_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.login_time is not None:
            result['LoginTime'] = self.login_time
        if self.client_port is not None:
            result['ClientPort'] = self.client_port
        if self.remark is not None:
            result['Remark'] = self.remark
        if self.browser_version is not None:
            result['BrowserVersion'] = self.browser_version
        if self.client_ip is not None:
            result['ClientIp'] = self.client_ip
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.is_login is not None:
            result['IsLogin'] = self.is_login
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('LoginTime') is not None:
            self.login_time = m.get('LoginTime')
        if m.get('ClientPort') is not None:
            self.client_port = m.get('ClientPort')
        if m.get('Remark') is not None:
            self.remark = m.get('Remark')
        if m.get('BrowserVersion') is not None:
            self.browser_version = m.get('BrowserVersion')
        if m.get('ClientIp') is not None:
            self.client_ip = m.get('ClientIp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('IsLogin') is not None:
            self.is_login = m.get('IsLogin')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        return self


class ListAgentDevicesResponseBodyAgentDeviceList(TeaModel):
    def __init__(
        self,
        agent_device: List[ListAgentDevicesResponseBodyAgentDeviceListAgentDevice] = None,
    ):
        self.agent_device = agent_device

    def validate(self):
        if self.agent_device:
            for k in self.agent_device:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentDevice'] = []
        if self.agent_device is not None:
            for k in self.agent_device:
                result['AgentDevice'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_device = []
        if m.get('AgentDevice') is not None:
            for k in m.get('AgentDevice'):
                temp_model = ListAgentDevicesResponseBodyAgentDeviceListAgentDevice()
                self.agent_device.append(temp_model.from_map(k))
        return self


class ListAgentDevicesResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        agent_device_list: ListAgentDevicesResponseBodyAgentDeviceList = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.agent_device_list = agent_device_list

    def validate(self):
        if self.agent_device_list:
            self.agent_device_list.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.agent_device_list is not None:
            result['AgentDeviceList'] = self.agent_device_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('AgentDeviceList') is not None:
            temp_model = ListAgentDevicesResponseBodyAgentDeviceList()
            self.agent_device_list = temp_model.from_map(m['AgentDeviceList'])
        return self


class ListAgentDevicesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentDevicesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentDevicesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentEventsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        start_time: int = None,
        stop_time: int = None,
        ram_id: List[str] = None,
        event: List[str] = None,
    ):
        self.instance_id = instance_id
        self.start_time = start_time
        self.stop_time = stop_time
        self.ram_id = ram_id
        self.event = event

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.event is not None:
            result['Event'] = self.event
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Event') is not None:
            self.event = m.get('Event')
        return self


class ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup(TeaModel):
    def __init__(
        self,
        skill_group_name: str = None,
        skill_group_id: str = None,
    ):
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds(TeaModel):
    def __init__(
        self,
        skill_group: List[ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup] = None,
    ):
        self.skill_group = skill_group

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIdsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ListAgentEventsResponseBodyAgentEventListAgentEvent(TeaModel):
    def __init__(
        self,
        event_time: int = None,
        login_name: str = None,
        event: str = None,
        instance_id: str = None,
        ram_id: int = None,
        skill_group_ids: ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds = None,
    ):
        self.event_time = event_time
        self.login_name = login_name
        self.event = event
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.skill_group_ids = skill_group_ids

    def validate(self):
        if self.skill_group_ids:
            self.skill_group_ids.validate()

    def to_map(self):
        result = dict()
        if self.event_time is not None:
            result['EventTime'] = self.event_time
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.event is not None:
            result['Event'] = self.event
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EventTime') is not None:
            self.event_time = m.get('EventTime')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Event') is not None:
            self.event = m.get('Event')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('SkillGroupIds') is not None:
            temp_model = ListAgentEventsResponseBodyAgentEventListAgentEventSkillGroupIds()
            self.skill_group_ids = temp_model.from_map(m['SkillGroupIds'])
        return self


class ListAgentEventsResponseBodyAgentEventList(TeaModel):
    def __init__(
        self,
        agent_event: List[ListAgentEventsResponseBodyAgentEventListAgentEvent] = None,
    ):
        self.agent_event = agent_event

    def validate(self):
        if self.agent_event:
            for k in self.agent_event:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentEvent'] = []
        if self.agent_event is not None:
            for k in self.agent_event:
                result['AgentEvent'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_event = []
        if m.get('AgentEvent') is not None:
            for k in m.get('AgentEvent'):
                temp_model = ListAgentEventsResponseBodyAgentEventListAgentEvent()
                self.agent_event.append(temp_model.from_map(k))
        return self


class ListAgentEventsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        agent_event_list: ListAgentEventsResponseBodyAgentEventList = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.agent_event_list = agent_event_list
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.agent_event_list:
            self.agent_event_list.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.agent_event_list is not None:
            result['AgentEventList'] = self.agent_event_list.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('AgentEventList') is not None:
            temp_model = ListAgentEventsResponseBodyAgentEventList()
            self.agent_event_list = temp_model.from_map(m['AgentEventList'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentEventsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentEventsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentEventsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentStateLogsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        ram_id: int = None,
        start_time: int = None,
        end_time: int = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAgentStateLogsResponseBodyAgentStateLogPageList(TeaModel):
    def __init__(
        self,
        state_code: str = None,
        contact_id: str = None,
        state: str = None,
        connect_id: str = None,
        state_time: int = None,
        instance_id: str = None,
        ram_id: int = None,
        skill_group_ids: str = None,
        counter_party: str = None,
    ):
        self.state_code = state_code
        self.contact_id = contact_id
        self.state = state
        self.connect_id = connect_id
        self.state_time = state_time
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.skill_group_ids = skill_group_ids
        self.counter_party = counter_party

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.state_code is not None:
            result['StateCode'] = self.state_code
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.connect_id is not None:
            result['ConnectId'] = self.connect_id
        if self.state_time is not None:
            result['StateTime'] = self.state_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.counter_party is not None:
            result['CounterParty'] = self.counter_party
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StateCode') is not None:
            self.state_code = m.get('StateCode')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('ConnectId') is not None:
            self.connect_id = m.get('ConnectId')
        if m.get('StateTime') is not None:
            self.state_time = m.get('StateTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('CounterParty') is not None:
            self.counter_party = m.get('CounterParty')
        return self


class ListAgentStateLogsResponseBodyAgentStateLogPage(TeaModel):
    def __init__(
        self,
        list: List[ListAgentStateLogsResponseBodyAgentStateLogPageList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListAgentStateLogsResponseBodyAgentStateLogPageList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentStateLogsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        agent_state_log_page: ListAgentStateLogsResponseBodyAgentStateLogPage = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.agent_state_log_page = agent_state_log_page

    def validate(self):
        if self.agent_state_log_page:
            self.agent_state_log_page.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.agent_state_log_page is not None:
            result['AgentStateLogPage'] = self.agent_state_log_page.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('AgentStateLogPage') is not None:
            temp_model = ListAgentStateLogsResponseBodyAgentStateLogPage()
            self.agent_state_log_page = temp_model.from_map(m['AgentStateLogPage'])
        return self


class ListAgentStateLogsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentStateLogsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentStateLogsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentStatesRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        agent_ids: str = None,
        state: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.agent_ids = agent_ids
        self.state = state
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.state is not None:
            result['State'] = self.state
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAgentStatesResponseBodyDataListRealTimeAgentState(TeaModel):
    def __init__(
        self,
        login_name: str = None,
        dn: str = None,
        state_duration: str = None,
        state: str = None,
        agent_id: str = None,
        agent_name: str = None,
        instance_id: str = None,
    ):
        self.login_name = login_name
        self.dn = dn
        self.state_duration = state_duration
        self.state = state
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.dn is not None:
            result['Dn'] = self.dn
        if self.state_duration is not None:
            result['StateDuration'] = self.state_duration
        if self.state is not None:
            result['State'] = self.state
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Dn') is not None:
            self.dn = m.get('Dn')
        if m.get('StateDuration') is not None:
            self.state_duration = m.get('StateDuration')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListAgentStatesResponseBodyDataList(TeaModel):
    def __init__(
        self,
        real_time_agent_state: List[ListAgentStatesResponseBodyDataListRealTimeAgentState] = None,
    ):
        self.real_time_agent_state = real_time_agent_state

    def validate(self):
        if self.real_time_agent_state:
            for k in self.real_time_agent_state:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['RealTimeAgentState'] = []
        if self.real_time_agent_state is not None:
            for k in self.real_time_agent_state:
                result['RealTimeAgentState'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.real_time_agent_state = []
        if m.get('RealTimeAgentState') is not None:
            for k in m.get('RealTimeAgentState'):
                temp_model = ListAgentStatesResponseBodyDataListRealTimeAgentState()
                self.real_time_agent_state.append(temp_model.from_map(k))
        return self


class ListAgentStatesResponseBodyData(TeaModel):
    def __init__(
        self,
        list: ListAgentStatesResponseBodyDataList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentStatesResponseBodyDataList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentStatesResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        data: ListAgentStatesResponseBodyData = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.data = data
        self.code = code
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Data') is not None:
            temp_model = ListAgentStatesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentStatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentStatesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentStatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentSummaryReportsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        agent_ids: str = None,
        start_time: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.agent_ids = agent_ids
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_logged_in_time: int = None,
        total_talk_time: int = None,
        occupancy_rate: float = None,
        last_log_out_time: str = None,
        total_work_time: int = None,
        first_log_in_time: str = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        one_transfer_calls: int = None,
        max_talk_time: int = None,
        total_ready_time: int = None,
        total_break_time: int = None,
        total_calls: int = None,
    ):
        self.total_logged_in_time = total_logged_in_time
        self.total_talk_time = total_talk_time
        self.occupancy_rate = occupancy_rate
        self.last_log_out_time = last_log_out_time
        self.total_work_time = total_work_time
        self.first_log_in_time = first_log_in_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.one_transfer_calls = one_transfer_calls
        self.max_talk_time = max_talk_time
        self.total_ready_time = total_ready_time
        self.total_break_time = total_break_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.last_log_out_time is not None:
            result['LastLogOutTime'] = self.last_log_out_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.first_log_in_time is not None:
            result['FirstLogInTime'] = self.first_log_in_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.one_transfer_calls is not None:
            result['OneTransferCalls'] = self.one_transfer_calls
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('LastLogOutTime') is not None:
            self.last_log_out_time = m.get('LastLogOutTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('FirstLogInTime') is not None:
            self.first_log_in_time = m.get('FirstLogInTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('OneTransferCalls') is not None:
            self.one_transfer_calls = m.get('OneTransferCalls')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        average_ring_time: int = None,
        calls_offered: int = None,
        calls_handled: int = None,
        service_level_20: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        total_ring_time: int = None,
        max_talk_time: int = None,
        max_ring_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.average_ring_time = average_ring_time
        self.calls_offered = calls_offered
        self.calls_handled = calls_handled
        self.service_level_20 = service_level_20
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.total_ring_time = total_ring_time
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: str = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport(TeaModel):
    def __init__(
        self,
        overall: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall = None,
        login_name: str = None,
        agent_id: str = None,
        inbound: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound = None,
        outbound: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound = None,
        agent_name: str = None,
        instance_id: str = None,
        skill_group_names: str = None,
        skill_group_ids: str = None,
    ):
        self.overall = overall
        self.login_name = login_name
        self.agent_id = agent_id
        self.inbound = inbound
        self.outbound = outbound
        self.agent_name = agent_name
        self.instance_id = instance_id
        self.skill_group_names = skill_group_names
        self.skill_group_ids = skill_group_ids

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Inbound') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList(TeaModel):
    def __init__(
        self,
        agent_summary_report: List[ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport] = None,
    ):
        self.agent_summary_report = agent_summary_report

    def validate(self):
        if self.agent_summary_report:
            for k in self.agent_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentSummaryReport'] = []
        if self.agent_summary_report is not None:
            for k in self.agent_summary_report:
                result['AgentSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_summary_report = []
        if m.get('AgentSummaryReport') is not None:
            for k in m.get('AgentSummaryReport'):
                temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportListAgentSummaryReport()
                self.agent_summary_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport(TeaModel):
    def __init__(
        self,
        list: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentSummaryReportsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        paged_agent_summary_report: ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.paged_agent_summary_report = paged_agent_summary_report
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.paged_agent_summary_report:
            self.paged_agent_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.paged_agent_summary_report is not None:
            result['PagedAgentSummaryReport'] = self.paged_agent_summary_report.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('PagedAgentSummaryReport') is not None:
            temp_model = ListAgentSummaryReportsResponseBodyPagedAgentSummaryReport()
            self.paged_agent_summary_report = temp_model.from_map(m['PagedAgentSummaryReport'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentSummaryReportsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentSummaryReportsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentSummaryReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentSummaryReportsByIntervalRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        agent_ids: str = None,
        interval: str = None,
        start_time: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.agent_ids = agent_ids
        self.interval = interval
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_logged_in_time: int = None,
        total_talk_time: int = None,
        occupancy_rate: float = None,
        last_log_out_time: str = None,
        total_work_time: int = None,
        first_log_in_time: str = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        one_transfer_calls: int = None,
        max_talk_time: int = None,
        total_ready_time: int = None,
        total_break_time: int = None,
        total_calls: int = None,
    ):
        self.total_logged_in_time = total_logged_in_time
        self.total_talk_time = total_talk_time
        self.occupancy_rate = occupancy_rate
        self.last_log_out_time = last_log_out_time
        self.total_work_time = total_work_time
        self.first_log_in_time = first_log_in_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.one_transfer_calls = one_transfer_calls
        self.max_talk_time = max_talk_time
        self.total_ready_time = total_ready_time
        self.total_break_time = total_break_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.last_log_out_time is not None:
            result['LastLogOutTime'] = self.last_log_out_time
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.first_log_in_time is not None:
            result['FirstLogInTime'] = self.first_log_in_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.one_transfer_calls is not None:
            result['OneTransferCalls'] = self.one_transfer_calls
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('LastLogOutTime') is not None:
            self.last_log_out_time = m.get('LastLogOutTime')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('FirstLogInTime') is not None:
            self.first_log_in_time = m.get('FirstLogInTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('OneTransferCalls') is not None:
            self.one_transfer_calls = m.get('OneTransferCalls')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        average_ring_time: int = None,
        calls_offered: int = None,
        calls_handled: int = None,
        service_level_20: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        total_ring_time: int = None,
        max_talk_time: int = None,
        max_ring_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.average_ring_time = average_ring_time
        self.calls_offered = calls_offered
        self.calls_handled = calls_handled
        self.service_level_20 = service_level_20
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.total_ring_time = total_ring_time
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport(TeaModel):
    def __init__(
        self,
        overall: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall = None,
        login_name: str = None,
        agent_id: str = None,
        inbound: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound = None,
        outbound: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound = None,
        agent_name: str = None,
        skill_group_names: str = None,
        timestamp: str = None,
        instance_id: str = None,
        skill_group_ids: str = None,
    ):
        self.overall = overall
        self.login_name = login_name
        self.agent_id = agent_id
        self.inbound = inbound
        self.outbound = outbound
        self.agent_name = agent_name
        self.skill_group_names = skill_group_names
        self.timestamp = timestamp
        self.instance_id = instance_id
        self.skill_group_ids = skill_group_ids

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Inbound') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList(TeaModel):
    def __init__(
        self,
        agent_summary_report: List[ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport] = None,
    ):
        self.agent_summary_report = agent_summary_report

    def validate(self):
        if self.agent_summary_report:
            for k in self.agent_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentSummaryReport'] = []
        if self.agent_summary_report is not None:
            for k in self.agent_summary_report:
                result['AgentSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_summary_report = []
        if m.get('AgentSummaryReport') is not None:
            for k in m.get('AgentSummaryReport'):
                temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalListAgentSummaryReport()
                self.agent_summary_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport(TeaModel):
    def __init__(
        self,
        agent_id: str = None,
        interval_list: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList = None,
    ):
        self.agent_id = agent_id
        self.interval_list = interval_list

    def validate(self):
        if self.interval_list:
            self.interval_list.validate()

    def to_map(self):
        result = dict()
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.interval_list is not None:
            result['IntervalList'] = self.interval_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('IntervalList') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReportIntervalList()
            self.interval_list = temp_model.from_map(m['IntervalList'])
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList(TeaModel):
    def __init__(
        self,
        agent_time_interval_report: List[ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport] = None,
    ):
        self.agent_time_interval_report = agent_time_interval_report

    def validate(self):
        if self.agent_time_interval_report:
            for k in self.agent_time_interval_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentTimeIntervalReport'] = []
        if self.agent_time_interval_report is not None:
            for k in self.agent_time_interval_report:
                result['AgentTimeIntervalReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_time_interval_report = []
        if m.get('AgentTimeIntervalReport') is not None:
            for k in m.get('AgentTimeIntervalReport'):
                temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportListAgentTimeIntervalReport()
                self.agent_time_interval_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport(TeaModel):
    def __init__(
        self,
        list: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentSummaryReportsByIntervalResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        paged_agent_summary_report: ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.paged_agent_summary_report = paged_agent_summary_report
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.paged_agent_summary_report:
            self.paged_agent_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.paged_agent_summary_report is not None:
            result['PagedAgentSummaryReport'] = self.paged_agent_summary_report.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('PagedAgentSummaryReport') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBodyPagedAgentSummaryReport()
            self.paged_agent_summary_report = temp_model.from_map(m['PagedAgentSummaryReport'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentSummaryReportsByIntervalResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentSummaryReportsByIntervalResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentSummaryReportsByIntervalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListAgentSummaryReportsSinceMidnightRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        agent_ids: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.agent_ids = agent_ids
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.agent_ids is not None:
            result['AgentIds'] = self.agent_ids
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('AgentIds') is not None:
            self.agent_ids = m.get('AgentIds')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_logged_in_time: int = None,
        total_talk_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_ready_time: int = None,
        average_ready_time: int = None,
        one_transfer_calls: int = None,
        max_talk_time: int = None,
        total_ready_time: int = None,
        total_break_time: int = None,
        total_calls: int = None,
    ):
        self.total_logged_in_time = total_logged_in_time
        self.total_talk_time = total_talk_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_ready_time = max_ready_time
        self.average_ready_time = average_ready_time
        self.one_transfer_calls = one_transfer_calls
        self.max_talk_time = max_talk_time
        self.total_ready_time = total_ready_time
        self.total_break_time = total_break_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.one_transfer_calls is not None:
            result['OneTransferCalls'] = self.one_transfer_calls
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('OneTransferCalls') is not None:
            self.one_transfer_calls = m.get('OneTransferCalls')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        average_ring_time: int = None,
        calls_offered: int = None,
        calls_handled: int = None,
        service_level_20: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        total_ring_time: int = None,
        max_talk_time: int = None,
        max_ring_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.average_ring_time = average_ring_time
        self.calls_offered = calls_offered
        self.calls_handled = calls_handled
        self.service_level_20 = service_level_20
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.total_ring_time = total_ring_time
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: str = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport(TeaModel):
    def __init__(
        self,
        overall: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall = None,
        login_name: str = None,
        agent_id: str = None,
        inbound: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound = None,
        outbound: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound = None,
        agent_name: str = None,
        skill_group_names: str = None,
        timestamp: str = None,
        instance_id: str = None,
        skill_group_ids: str = None,
    ):
        self.overall = overall
        self.login_name = login_name
        self.agent_id = agent_id
        self.inbound = inbound
        self.outbound = outbound
        self.agent_name = agent_name
        self.skill_group_names = skill_group_names
        self.timestamp = timestamp
        self.instance_id = instance_id
        self.skill_group_ids = skill_group_ids

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Inbound') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList(TeaModel):
    def __init__(
        self,
        agent_summary_report: List[ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport] = None,
    ):
        self.agent_summary_report = agent_summary_report

    def validate(self):
        if self.agent_summary_report:
            for k in self.agent_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['AgentSummaryReport'] = []
        if self.agent_summary_report is not None:
            for k in self.agent_summary_report:
                result['AgentSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.agent_summary_report = []
        if m.get('AgentSummaryReport') is not None:
            for k in m.get('AgentSummaryReport'):
                temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportListAgentSummaryReport()
                self.agent_summary_report.append(temp_model.from_map(k))
        return self


class ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport(TeaModel):
    def __init__(
        self,
        list: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListAgentSummaryReportsSinceMidnightResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        paged_agent_summary_report: ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.paged_agent_summary_report = paged_agent_summary_report
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.paged_agent_summary_report:
            self.paged_agent_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.paged_agent_summary_report is not None:
            result['PagedAgentSummaryReport'] = self.paged_agent_summary_report.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('PagedAgentSummaryReport') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBodyPagedAgentSummaryReport()
            self.paged_agent_summary_report = temp_model.from_map(m['PagedAgentSummaryReport'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListAgentSummaryReportsSinceMidnightResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListAgentSummaryReportsSinceMidnightResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListAgentSummaryReportsSinceMidnightResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListBasicStatisticsReportSubItemsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        title: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.title = title
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.title is not None:
            result['Title'] = self.title
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('Title') is not None:
            self.title = m.get('Title')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListBasicStatisticsReportSubItemsResponseBodySubItemsList(TeaModel):
    def __init__(
        self,
        basic_statistics_report_sub_item_name: str = None,
        value: str = None,
        percentage: int = None,
        count: int = None,
        row: List[ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow] = None,
    ):
        self.basic_statistics_report_sub_item_name = basic_statistics_report_sub_item_name
        self.value = value
        self.percentage = percentage
        self.count = count
        self.row = row

    def validate(self):
        if self.row:
            for k in self.row:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.basic_statistics_report_sub_item_name is not None:
            result['BasicStatisticsReportSubItemName'] = self.basic_statistics_report_sub_item_name
        if self.value is not None:
            result['Value'] = self.value
        if self.percentage is not None:
            result['Percentage'] = self.percentage
        if self.count is not None:
            result['Count'] = self.count
        result['Row'] = []
        if self.row is not None:
            for k in self.row:
                result['Row'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('BasicStatisticsReportSubItemName') is not None:
            self.basic_statistics_report_sub_item_name = m.get('BasicStatisticsReportSubItemName')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        if m.get('Percentage') is not None:
            self.percentage = m.get('Percentage')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        self.row = []
        if m.get('Row') is not None:
            for k in m.get('Row'):
                temp_model = ListBasicStatisticsReportSubItemsResponseBodySubItemsListRow()
                self.row.append(temp_model.from_map(k))
        return self


class ListBasicStatisticsReportSubItemsResponseBodySubItems(TeaModel):
    def __init__(
        self,
        list: List[ListBasicStatisticsReportSubItemsResponseBodySubItemsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListBasicStatisticsReportSubItemsResponseBodySubItemsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListBasicStatisticsReportSubItemsResponseBody(TeaModel):
    def __init__(
        self,
        sub_items: ListBasicStatisticsReportSubItemsResponseBodySubItems = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.sub_items = sub_items
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.sub_items:
            self.sub_items.validate()

    def to_map(self):
        result = dict()
        if self.sub_items is not None:
            result['SubItems'] = self.sub_items.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SubItems') is not None:
            temp_model = ListBasicStatisticsReportSubItemsResponseBodySubItems()
            self.sub_items = temp_model.from_map(m['SubItems'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListBasicStatisticsReportSubItemsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListBasicStatisticsReportSubItemsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListBasicStatisticsReportSubItemsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCallDetailRecordsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        phone_number: str = None,
        start_time: int = None,
        stop_time: int = None,
        criteria: str = None,
        contact_type: str = None,
        contact_disposition: str = None,
        with_recording: bool = None,
        contact_id: str = None,
        order_by: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.phone_number = phone_number
        self.start_time = start_time
        self.stop_time = stop_time
        self.criteria = criteria
        self.contact_type = contact_type
        self.contact_disposition = contact_disposition
        self.with_recording = with_recording
        self.contact_id = contact_id
        self.order_by = order_by
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.contact_disposition is not None:
            result['ContactDisposition'] = self.contact_disposition
        if self.with_recording is not None:
            result['WithRecording'] = self.with_recording
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.order_by is not None:
            result['OrderBy'] = self.order_by
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('ContactDisposition') is not None:
            self.contact_disposition = m.get('ContactDisposition')
        if m.get('WithRecording') is not None:
            self.with_recording = m.get('WithRecording')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('OrderBy') is not None:
            self.order_by = m.get('OrderBy')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording(TeaModel):
    def __init__(
        self,
        start_time: int = None,
        contact_id: str = None,
        quality_check_task_id: str = None,
        agent_id: str = None,
        file_description: str = None,
        duration: int = None,
        agent_name: str = None,
        file_name: str = None,
        quality_check_tid: str = None,
    ):
        self.start_time = start_time
        self.contact_id = contact_id
        self.quality_check_task_id = quality_check_task_id
        self.agent_id = agent_id
        self.file_description = file_description
        self.duration = duration
        self.agent_name = agent_name
        self.file_name = file_name
        self.quality_check_tid = quality_check_tid

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.quality_check_task_id is not None:
            result['QualityCheckTaskId'] = self.quality_check_task_id
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.quality_check_tid is not None:
            result['QualityCheckTid'] = self.quality_check_tid
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('QualityCheckTaskId') is not None:
            self.quality_check_task_id = m.get('QualityCheckTaskId')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('QualityCheckTid') is not None:
            self.quality_check_tid = m.get('QualityCheckTid')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings(TeaModel):
    def __init__(
        self,
        recording: List[ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording] = None,
    ):
        self.recording = recording

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent(TeaModel):
    def __init__(
        self,
        satisfaction: str = None,
        agent_id: str = None,
        feedback: str = None,
    ):
        self.satisfaction = satisfaction
        self.agent_id = agent_id
        self.feedback = feedback

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents(TeaModel):
    def __init__(
        self,
        call_detail_agent: List[ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent] = None,
    ):
        self.call_detail_agent = call_detail_agent

    def validate(self):
        if self.call_detail_agent:
            for k in self.call_detail_agent:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallDetailAgent'] = []
        if self.call_detail_agent is not None:
            for k in self.call_detail_agent:
                result['CallDetailAgent'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_detail_agent = []
        if m.get('CallDetailAgent') is not None:
            for k in m.get('CallDetailAgent'):
                temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent()
                self.call_detail_agent.append(temp_model.from_map(k))
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord(TeaModel):
    def __init__(
        self,
        contact_disposition: str = None,
        contact_type: str = None,
        instance_id: str = None,
        skill_group_id_list: str = None,
        recordings: ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings = None,
        called_number: str = None,
        agent_names: str = None,
        satisfaction: int = None,
        start_time: int = None,
        agents: ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents = None,
        satisfaction_desc: str = None,
        contact_id: str = None,
        calling_number: str = None,
        duration: int = None,
        skill_group_names: str = None,
        feedback: str = None,
    ):
        self.contact_disposition = contact_disposition
        self.contact_type = contact_type
        self.instance_id = instance_id
        self.skill_group_id_list = skill_group_id_list
        self.recordings = recordings
        self.called_number = called_number
        self.agent_names = agent_names
        self.satisfaction = satisfaction
        self.start_time = start_time
        self.agents = agents
        self.satisfaction_desc = satisfaction_desc
        self.contact_id = contact_id
        self.calling_number = calling_number
        self.duration = duration
        self.skill_group_names = skill_group_names
        self.feedback = feedback

    def validate(self):
        if self.recordings:
            self.recordings.validate()
        if self.agents:
            self.agents.validate()

    def to_map(self):
        result = dict()
        if self.contact_disposition is not None:
            result['ContactDisposition'] = self.contact_disposition
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id_list is not None:
            result['SkillGroupIdList'] = self.skill_group_id_list
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.agent_names is not None:
            result['AgentNames'] = self.agent_names
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.agents is not None:
            result['Agents'] = self.agents.to_map()
        if self.satisfaction_desc is not None:
            result['SatisfactionDesc'] = self.satisfaction_desc
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactDisposition') is not None:
            self.contact_disposition = m.get('ContactDisposition')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupIdList') is not None:
            self.skill_group_id_list = m.get('SkillGroupIdList')
        if m.get('Recordings') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('AgentNames') is not None:
            self.agent_names = m.get('AgentNames')
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Agents') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents()
            self.agents = temp_model.from_map(m['Agents'])
        if m.get('SatisfactionDesc') is not None:
            self.satisfaction_desc = m.get('SatisfactionDesc')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecordsList(TeaModel):
    def __init__(
        self,
        call_detail_record: List[ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord] = None,
    ):
        self.call_detail_record = call_detail_record

    def validate(self):
        if self.call_detail_record:
            for k in self.call_detail_record:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallDetailRecord'] = []
        if self.call_detail_record is not None:
            for k in self.call_detail_record:
                result['CallDetailRecord'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_detail_record = []
        if m.get('CallDetailRecord') is not None:
            for k in m.get('CallDetailRecord'):
                temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsListCallDetailRecord()
                self.call_detail_record.append(temp_model.from_map(k))
        return self


class ListCallDetailRecordsResponseBodyCallDetailRecords(TeaModel):
    def __init__(
        self,
        list: ListCallDetailRecordsResponseBodyCallDetailRecordsList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecordsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListCallDetailRecordsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        call_detail_records: ListCallDetailRecordsResponseBodyCallDetailRecords = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.call_detail_records = call_detail_records
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.call_detail_records:
            self.call_detail_records.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.call_detail_records is not None:
            result['CallDetailRecords'] = self.call_detail_records.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('CallDetailRecords') is not None:
            temp_model = ListCallDetailRecordsResponseBodyCallDetailRecords()
            self.call_detail_records = temp_model.from_map(m['CallDetailRecords'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListCallDetailRecordsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListCallDetailRecordsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListCallDetailRecordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCallEventDetailByContactIdRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_id: str = None,
    ):
        self.instance_id = instance_id
        self.contact_id = contact_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        return self


class ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData(TeaModel):
    def __init__(
        self,
        hang_uper: str = None,
        event_type: str = None,
        helper: str = None,
        skill_group: str = None,
        satisfactional_research: str = None,
    ):
        self.hang_uper = hang_uper
        self.event_type = event_type
        self.helper = helper
        self.skill_group = skill_group
        self.satisfactional_research = satisfactional_research

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.hang_uper is not None:
            result['HangUper'] = self.hang_uper
        if self.event_type is not None:
            result['EventType'] = self.event_type
        if self.helper is not None:
            result['Helper'] = self.helper
        if self.skill_group is not None:
            result['SkillGroup'] = self.skill_group
        if self.satisfactional_research is not None:
            result['SatisfactionalResearch'] = self.satisfactional_research
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('HangUper') is not None:
            self.hang_uper = m.get('HangUper')
        if m.get('EventType') is not None:
            self.event_type = m.get('EventType')
        if m.get('Helper') is not None:
            self.helper = m.get('Helper')
        if m.get('SkillGroup') is not None:
            self.skill_group = m.get('SkillGroup')
        if m.get('SatisfactionalResearch') is not None:
            self.satisfactional_research = m.get('SatisfactionalResearch')
        return self


class ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail(TeaModel):
    def __init__(
        self,
        status: str = None,
        call_mode: str = None,
        detail_data: ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData = None,
        event: str = None,
        time_stamp: str = None,
        agent_name: str = None,
        duration: int = None,
    ):
        self.status = status
        self.call_mode = call_mode
        self.detail_data = detail_data
        self.event = event
        self.time_stamp = time_stamp
        self.agent_name = agent_name
        self.duration = duration

    def validate(self):
        if self.detail_data:
            self.detail_data.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.call_mode is not None:
            result['CallMode'] = self.call_mode
        if self.detail_data is not None:
            result['DetailData'] = self.detail_data.to_map()
        if self.event is not None:
            result['Event'] = self.event
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.duration is not None:
            result['Duration'] = self.duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('CallMode') is not None:
            self.call_mode = m.get('CallMode')
        if m.get('DetailData') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetailDetailData()
            self.detail_data = temp_model.from_map(m['DetailData'])
        if m.get('Event') is not None:
            self.event = m.get('Event')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        return self


class ListCallEventDetailByContactIdResponseBodyDataEvents(TeaModel):
    def __init__(
        self,
        call_event_detail: List[ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail] = None,
    ):
        self.call_event_detail = call_event_detail

    def validate(self):
        if self.call_event_detail:
            for k in self.call_event_detail:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallEventDetail'] = []
        if self.call_event_detail is not None:
            for k in self.call_event_detail:
                result['CallEventDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_event_detail = []
        if m.get('CallEventDetail') is not None:
            for k in m.get('CallEventDetail'):
                temp_model = ListCallEventDetailByContactIdResponseBodyDataEventsCallEventDetail()
                self.call_event_detail.append(temp_model.from_map(k))
        return self


class ListCallEventDetailByContactIdResponseBodyData(TeaModel):
    def __init__(
        self,
        start_time: str = None,
        release_reason: str = None,
        call_type: str = None,
        release_agent: str = None,
        caller: str = None,
        callee: str = None,
        events: ListCallEventDetailByContactIdResponseBodyDataEvents = None,
        privacy_number: str = None,
    ):
        self.start_time = start_time
        self.release_reason = release_reason
        self.call_type = call_type
        self.release_agent = release_agent
        self.caller = caller
        self.callee = callee
        self.events = events
        self.privacy_number = privacy_number

    def validate(self):
        if self.events:
            self.events.validate()

    def to_map(self):
        result = dict()
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.release_reason is not None:
            result['ReleaseReason'] = self.release_reason
        if self.call_type is not None:
            result['CallType'] = self.call_type
        if self.release_agent is not None:
            result['ReleaseAgent'] = self.release_agent
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.callee is not None:
            result['Callee'] = self.callee
        if self.events is not None:
            result['Events'] = self.events.to_map()
        if self.privacy_number is not None:
            result['PrivacyNumber'] = self.privacy_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('ReleaseReason') is not None:
            self.release_reason = m.get('ReleaseReason')
        if m.get('CallType') is not None:
            self.call_type = m.get('CallType')
        if m.get('ReleaseAgent') is not None:
            self.release_agent = m.get('ReleaseAgent')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        if m.get('Events') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBodyDataEvents()
            self.events = temp_model.from_map(m['Events'])
        if m.get('PrivacyNumber') is not None:
            self.privacy_number = m.get('PrivacyNumber')
        return self


class ListCallEventDetailByContactIdResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        data: ListCallEventDetailByContactIdResponseBodyData = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.data = data
        self.code = code
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Data') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListCallEventDetailByContactIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListCallEventDetailByContactIdResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListCallEventDetailByContactIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListCallMeasureSummaryReportsRequest(TeaModel):
    def __init__(
        self,
        interval_type: str = None,
    ):
        self.interval_type = interval_type

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.interval_type is not None:
            result['IntervalType'] = self.interval_type
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IntervalType') is not None:
            self.interval_type = m.get('IntervalType')
        return self


class ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport(TeaModel):
    def __init__(
        self,
        day: str = None,
        year: str = None,
        inbound_duration_by_minute: int = None,
        outbound_count: int = None,
        outbound_duration_by_minute: int = None,
        inbound_count: int = None,
        month: str = None,
    ):
        self.day = day
        self.year = year
        self.inbound_duration_by_minute = inbound_duration_by_minute
        self.outbound_count = outbound_count
        self.outbound_duration_by_minute = outbound_duration_by_minute
        self.inbound_count = inbound_count
        self.month = month

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.day is not None:
            result['Day'] = self.day
        if self.year is not None:
            result['Year'] = self.year
        if self.inbound_duration_by_minute is not None:
            result['InboundDurationByMinute'] = self.inbound_duration_by_minute
        if self.outbound_count is not None:
            result['OutboundCount'] = self.outbound_count
        if self.outbound_duration_by_minute is not None:
            result['OutboundDurationByMinute'] = self.outbound_duration_by_minute
        if self.inbound_count is not None:
            result['InboundCount'] = self.inbound_count
        if self.month is not None:
            result['Month'] = self.month
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Day') is not None:
            self.day = m.get('Day')
        if m.get('Year') is not None:
            self.year = m.get('Year')
        if m.get('InboundDurationByMinute') is not None:
            self.inbound_duration_by_minute = m.get('InboundDurationByMinute')
        if m.get('OutboundCount') is not None:
            self.outbound_count = m.get('OutboundCount')
        if m.get('OutboundDurationByMinute') is not None:
            self.outbound_duration_by_minute = m.get('OutboundDurationByMinute')
        if m.get('InboundCount') is not None:
            self.inbound_count = m.get('InboundCount')
        if m.get('Month') is not None:
            self.month = m.get('Month')
        return self


class ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList(TeaModel):
    def __init__(
        self,
        call_measure_summary_report: List[ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport] = None,
    ):
        self.call_measure_summary_report = call_measure_summary_report

    def validate(self):
        if self.call_measure_summary_report:
            for k in self.call_measure_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallMeasureSummaryReport'] = []
        if self.call_measure_summary_report is not None:
            for k in self.call_measure_summary_report:
                result['CallMeasureSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_measure_summary_report = []
        if m.get('CallMeasureSummaryReport') is not None:
            for k in m.get('CallMeasureSummaryReport'):
                temp_model = ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportListCallMeasureSummaryReport()
                self.call_measure_summary_report.append(temp_model.from_map(k))
        return self


class ListCallMeasureSummaryReportsResponseBody(TeaModel):
    def __init__(
        self,
        call_measure_summary_report_list: ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.call_measure_summary_report_list = call_measure_summary_report_list
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.call_measure_summary_report_list:
            self.call_measure_summary_report_list.validate()

    def to_map(self):
        result = dict()
        if self.call_measure_summary_report_list is not None:
            result['CallMeasureSummaryReportList'] = self.call_measure_summary_report_list.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CallMeasureSummaryReportList') is not None:
            temp_model = ListCallMeasureSummaryReportsResponseBodyCallMeasureSummaryReportList()
            self.call_measure_summary_report_list = temp_model.from_map(m['CallMeasureSummaryReportList'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListCallMeasureSummaryReportsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListCallMeasureSummaryReportsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListCallMeasureSummaryReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListConfigRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        config_item: List[str] = None,
    ):
        self.instance_id = instance_id
        self.config_item = config_item

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.config_item is not None:
            result['ConfigItem'] = self.config_item
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ConfigItem') is not None:
            self.config_item = m.get('ConfigItem')
        return self


class ListConfigResponseBodyConfigItemsConfigItem(TeaModel):
    def __init__(
        self,
        value: str = None,
        name: str = None,
    ):
        self.value = value
        self.name = name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.value is not None:
            result['Value'] = self.value
        if self.name is not None:
            result['Name'] = self.name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Value') is not None:
            self.value = m.get('Value')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        return self


class ListConfigResponseBodyConfigItems(TeaModel):
    def __init__(
        self,
        config_item: List[ListConfigResponseBodyConfigItemsConfigItem] = None,
    ):
        self.config_item = config_item

    def validate(self):
        if self.config_item:
            for k in self.config_item:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['ConfigItem'] = []
        if self.config_item is not None:
            for k in self.config_item:
                result['ConfigItem'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.config_item = []
        if m.get('ConfigItem') is not None:
            for k in m.get('ConfigItem'):
                temp_model = ListConfigResponseBodyConfigItemsConfigItem()
                self.config_item.append(temp_model.from_map(k))
        return self


class ListConfigResponseBody(TeaModel):
    def __init__(
        self,
        config_items: ListConfigResponseBodyConfigItems = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.config_items = config_items
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.config_items:
            self.config_items.validate()

    def to_map(self):
        result = dict()
        if self.config_items is not None:
            result['ConfigItems'] = self.config_items.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ConfigItems') is not None:
            temp_model = ListConfigResponseBodyConfigItems()
            self.config_items = temp_model.from_map(m['ConfigItems'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListConfigResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListConfigResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListConfigResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListContactFlowsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion(TeaModel):
    def __init__(
        self,
        status: str = None,
        last_modified: str = None,
        locked_by: str = None,
        version: str = None,
        contact_flow_version_id: str = None,
        contact_flow_version_description: str = None,
        last_modified_by: str = None,
    ):
        self.status = status
        self.last_modified = last_modified
        self.locked_by = locked_by
        self.version = version
        self.contact_flow_version_id = contact_flow_version_id
        self.contact_flow_version_description = contact_flow_version_description
        self.last_modified_by = last_modified_by

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.locked_by is not None:
            result['LockedBy'] = self.locked_by
        if self.version is not None:
            result['Version'] = self.version
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('LockedBy') is not None:
            self.locked_by = m.get('LockedBy')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlowVersions(TeaModel):
    def __init__(
        self,
        contact_flow_version: List[ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion] = None,
    ):
        self.contact_flow_version = contact_flow_version

    def validate(self):
        if self.contact_flow_version:
            for k in self.contact_flow_version:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['ContactFlowVersion'] = []
        if self.contact_flow_version is not None:
            for k in self.contact_flow_version:
                result['ContactFlowVersion'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contact_flow_version = []
        if m.get('ContactFlowVersion') is not None:
            for k in m.get('ContactFlowVersion'):
                temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowVersionsContactFlowVersion()
                self.contact_flow_version.append(temp_model.from_map(k))
        return self


class ListContactFlowsResponseBodyContactFlowsContactFlow(TeaModel):
    def __init__(
        self,
        contact_flow_description: str = None,
        type: str = None,
        phone_numbers: ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers = None,
        contact_flow_name: str = None,
        versions: ListContactFlowsResponseBodyContactFlowsContactFlowVersions = None,
        instance_id: str = None,
        contact_flow_id: str = None,
        applied_version: str = None,
    ):
        self.contact_flow_description = contact_flow_description
        self.type = type
        self.phone_numbers = phone_numbers
        self.contact_flow_name = contact_flow_name
        self.versions = versions
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id
        self.applied_version = applied_version

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.versions:
            self.versions.validate()

    def to_map(self):
        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.type is not None:
            result['Type'] = self.type
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.versions is not None:
            result['Versions'] = self.versions.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('Versions') is not None:
            temp_model = ListContactFlowsResponseBodyContactFlowsContactFlowVersions()
            self.versions = temp_model.from_map(m['Versions'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        return self


class ListContactFlowsResponseBodyContactFlows(TeaModel):
    def __init__(
        self,
        contact_flow: List[ListContactFlowsResponseBodyContactFlowsContactFlow] = None,
    ):
        self.contact_flow = contact_flow

    def validate(self):
        if self.contact_flow:
            for k in self.contact_flow:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['ContactFlow'] = []
        if self.contact_flow is not None:
            for k in self.contact_flow:
                result['ContactFlow'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contact_flow = []
        if m.get('ContactFlow') is not None:
            for k in m.get('ContactFlow'):
                temp_model = ListContactFlowsResponseBodyContactFlowsContactFlow()
                self.contact_flow.append(temp_model.from_map(k))
        return self


class ListContactFlowsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        contact_flows: ListContactFlowsResponseBodyContactFlows = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.contact_flows = contact_flows
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.contact_flows:
            self.contact_flows.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.contact_flows is not None:
            result['ContactFlows'] = self.contact_flows.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('ContactFlows') is not None:
            temp_model = ListContactFlowsResponseBodyContactFlows()
            self.contact_flows = temp_model.from_map(m['ContactFlows'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListContactFlowsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListContactFlowsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListContactFlowsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser(TeaModel):
    def __init__(
        self,
        user_id: str = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail = None,
    ):
        self.user_id = user_id
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin(TeaModel):
    def __init__(
        self,
        user: List[ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdminUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListInstancesOfUserResponseBodyInstancesCallCenterInstance(TeaModel):
    def __init__(
        self,
        status: str = None,
        owner: str = None,
        storage_max_size: int = None,
        storage_max_days: int = None,
        max_online_agents: int = None,
        instance_id: str = None,
        domain_name: str = None,
        instance_description: str = None,
        phone_numbers: ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers = None,
        console_url: str = None,
        storage_bucket: str = None,
        instance_name: str = None,
        created_time: int = None,
        directory_id: str = None,
        admin: ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin = None,
        tenant_id: str = None,
    ):
        self.status = status
        self.owner = owner
        self.storage_max_size = storage_max_size
        self.storage_max_days = storage_max_days
        self.max_online_agents = max_online_agents
        self.instance_id = instance_id
        self.domain_name = domain_name
        self.instance_description = instance_description
        self.phone_numbers = phone_numbers
        self.console_url = console_url
        self.storage_bucket = storage_bucket
        self.instance_name = instance_name
        self.created_time = created_time
        self.directory_id = directory_id
        self.admin = admin
        self.tenant_id = tenant_id

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.admin:
            self.admin.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.storage_max_size is not None:
            result['StorageMaxSize'] = self.storage_max_size
        if self.storage_max_days is not None:
            result['StorageMaxDays'] = self.storage_max_days
        if self.max_online_agents is not None:
            result['MaxOnlineAgents'] = self.max_online_agents
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.domain_name is not None:
            result['DomainName'] = self.domain_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.console_url is not None:
            result['ConsoleUrl'] = self.console_url
        if self.storage_bucket is not None:
            result['StorageBucket'] = self.storage_bucket
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.created_time is not None:
            result['CreatedTime'] = self.created_time
        if self.directory_id is not None:
            result['DirectoryId'] = self.directory_id
        if self.admin is not None:
            result['Admin'] = self.admin.to_map()
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('StorageMaxSize') is not None:
            self.storage_max_size = m.get('StorageMaxSize')
        if m.get('StorageMaxDays') is not None:
            self.storage_max_days = m.get('StorageMaxDays')
        if m.get('MaxOnlineAgents') is not None:
            self.max_online_agents = m.get('MaxOnlineAgents')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('DomainName') is not None:
            self.domain_name = m.get('DomainName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstancePhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('ConsoleUrl') is not None:
            self.console_url = m.get('ConsoleUrl')
        if m.get('StorageBucket') is not None:
            self.storage_bucket = m.get('StorageBucket')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('CreatedTime') is not None:
            self.created_time = m.get('CreatedTime')
        if m.get('DirectoryId') is not None:
            self.directory_id = m.get('DirectoryId')
        if m.get('Admin') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstanceAdmin()
            self.admin = temp_model.from_map(m['Admin'])
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class ListInstancesOfUserResponseBodyInstances(TeaModel):
    def __init__(
        self,
        call_center_instance: List[ListInstancesOfUserResponseBodyInstancesCallCenterInstance] = None,
    ):
        self.call_center_instance = call_center_instance

    def validate(self):
        if self.call_center_instance:
            for k in self.call_center_instance:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallCenterInstance'] = []
        if self.call_center_instance is not None:
            for k in self.call_center_instance:
                result['CallCenterInstance'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_center_instance = []
        if m.get('CallCenterInstance') is not None:
            for k in m.get('CallCenterInstance'):
                temp_model = ListInstancesOfUserResponseBodyInstancesCallCenterInstance()
                self.call_center_instance.append(temp_model.from_map(k))
        return self


class ListInstancesOfUserResponseBody(TeaModel):
    def __init__(
        self,
        instances: ListInstancesOfUserResponseBodyInstances = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.instances = instances
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.instances:
            self.instances.validate()

    def to_map(self):
        result = dict()
        if self.instances is not None:
            result['Instances'] = self.instances.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Instances') is not None:
            temp_model = ListInstancesOfUserResponseBodyInstances()
            self.instances = temp_model.from_map(m['Instances'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListInstancesOfUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListInstancesOfUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListInstancesOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListIvrTrackingDetailRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_id: str = None,
        start_time: int = None,
        stop_time: int = None,
        calling_number: str = None,
        called_number: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.contact_id = contact_id
        self.start_time = start_time
        self.stop_time = stop_time
        self.calling_number = calling_number
        self.called_number = called_number
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail(TeaModel):
    def __init__(
        self,
        status: str = None,
        device_id: str = None,
        input_data: str = None,
        flow_name: str = None,
        stop_time: int = None,
        called_number: str = None,
        start_time: int = None,
        description: str = None,
        node_type: str = None,
        contact_id: str = None,
        node_name: str = None,
        calling_number: str = None,
        output_data: str = None,
        tenant_id: str = None,
    ):
        self.status = status
        self.device_id = device_id
        self.input_data = input_data
        self.flow_name = flow_name
        self.stop_time = stop_time
        self.called_number = called_number
        self.start_time = start_time
        self.description = description
        self.node_type = node_type
        self.contact_id = contact_id
        self.node_name = node_name
        self.calling_number = calling_number
        self.output_data = output_data
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.device_id is not None:
            result['DeviceID'] = self.device_id
        if self.input_data is not None:
            result['InputData'] = self.input_data
        if self.flow_name is not None:
            result['FlowName'] = self.flow_name
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.description is not None:
            result['Description'] = self.description
        if self.node_type is not None:
            result['NodeType'] = self.node_type
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.node_name is not None:
            result['NodeName'] = self.node_name
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.output_data is not None:
            result['OutputData'] = self.output_data
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('DeviceID') is not None:
            self.device_id = m.get('DeviceID')
        if m.get('InputData') is not None:
            self.input_data = m.get('InputData')
        if m.get('FlowName') is not None:
            self.flow_name = m.get('FlowName')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('NodeType') is not None:
            self.node_type = m.get('NodeType')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('NodeName') is not None:
            self.node_name = m.get('NodeName')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('OutputData') is not None:
            self.output_data = m.get('OutputData')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList(TeaModel):
    def __init__(
        self,
        ivr_tracking_detail: List[ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail] = None,
    ):
        self.ivr_tracking_detail = ivr_tracking_detail

    def validate(self):
        if self.ivr_tracking_detail:
            for k in self.ivr_tracking_detail:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['IvrTrackingDetail'] = []
        if self.ivr_tracking_detail is not None:
            for k in self.ivr_tracking_detail:
                result['IvrTrackingDetail'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.ivr_tracking_detail = []
        if m.get('IvrTrackingDetail') is not None:
            for k in m.get('IvrTrackingDetail'):
                temp_model = ListIvrTrackingDetailResponseBodyIvrTrackingDetailsListIvrTrackingDetail()
                self.ivr_tracking_detail.append(temp_model.from_map(k))
        return self


class ListIvrTrackingDetailResponseBodyIvrTrackingDetails(TeaModel):
    def __init__(
        self,
        list: ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListIvrTrackingDetailResponseBodyIvrTrackingDetailsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListIvrTrackingDetailResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        ivr_tracking_details: ListIvrTrackingDetailResponseBodyIvrTrackingDetails = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.ivr_tracking_details = ivr_tracking_details
        self.code = code
        self.success = success

    def validate(self):
        if self.ivr_tracking_details:
            self.ivr_tracking_details.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.ivr_tracking_details is not None:
            result['IvrTrackingDetails'] = self.ivr_tracking_details.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('IvrTrackingDetails') is not None:
            temp_model = ListIvrTrackingDetailResponseBodyIvrTrackingDetails()
            self.ivr_tracking_details = temp_model.from_map(m['IvrTrackingDetails'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListIvrTrackingDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListIvrTrackingDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListIvrTrackingDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobGroupsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        start_time: int = None,
        end_time: int = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class ListJobGroupsResponseBodyJobGroupsListStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        max_attempts_per_day: int = None,
        working_time: List[ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.description = description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.name = name
        self.id = id

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.description is not None:
            result['Description'] = self.description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ListJobGroupsResponseBodyJobGroupsListStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListJobGroupsResponseBodyJobGroupsListProgressCategories(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobGroupsResponseBodyJobGroupsListProgress(TeaModel):
    def __init__(
        self,
        status: str = None,
        total_not_answered: int = None,
        start_time: int = None,
        categories: List[ListJobGroupsResponseBodyJobGroupsListProgressCategories] = None,
        total_jobs: int = None,
        total_completed: int = None,
        duration: int = None,
    ):
        self.status = status
        self.total_not_answered = total_not_answered
        self.start_time = start_time
        self.categories = categories
        self.total_jobs = total_jobs
        self.total_completed = total_completed
        self.duration = duration

    def validate(self):
        if self.categories:
            for k in self.categories:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.total_not_answered is not None:
            result['TotalNotAnswered'] = self.total_not_answered
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        result['Categories'] = []
        if self.categories is not None:
            for k in self.categories:
                result['Categories'].append(k.to_map() if k else None)
        if self.total_jobs is not None:
            result['TotalJobs'] = self.total_jobs
        if self.total_completed is not None:
            result['TotalCompleted'] = self.total_completed
        if self.duration is not None:
            result['Duration'] = self.duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('TotalNotAnswered') is not None:
            self.total_not_answered = m.get('TotalNotAnswered')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        self.categories = []
        if m.get('Categories') is not None:
            for k in m.get('Categories'):
                temp_model = ListJobGroupsResponseBodyJobGroupsListProgressCategories()
                self.categories.append(temp_model.from_map(k))
        if m.get('TotalJobs') is not None:
            self.total_jobs = m.get('TotalJobs')
        if m.get('TotalCompleted') is not None:
            self.total_completed = m.get('TotalCompleted')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        return self


class ListJobGroupsResponseBodyJobGroupsList(TeaModel):
    def __init__(
        self,
        scenario_id: str = None,
        creation_time: int = None,
        strategy: ListJobGroupsResponseBodyJobGroupsListStrategy = None,
        calling_numbers: List[str] = None,
        progress: ListJobGroupsResponseBodyJobGroupsListProgress = None,
        description: str = None,
        job_file_path: str = None,
        name: str = None,
        id: str = None,
    ):
        self.scenario_id = scenario_id
        self.creation_time = creation_time
        self.strategy = strategy
        self.calling_numbers = calling_numbers
        self.progress = progress
        self.description = description
        self.job_file_path = job_file_path
        self.name = name
        self.id = id

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.progress:
            self.progress.validate()

    def to_map(self):
        result = dict()
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        if self.progress is not None:
            result['Progress'] = self.progress.to_map()
        if self.description is not None:
            result['Description'] = self.description
        if self.job_file_path is not None:
            result['JobFilePath'] = self.job_file_path
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('Strategy') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        if m.get('Progress') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroupsListProgress()
            self.progress = temp_model.from_map(m['Progress'])
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('JobFilePath') is not None:
            self.job_file_path = m.get('JobFilePath')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListJobGroupsResponseBodyJobGroups(TeaModel):
    def __init__(
        self,
        list: List[ListJobGroupsResponseBodyJobGroupsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobGroupsResponseBodyJobGroupsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobGroupsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        job_groups: ListJobGroupsResponseBodyJobGroups = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.job_groups = job_groups

    def validate(self):
        if self.job_groups:
            self.job_groups.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.job_groups is not None:
            result['JobGroups'] = self.job_groups.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('JobGroups') is not None:
            temp_model = ListJobGroupsResponseBodyJobGroups()
            self.job_groups = temp_model.from_map(m['JobGroups'])
        return self


class ListJobGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListJobGroupsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListJobGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobsByGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        job_status: str = None,
        job_failure_reason: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.job_status = job_status
        self.job_failure_reason = job_failure_reason
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_status is not None:
            result['JobStatus'] = self.job_status
        if self.job_failure_reason is not None:
            result['JobFailureReason'] = self.job_failure_reason
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobStatus') is not None:
            self.job_status = m.get('JobStatus')
        if m.get('JobFailureReason') is not None:
            self.job_failure_reason = m.get('JobFailureReason')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListJobsByGroupResponseBodyJobsListSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        group_id: str = None,
        job_id: str = None,
        category: str = None,
        content: str = None,
        summary_id: str = None,
        task_id: str = None,
        conversation_detail_id: str = None,
    ):
        self.summary_name = summary_name
        self.group_id = group_id
        self.job_id = job_id
        self.category = category
        self.content = content
        self.summary_id = summary_id
        self.task_id = task_id
        self.conversation_detail_id = conversation_detail_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        return self


class ListJobsByGroupResponseBodyJobsListContacts(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class ListJobsByGroupResponseBodyJobsListExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobsByGroupResponseBodyJobsList(TeaModel):
    def __init__(
        self,
        status: str = None,
        calling_numbers: List[str] = None,
        summary: List[ListJobsByGroupResponseBodyJobsListSummary] = None,
        contacts: List[ListJobsByGroupResponseBodyJobsListContacts] = None,
        priority: int = None,
        failure_reason: str = None,
        system_priority: int = None,
        extras: List[ListJobsByGroupResponseBodyJobsListExtras] = None,
        reference_id: str = None,
        scenario_id: str = None,
        strategy_id: str = None,
        group_id: str = None,
        job_id: str = None,
    ):
        self.status = status
        self.calling_numbers = calling_numbers
        self.summary = summary
        self.contacts = contacts
        self.priority = priority
        self.failure_reason = failure_reason
        self.system_priority = system_priority
        self.extras = extras
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.strategy_id = strategy_id
        self.group_id = group_id
        self.job_id = job_id

    def validate(self):
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        if self.system_priority is not None:
            result['SystemPriority'] = self.system_priority
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobsByGroupResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobsByGroupResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        if m.get('SystemPriority') is not None:
            self.system_priority = m.get('SystemPriority')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobsByGroupResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class ListJobsByGroupResponseBodyJobs(TeaModel):
    def __init__(
        self,
        list: List[ListJobsByGroupResponseBodyJobsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobsByGroupResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobsByGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        jobs: ListJobsByGroupResponseBodyJobs = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.jobs = jobs
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Jobs') is not None:
            temp_model = ListJobsByGroupResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobsByGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListJobsByGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListJobsByGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListJobStatusRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
        group_id: str = None,
        start_time: int = None,
        end_time: int = None,
        time_alignment: str = None,
        contact_name: str = None,
        phone_number: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        self.group_id = group_id
        self.start_time = start_time
        self.end_time = end_time
        self.time_alignment = time_alignment
        self.contact_name = contact_name
        self.phone_number = phone_number
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.time_alignment is not None:
            result['TimeAlignment'] = self.time_alignment
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('TimeAlignment') is not None:
            self.time_alignment = m.get('TimeAlignment')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListJobStatusResponseBodyJobsListContacts(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class ListJobStatusResponseBodyJobsListSummary(TeaModel):
    def __init__(
        self,
        summary_name: str = None,
        group_id: str = None,
        job_id: str = None,
        category: str = None,
        content: str = None,
        summary_id: str = None,
        task_id: str = None,
        conversation_detail_id: str = None,
    ):
        self.summary_name = summary_name
        self.group_id = group_id
        self.job_id = job_id
        self.category = category
        self.content = content
        self.summary_id = summary_id
        self.task_id = task_id
        self.conversation_detail_id = conversation_detail_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.summary_name is not None:
            result['SummaryName'] = self.summary_name
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.category is not None:
            result['Category'] = self.category
        if self.content is not None:
            result['Content'] = self.content
        if self.summary_id is not None:
            result['SummaryId'] = self.summary_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.conversation_detail_id is not None:
            result['ConversationDetailId'] = self.conversation_detail_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SummaryName') is not None:
            self.summary_name = m.get('SummaryName')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Category') is not None:
            self.category = m.get('Category')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('SummaryId') is not None:
            self.summary_id = m.get('SummaryId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('ConversationDetailId') is not None:
            self.conversation_detail_id = m.get('ConversationDetailId')
        return self


class ListJobStatusResponseBodyJobsListExtras(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListJobStatusResponseBodyJobsListTasksContact(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        job_id: str = None,
        honorific: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.job_id = job_id
        self.honorific = honorific
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.honorific is not None:
            result['Honorific'] = self.honorific
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('Honorific') is not None:
            self.honorific = m.get('Honorific')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class ListJobStatusResponseBodyJobsListTasks(TeaModel):
    def __init__(
        self,
        status: str = None,
        planed_time: int = None,
        chatbot_id: str = None,
        actual_time: int = None,
        called_number: str = None,
        scenario_id: str = None,
        contact: ListJobStatusResponseBodyJobsListTasksContact = None,
        job_id: str = None,
        call_id: str = None,
        calling_number: str = None,
        brief: str = None,
        duration: int = None,
        task_id: str = None,
    ):
        self.status = status
        self.planed_time = planed_time
        self.chatbot_id = chatbot_id
        self.actual_time = actual_time
        self.called_number = called_number
        self.scenario_id = scenario_id
        self.contact = contact
        self.job_id = job_id
        self.call_id = call_id
        self.calling_number = calling_number
        self.brief = brief
        self.duration = duration
        self.task_id = task_id

    def validate(self):
        if self.contact:
            self.contact.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.planed_time is not None:
            result['PlanedTime'] = self.planed_time
        if self.chatbot_id is not None:
            result['ChatbotId'] = self.chatbot_id
        if self.actual_time is not None:
            result['ActualTime'] = self.actual_time
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.contact is not None:
            result['Contact'] = self.contact.to_map()
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.brief is not None:
            result['Brief'] = self.brief
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('PlanedTime') is not None:
            self.planed_time = m.get('PlanedTime')
        if m.get('ChatbotId') is not None:
            self.chatbot_id = m.get('ChatbotId')
        if m.get('ActualTime') is not None:
            self.actual_time = m.get('ActualTime')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Contact') is not None:
            temp_model = ListJobStatusResponseBodyJobsListTasksContact()
            self.contact = temp_model.from_map(m['Contact'])
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Brief') is not None:
            self.brief = m.get('Brief')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        return self


class ListJobStatusResponseBodyJobsList(TeaModel):
    def __init__(
        self,
        status: str = None,
        calling_numbers: List[str] = None,
        contacts: List[ListJobStatusResponseBodyJobsListContacts] = None,
        summary: List[ListJobStatusResponseBodyJobsListSummary] = None,
        priority: int = None,
        failure_reason: str = None,
        extras: List[ListJobStatusResponseBodyJobsListExtras] = None,
        reference_id: str = None,
        scenario_id: str = None,
        tasks: List[ListJobStatusResponseBodyJobsListTasks] = None,
        strategy_id: str = None,
        group_id: str = None,
        job_id: str = None,
    ):
        self.status = status
        self.calling_numbers = calling_numbers
        self.contacts = contacts
        self.summary = summary
        self.priority = priority
        self.failure_reason = failure_reason
        self.extras = extras
        self.reference_id = reference_id
        self.scenario_id = scenario_id
        self.tasks = tasks
        self.strategy_id = strategy_id
        self.group_id = group_id
        self.job_id = job_id

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()
        if self.summary:
            for k in self.summary:
                if k:
                    k.validate()
        if self.extras:
            for k in self.extras:
                if k:
                    k.validate()
        if self.tasks:
            for k in self.tasks:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.calling_numbers is not None:
            result['CallingNumbers'] = self.calling_numbers
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        result['Summary'] = []
        if self.summary is not None:
            for k in self.summary:
                result['Summary'].append(k.to_map() if k else None)
        if self.priority is not None:
            result['Priority'] = self.priority
        if self.failure_reason is not None:
            result['FailureReason'] = self.failure_reason
        result['Extras'] = []
        if self.extras is not None:
            for k in self.extras:
                result['Extras'].append(k.to_map() if k else None)
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        result['Tasks'] = []
        if self.tasks is not None:
            for k in self.tasks:
                result['Tasks'].append(k.to_map() if k else None)
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('CallingNumbers') is not None:
            self.calling_numbers = m.get('CallingNumbers')
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListJobStatusResponseBodyJobsListContacts()
                self.contacts.append(temp_model.from_map(k))
        self.summary = []
        if m.get('Summary') is not None:
            for k in m.get('Summary'):
                temp_model = ListJobStatusResponseBodyJobsListSummary()
                self.summary.append(temp_model.from_map(k))
        if m.get('Priority') is not None:
            self.priority = m.get('Priority')
        if m.get('FailureReason') is not None:
            self.failure_reason = m.get('FailureReason')
        self.extras = []
        if m.get('Extras') is not None:
            for k in m.get('Extras'):
                temp_model = ListJobStatusResponseBodyJobsListExtras()
                self.extras.append(temp_model.from_map(k))
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        self.tasks = []
        if m.get('Tasks') is not None:
            for k in m.get('Tasks'):
                temp_model = ListJobStatusResponseBodyJobsListTasks()
                self.tasks.append(temp_model.from_map(k))
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class ListJobStatusResponseBodyJobs(TeaModel):
    def __init__(
        self,
        list: List[ListJobStatusResponseBodyJobsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListJobStatusResponseBodyJobsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListJobStatusResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        jobs: ListJobStatusResponseBodyJobs = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.jobs = jobs
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.jobs:
            self.jobs.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.jobs is not None:
            result['Jobs'] = self.jobs.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Jobs') is not None:
            temp_model = ListJobStatusResponseBodyJobs()
            self.jobs = temp_model.from_map(m['Jobs'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListJobStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListJobStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListJobStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListMediasRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        name_prefix: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.name_prefix = name_prefix
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.name_prefix is not None:
            result['NamePrefix'] = self.name_prefix
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('NamePrefix') is not None:
            self.name_prefix = m.get('NamePrefix')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListMediasResponseBodyMediasListMedia(TeaModel):
    def __init__(
        self,
        status: str = None,
        type: str = None,
        file_path: str = None,
        instance: str = None,
        description: str = None,
        file_name: str = None,
        name: str = None,
        content: str = None,
        oss_file_name: str = None,
    ):
        self.status = status
        self.type = type
        self.file_path = file_path
        self.instance = instance
        self.description = description
        self.file_name = file_name
        self.name = name
        self.content = content
        self.oss_file_name = oss_file_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.type is not None:
            result['Type'] = self.type
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.instance is not None:
            result['Instance'] = self.instance
        if self.description is not None:
            result['Description'] = self.description
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.name is not None:
            result['Name'] = self.name
        if self.content is not None:
            result['Content'] = self.content
        if self.oss_file_name is not None:
            result['OssFileName'] = self.oss_file_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('Instance') is not None:
            self.instance = m.get('Instance')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        if m.get('OssFileName') is not None:
            self.oss_file_name = m.get('OssFileName')
        return self


class ListMediasResponseBodyMediasList(TeaModel):
    def __init__(
        self,
        media: List[ListMediasResponseBodyMediasListMedia] = None,
    ):
        self.media = media

    def validate(self):
        if self.media:
            for k in self.media:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Media'] = []
        if self.media is not None:
            for k in self.media:
                result['Media'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.media = []
        if m.get('Media') is not None:
            for k in m.get('Media'):
                temp_model = ListMediasResponseBodyMediasListMedia()
                self.media.append(temp_model.from_map(k))
        return self


class ListMediasResponseBodyMedias(TeaModel):
    def __init__(
        self,
        list: ListMediasResponseBodyMediasList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListMediasResponseBodyMediasList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListMediasResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        medias: ListMediasResponseBodyMedias = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.medias = medias
        self.code = code
        self.success = success

    def validate(self):
        if self.medias:
            self.medias.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.medias is not None:
            result['Medias'] = self.medias.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Medias') is not None:
            temp_model = ListMediasResponseBodyMedias()
            self.medias = temp_model.from_map(m['Medias'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListMediasResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListMediasResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListMediasResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListOutboundPhoneNumberOfUserRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.user_id = user_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyNumberList(TeaModel):
    def __init__(
        self,
        number: List[str] = None,
    ):
        self.number = number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber(TeaModel):
    def __init__(
        self,
        type: str = None,
        pool_id: str = None,
        sub_id: str = None,
        phone_number: str = None,
        pool_name: str = None,
        biz_id: str = None,
        region_name_city: str = None,
        extra: str = None,
        tel_x: str = None,
    ):
        self.type = type
        self.pool_id = pool_id
        self.sub_id = sub_id
        self.phone_number = phone_number
        self.pool_name = pool_name
        self.biz_id = biz_id
        self.region_name_city = region_name_city
        self.extra = extra
        self.tel_x = tel_x

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.pool_id is not None:
            result['PoolId'] = self.pool_id
        if self.sub_id is not None:
            result['SubId'] = self.sub_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.pool_name is not None:
            result['PoolName'] = self.pool_name
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.region_name_city is not None:
            result['RegionNameCity'] = self.region_name_city
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.tel_x is not None:
            result['TelX'] = self.tel_x
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('PoolId') is not None:
            self.pool_id = m.get('PoolId')
        if m.get('SubId') is not None:
            self.sub_id = m.get('SubId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PoolName') is not None:
            self.pool_name = m.get('PoolName')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('RegionNameCity') is not None:
            self.region_name_city = m.get('RegionNameCity')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('TelX') is not None:
            self.tel_x = m.get('TelX')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        private_flag: bool = None,
        test_only: bool = None,
        remaining_time: int = None,
        sip_tel_x: str = None,
        city: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_id: str = None,
        trunks: int = None,
        number: str = None,
        phone_number_description: str = None,
        privacy_number: ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber = None,
        province: str = None,
    ):
        self.private_flag = private_flag
        self.test_only = test_only
        self.remaining_time = remaining_time
        self.sip_tel_x = sip_tel_x
        self.city = city
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_id = phone_number_id
        self.trunks = trunks
        self.number = number
        self.phone_number_description = phone_number_description
        self.privacy_number = privacy_number
        self.province = province

    def validate(self):
        if self.privacy_number:
            self.privacy_number.validate()

    def to_map(self):
        result = dict()
        if self.private_flag is not None:
            result['PrivateFlag'] = self.private_flag
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.sip_tel_x is not None:
            result['SipTelX'] = self.sip_tel_x
        if self.city is not None:
            result['City'] = self.city
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.privacy_number is not None:
            result['PrivacyNumber'] = self.privacy_number.to_map()
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivateFlag') is not None:
            self.private_flag = m.get('PrivateFlag')
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('SipTelX') is not None:
            self.sip_tel_x = m.get('SipTelX')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PrivacyNumber') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumberPrivacyNumber()
            self.privacy_number = temp_model.from_map(m['PrivacyNumber'])
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListOutboundPhoneNumberOfUserResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        number_list: ListOutboundPhoneNumberOfUserResponseBodyNumberList = None,
        code: str = None,
        outbound_phone_numbers: ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.number_list = number_list
        self.code = code
        self.outbound_phone_numbers = outbound_phone_numbers
        self.success = success

    def validate(self):
        if self.number_list:
            self.number_list.validate()
        if self.outbound_phone_numbers:
            self.outbound_phone_numbers.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.number_list is not None:
            result['NumberList'] = self.number_list.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.outbound_phone_numbers is not None:
            result['OutboundPhoneNumbers'] = self.outbound_phone_numbers.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('NumberList') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBodyNumberList()
            self.number_list = temp_model.from_map(m['NumberList'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('OutboundPhoneNumbers') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBodyOutboundPhoneNumbers()
            self.outbound_phone_numbers = temp_model.from_map(m['OutboundPhoneNumbers'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListOutboundPhoneNumberOfUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListOutboundPhoneNumberOfUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListOutboundPhoneNumberOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPhoneNumbersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        outbound_only: bool = None,
    ):
        self.instance_id = instance_id
        self.outbound_only = outbound_only

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_only is not None:
            result['OutboundOnly'] = self.outbound_only
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundOnly') is not None:
            self.outbound_only = m.get('OutboundOnly')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup(TeaModel):
    def __init__(
        self,
        skill_group_name: str = None,
        skill_group_id: str = None,
    ):
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups(TeaModel):
    def __init__(
        self,
        skill_group: List[ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup] = None,
    ):
        self.skill_group = skill_group

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow(TeaModel):
    def __init__(
        self,
        type: str = None,
        contact_flow_description: str = None,
        contact_flow_name: str = None,
        instance_id: str = None,
        contact_flow_id: str = None,
    ):
        self.type = type
        self.contact_flow_description = contact_flow_description
        self.contact_flow_name = contact_flow_name
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber(TeaModel):
    def __init__(
        self,
        type: str = None,
        pool_id: str = None,
        sub_id: str = None,
        phone_number: str = None,
        pool_name: str = None,
        biz_id: str = None,
        region_name_city: str = None,
        extra: str = None,
        tel_x: str = None,
    ):
        self.type = type
        self.pool_id = pool_id
        self.sub_id = sub_id
        self.phone_number = phone_number
        self.pool_name = pool_name
        self.biz_id = biz_id
        self.region_name_city = region_name_city
        self.extra = extra
        self.tel_x = tel_x

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.pool_id is not None:
            result['PoolId'] = self.pool_id
        if self.sub_id is not None:
            result['SubId'] = self.sub_id
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.pool_name is not None:
            result['PoolName'] = self.pool_name
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.region_name_city is not None:
            result['RegionNameCity'] = self.region_name_city
        if self.extra is not None:
            result['Extra'] = self.extra
        if self.tel_x is not None:
            result['TelX'] = self.tel_x
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('PoolId') is not None:
            self.pool_id = m.get('PoolId')
        if m.get('SubId') is not None:
            self.sub_id = m.get('SubId')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('PoolName') is not None:
            self.pool_name = m.get('PoolName')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('RegionNameCity') is not None:
            self.region_name_city = m.get('RegionNameCity')
        if m.get('Extra') is not None:
            self.extra = m.get('Extra')
        if m.get('TelX') is not None:
            self.tel_x = m.get('TelX')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        remaining_time: int = None,
        sip_tel_x: str = None,
        city: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        assignee: str = None,
        phone_number_id: str = None,
        skill_groups: ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups = None,
        trunks: int = None,
        number: str = None,
        phone_number_description: str = None,
        contact_flow: ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow = None,
        number_commodity_status: int = None,
        privacy_number: ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber = None,
        province: str = None,
    ):
        self.test_only = test_only
        self.remaining_time = remaining_time
        self.sip_tel_x = sip_tel_x
        self.city = city
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.assignee = assignee
        self.phone_number_id = phone_number_id
        self.skill_groups = skill_groups
        self.trunks = trunks
        self.number = number
        self.phone_number_description = phone_number_description
        self.contact_flow = contact_flow
        self.number_commodity_status = number_commodity_status
        self.privacy_number = privacy_number
        self.province = province

    def validate(self):
        if self.skill_groups:
            self.skill_groups.validate()
        if self.contact_flow:
            self.contact_flow.validate()
        if self.privacy_number:
            self.privacy_number.validate()

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.sip_tel_x is not None:
            result['SipTelX'] = self.sip_tel_x
        if self.city is not None:
            result['City'] = self.city
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.assignee is not None:
            result['Assignee'] = self.assignee
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.number_commodity_status is not None:
            result['NumberCommodityStatus'] = self.number_commodity_status
        if self.privacy_number is not None:
            result['PrivacyNumber'] = self.privacy_number.to_map()
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('SipTelX') is not None:
            self.sip_tel_x = m.get('SipTelX')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('Assignee') is not None:
            self.assignee = m.get('Assignee')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('SkillGroups') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberSkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('ContactFlow') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('NumberCommodityStatus') is not None:
            self.number_commodity_status = m.get('NumberCommodityStatus')
        if m.get('PrivacyNumber') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumberPrivacyNumber()
            self.privacy_number = temp_model.from_map(m['PrivacyNumber'])
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class ListPhoneNumbersResponseBodyPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListPhoneNumbersResponseBodyPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListPhoneNumbersResponseBody(TeaModel):
    def __init__(
        self,
        phone_numbers: ListPhoneNumbersResponseBodyPhoneNumbers = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.phone_numbers = phone_numbers
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()

    def to_map(self):
        result = dict()
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumbers') is not None:
            temp_model = ListPhoneNumbersResponseBodyPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListPhoneNumbersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListPhoneNumbersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListPhoneNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListPhoneTagsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        outbound_only: bool = None,
        page_size: int = None,
        current_page: int = None,
        number: str = None,
        number_group_ids: List[str] = None,
    ):
        self.instance_id = instance_id
        self.outbound_only = outbound_only
        self.page_size = page_size
        self.current_page = current_page
        self.number = number
        self.number_group_ids = number_group_ids

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.outbound_only is not None:
            result['OutboundOnly'] = self.outbound_only
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.current_page is not None:
            result['CurrentPage'] = self.current_page
        if self.number is not None:
            result['Number'] = self.number
        if self.number_group_ids is not None:
            result['NumberGroupIds'] = self.number_group_ids
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('OutboundOnly') is not None:
            self.outbound_only = m.get('OutboundOnly')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('CurrentPage') is not None:
            self.current_page = m.get('CurrentPage')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('NumberGroupIds') is not None:
            self.number_group_ids = m.get('NumberGroupIds')
        return self


class ListPhoneTagsResponseBodyPhoneNumbersList(TeaModel):
    def __init__(
        self,
        type: int = None,
        service_tag: str = None,
        create_time: int = None,
        city: str = None,
        skill_group_id_list: List[str] = None,
        instance_id: str = None,
        usage: str = None,
        phone_number_id: str = None,
        provider: str = None,
        number: str = None,
        phone_number_description: str = None,
        contact_flow_id: str = None,
        province: str = None,
        concurrency: int = None,
    ):
        self.type = type
        self.service_tag = service_tag
        self.create_time = create_time
        self.city = city
        self.skill_group_id_list = skill_group_id_list
        self.instance_id = instance_id
        self.usage = usage
        self.phone_number_id = phone_number_id
        self.provider = provider
        self.number = number
        self.phone_number_description = phone_number_description
        self.contact_flow_id = contact_flow_id
        self.province = province
        self.concurrency = concurrency

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.service_tag is not None:
            result['ServiceTag'] = self.service_tag
        if self.create_time is not None:
            result['CreateTime'] = self.create_time
        if self.city is not None:
            result['City'] = self.city
        if self.skill_group_id_list is not None:
            result['SkillGroupIdList'] = self.skill_group_id_list
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.provider is not None:
            result['Provider'] = self.provider
        if self.number is not None:
            result['Number'] = self.number
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.province is not None:
            result['Province'] = self.province
        if self.concurrency is not None:
            result['Concurrency'] = self.concurrency
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ServiceTag') is not None:
            self.service_tag = m.get('ServiceTag')
        if m.get('CreateTime') is not None:
            self.create_time = m.get('CreateTime')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('SkillGroupIdList') is not None:
            self.skill_group_id_list = m.get('SkillGroupIdList')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('Provider') is not None:
            self.provider = m.get('Provider')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('Concurrency') is not None:
            self.concurrency = m.get('Concurrency')
        return self


class ListPhoneTagsResponseBodyPhoneNumbers(TeaModel):
    def __init__(
        self,
        list: List[ListPhoneTagsResponseBodyPhoneNumbersList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListPhoneTagsResponseBodyPhoneNumbersList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListPhoneTagsResponseBody(TeaModel):
    def __init__(
        self,
        phone_numbers: ListPhoneTagsResponseBodyPhoneNumbers = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.phone_numbers = phone_numbers
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()

    def to_map(self):
        result = dict()
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumbers') is not None:
            temp_model = ListPhoneTagsResponseBodyPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListPhoneTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListPhoneTagsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListPhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRealTimeAgentRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        skill_group_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel(TeaModel):
    def __init__(
        self,
        skill: ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class ListRealTimeAgentResponseBodyDataUserSkillLevels(TeaModel):
    def __init__(
        self,
        skill_level: List[ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel] = None,
    ):
        self.skill_level = skill_level

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListRealTimeAgentResponseBodyDataUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListRealTimeAgentResponseBodyDataUser(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        state_desc: str = None,
        skill_levels: ListRealTimeAgentResponseBodyDataUserSkillLevels = None,
        dn: str = None,
        state: str = None,
        ram_id: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.state_desc = state_desc
        self.skill_levels = skill_levels
        self.dn = dn
        self.state = state
        self.ram_id = ram_id
        self.phone = phone

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.state_desc is not None:
            result['StateDesc'] = self.state_desc
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.dn is not None:
            result['Dn'] = self.dn
        if self.state is not None:
            result['State'] = self.state
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('StateDesc') is not None:
            self.state_desc = m.get('StateDesc')
        if m.get('SkillLevels') is not None:
            temp_model = ListRealTimeAgentResponseBodyDataUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('Dn') is not None:
            self.dn = m.get('Dn')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListRealTimeAgentResponseBodyData(TeaModel):
    def __init__(
        self,
        user: List[ListRealTimeAgentResponseBodyDataUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListRealTimeAgentResponseBodyDataUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListRealTimeAgentResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        data: ListRealTimeAgentResponseBodyData = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.data = data
        self.code = code
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Data') is not None:
            temp_model = ListRealTimeAgentResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRealTimeAgentResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListRealTimeAgentResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRealTimeAgentResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecentCallRecordsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        start_time: int = None,
        stop_time: int = None,
        page_number: int = None,
        page_size: int = None,
        criteria: str = None,
    ):
        self.instance_id = instance_id
        self.start_time = start_time
        self.stop_time = stop_time
        self.page_number = page_number
        self.page_size = page_size
        self.criteria = criteria

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        agent_id: str = None,
        agent_name: str = None,
        skill_group_name: str = None,
        queue_time: int = None,
        ring_time: int = None,
        start_time: int = None,
        talk_time: int = None,
        hold_time: int = None,
        work_time: int = None,
        satisfaction: str = None,
        feedback: str = None,
    ):
        self.contact_id = contact_id
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.skill_group_name = skill_group_name
        self.queue_time = queue_time
        self.ring_time = ring_time
        self.start_time = start_time
        self.talk_time = talk_time
        self.hold_time = hold_time
        self.work_time = work_time
        self.satisfaction = satisfaction
        self.feedback = feedback

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.queue_time is not None:
            result['QueueTime'] = self.queue_time
        if self.ring_time is not None:
            result['RingTime'] = self.ring_time
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.talk_time is not None:
            result['TalkTime'] = self.talk_time
        if self.hold_time is not None:
            result['HoldTime'] = self.hold_time
        if self.work_time is not None:
            result['WorkTime'] = self.work_time
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('QueueTime') is not None:
            self.queue_time = m.get('QueueTime')
        if m.get('RingTime') is not None:
            self.ring_time = m.get('RingTime')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('TalkTime') is not None:
            self.talk_time = m.get('TalkTime')
        if m.get('HoldTime') is not None:
            self.hold_time = m.get('HoldTime')
        if m.get('WorkTime') is not None:
            self.work_time = m.get('WorkTime')
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents(TeaModel):
    def __init__(
        self,
        call_detail_agent: List[ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent] = None,
    ):
        self.call_detail_agent = call_detail_agent

    def validate(self):
        if self.call_detail_agent:
            for k in self.call_detail_agent:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallDetailAgent'] = []
        if self.call_detail_agent is not None:
            for k in self.call_detail_agent:
                result['CallDetailAgent'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_detail_agent = []
        if m.get('CallDetailAgent') is not None:
            for k in m.get('CallDetailAgent'):
                temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgentsCallDetailAgent()
                self.call_detail_agent.append(temp_model.from_map(k))
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        contact_type: str = None,
        agent_id: str = None,
        agent_name: str = None,
        calling_number: str = None,
        called_number: str = None,
        start_time: int = None,
        duration: int = None,
        file_name: str = None,
        file_path: str = None,
        file_description: str = None,
        channel: str = None,
        instance_id: str = None,
    ):
        self.contact_id = contact_id
        self.contact_type = contact_type
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.calling_number = calling_number
        self.called_number = called_number
        self.start_time = start_time
        self.duration = duration
        self.file_name = file_name
        self.file_path = file_path
        self.file_description = file_description
        self.channel = channel
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings(TeaModel):
    def __init__(
        self,
        recording: List[ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording] = None,
    ):
        self.recording = recording

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordingsRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord(TeaModel):
    def __init__(
        self,
        contact_id: str = None,
        start_time: int = None,
        duration: int = None,
        satisfaction: int = None,
        contact_type: str = None,
        contact_disposition: str = None,
        calling_number: str = None,
        called_number: str = None,
        agent_names: str = None,
        skill_group_names: str = None,
        instance_id: str = None,
        extra_attr: str = None,
        satisfaction_desc: str = None,
        feedback: str = None,
        agents: ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents = None,
        recordings: ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings = None,
    ):
        self.contact_id = contact_id
        self.start_time = start_time
        self.duration = duration
        self.satisfaction = satisfaction
        self.contact_type = contact_type
        self.contact_disposition = contact_disposition
        self.calling_number = calling_number
        self.called_number = called_number
        self.agent_names = agent_names
        self.skill_group_names = skill_group_names
        self.instance_id = instance_id
        self.extra_attr = extra_attr
        self.satisfaction_desc = satisfaction_desc
        self.feedback = feedback
        self.agents = agents
        self.recordings = recordings

    def validate(self):
        if self.agents:
            self.agents.validate()
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        result = dict()
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.satisfaction is not None:
            result['Satisfaction'] = self.satisfaction
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.contact_disposition is not None:
            result['ContactDisposition'] = self.contact_disposition
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.agent_names is not None:
            result['AgentNames'] = self.agent_names
        if self.skill_group_names is not None:
            result['SkillGroupNames'] = self.skill_group_names
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.extra_attr is not None:
            result['ExtraAttr'] = self.extra_attr
        if self.satisfaction_desc is not None:
            result['SatisfactionDesc'] = self.satisfaction_desc
        if self.feedback is not None:
            result['Feedback'] = self.feedback
        if self.agents is not None:
            result['Agents'] = self.agents.to_map()
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Satisfaction') is not None:
            self.satisfaction = m.get('Satisfaction')
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('ContactDisposition') is not None:
            self.contact_disposition = m.get('ContactDisposition')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('AgentNames') is not None:
            self.agent_names = m.get('AgentNames')
        if m.get('SkillGroupNames') is not None:
            self.skill_group_names = m.get('SkillGroupNames')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ExtraAttr') is not None:
            self.extra_attr = m.get('ExtraAttr')
        if m.get('SatisfactionDesc') is not None:
            self.satisfaction_desc = m.get('SatisfactionDesc')
        if m.get('Feedback') is not None:
            self.feedback = m.get('Feedback')
        if m.get('Agents') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordAgents()
            self.agents = temp_model.from_map(m['Agents'])
        if m.get('Recordings') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecordRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecordsList(TeaModel):
    def __init__(
        self,
        call_detail_record: List[ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord] = None,
    ):
        self.call_detail_record = call_detail_record

    def validate(self):
        if self.call_detail_record:
            for k in self.call_detail_record:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['CallDetailRecord'] = []
        if self.call_detail_record is not None:
            for k in self.call_detail_record:
                result['CallDetailRecord'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.call_detail_record = []
        if m.get('CallDetailRecord') is not None:
            for k in m.get('CallDetailRecord'):
                temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsListCallDetailRecord()
                self.call_detail_record.append(temp_model.from_map(k))
        return self


class ListRecentCallRecordsResponseBodyCallDetailRecords(TeaModel):
    def __init__(
        self,
        total_count: int = None,
        page_number: int = None,
        page_size: int = None,
        list: ListRecentCallRecordsResponseBodyCallDetailRecordsList = None,
    ):
        self.total_count = total_count
        self.page_number = page_number
        self.page_size = page_size
        self.list = list

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.list is not None:
            result['List'] = self.list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('List') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecordsList()
            self.list = temp_model.from_map(m['List'])
        return self


class ListRecentCallRecordsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        success: bool = None,
        code: str = None,
        message: str = None,
        http_status_code: int = None,
        call_detail_records: ListRecentCallRecordsResponseBodyCallDetailRecords = None,
    ):
        self.request_id = request_id
        self.success = success
        self.code = code
        self.message = message
        self.http_status_code = http_status_code
        self.call_detail_records = call_detail_records

    def validate(self):
        if self.call_detail_records:
            self.call_detail_records.validate()

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.success is not None:
            result['Success'] = self.success
        if self.code is not None:
            result['Code'] = self.code
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.call_detail_records is not None:
            result['CallDetailRecords'] = self.call_detail_records.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('CallDetailRecords') is not None:
            temp_model = ListRecentCallRecordsResponseBodyCallDetailRecords()
            self.call_detail_records = temp_model.from_map(m['CallDetailRecords'])
        return self


class ListRecentCallRecordsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListRecentCallRecordsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecentCallRecordsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecordingOfDualTrackRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        connect_id: str = None,
        start_time: int = None,
        stop_time: int = None,
        calling_number: str = None,
        called_number: str = None,
        agent_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.connect_id = connect_id
        self.start_time = start_time
        self.stop_time = stop_time
        self.calling_number = calling_number
        self.called_number = called_number
        self.agent_id = agent_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.connect_id is not None:
            result['ConnectId'] = self.connect_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ConnectId') is not None:
            self.connect_id = m.get('ConnectId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListRecordingOfDualTrackResponseBodyRecordingsListRecording(TeaModel):
    def __init__(
        self,
        contact_type: str = None,
        agent_id: str = None,
        agent_name: str = None,
        file_name: str = None,
        instance_id: str = None,
        called_number: str = None,
        file_path: str = None,
        start_time: int = None,
        contact_id: str = None,
        calling_number: str = None,
        duration: int = None,
        channel: str = None,
        file_description: str = None,
    ):
        self.contact_type = contact_type
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.file_name = file_name
        self.instance_id = instance_id
        self.called_number = called_number
        self.file_path = file_path
        self.start_time = start_time
        self.contact_id = contact_id
        self.calling_number = calling_number
        self.duration = duration
        self.channel = channel
        self.file_description = file_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        return self


class ListRecordingOfDualTrackResponseBodyRecordingsList(TeaModel):
    def __init__(
        self,
        recording: List[ListRecordingOfDualTrackResponseBodyRecordingsListRecording] = None,
    ):
        self.recording = recording

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecordingOfDualTrackResponseBodyRecordingsListRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecordingOfDualTrackResponseBodyRecordings(TeaModel):
    def __init__(
        self,
        list: ListRecordingOfDualTrackResponseBodyRecordingsList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListRecordingOfDualTrackResponseBodyRecordingsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListRecordingOfDualTrackResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        recordings: ListRecordingOfDualTrackResponseBodyRecordings = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.recordings = recordings
        self.code = code
        self.success = success

    def validate(self):
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Recordings') is not None:
            temp_model = ListRecordingOfDualTrackResponseBodyRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecordingOfDualTrackResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListRecordingOfDualTrackResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecordingOfDualTrackResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecordingsRequest(TeaModel):
    def __init__(
        self,
        stop_time: int = None,
        instance_id: str = None,
        start_time: int = None,
        phone_number: str = None,
        agent_id: str = None,
        criteria: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.stop_time = stop_time
        self.instance_id = instance_id
        self.start_time = start_time
        self.phone_number = phone_number
        self.agent_id = agent_id
        self.criteria = criteria
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.stop_time is not None:
            result['StopTime'] = self.stop_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.criteria is not None:
            result['Criteria'] = self.criteria
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StopTime') is not None:
            self.stop_time = m.get('StopTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('Criteria') is not None:
            self.criteria = m.get('Criteria')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListRecordingsResponseBodyRecordingsListRecording(TeaModel):
    def __init__(
        self,
        contact_type: str = None,
        agent_id: str = None,
        agent_name: str = None,
        file_name: str = None,
        instance_id: str = None,
        called_number: str = None,
        file_path: str = None,
        start_time: int = None,
        contact_id: str = None,
        calling_number: str = None,
        duration: int = None,
        channel: str = None,
        file_description: str = None,
    ):
        self.contact_type = contact_type
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.file_name = file_name
        self.instance_id = instance_id
        self.called_number = called_number
        self.file_path = file_path
        self.start_time = start_time
        self.contact_id = contact_id
        self.calling_number = calling_number
        self.duration = duration
        self.channel = channel
        self.file_description = file_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.channel is not None:
            result['Channel'] = self.channel
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        return self


class ListRecordingsResponseBodyRecordingsList(TeaModel):
    def __init__(
        self,
        recording: List[ListRecordingsResponseBodyRecordingsListRecording] = None,
    ):
        self.recording = recording

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecordingsResponseBodyRecordingsListRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecordingsResponseBodyRecordings(TeaModel):
    def __init__(
        self,
        list: ListRecordingsResponseBodyRecordingsList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListRecordingsResponseBodyRecordingsList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListRecordingsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        recordings: ListRecordingsResponseBodyRecordings = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.recordings = recordings
        self.code = code
        self.success = success

    def validate(self):
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Recordings') is not None:
            temp_model = ListRecordingsResponseBodyRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecordingsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListRecordingsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecordingsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRecordingsByContactIdRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_id: str = None,
    ):
        self.instance_id = instance_id
        self.contact_id = contact_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        return self


class ListRecordingsByContactIdResponseBodyRecordingsRecording(TeaModel):
    def __init__(
        self,
        contact_type: str = None,
        agent_id: str = None,
        agent_name: str = None,
        file_name: str = None,
        instance_id: str = None,
        called_number: str = None,
        quality_check_tid: str = None,
        file_path: str = None,
        start_time: int = None,
        contact_id: str = None,
        quality_check_task_id: str = None,
        calling_number: str = None,
        duration: int = None,
        file_description: str = None,
        channel: str = None,
    ):
        self.contact_type = contact_type
        self.agent_id = agent_id
        self.agent_name = agent_name
        self.file_name = file_name
        self.instance_id = instance_id
        self.called_number = called_number
        self.quality_check_tid = quality_check_tid
        self.file_path = file_path
        self.start_time = start_time
        self.contact_id = contact_id
        self.quality_check_task_id = quality_check_task_id
        self.calling_number = calling_number
        self.duration = duration
        self.file_description = file_description
        self.channel = channel

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.contact_type is not None:
            result['ContactType'] = self.contact_type
        if self.agent_id is not None:
            result['AgentId'] = self.agent_id
        if self.agent_name is not None:
            result['AgentName'] = self.agent_name
        if self.file_name is not None:
            result['FileName'] = self.file_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.called_number is not None:
            result['CalledNumber'] = self.called_number
        if self.quality_check_tid is not None:
            result['QualityCheckTid'] = self.quality_check_tid
        if self.file_path is not None:
            result['FilePath'] = self.file_path
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.quality_check_task_id is not None:
            result['QualityCheckTaskId'] = self.quality_check_task_id
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        if self.duration is not None:
            result['Duration'] = self.duration
        if self.file_description is not None:
            result['FileDescription'] = self.file_description
        if self.channel is not None:
            result['Channel'] = self.channel
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactType') is not None:
            self.contact_type = m.get('ContactType')
        if m.get('AgentId') is not None:
            self.agent_id = m.get('AgentId')
        if m.get('AgentName') is not None:
            self.agent_name = m.get('AgentName')
        if m.get('FileName') is not None:
            self.file_name = m.get('FileName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CalledNumber') is not None:
            self.called_number = m.get('CalledNumber')
        if m.get('QualityCheckTid') is not None:
            self.quality_check_tid = m.get('QualityCheckTid')
        if m.get('FilePath') is not None:
            self.file_path = m.get('FilePath')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('QualityCheckTaskId') is not None:
            self.quality_check_task_id = m.get('QualityCheckTaskId')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        if m.get('Duration') is not None:
            self.duration = m.get('Duration')
        if m.get('FileDescription') is not None:
            self.file_description = m.get('FileDescription')
        if m.get('Channel') is not None:
            self.channel = m.get('Channel')
        return self


class ListRecordingsByContactIdResponseBodyRecordings(TeaModel):
    def __init__(
        self,
        recording: List[ListRecordingsByContactIdResponseBodyRecordingsRecording] = None,
    ):
        self.recording = recording

    def validate(self):
        if self.recording:
            for k in self.recording:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Recording'] = []
        if self.recording is not None:
            for k in self.recording:
                result['Recording'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.recording = []
        if m.get('Recording') is not None:
            for k in m.get('Recording'):
                temp_model = ListRecordingsByContactIdResponseBodyRecordingsRecording()
                self.recording.append(temp_model.from_map(k))
        return self


class ListRecordingsByContactIdResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        recordings: ListRecordingsByContactIdResponseBodyRecordings = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.recordings = recordings
        self.code = code
        self.success = success

    def validate(self):
        if self.recordings:
            self.recordings.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.recordings is not None:
            result['Recordings'] = self.recordings.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Recordings') is not None:
            temp_model = ListRecordingsByContactIdResponseBodyRecordings()
            self.recordings = temp_model.from_map(m['Recordings'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRecordingsByContactIdResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListRecordingsByContactIdResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRecordingsByContactIdResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListRolesRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListRolesResponseBodyRolesRole(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        instance_id: str = None,
        role_name: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.instance_id = instance_id
        self.role_name = role_name
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class ListRolesResponseBodyRoles(TeaModel):
    def __init__(
        self,
        role: List[ListRolesResponseBodyRolesRole] = None,
    ):
        self.role = role

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = ListRolesResponseBodyRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class ListRolesResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        roles: ListRolesResponseBodyRoles = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.roles = roles
        self.code = code
        self.success = success

    def validate(self):
        if self.roles:
            self.roles.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Roles') is not None:
            temp_model = ListRolesResponseBodyRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListRolesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListRolesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListRolesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScenariosRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListScenariosResponseBodyScenariosStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class ListScenariosResponseBodyScenariosStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        max_attempts_per_day: int = None,
        working_time: List[ListScenariosResponseBodyScenariosStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.description = description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by
        self.name = name
        self.id = id

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.description is not None:
            result['Description'] = self.description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ListScenariosResponseBodyScenariosStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListScenariosResponseBodyScenariosSurveysIntents(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        intent_id: str = None,
    ):
        self.node_id = node_id
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class ListScenariosResponseBodyScenariosSurveys(TeaModel):
    def __init__(
        self,
        round: int = None,
        description: str = None,
        beebot_id: str = None,
        intents: List[ListScenariosResponseBodyScenariosSurveysIntents] = None,
        name: str = None,
        role: str = None,
        id: str = None,
    ):
        self.round = round
        self.description = description
        self.beebot_id = beebot_id
        self.intents = intents
        self.name = name
        self.role = role
        self.id = id

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.round is not None:
            result['Round'] = self.round
        if self.description is not None:
            result['Description'] = self.description
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ListScenariosResponseBodyScenariosSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListScenariosResponseBodyScenariosVariables(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListScenariosResponseBodyScenarios(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy: ListScenariosResponseBodyScenariosStrategy = None,
        is_template: bool = None,
        description: str = None,
        surveys: List[ListScenariosResponseBodyScenariosSurveys] = None,
        variables: List[ListScenariosResponseBodyScenariosVariables] = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.strategy = strategy
        self.is_template = is_template
        self.description = description
        self.surveys = surveys
        self.variables = variables
        self.name = name
        self.id = id

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.description is not None:
            result['Description'] = self.description
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('Strategy') is not None:
            temp_model = ListScenariosResponseBodyScenariosStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ListScenariosResponseBodyScenariosSurveys()
                self.surveys.append(temp_model.from_map(k))
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = ListScenariosResponseBodyScenariosVariables()
                self.variables.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListScenariosResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        scenarios: List[ListScenariosResponseBodyScenarios] = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.scenarios = scenarios
        self.code = code
        self.success = success

    def validate(self):
        if self.scenarios:
            for k in self.scenarios:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['Scenarios'] = []
        if self.scenarios is not None:
            for k in self.scenarios:
                result['Scenarios'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.scenarios = []
        if m.get('Scenarios') is not None:
            for k in m.get('Scenarios'):
                temp_model = ListScenariosResponseBodyScenarios()
                self.scenarios.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScenariosResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListScenariosResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListScenariosResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow(TeaModel):
    def __init__(
        self,
        is_published: bool = None,
        flow_json: str = None,
        flow_id: str = None,
    ):
        self.is_published = is_published
        self.flow_json = flow_json
        self.flow_id = flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        intent_id: str = None,
    ):
        self.node_id = node_id
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys(TeaModel):
    def __init__(
        self,
        global_questions: str = None,
        round: int = None,
        description: str = None,
        beebot_id: str = None,
        flow: ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow = None,
        intents: List[ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents] = None,
        name: str = None,
        role: str = None,
        id: str = None,
    ):
        self.global_questions = global_questions
        self.round = round
        self.description = description
        self.beebot_id = beebot_id
        self.flow = flow
        self.intents = intents
        self.name = name
        self.role = role
        self.id = id

    def validate(self):
        if self.flow:
            self.flow.validate()
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.round is not None:
            result['Round'] = self.round
        if self.description is not None:
            result['Description'] = self.description
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.role is not None:
            result['Role'] = self.role
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        if m.get('Flow') is not None:
            temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysFlow()
            self.flow = temp_model.from_map(m['Flow'])
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplatesVariables(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ListScenarioTemplatesResponseBodyScenarioTemplates(TeaModel):
    def __init__(
        self,
        type: str = None,
        is_template: bool = None,
        description: str = None,
        surveys: List[ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys] = None,
        variables: List[ListScenarioTemplatesResponseBodyScenarioTemplatesVariables] = None,
        name: str = None,
        id: str = None,
    ):
        self.type = type
        self.is_template = is_template
        self.description = description
        self.surveys = surveys
        self.variables = variables
        self.name = name
        self.id = id

    def validate(self):
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.description is not None:
            result['Description'] = self.description
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        if self.name is not None:
            result['Name'] = self.name
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesSurveys()
                self.surveys.append(temp_model.from_map(k))
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplatesVariables()
                self.variables.append(temp_model.from_map(k))
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListScenarioTemplatesResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        scenario_templates: List[ListScenarioTemplatesResponseBodyScenarioTemplates] = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.scenario_templates = scenario_templates
        self.code = code
        self.success = success

    def validate(self):
        if self.scenario_templates:
            for k in self.scenario_templates:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['ScenarioTemplates'] = []
        if self.scenario_templates is not None:
            for k in self.scenario_templates:
                result['ScenarioTemplates'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.scenario_templates = []
        if m.get('ScenarioTemplates') is not None:
            for k in m.get('ScenarioTemplates'):
                temp_model = ListScenarioTemplatesResponseBodyScenarioTemplates()
                self.scenario_templates.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListScenarioTemplatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListScenarioTemplatesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListScenarioTemplatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListSkillGroupsResponseBodySkillGroupsSkillGroup(TeaModel):
    def __init__(
        self,
        outbound_phone_numbers: ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers = None,
        routing_strategy: str = None,
        skill_group_id: str = None,
        skill_group_name: str = None,
        user_count: int = None,
        instance_id: str = None,
        acc_queue_name: str = None,
        acc_skill_group_name: str = None,
        skill_group_description: str = None,
    ):
        self.outbound_phone_numbers = outbound_phone_numbers
        self.routing_strategy = routing_strategy
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.user_count = user_count
        self.instance_id = instance_id
        self.acc_queue_name = acc_queue_name
        self.acc_skill_group_name = acc_skill_group_name
        self.skill_group_description = skill_group_description

    def validate(self):
        if self.outbound_phone_numbers:
            self.outbound_phone_numbers.validate()

    def to_map(self):
        result = dict()
        if self.outbound_phone_numbers is not None:
            result['OutboundPhoneNumbers'] = self.outbound_phone_numbers.to_map()
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.acc_queue_name is not None:
            result['AccQueueName'] = self.acc_queue_name
        if self.acc_skill_group_name is not None:
            result['AccSkillGroupName'] = self.acc_skill_group_name
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OutboundPhoneNumbers') is not None:
            temp_model = ListSkillGroupsResponseBodySkillGroupsSkillGroupOutboundPhoneNumbers()
            self.outbound_phone_numbers = temp_model.from_map(m['OutboundPhoneNumbers'])
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('AccQueueName') is not None:
            self.acc_queue_name = m.get('AccQueueName')
        if m.get('AccSkillGroupName') is not None:
            self.acc_skill_group_name = m.get('AccSkillGroupName')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class ListSkillGroupsResponseBodySkillGroups(TeaModel):
    def __init__(
        self,
        skill_group: List[ListSkillGroupsResponseBodySkillGroupsSkillGroup] = None,
    ):
        self.skill_group = skill_group

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ListSkillGroupsResponseBodySkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ListSkillGroupsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        skill_groups: ListSkillGroupsResponseBodySkillGroups = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.skill_groups = skill_groups
        self.code = code
        self.success = success

    def validate(self):
        if self.skill_groups:
            self.skill_groups.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('SkillGroups') is not None:
            temp_model = ListSkillGroupsResponseBodySkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSkillGroupsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupsOfUserRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_id: str = None,
    ):
        self.instance_id = instance_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        city: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        province: str = None,
        phone_number_id: str = None,
    ):
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.city = city
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.province = province
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.province is not None:
            result['Province'] = self.province
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill(TeaModel):
    def __init__(
        self,
        outbound_phone_numbers: ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers = None,
        routing_strategy: str = None,
        skill_group_name: str = None,
        skill_group_id: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.outbound_phone_numbers = outbound_phone_numbers
        self.routing_strategy = routing_strategy
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        if self.outbound_phone_numbers:
            self.outbound_phone_numbers.validate()

    def to_map(self):
        result = dict()
        if self.outbound_phone_numbers is not None:
            result['OutboundPhoneNumbers'] = self.outbound_phone_numbers.to_map()
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('OutboundPhoneNumbers') is not None:
            temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkillOutboundPhoneNumbers()
            self.outbound_phone_numbers = temp_model.from_map(m['OutboundPhoneNumbers'])
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel(TeaModel):
    def __init__(
        self,
        skill: ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class ListSkillGroupsOfUserResponseBodySkillLevels(TeaModel):
    def __init__(
        self,
        skill_level: List[ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel] = None,
    ):
        self.skill_level = skill_level

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListSkillGroupsOfUserResponseBodySkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListSkillGroupsOfUserResponseBody(TeaModel):
    def __init__(
        self,
        skill_levels: ListSkillGroupsOfUserResponseBodySkillLevels = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.skill_levels = skill_levels
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()

    def to_map(self):
        result = dict()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillLevels') is not None:
            temp_model = ListSkillGroupsOfUserResponseBodySkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupsOfUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSkillGroupsOfUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupsOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupStatesRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_ids: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_ids = skill_group_ids
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState(TeaModel):
    def __init__(
        self,
        working_agents: int = None,
        logged_in_agents: int = None,
        breaking_agents: int = None,
        longest_call: int = None,
        waiting_calls: int = None,
        talking_agents: int = None,
        skill_group_name: str = None,
        skill_group_id: str = None,
        ready_agents: int = None,
        instance_id: str = None,
    ):
        self.working_agents = working_agents
        self.logged_in_agents = logged_in_agents
        self.breaking_agents = breaking_agents
        self.longest_call = longest_call
        self.waiting_calls = waiting_calls
        self.talking_agents = talking_agents
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id
        self.ready_agents = ready_agents
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.working_agents is not None:
            result['WorkingAgents'] = self.working_agents
        if self.logged_in_agents is not None:
            result['LoggedInAgents'] = self.logged_in_agents
        if self.breaking_agents is not None:
            result['BreakingAgents'] = self.breaking_agents
        if self.longest_call is not None:
            result['LongestCall'] = self.longest_call
        if self.waiting_calls is not None:
            result['WaitingCalls'] = self.waiting_calls
        if self.talking_agents is not None:
            result['TalkingAgents'] = self.talking_agents
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.ready_agents is not None:
            result['ReadyAgents'] = self.ready_agents
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('WorkingAgents') is not None:
            self.working_agents = m.get('WorkingAgents')
        if m.get('LoggedInAgents') is not None:
            self.logged_in_agents = m.get('LoggedInAgents')
        if m.get('BreakingAgents') is not None:
            self.breaking_agents = m.get('BreakingAgents')
        if m.get('LongestCall') is not None:
            self.longest_call = m.get('LongestCall')
        if m.get('WaitingCalls') is not None:
            self.waiting_calls = m.get('WaitingCalls')
        if m.get('TalkingAgents') is not None:
            self.talking_agents = m.get('TalkingAgents')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('ReadyAgents') is not None:
            self.ready_agents = m.get('ReadyAgents')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListSkillGroupStatesResponseBodyDataList(TeaModel):
    def __init__(
        self,
        real_time_skill_group_state: List[ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState] = None,
    ):
        self.real_time_skill_group_state = real_time_skill_group_state

    def validate(self):
        if self.real_time_skill_group_state:
            for k in self.real_time_skill_group_state:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['RealTimeSkillGroupState'] = []
        if self.real_time_skill_group_state is not None:
            for k in self.real_time_skill_group_state:
                result['RealTimeSkillGroupState'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.real_time_skill_group_state = []
        if m.get('RealTimeSkillGroupState') is not None:
            for k in m.get('RealTimeSkillGroupState'):
                temp_model = ListSkillGroupStatesResponseBodyDataListRealTimeSkillGroupState()
                self.real_time_skill_group_state.append(temp_model.from_map(k))
        return self


class ListSkillGroupStatesResponseBodyData(TeaModel):
    def __init__(
        self,
        list: ListSkillGroupStatesResponseBodyDataList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupStatesResponseBodyDataList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupStatesResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        data: ListSkillGroupStatesResponseBodyData = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.data = data
        self.code = code
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Data') is not None:
            temp_model = ListSkillGroupStatesResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupStatesResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSkillGroupStatesResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupStatesResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupSummaryReportsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_ids: str = None,
        start_time: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_ids = skill_group_ids
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        total_logged_in_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        total_break_time: int = None,
        total_ready_time: int = None,
        max_talk_time: int = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.total_logged_in_time = total_logged_in_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.total_break_time = total_break_time
        self.total_ready_time = total_ready_time
        self.max_talk_time = max_talk_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound(TeaModel):
    def __init__(
        self,
        average_ring_time: int = None,
        calls_handled: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        queue_max_wait_time_duration: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        answered_by_agent_of_queue_wait_time_duration: int = None,
        total_ring_time: int = None,
        in_coming_queue_of_queue_count: int = None,
        max_talk_time: str = None,
        max_ring_time: int = None,
        total_talk_time: int = None,
        calls_offered: int = None,
        abandoned_in_queue_of_queue_count: int = None,
        over_flow_in_queue_of_queue_count: int = None,
        service_level_20: float = None,
        answered_by_agent_of_queue_max_wait_time_duration: int = None,
        average_talk_time: int = None,
        answered_by_agent_of_queue_count: int = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        give_up_by_agent_of_queue_count: int = None,
        queue_wait_time_duration: int = None,
    ):
        self.average_ring_time = average_ring_time
        self.calls_handled = calls_handled
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.queue_max_wait_time_duration = queue_max_wait_time_duration
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.answered_by_agent_of_queue_wait_time_duration = answered_by_agent_of_queue_wait_time_duration
        self.total_ring_time = total_ring_time
        self.in_coming_queue_of_queue_count = in_coming_queue_of_queue_count
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time
        self.total_talk_time = total_talk_time
        self.calls_offered = calls_offered
        self.abandoned_in_queue_of_queue_count = abandoned_in_queue_of_queue_count
        self.over_flow_in_queue_of_queue_count = over_flow_in_queue_of_queue_count
        self.service_level_20 = service_level_20
        self.answered_by_agent_of_queue_max_wait_time_duration = answered_by_agent_of_queue_max_wait_time_duration
        self.average_talk_time = average_talk_time
        self.answered_by_agent_of_queue_count = answered_by_agent_of_queue_count
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.give_up_by_agent_of_queue_count = give_up_by_agent_of_queue_count
        self.queue_wait_time_duration = queue_wait_time_duration

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.queue_max_wait_time_duration is not None:
            result['QueueMaxWaitTimeDuration'] = self.queue_max_wait_time_duration
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.answered_by_agent_of_queue_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueWaitTimeDuration'] = self.answered_by_agent_of_queue_wait_time_duration
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.in_coming_queue_of_queue_count is not None:
            result['InComingQueueOfQueueCount'] = self.in_coming_queue_of_queue_count
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.abandoned_in_queue_of_queue_count is not None:
            result['AbandonedInQueueOfQueueCount'] = self.abandoned_in_queue_of_queue_count
        if self.over_flow_in_queue_of_queue_count is not None:
            result['OverFlowInQueueOfQueueCount'] = self.over_flow_in_queue_of_queue_count
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.answered_by_agent_of_queue_max_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueMaxWaitTimeDuration'] = self.answered_by_agent_of_queue_max_wait_time_duration
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.answered_by_agent_of_queue_count is not None:
            result['AnsweredByAgentOfQueueCount'] = self.answered_by_agent_of_queue_count
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.give_up_by_agent_of_queue_count is not None:
            result['GiveUpByAgentOfQueueCount'] = self.give_up_by_agent_of_queue_count
        if self.queue_wait_time_duration is not None:
            result['QueueWaitTimeDuration'] = self.queue_wait_time_duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('QueueMaxWaitTimeDuration') is not None:
            self.queue_max_wait_time_duration = m.get('QueueMaxWaitTimeDuration')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('AnsweredByAgentOfQueueWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_wait_time_duration = m.get('AnsweredByAgentOfQueueWaitTimeDuration')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('InComingQueueOfQueueCount') is not None:
            self.in_coming_queue_of_queue_count = m.get('InComingQueueOfQueueCount')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('AbandonedInQueueOfQueueCount') is not None:
            self.abandoned_in_queue_of_queue_count = m.get('AbandonedInQueueOfQueueCount')
        if m.get('OverFlowInQueueOfQueueCount') is not None:
            self.over_flow_in_queue_of_queue_count = m.get('OverFlowInQueueOfQueueCount')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_max_wait_time_duration = m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AnsweredByAgentOfQueueCount') is not None:
            self.answered_by_agent_of_queue_count = m.get('AnsweredByAgentOfQueueCount')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('GiveUpByAgentOfQueueCount') is not None:
            self.give_up_by_agent_of_queue_count = m.get('GiveUpByAgentOfQueueCount')
        if m.get('QueueWaitTimeDuration') is not None:
            self.queue_wait_time_duration = m.get('QueueWaitTimeDuration')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport(TeaModel):
    def __init__(
        self,
        overall: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall = None,
        skill_group_id: str = None,
        skill_group_name: str = None,
        inbound: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound = None,
        outbound: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound = None,
        instance_id: str = None,
    ):
        self.overall = overall
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.inbound = inbound
        self.outbound = outbound
        self.instance_id = instance_id

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('Inbound') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList(TeaModel):
    def __init__(
        self,
        skill_group_summary_report: List[ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport] = None,
    ):
        self.skill_group_summary_report = skill_group_summary_report

    def validate(self):
        if self.skill_group_summary_report:
            for k in self.skill_group_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroupSummaryReport'] = []
        if self.skill_group_summary_report is not None:
            for k in self.skill_group_summary_report:
                result['SkillGroupSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group_summary_report = []
        if m.get('SkillGroupSummaryReport') is not None:
            for k in m.get('SkillGroupSummaryReport'):
                temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport()
                self.skill_group_summary_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport(TeaModel):
    def __init__(
        self,
        list: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupSummaryReportsResponseBody(TeaModel):
    def __init__(
        self,
        paged_skill_group_summary_report: ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.paged_skill_group_summary_report = paged_skill_group_summary_report
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.paged_skill_group_summary_report:
            self.paged_skill_group_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.paged_skill_group_summary_report is not None:
            result['PagedSkillGroupSummaryReport'] = self.paged_skill_group_summary_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PagedSkillGroupSummaryReport') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBodyPagedSkillGroupSummaryReport()
            self.paged_skill_group_summary_report = temp_model.from_map(m['PagedSkillGroupSummaryReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupSummaryReportsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSkillGroupSummaryReportsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupSummaryReportsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupSummaryReportsByIntervalRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_ids: str = None,
        interval: str = None,
        start_time: str = None,
        end_time: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_ids = skill_group_ids
        self.interval = interval
        self.start_time = start_time
        self.end_time = end_time
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_ids is not None:
            result['SkillGroupIds'] = self.skill_group_ids
        if self.interval is not None:
            result['Interval'] = self.interval
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupIds') is not None:
            self.skill_group_ids = m.get('SkillGroupIds')
        if m.get('Interval') is not None:
            self.interval = m.get('Interval')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        total_logged_in_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        total_break_time: int = None,
        total_ready_time: int = None,
        max_talk_time: int = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.total_logged_in_time = total_logged_in_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.total_break_time = total_break_time
        self.total_ready_time = total_ready_time
        self.max_talk_time = max_talk_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound(TeaModel):
    def __init__(
        self,
        average_ring_time: int = None,
        calls_handled: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        queue_max_wait_time_duration: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        answered_by_agent_of_queue_wait_time_duration: int = None,
        total_ring_time: int = None,
        in_coming_queue_of_queue_count: int = None,
        max_talk_time: int = None,
        max_ring_time: int = None,
        total_talk_time: int = None,
        calls_offered: int = None,
        abandoned_in_queue_of_queue_count: int = None,
        over_flow_in_queue_of_queue_count: int = None,
        service_level_20: float = None,
        answered_by_agent_of_queue_max_wait_time_duration: int = None,
        average_talk_time: int = None,
        answered_by_agent_of_queue_count: int = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        give_up_by_agent_of_queue_count: int = None,
        queue_wait_time_duration: int = None,
    ):
        self.average_ring_time = average_ring_time
        self.calls_handled = calls_handled
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.queue_max_wait_time_duration = queue_max_wait_time_duration
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.answered_by_agent_of_queue_wait_time_duration = answered_by_agent_of_queue_wait_time_duration
        self.total_ring_time = total_ring_time
        self.in_coming_queue_of_queue_count = in_coming_queue_of_queue_count
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time
        self.total_talk_time = total_talk_time
        self.calls_offered = calls_offered
        self.abandoned_in_queue_of_queue_count = abandoned_in_queue_of_queue_count
        self.over_flow_in_queue_of_queue_count = over_flow_in_queue_of_queue_count
        self.service_level_20 = service_level_20
        self.answered_by_agent_of_queue_max_wait_time_duration = answered_by_agent_of_queue_max_wait_time_duration
        self.average_talk_time = average_talk_time
        self.answered_by_agent_of_queue_count = answered_by_agent_of_queue_count
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.give_up_by_agent_of_queue_count = give_up_by_agent_of_queue_count
        self.queue_wait_time_duration = queue_wait_time_duration

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.queue_max_wait_time_duration is not None:
            result['QueueMaxWaitTimeDuration'] = self.queue_max_wait_time_duration
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.answered_by_agent_of_queue_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueWaitTimeDuration'] = self.answered_by_agent_of_queue_wait_time_duration
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.in_coming_queue_of_queue_count is not None:
            result['InComingQueueOfQueueCount'] = self.in_coming_queue_of_queue_count
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.abandoned_in_queue_of_queue_count is not None:
            result['AbandonedInQueueOfQueueCount'] = self.abandoned_in_queue_of_queue_count
        if self.over_flow_in_queue_of_queue_count is not None:
            result['OverFlowInQueueOfQueueCount'] = self.over_flow_in_queue_of_queue_count
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.answered_by_agent_of_queue_max_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueMaxWaitTimeDuration'] = self.answered_by_agent_of_queue_max_wait_time_duration
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.answered_by_agent_of_queue_count is not None:
            result['AnsweredByAgentOfQueueCount'] = self.answered_by_agent_of_queue_count
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.give_up_by_agent_of_queue_count is not None:
            result['GiveUpByAgentOfQueueCount'] = self.give_up_by_agent_of_queue_count
        if self.queue_wait_time_duration is not None:
            result['QueueWaitTimeDuration'] = self.queue_wait_time_duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('QueueMaxWaitTimeDuration') is not None:
            self.queue_max_wait_time_duration = m.get('QueueMaxWaitTimeDuration')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('AnsweredByAgentOfQueueWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_wait_time_duration = m.get('AnsweredByAgentOfQueueWaitTimeDuration')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('InComingQueueOfQueueCount') is not None:
            self.in_coming_queue_of_queue_count = m.get('InComingQueueOfQueueCount')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('AbandonedInQueueOfQueueCount') is not None:
            self.abandoned_in_queue_of_queue_count = m.get('AbandonedInQueueOfQueueCount')
        if m.get('OverFlowInQueueOfQueueCount') is not None:
            self.over_flow_in_queue_of_queue_count = m.get('OverFlowInQueueOfQueueCount')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_max_wait_time_duration = m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AnsweredByAgentOfQueueCount') is not None:
            self.answered_by_agent_of_queue_count = m.get('AnsweredByAgentOfQueueCount')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('GiveUpByAgentOfQueueCount') is not None:
            self.give_up_by_agent_of_queue_count = m.get('GiveUpByAgentOfQueueCount')
        if m.get('QueueWaitTimeDuration') is not None:
            self.queue_wait_time_duration = m.get('QueueWaitTimeDuration')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport(TeaModel):
    def __init__(
        self,
        overall: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall = None,
        skill_group_name: str = None,
        skill_group_id: str = None,
        inbound: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound = None,
        outbound: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound = None,
        timestamp: str = None,
        instance_id: str = None,
    ):
        self.overall = overall
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id
        self.inbound = inbound
        self.outbound = outbound
        self.timestamp = timestamp
        self.instance_id = instance_id

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Inbound') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList(TeaModel):
    def __init__(
        self,
        skill_group_summary_report: List[ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport] = None,
    ):
        self.skill_group_summary_report = skill_group_summary_report

    def validate(self):
        if self.skill_group_summary_report:
            for k in self.skill_group_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroupSummaryReport'] = []
        if self.skill_group_summary_report is not None:
            for k in self.skill_group_summary_report:
                result['SkillGroupSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group_summary_report = []
        if m.get('SkillGroupSummaryReport') is not None:
            for k in m.get('SkillGroupSummaryReport'):
                temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalListSkillGroupSummaryReport()
                self.skill_group_summary_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        interval_list: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList = None,
    ):
        self.skill_group_id = skill_group_id
        self.interval_list = interval_list

    def validate(self):
        if self.interval_list:
            self.interval_list.validate()

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.interval_list is not None:
            result['IntervalList'] = self.interval_list.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('IntervalList') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReportIntervalList()
            self.interval_list = temp_model.from_map(m['IntervalList'])
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList(TeaModel):
    def __init__(
        self,
        skill_group_time_interval_report: List[ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport] = None,
    ):
        self.skill_group_time_interval_report = skill_group_time_interval_report

    def validate(self):
        if self.skill_group_time_interval_report:
            for k in self.skill_group_time_interval_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroupTimeIntervalReport'] = []
        if self.skill_group_time_interval_report is not None:
            for k in self.skill_group_time_interval_report:
                result['SkillGroupTimeIntervalReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group_time_interval_report = []
        if m.get('SkillGroupTimeIntervalReport') is not None:
            for k in m.get('SkillGroupTimeIntervalReport'):
                temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportListSkillGroupTimeIntervalReport()
                self.skill_group_time_interval_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport(TeaModel):
    def __init__(
        self,
        list: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupSummaryReportsByIntervalResponseBody(TeaModel):
    def __init__(
        self,
        paged_skill_group_summary_report: ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.paged_skill_group_summary_report = paged_skill_group_summary_report
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.paged_skill_group_summary_report:
            self.paged_skill_group_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.paged_skill_group_summary_report is not None:
            result['PagedSkillGroupSummaryReport'] = self.paged_skill_group_summary_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PagedSkillGroupSummaryReport') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBodyPagedSkillGroupSummaryReport()
            self.paged_skill_group_summary_report = temp_model.from_map(m['PagedSkillGroupSummaryReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupSummaryReportsByIntervalResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSkillGroupSummaryReportsByIntervalResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupSummaryReportsByIntervalResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSkillGroupSummaryReportsSinceMidnightRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_groups: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_groups = skill_groups
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroups') is not None:
            self.skill_groups = m.get('SkillGroups')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        total_logged_in_time: int = None,
        occupancy_rate: float = None,
        total_work_time: int = None,
        max_work_time: int = None,
        average_talk_time: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        average_ready_time: int = None,
        max_ready_time: int = None,
        total_break_time: int = None,
        total_ready_time: int = None,
        max_talk_time: int = None,
        total_calls: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.total_logged_in_time = total_logged_in_time
        self.occupancy_rate = occupancy_rate
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.average_talk_time = average_talk_time
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.average_ready_time = average_ready_time
        self.max_ready_time = max_ready_time
        self.total_break_time = total_break_time
        self.total_ready_time = total_ready_time
        self.max_talk_time = max_talk_time
        self.total_calls = total_calls

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.total_logged_in_time is not None:
            result['TotalLoggedInTime'] = self.total_logged_in_time
        if self.occupancy_rate is not None:
            result['OccupancyRate'] = self.occupancy_rate
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.average_ready_time is not None:
            result['AverageReadyTime'] = self.average_ready_time
        if self.max_ready_time is not None:
            result['MaxReadyTime'] = self.max_ready_time
        if self.total_break_time is not None:
            result['TotalBreakTime'] = self.total_break_time
        if self.total_ready_time is not None:
            result['TotalReadyTime'] = self.total_ready_time
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.total_calls is not None:
            result['TotalCalls'] = self.total_calls
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('TotalLoggedInTime') is not None:
            self.total_logged_in_time = m.get('TotalLoggedInTime')
        if m.get('OccupancyRate') is not None:
            self.occupancy_rate = m.get('OccupancyRate')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('AverageReadyTime') is not None:
            self.average_ready_time = m.get('AverageReadyTime')
        if m.get('MaxReadyTime') is not None:
            self.max_ready_time = m.get('MaxReadyTime')
        if m.get('TotalBreakTime') is not None:
            self.total_break_time = m.get('TotalBreakTime')
        if m.get('TotalReadyTime') is not None:
            self.total_ready_time = m.get('TotalReadyTime')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('TotalCalls') is not None:
            self.total_calls = m.get('TotalCalls')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound(TeaModel):
    def __init__(
        self,
        average_ring_time: int = None,
        calls_handled: int = None,
        total_work_time: int = None,
        max_work_time: int = None,
        queue_max_wait_time_duration: int = None,
        average_work_time: int = None,
        satisfaction_index: float = None,
        answered_by_agent_of_queue_wait_time_duration: int = None,
        total_ring_time: int = None,
        in_coming_queue_of_queue_count: int = None,
        max_talk_time: str = None,
        max_ring_time: int = None,
        total_talk_time: int = None,
        calls_offered: int = None,
        abandoned_in_queue_of_queue_count: int = None,
        over_flow_in_queue_of_queue_count: int = None,
        service_level_20: float = None,
        answered_by_agent_of_queue_max_wait_time_duration: int = None,
        average_talk_time: int = None,
        answered_by_agent_of_queue_count: int = None,
        satisfaction_surveys_offered: int = None,
        handle_rate: float = None,
        satisfaction_surveys_responded: int = None,
        give_up_by_agent_of_queue_count: int = None,
        queue_wait_time_duration: int = None,
    ):
        self.average_ring_time = average_ring_time
        self.calls_handled = calls_handled
        self.total_work_time = total_work_time
        self.max_work_time = max_work_time
        self.queue_max_wait_time_duration = queue_max_wait_time_duration
        self.average_work_time = average_work_time
        self.satisfaction_index = satisfaction_index
        self.answered_by_agent_of_queue_wait_time_duration = answered_by_agent_of_queue_wait_time_duration
        self.total_ring_time = total_ring_time
        self.in_coming_queue_of_queue_count = in_coming_queue_of_queue_count
        self.max_talk_time = max_talk_time
        self.max_ring_time = max_ring_time
        self.total_talk_time = total_talk_time
        self.calls_offered = calls_offered
        self.abandoned_in_queue_of_queue_count = abandoned_in_queue_of_queue_count
        self.over_flow_in_queue_of_queue_count = over_flow_in_queue_of_queue_count
        self.service_level_20 = service_level_20
        self.answered_by_agent_of_queue_max_wait_time_duration = answered_by_agent_of_queue_max_wait_time_duration
        self.average_talk_time = average_talk_time
        self.answered_by_agent_of_queue_count = answered_by_agent_of_queue_count
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.handle_rate = handle_rate
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.give_up_by_agent_of_queue_count = give_up_by_agent_of_queue_count
        self.queue_wait_time_duration = queue_wait_time_duration

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.average_ring_time is not None:
            result['AverageRingTime'] = self.average_ring_time
        if self.calls_handled is not None:
            result['CallsHandled'] = self.calls_handled
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.queue_max_wait_time_duration is not None:
            result['QueueMaxWaitTimeDuration'] = self.queue_max_wait_time_duration
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.answered_by_agent_of_queue_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueWaitTimeDuration'] = self.answered_by_agent_of_queue_wait_time_duration
        if self.total_ring_time is not None:
            result['TotalRingTime'] = self.total_ring_time
        if self.in_coming_queue_of_queue_count is not None:
            result['InComingQueueOfQueueCount'] = self.in_coming_queue_of_queue_count
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.max_ring_time is not None:
            result['MaxRingTime'] = self.max_ring_time
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.calls_offered is not None:
            result['CallsOffered'] = self.calls_offered
        if self.abandoned_in_queue_of_queue_count is not None:
            result['AbandonedInQueueOfQueueCount'] = self.abandoned_in_queue_of_queue_count
        if self.over_flow_in_queue_of_queue_count is not None:
            result['OverFlowInQueueOfQueueCount'] = self.over_flow_in_queue_of_queue_count
        if self.service_level_20 is not None:
            result['ServiceLevel20'] = self.service_level_20
        if self.answered_by_agent_of_queue_max_wait_time_duration is not None:
            result['AnsweredByAgentOfQueueMaxWaitTimeDuration'] = self.answered_by_agent_of_queue_max_wait_time_duration
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.answered_by_agent_of_queue_count is not None:
            result['AnsweredByAgentOfQueueCount'] = self.answered_by_agent_of_queue_count
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.handle_rate is not None:
            result['HandleRate'] = self.handle_rate
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.give_up_by_agent_of_queue_count is not None:
            result['GiveUpByAgentOfQueueCount'] = self.give_up_by_agent_of_queue_count
        if self.queue_wait_time_duration is not None:
            result['QueueWaitTimeDuration'] = self.queue_wait_time_duration
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AverageRingTime') is not None:
            self.average_ring_time = m.get('AverageRingTime')
        if m.get('CallsHandled') is not None:
            self.calls_handled = m.get('CallsHandled')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('QueueMaxWaitTimeDuration') is not None:
            self.queue_max_wait_time_duration = m.get('QueueMaxWaitTimeDuration')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('AnsweredByAgentOfQueueWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_wait_time_duration = m.get('AnsweredByAgentOfQueueWaitTimeDuration')
        if m.get('TotalRingTime') is not None:
            self.total_ring_time = m.get('TotalRingTime')
        if m.get('InComingQueueOfQueueCount') is not None:
            self.in_coming_queue_of_queue_count = m.get('InComingQueueOfQueueCount')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('MaxRingTime') is not None:
            self.max_ring_time = m.get('MaxRingTime')
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('CallsOffered') is not None:
            self.calls_offered = m.get('CallsOffered')
        if m.get('AbandonedInQueueOfQueueCount') is not None:
            self.abandoned_in_queue_of_queue_count = m.get('AbandonedInQueueOfQueueCount')
        if m.get('OverFlowInQueueOfQueueCount') is not None:
            self.over_flow_in_queue_of_queue_count = m.get('OverFlowInQueueOfQueueCount')
        if m.get('ServiceLevel20') is not None:
            self.service_level_20 = m.get('ServiceLevel20')
        if m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration') is not None:
            self.answered_by_agent_of_queue_max_wait_time_duration = m.get('AnsweredByAgentOfQueueMaxWaitTimeDuration')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('AnsweredByAgentOfQueueCount') is not None:
            self.answered_by_agent_of_queue_count = m.get('AnsweredByAgentOfQueueCount')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('HandleRate') is not None:
            self.handle_rate = m.get('HandleRate')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('GiveUpByAgentOfQueueCount') is not None:
            self.give_up_by_agent_of_queue_count = m.get('GiveUpByAgentOfQueueCount')
        if m.get('QueueWaitTimeDuration') is not None:
            self.queue_wait_time_duration = m.get('QueueWaitTimeDuration')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound(TeaModel):
    def __init__(
        self,
        total_talk_time: int = None,
        max_dialing_time: int = None,
        calls_dialed: int = None,
        calls_answered: int = None,
        total_work_time: int = None,
        answer_rate: float = None,
        max_work_time: int = None,
        total_dialing_time: int = None,
        average_work_time: int = None,
        average_talk_time: int = None,
        satisfaction_index: float = None,
        satisfaction_surveys_offered: int = None,
        satisfaction_surveys_responded: int = None,
        max_talk_time: int = None,
        average_dialing_time: int = None,
    ):
        self.total_talk_time = total_talk_time
        self.max_dialing_time = max_dialing_time
        self.calls_dialed = calls_dialed
        self.calls_answered = calls_answered
        self.total_work_time = total_work_time
        self.answer_rate = answer_rate
        self.max_work_time = max_work_time
        self.total_dialing_time = total_dialing_time
        self.average_work_time = average_work_time
        self.average_talk_time = average_talk_time
        self.satisfaction_index = satisfaction_index
        self.satisfaction_surveys_offered = satisfaction_surveys_offered
        self.satisfaction_surveys_responded = satisfaction_surveys_responded
        self.max_talk_time = max_talk_time
        self.average_dialing_time = average_dialing_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.total_talk_time is not None:
            result['TotalTalkTime'] = self.total_talk_time
        if self.max_dialing_time is not None:
            result['MaxDialingTime'] = self.max_dialing_time
        if self.calls_dialed is not None:
            result['CallsDialed'] = self.calls_dialed
        if self.calls_answered is not None:
            result['CallsAnswered'] = self.calls_answered
        if self.total_work_time is not None:
            result['TotalWorkTime'] = self.total_work_time
        if self.answer_rate is not None:
            result['AnswerRate'] = self.answer_rate
        if self.max_work_time is not None:
            result['MaxWorkTime'] = self.max_work_time
        if self.total_dialing_time is not None:
            result['TotalDialingTime'] = self.total_dialing_time
        if self.average_work_time is not None:
            result['AverageWorkTime'] = self.average_work_time
        if self.average_talk_time is not None:
            result['AverageTalkTime'] = self.average_talk_time
        if self.satisfaction_index is not None:
            result['SatisfactionIndex'] = self.satisfaction_index
        if self.satisfaction_surveys_offered is not None:
            result['SatisfactionSurveysOffered'] = self.satisfaction_surveys_offered
        if self.satisfaction_surveys_responded is not None:
            result['SatisfactionSurveysResponded'] = self.satisfaction_surveys_responded
        if self.max_talk_time is not None:
            result['MaxTalkTime'] = self.max_talk_time
        if self.average_dialing_time is not None:
            result['AverageDialingTime'] = self.average_dialing_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TotalTalkTime') is not None:
            self.total_talk_time = m.get('TotalTalkTime')
        if m.get('MaxDialingTime') is not None:
            self.max_dialing_time = m.get('MaxDialingTime')
        if m.get('CallsDialed') is not None:
            self.calls_dialed = m.get('CallsDialed')
        if m.get('CallsAnswered') is not None:
            self.calls_answered = m.get('CallsAnswered')
        if m.get('TotalWorkTime') is not None:
            self.total_work_time = m.get('TotalWorkTime')
        if m.get('AnswerRate') is not None:
            self.answer_rate = m.get('AnswerRate')
        if m.get('MaxWorkTime') is not None:
            self.max_work_time = m.get('MaxWorkTime')
        if m.get('TotalDialingTime') is not None:
            self.total_dialing_time = m.get('TotalDialingTime')
        if m.get('AverageWorkTime') is not None:
            self.average_work_time = m.get('AverageWorkTime')
        if m.get('AverageTalkTime') is not None:
            self.average_talk_time = m.get('AverageTalkTime')
        if m.get('SatisfactionIndex') is not None:
            self.satisfaction_index = m.get('SatisfactionIndex')
        if m.get('SatisfactionSurveysOffered') is not None:
            self.satisfaction_surveys_offered = m.get('SatisfactionSurveysOffered')
        if m.get('SatisfactionSurveysResponded') is not None:
            self.satisfaction_surveys_responded = m.get('SatisfactionSurveysResponded')
        if m.get('MaxTalkTime') is not None:
            self.max_talk_time = m.get('MaxTalkTime')
        if m.get('AverageDialingTime') is not None:
            self.average_dialing_time = m.get('AverageDialingTime')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport(TeaModel):
    def __init__(
        self,
        overall: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall = None,
        skill_group_name: str = None,
        skill_group_id: str = None,
        inbound: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound = None,
        outbound: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound = None,
        timestamp: str = None,
        instance_id: str = None,
    ):
        self.overall = overall
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id
        self.inbound = inbound
        self.outbound = outbound
        self.timestamp = timestamp
        self.instance_id = instance_id

    def validate(self):
        if self.overall:
            self.overall.validate()
        if self.inbound:
            self.inbound.validate()
        if self.outbound:
            self.outbound.validate()

    def to_map(self):
        result = dict()
        if self.overall is not None:
            result['Overall'] = self.overall.to_map()
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.inbound is not None:
            result['Inbound'] = self.inbound.to_map()
        if self.outbound is not None:
            result['Outbound'] = self.outbound.to_map()
        if self.timestamp is not None:
            result['Timestamp'] = self.timestamp
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Overall') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOverall()
            self.overall = temp_model.from_map(m['Overall'])
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Inbound') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportInbound()
            self.inbound = temp_model.from_map(m['Inbound'])
        if m.get('Outbound') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReportOutbound()
            self.outbound = temp_model.from_map(m['Outbound'])
        if m.get('Timestamp') is not None:
            self.timestamp = m.get('Timestamp')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList(TeaModel):
    def __init__(
        self,
        skill_group_summary_report: List[ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport] = None,
    ):
        self.skill_group_summary_report = skill_group_summary_report

    def validate(self):
        if self.skill_group_summary_report:
            for k in self.skill_group_summary_report:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroupSummaryReport'] = []
        if self.skill_group_summary_report is not None:
            for k in self.skill_group_summary_report:
                result['SkillGroupSummaryReport'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group_summary_report = []
        if m.get('SkillGroupSummaryReport') is not None:
            for k in m.get('SkillGroupSummaryReport'):
                temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportListSkillGroupSummaryReport()
                self.skill_group_summary_report.append(temp_model.from_map(k))
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport(TeaModel):
    def __init__(
        self,
        list: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReportList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponseBody(TeaModel):
    def __init__(
        self,
        paged_skill_group_summary_report: ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.paged_skill_group_summary_report = paged_skill_group_summary_report
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.paged_skill_group_summary_report:
            self.paged_skill_group_summary_report.validate()

    def to_map(self):
        result = dict()
        if self.paged_skill_group_summary_report is not None:
            result['PagedSkillGroupSummaryReport'] = self.paged_skill_group_summary_report.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PagedSkillGroupSummaryReport') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBodyPagedSkillGroupSummaryReport()
            self.paged_skill_group_summary_report = temp_model.from_map(m['PagedSkillGroupSummaryReport'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSkillGroupSummaryReportsSinceMidnightResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSkillGroupSummaryReportsSinceMidnightResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSkillGroupSummaryReportsSinceMidnightResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListSurveysRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        return self


class ListSurveysResponseBodySurveysAsrCustomModel(TeaModel):
    def __init__(
        self,
        custom_model_status: int = None,
        corpora: str = None,
    ):
        self.custom_model_status = custom_model_status
        self.corpora = corpora

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        return self


class ListSurveysResponseBodySurveysFlow(TeaModel):
    def __init__(
        self,
        is_published: bool = None,
        flow_json: str = None,
        flow_id: str = None,
    ):
        self.is_published = is_published
        self.flow_json = flow_json
        self.flow_id = flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        return self


class ListSurveysResponseBodySurveys(TeaModel):
    def __init__(
        self,
        global_questions: str = None,
        round: int = None,
        speech_optimization_param: str = None,
        description: str = None,
        hot_words: str = None,
        asr_custom_model: ListSurveysResponseBodySurveysAsrCustomModel = None,
        flow: ListSurveysResponseBodySurveysFlow = None,
        role: str = None,
        name: str = None,
        scenario_uuid: str = None,
        id: str = None,
    ):
        self.global_questions = global_questions
        self.round = round
        self.speech_optimization_param = speech_optimization_param
        self.description = description
        self.hot_words = hot_words
        self.asr_custom_model = asr_custom_model
        self.flow = flow
        self.role = role
        self.name = name
        self.scenario_uuid = scenario_uuid
        self.id = id

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        result = dict()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.round is not None:
            result['Round'] = self.round
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.description is not None:
            result['Description'] = self.description
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.role is not None:
            result['Role'] = self.role
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('AsrCustomModel') is not None:
            temp_model = ListSurveysResponseBodySurveysAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Flow') is not None:
            temp_model = ListSurveysResponseBodySurveysFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ListSurveysResponseBody(TeaModel):
    def __init__(
        self,
        surveys: List[ListSurveysResponseBodySurveys] = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.surveys = surveys
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ListSurveysResponseBodySurveys()
                self.surveys.append(temp_model.from_map(k))
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListSurveysResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListSurveysResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListSurveysResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTransferableSkillGroupsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListTransferableSkillGroupsResponseBodySkillGroups(TeaModel):
    def __init__(
        self,
        allow_private_outbound_number: bool = None,
        routing_strategy: str = None,
        skill_group_name: str = None,
        skill_group_id: str = None,
        user_count: int = None,
        acc_queue_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
        acc_skill_group_name: str = None,
    ):
        self.allow_private_outbound_number = allow_private_outbound_number
        self.routing_strategy = routing_strategy
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id
        self.user_count = user_count
        self.acc_queue_name = acc_queue_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description
        self.acc_skill_group_name = acc_skill_group_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.allow_private_outbound_number is not None:
            result['AllowPrivateOutboundNumber'] = self.allow_private_outbound_number
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.acc_queue_name is not None:
            result['AccQueueName'] = self.acc_queue_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        if self.acc_skill_group_name is not None:
            result['AccSkillGroupName'] = self.acc_skill_group_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('AllowPrivateOutboundNumber') is not None:
            self.allow_private_outbound_number = m.get('AllowPrivateOutboundNumber')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('AccQueueName') is not None:
            self.acc_queue_name = m.get('AccQueueName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        if m.get('AccSkillGroupName') is not None:
            self.acc_skill_group_name = m.get('AccSkillGroupName')
        return self


class ListTransferableSkillGroupsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        skill_groups: List[ListTransferableSkillGroupsResponseBodySkillGroups] = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.skill_groups = skill_groups
        self.code = code
        self.success = success

    def validate(self):
        if self.skill_groups:
            for k in self.skill_groups:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['SkillGroups'] = []
        if self.skill_groups is not None:
            for k in self.skill_groups:
                result['SkillGroups'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.skill_groups = []
        if m.get('SkillGroups') is not None:
            for k in m.get('SkillGroups'):
                temp_model = ListTransferableSkillGroupsResponseBodySkillGroups()
                self.skill_groups.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListTransferableSkillGroupsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListTransferableSkillGroupsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListTransferableSkillGroupsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTrunkProvidersResponseBodyTrunkProviders(TeaModel):
    def __init__(
        self,
        status: str = None,
        provider_name: str = None,
    ):
        self.status = status
        self.provider_name = provider_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        return self


class ListTrunkProvidersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        trunk_providers: List[ListTrunkProvidersResponseBodyTrunkProviders] = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.trunk_providers = trunk_providers
        self.code = code
        self.success = success

    def validate(self):
        if self.trunk_providers:
            for k in self.trunk_providers:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['TrunkProviders'] = []
        if self.trunk_providers is not None:
            for k in self.trunk_providers:
                result['TrunkProviders'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.trunk_providers = []
        if m.get('TrunkProviders') is not None:
            for k in m.get('TrunkProviders'):
                temp_model = ListTrunkProvidersResponseBodyTrunkProviders()
                self.trunk_providers.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListTrunkProvidersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListTrunkProvidersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListTrunkProvidersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListTrunksOfSkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ListTrunksOfSkillGroupResponseBodyTrunkConfigs(TeaModel):
    def __init__(
        self,
        provider_name: str = None,
        primary: bool = None,
    ):
        self.provider_name = provider_name
        self.primary = primary

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.provider_name is not None:
            result['ProviderName'] = self.provider_name
        if self.primary is not None:
            result['Primary'] = self.primary
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ProviderName') is not None:
            self.provider_name = m.get('ProviderName')
        if m.get('Primary') is not None:
            self.primary = m.get('Primary')
        return self


class ListTrunksOfSkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        trunk_configs: List[ListTrunksOfSkillGroupResponseBodyTrunkConfigs] = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.trunk_configs = trunk_configs
        self.code = code
        self.success = success

    def validate(self):
        if self.trunk_configs:
            for k in self.trunk_configs:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        result['TrunkConfigs'] = []
        if self.trunk_configs is not None:
            for k in self.trunk_configs:
                result['TrunkConfigs'].append(k.to_map() if k else None)
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        self.trunk_configs = []
        if m.get('TrunkConfigs') is not None:
            for k in m.get('TrunkConfigs'):
                temp_model = ListTrunksOfSkillGroupResponseBodyTrunkConfigs()
                self.trunk_configs.append(temp_model.from_map(k))
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListTrunksOfSkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListTrunksOfSkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListTrunksOfSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUnreachableContactsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListUnreachableContactsResponseBodyUnreachableContactsListContacts(TeaModel):
    def __init__(
        self,
        phone_number: str = None,
        contact_id: str = None,
        state: str = None,
        contact_name: str = None,
        role: str = None,
        reference_id: str = None,
    ):
        self.phone_number = phone_number
        self.contact_id = contact_id
        self.state = state
        self.contact_name = contact_name
        self.role = role
        self.reference_id = reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        if self.state is not None:
            result['State'] = self.state
        if self.contact_name is not None:
            result['ContactName'] = self.contact_name
        if self.role is not None:
            result['Role'] = self.role
        if self.reference_id is not None:
            result['ReferenceId'] = self.reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        if m.get('State') is not None:
            self.state = m.get('State')
        if m.get('ContactName') is not None:
            self.contact_name = m.get('ContactName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('ReferenceId') is not None:
            self.reference_id = m.get('ReferenceId')
        return self


class ListUnreachableContactsResponseBodyUnreachableContactsList(TeaModel):
    def __init__(
        self,
        contacts: List[ListUnreachableContactsResponseBodyUnreachableContactsListContacts] = None,
        total_attempts: int = None,
    ):
        self.contacts = contacts
        self.total_attempts = total_attempts

    def validate(self):
        if self.contacts:
            for k in self.contacts:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Contacts'] = []
        if self.contacts is not None:
            for k in self.contacts:
                result['Contacts'].append(k.to_map() if k else None)
        if self.total_attempts is not None:
            result['TotalAttempts'] = self.total_attempts
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contacts = []
        if m.get('Contacts') is not None:
            for k in m.get('Contacts'):
                temp_model = ListUnreachableContactsResponseBodyUnreachableContactsListContacts()
                self.contacts.append(temp_model.from_map(k))
        if m.get('TotalAttempts') is not None:
            self.total_attempts = m.get('TotalAttempts')
        return self


class ListUnreachableContactsResponseBodyUnreachableContacts(TeaModel):
    def __init__(
        self,
        list: List[ListUnreachableContactsResponseBodyUnreachableContactsList] = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            for k in self.list:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['List'] = []
        if self.list is not None:
            for k in self.list:
                result['List'].append(k.to_map() if k else None)
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.list = []
        if m.get('List') is not None:
            for k in m.get('List'):
                temp_model = ListUnreachableContactsResponseBodyUnreachableContactsList()
                self.list.append(temp_model.from_map(k))
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListUnreachableContactsResponseBody(TeaModel):
    def __init__(
        self,
        unreachable_contacts: ListUnreachableContactsResponseBodyUnreachableContacts = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.unreachable_contacts = unreachable_contacts
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.unreachable_contacts:
            self.unreachable_contacts.validate()

    def to_map(self):
        result = dict()
        if self.unreachable_contacts is not None:
            result['UnreachableContacts'] = self.unreachable_contacts.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('UnreachableContacts') is not None:
            temp_model = ListUnreachableContactsResponseBodyUnreachableContacts()
            self.unreachable_contacts = temp_model.from_map(m['UnreachableContacts'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListUnreachableContactsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListUnreachableContactsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListUnreachableContactsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUsersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        skill_group_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel(TeaModel):
    def __init__(
        self,
        skill: ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = ListUsersResponseBodyUsersListUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class ListUsersResponseBodyUsersListUserSkillLevels(TeaModel):
    def __init__(
        self,
        skill_level: List[ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel] = None,
    ):
        self.skill_level = skill_level

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListUsersResponseBodyUsersListUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListUsersResponseBodyUsersListUserRolesRole(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        instance_id: str = None,
        role_name: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.instance_id = instance_id
        self.role_name = role_name
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class ListUsersResponseBodyUsersListUserRoles(TeaModel):
    def __init__(
        self,
        role: List[ListUsersResponseBodyUsersListUserRolesRole] = None,
    ):
        self.role = role

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = ListUsersResponseBodyUsersListUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class ListUsersResponseBodyUsersListUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListUsersResponseBodyUsersListUser(TeaModel):
    def __init__(
        self,
        skill_levels: ListUsersResponseBodyUsersListUserSkillLevels = None,
        private_outbound_number_id: str = None,
        user_id: str = None,
        roles: ListUsersResponseBodyUsersListUserRoles = None,
        primary: bool = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: ListUsersResponseBodyUsersListUserDetail = None,
    ):
        self.skill_levels = skill_levels
        self.private_outbound_number_id = private_outbound_number_id
        self.user_id = user_id
        self.roles = roles
        self.primary = primary
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()
        if self.roles:
            self.roles.validate()
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.primary is not None:
            result['Primary'] = self.primary
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillLevels') is not None:
            temp_model = ListUsersResponseBodyUsersListUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('Roles') is not None:
            temp_model = ListUsersResponseBodyUsersListUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('Primary') is not None:
            self.primary = m.get('Primary')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = ListUsersResponseBodyUsersListUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class ListUsersResponseBodyUsersList(TeaModel):
    def __init__(
        self,
        user: List[ListUsersResponseBodyUsersListUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListUsersResponseBodyUsersListUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListUsersResponseBodyUsers(TeaModel):
    def __init__(
        self,
        list: ListUsersResponseBodyUsersList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListUsersResponseBodyUsersList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListUsersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        users: ListUsersResponseBodyUsers = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.users = users
        self.code = code
        self.success = success

    def validate(self):
        if self.users:
            self.users.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.users is not None:
            result['Users'] = self.users.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Users') is not None:
            temp_model = ListUsersResponseBodyUsers()
            self.users = temp_model.from_map(m['Users'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListUsersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListUsersOfSkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        page_number: int = None,
        page_size: int = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.page_number = page_number
        self.page_size = page_size

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill(TeaModel):
    def __init__(
        self,
        skill_group_id: str = None,
        skill_group_name: str = None,
        instance_id: str = None,
        skill_group_description: str = None,
    ):
        self.skill_group_id = skill_group_id
        self.skill_group_name = skill_group_name
        self.instance_id = instance_id
        self.skill_group_description = skill_group_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_description is not None:
            result['SkillGroupDescription'] = self.skill_group_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupDescription') is not None:
            self.skill_group_description = m.get('SkillGroupDescription')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel(TeaModel):
    def __init__(
        self,
        skill: ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill = None,
        skill_level_id: str = None,
        level: int = None,
    ):
        self.skill = skill
        self.skill_level_id = skill_level_id
        self.level = level

    def validate(self):
        if self.skill:
            self.skill.validate()

    def to_map(self):
        result = dict()
        if self.skill is not None:
            result['Skill'] = self.skill.to_map()
        if self.skill_level_id is not None:
            result['SkillLevelId'] = self.skill_level_id
        if self.level is not None:
            result['Level'] = self.level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Skill') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevelSkill()
            self.skill = temp_model.from_map(m['Skill'])
        if m.get('SkillLevelId') is not None:
            self.skill_level_id = m.get('SkillLevelId')
        if m.get('Level') is not None:
            self.level = m.get('Level')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels(TeaModel):
    def __init__(
        self,
        skill_level: List[ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel] = None,
    ):
        self.skill_level = skill_level

    def validate(self):
        if self.skill_level:
            for k in self.skill_level:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillLevel'] = []
        if self.skill_level is not None:
            for k in self.skill_level:
                result['SkillLevel'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_level = []
        if m.get('SkillLevel') is not None:
            for k in m.get('SkillLevel'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevelsSkillLevel()
                self.skill_level.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege(TeaModel):
    def __init__(
        self,
        privilege_name: str = None,
        privilege_id: str = None,
        privilege_description: str = None,
    ):
        self.privilege_name = privilege_name
        self.privilege_id = privilege_id
        self.privilege_description = privilege_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.privilege_name is not None:
            result['PrivilegeName'] = self.privilege_name
        if self.privilege_id is not None:
            result['PrivilegeId'] = self.privilege_id
        if self.privilege_description is not None:
            result['PrivilegeDescription'] = self.privilege_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('PrivilegeName') is not None:
            self.privilege_name = m.get('PrivilegeName')
        if m.get('PrivilegeId') is not None:
            self.privilege_id = m.get('PrivilegeId')
        if m.get('PrivilegeDescription') is not None:
            self.privilege_description = m.get('PrivilegeDescription')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges(TeaModel):
    def __init__(
        self,
        privilege: List[ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege] = None,
    ):
        self.privilege = privilege

    def validate(self):
        if self.privilege:
            for k in self.privilege:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Privilege'] = []
        if self.privilege is not None:
            for k in self.privilege:
                result['Privilege'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.privilege = []
        if m.get('Privilege') is not None:
            for k in m.get('Privilege'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivilegesPrivilege()
                self.privilege.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        privileges: ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges = None,
        user_count: int = None,
        role_name: str = None,
        instance_id: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.privileges = privileges
        self.user_count = user_count
        self.role_name = role_name
        self.instance_id = instance_id
        self.role_id = role_id

    def validate(self):
        if self.privileges:
            self.privileges.validate()

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.privileges is not None:
            result['Privileges'] = self.privileges.to_map()
        if self.user_count is not None:
            result['UserCount'] = self.user_count
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('Privileges') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRolesRolePrivileges()
            self.privileges = temp_model.from_map(m['Privileges'])
        if m.get('UserCount') is not None:
            self.user_count = m.get('UserCount')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserRoles(TeaModel):
    def __init__(
        self,
        role: List[ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole] = None,
    ):
        self.role = role

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUserDetail(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        email: str = None,
        login_name: str = None,
        department: str = None,
        phone: str = None,
    ):
        self.display_name = display_name
        self.email = email
        self.login_name = login_name
        self.department = department
        self.phone = phone

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.email is not None:
            result['Email'] = self.email
        if self.login_name is not None:
            result['LoginName'] = self.login_name
        if self.department is not None:
            result['Department'] = self.department
        if self.phone is not None:
            result['Phone'] = self.phone
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('LoginName') is not None:
            self.login_name = m.get('LoginName')
        if m.get('Department') is not None:
            self.department = m.get('Department')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        return self


class ListUsersOfSkillGroupResponseBodyUsersListUser(TeaModel):
    def __init__(
        self,
        skill_levels: ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels = None,
        user_id: str = None,
        roles: ListUsersOfSkillGroupResponseBodyUsersListUserRoles = None,
        instance_id: str = None,
        ram_id: str = None,
        detail: ListUsersOfSkillGroupResponseBodyUsersListUserDetail = None,
    ):
        self.skill_levels = skill_levels
        self.user_id = user_id
        self.roles = roles
        self.instance_id = instance_id
        self.ram_id = ram_id
        self.detail = detail

    def validate(self):
        if self.skill_levels:
            self.skill_levels.validate()
        if self.roles:
            self.roles.validate()
        if self.detail:
            self.detail.validate()

    def to_map(self):
        result = dict()
        if self.skill_levels is not None:
            result['SkillLevels'] = self.skill_levels.to_map()
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id is not None:
            result['RamId'] = self.ram_id
        if self.detail is not None:
            result['Detail'] = self.detail.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillLevels') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserSkillLevels()
            self.skill_levels = temp_model.from_map(m['SkillLevels'])
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('Roles') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamId') is not None:
            self.ram_id = m.get('RamId')
        if m.get('Detail') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersListUserDetail()
            self.detail = temp_model.from_map(m['Detail'])
        return self


class ListUsersOfSkillGroupResponseBodyUsersList(TeaModel):
    def __init__(
        self,
        user: List[ListUsersOfSkillGroupResponseBodyUsersListUser] = None,
    ):
        self.user = user

    def validate(self):
        if self.user:
            for k in self.user:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['User'] = []
        if self.user is not None:
            for k in self.user:
                result['User'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.user = []
        if m.get('User') is not None:
            for k in m.get('User'):
                temp_model = ListUsersOfSkillGroupResponseBodyUsersListUser()
                self.user.append(temp_model.from_map(k))
        return self


class ListUsersOfSkillGroupResponseBodyUsers(TeaModel):
    def __init__(
        self,
        list: ListUsersOfSkillGroupResponseBodyUsersList = None,
        page_number: int = None,
        page_size: int = None,
        total_count: int = None,
    ):
        self.list = list
        self.page_number = page_number
        self.page_size = page_size
        self.total_count = total_count

    def validate(self):
        if self.list:
            self.list.validate()

    def to_map(self):
        result = dict()
        if self.list is not None:
            result['List'] = self.list.to_map()
        if self.page_number is not None:
            result['PageNumber'] = self.page_number
        if self.page_size is not None:
            result['PageSize'] = self.page_size
        if self.total_count is not None:
            result['TotalCount'] = self.total_count
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('List') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsersList()
            self.list = temp_model.from_map(m['List'])
        if m.get('PageNumber') is not None:
            self.page_number = m.get('PageNumber')
        if m.get('PageSize') is not None:
            self.page_size = m.get('PageSize')
        if m.get('TotalCount') is not None:
            self.total_count = m.get('TotalCount')
        return self


class ListUsersOfSkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        users: ListUsersOfSkillGroupResponseBodyUsers = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.users = users
        self.code = code
        self.success = success

    def validate(self):
        if self.users:
            self.users.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.users is not None:
            result['Users'] = self.users.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Users') is not None:
            temp_model = ListUsersOfSkillGroupResponseBodyUsers()
            self.users = temp_model.from_map(m['Users'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListUsersOfSkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListUsersOfSkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListUsersOfSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ListVoiceAppraiseRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber(TeaModel):
    def __init__(
        self,
        trunks: int = None,
        number: str = None,
        remaining_time: int = None,
        instance_id: str = None,
        phone_number_description: str = None,
        phone_number_id: str = None,
    ):
        self.trunks = trunks
        self.number = number
        self.remaining_time = remaining_time
        self.instance_id = instance_id
        self.phone_number_description = phone_number_description
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.number is not None:
            result['Number'] = self.number
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers(TeaModel):
    def __init__(
        self,
        phone_number: List[ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber] = None,
    ):
        self.phone_number = phone_number

    def validate(self):
        if self.phone_number:
            for k in self.phone_number:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['PhoneNumber'] = []
        if self.phone_number is not None:
            for k in self.phone_number:
                result['PhoneNumber'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.phone_number = []
        if m.get('PhoneNumber') is not None:
            for k in m.get('PhoneNumber'):
                temp_model = ListVoiceAppraiseResponseBodyContactFlowPhoneNumbersPhoneNumber()
                self.phone_number.append(temp_model.from_map(k))
        return self


class ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion(TeaModel):
    def __init__(
        self,
        status: str = None,
        last_modified: str = None,
        version: str = None,
        contact_flow_version_id: str = None,
        contact_flow_version_description: str = None,
        last_modified_by: str = None,
        content: str = None,
    ):
        self.status = status
        self.last_modified = last_modified
        self.version = version
        self.contact_flow_version_id = contact_flow_version_id
        self.contact_flow_version_description = contact_flow_version_description
        self.last_modified_by = last_modified_by
        self.content = content

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status is not None:
            result['Status'] = self.status
        if self.last_modified is not None:
            result['LastModified'] = self.last_modified
        if self.version is not None:
            result['Version'] = self.version
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.contact_flow_version_description is not None:
            result['ContactFlowVersionDescription'] = self.contact_flow_version_description
        if self.last_modified_by is not None:
            result['LastModifiedBy'] = self.last_modified_by
        if self.content is not None:
            result['Content'] = self.content
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Status') is not None:
            self.status = m.get('Status')
        if m.get('LastModified') is not None:
            self.last_modified = m.get('LastModified')
        if m.get('Version') is not None:
            self.version = m.get('Version')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('ContactFlowVersionDescription') is not None:
            self.contact_flow_version_description = m.get('ContactFlowVersionDescription')
        if m.get('LastModifiedBy') is not None:
            self.last_modified_by = m.get('LastModifiedBy')
        if m.get('Content') is not None:
            self.content = m.get('Content')
        return self


class ListVoiceAppraiseResponseBodyContactFlowVersions(TeaModel):
    def __init__(
        self,
        contact_flow_version: List[ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion] = None,
    ):
        self.contact_flow_version = contact_flow_version

    def validate(self):
        if self.contact_flow_version:
            for k in self.contact_flow_version:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['ContactFlowVersion'] = []
        if self.contact_flow_version is not None:
            for k in self.contact_flow_version:
                result['ContactFlowVersion'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.contact_flow_version = []
        if m.get('ContactFlowVersion') is not None:
            for k in m.get('ContactFlowVersion'):
                temp_model = ListVoiceAppraiseResponseBodyContactFlowVersionsContactFlowVersion()
                self.contact_flow_version.append(temp_model.from_map(k))
        return self


class ListVoiceAppraiseResponseBodyContactFlow(TeaModel):
    def __init__(
        self,
        contact_flow_description: str = None,
        type: str = None,
        phone_numbers: ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers = None,
        contact_flow_name: str = None,
        versions: ListVoiceAppraiseResponseBodyContactFlowVersions = None,
        instance_id: str = None,
        contact_flow_id: str = None,
        applied_version: str = None,
    ):
        self.contact_flow_description = contact_flow_description
        self.type = type
        self.phone_numbers = phone_numbers
        self.contact_flow_name = contact_flow_name
        self.versions = versions
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id
        self.applied_version = applied_version

    def validate(self):
        if self.phone_numbers:
            self.phone_numbers.validate()
        if self.versions:
            self.versions.validate()

    def to_map(self):
        result = dict()
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.type is not None:
            result['Type'] = self.type
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers.to_map()
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.versions is not None:
            result['Versions'] = self.versions.to_map()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.applied_version is not None:
            result['AppliedVersion'] = self.applied_version
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('PhoneNumbers') is not None:
            temp_model = ListVoiceAppraiseResponseBodyContactFlowPhoneNumbers()
            self.phone_numbers = temp_model.from_map(m['PhoneNumbers'])
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('Versions') is not None:
            temp_model = ListVoiceAppraiseResponseBodyContactFlowVersions()
            self.versions = temp_model.from_map(m['Versions'])
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('AppliedVersion') is not None:
            self.applied_version = m.get('AppliedVersion')
        return self


class ListVoiceAppraiseResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        notice: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        contact_flow: ListVoiceAppraiseResponseBodyContactFlow = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.notice = notice
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.contact_flow = contact_flow
        self.success = success

    def validate(self):
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.notice is not None:
            result['Notice'] = self.notice
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Notice') is not None:
            self.notice = m.get('Notice')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('ContactFlow') is not None:
            temp_model = ListVoiceAppraiseResponseBodyContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ListVoiceAppraiseResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ListVoiceAppraiseResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ListVoiceAppraiseResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyAgentDeviceRequest(TeaModel):
    def __init__(
        self,
        is_login: int = None,
        agent_device_id: int = None,
        instance_id: str = None,
    ):
        self.is_login = is_login
        self.agent_device_id = agent_device_id
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.is_login is not None:
            result['IsLogin'] = self.is_login
        if self.agent_device_id is not None:
            result['AgentDeviceId'] = self.agent_device_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsLogin') is not None:
            self.is_login = m.get('IsLogin')
        if m.get('AgentDeviceId') is not None:
            self.agent_device_id = m.get('AgentDeviceId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class ModifyAgentDeviceResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyAgentDeviceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyAgentDeviceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyAgentDeviceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyCabInstanceRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        instance_name: str = None,
        instance_description: str = None,
        max_concurrent_conversation: int = None,
        call_center_instance_id: str = None,
    ):
        self.instance_id = instance_id
        self.instance_name = instance_name
        self.instance_description = instance_description
        self.max_concurrent_conversation = max_concurrent_conversation
        self.call_center_instance_id = call_center_instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        return self


class ModifyCabInstanceResponseBodyInstance(TeaModel):
    def __init__(
        self,
        creation_time: int = None,
        call_center_instance_id: str = None,
        owner: str = None,
        instance_name: str = None,
        max_concurrent_conversation: int = None,
        instance_id: str = None,
        instance_description: str = None,
    ):
        self.creation_time = creation_time
        self.call_center_instance_id = call_center_instance_id
        self.owner = owner
        self.instance_name = instance_name
        self.max_concurrent_conversation = max_concurrent_conversation
        self.instance_id = instance_id
        self.instance_description = instance_description

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.creation_time is not None:
            result['CreationTime'] = self.creation_time
        if self.call_center_instance_id is not None:
            result['CallCenterInstanceId'] = self.call_center_instance_id
        if self.owner is not None:
            result['Owner'] = self.owner
        if self.instance_name is not None:
            result['InstanceName'] = self.instance_name
        if self.max_concurrent_conversation is not None:
            result['MaxConcurrentConversation'] = self.max_concurrent_conversation
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.instance_description is not None:
            result['InstanceDescription'] = self.instance_description
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CreationTime') is not None:
            self.creation_time = m.get('CreationTime')
        if m.get('CallCenterInstanceId') is not None:
            self.call_center_instance_id = m.get('CallCenterInstanceId')
        if m.get('Owner') is not None:
            self.owner = m.get('Owner')
        if m.get('InstanceName') is not None:
            self.instance_name = m.get('InstanceName')
        if m.get('MaxConcurrentConversation') is not None:
            self.max_concurrent_conversation = m.get('MaxConcurrentConversation')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('InstanceDescription') is not None:
            self.instance_description = m.get('InstanceDescription')
        return self


class ModifyCabInstanceResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        instance: ModifyCabInstanceResponseBodyInstance = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.instance = instance
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.instance:
            self.instance.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.instance is not None:
            result['Instance'] = self.instance.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Instance') is not None:
            temp_model = ModifyCabInstanceResponseBodyInstance()
            self.instance = temp_model.from_map(m['Instance'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyCabInstanceResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyCabInstanceResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyCabInstanceResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPhoneNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        phone_number_id: str = None,
        usage: str = None,
        contact_flow_id: str = None,
        skill_group_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.phone_number_id = phone_number_id
        self.usage = usage
        self.contact_flow_id = contact_flow_id
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup(TeaModel):
    def __init__(
        self,
        skill_group_name: str = None,
        skill_group_id: str = None,
    ):
        self.skill_group_name = skill_group_name
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.skill_group_name is not None:
            result['SkillGroupName'] = self.skill_group_name
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroupName') is not None:
            self.skill_group_name = m.get('SkillGroupName')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups(TeaModel):
    def __init__(
        self,
        skill_group: List[ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup] = None,
    ):
        self.skill_group = skill_group

    def validate(self):
        if self.skill_group:
            for k in self.skill_group:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['SkillGroup'] = []
        if self.skill_group is not None:
            for k in self.skill_group:
                result['SkillGroup'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.skill_group = []
        if m.get('SkillGroup') is not None:
            for k in m.get('SkillGroup'):
                temp_model = ModifyPhoneNumberResponseBodyPhoneNumberSkillGroupsSkillGroup()
                self.skill_group.append(temp_model.from_map(k))
        return self


class ModifyPhoneNumberResponseBodyPhoneNumberContactFlow(TeaModel):
    def __init__(
        self,
        type: str = None,
        contact_flow_description: str = None,
        contact_flow_name: str = None,
        instance_id: str = None,
        contact_flow_id: str = None,
    ):
        self.type = type
        self.contact_flow_description = contact_flow_description
        self.contact_flow_name = contact_flow_name
        self.instance_id = instance_id
        self.contact_flow_id = contact_flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.contact_flow_description is not None:
            result['ContactFlowDescription'] = self.contact_flow_description
        if self.contact_flow_name is not None:
            result['ContactFlowName'] = self.contact_flow_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_id is not None:
            result['ContactFlowId'] = self.contact_flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ContactFlowDescription') is not None:
            self.contact_flow_description = m.get('ContactFlowDescription')
        if m.get('ContactFlowName') is not None:
            self.contact_flow_name = m.get('ContactFlowName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowId') is not None:
            self.contact_flow_id = m.get('ContactFlowId')
        return self


class ModifyPhoneNumberResponseBodyPhoneNumber(TeaModel):
    def __init__(
        self,
        skill_groups: ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups = None,
        test_only: bool = None,
        trunks: int = None,
        remaining_time: int = None,
        number: str = None,
        instance_id: str = None,
        usage: str = None,
        allow_outbound: bool = None,
        phone_number_description: str = None,
        contact_flow: ModifyPhoneNumberResponseBodyPhoneNumberContactFlow = None,
        phone_number_id: str = None,
    ):
        self.skill_groups = skill_groups
        self.test_only = test_only
        self.trunks = trunks
        self.remaining_time = remaining_time
        self.number = number
        self.instance_id = instance_id
        self.usage = usage
        self.allow_outbound = allow_outbound
        self.phone_number_description = phone_number_description
        self.contact_flow = contact_flow
        self.phone_number_id = phone_number_id

    def validate(self):
        if self.skill_groups:
            self.skill_groups.validate()
        if self.contact_flow:
            self.contact_flow.validate()

    def to_map(self):
        result = dict()
        if self.skill_groups is not None:
            result['SkillGroups'] = self.skill_groups.to_map()
        if self.test_only is not None:
            result['TestOnly'] = self.test_only
        if self.trunks is not None:
            result['Trunks'] = self.trunks
        if self.remaining_time is not None:
            result['RemainingTime'] = self.remaining_time
        if self.number is not None:
            result['Number'] = self.number
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.usage is not None:
            result['Usage'] = self.usage
        if self.allow_outbound is not None:
            result['AllowOutbound'] = self.allow_outbound
        if self.phone_number_description is not None:
            result['PhoneNumberDescription'] = self.phone_number_description
        if self.contact_flow is not None:
            result['ContactFlow'] = self.contact_flow.to_map()
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('SkillGroups') is not None:
            temp_model = ModifyPhoneNumberResponseBodyPhoneNumberSkillGroups()
            self.skill_groups = temp_model.from_map(m['SkillGroups'])
        if m.get('TestOnly') is not None:
            self.test_only = m.get('TestOnly')
        if m.get('Trunks') is not None:
            self.trunks = m.get('Trunks')
        if m.get('RemainingTime') is not None:
            self.remaining_time = m.get('RemainingTime')
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('Usage') is not None:
            self.usage = m.get('Usage')
        if m.get('AllowOutbound') is not None:
            self.allow_outbound = m.get('AllowOutbound')
        if m.get('PhoneNumberDescription') is not None:
            self.phone_number_description = m.get('PhoneNumberDescription')
        if m.get('ContactFlow') is not None:
            temp_model = ModifyPhoneNumberResponseBodyPhoneNumberContactFlow()
            self.contact_flow = temp_model.from_map(m['ContactFlow'])
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class ModifyPhoneNumberResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        phone_number: ModifyPhoneNumberResponseBodyPhoneNumber = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.phone_number = phone_number
        self.code = code
        self.success = success

    def validate(self):
        if self.phone_number:
            self.phone_number.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('PhoneNumber') is not None:
            temp_model = ModifyPhoneNumberResponseBodyPhoneNumber()
            self.phone_number = temp_model.from_map(m['PhoneNumber'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPhoneNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyPhoneNumberResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPhoneNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPhoneTagsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        service_tag: str = None,
        skill_group_id_list: List[str] = None,
    ):
        self.instance_id = instance_id
        self.service_tag = service_tag
        self.skill_group_id_list = skill_group_id_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.service_tag is not None:
            result['ServiceTag'] = self.service_tag
        if self.skill_group_id_list is not None:
            result['SkillGroupIdList'] = self.skill_group_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ServiceTag') is not None:
            self.service_tag = m.get('ServiceTag')
        if m.get('SkillGroupIdList') is not None:
            self.skill_group_id_list = m.get('SkillGroupIdList')
        return self


class ModifyPhoneTagsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPhoneTagsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyPhoneTagsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPhoneTagsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPrimaryTrunksOfSkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        primary_provider_name: List[str] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.primary_provider_name = primary_provider_name

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.primary_provider_name is not None:
            result['PrimaryProviderName'] = self.primary_provider_name
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('PrimaryProviderName') is not None:
            self.primary_provider_name = m.get('PrimaryProviderName')
        return self


class ModifyPrimaryTrunksOfSkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPrimaryTrunksOfSkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyPrimaryTrunksOfSkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPrimaryTrunksOfSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyPrivacyNumberCallDetailRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        call_id: str = None,
        contact_id: str = None,
    ):
        self.instance_id = instance_id
        self.call_id = call_id
        self.contact_id = contact_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.contact_id is not None:
            result['ContactId'] = self.contact_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('ContactId') is not None:
            self.contact_id = m.get('ContactId')
        return self


class ModifyPrivacyNumberCallDetailResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyPrivacyNumberCallDetailResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyPrivacyNumberCallDetailResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyPrivacyNumberCallDetailResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyScenarioRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
        name: str = None,
        description: str = None,
        variables: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        self.name = name
        self.description = description
        self.variables = variables

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.variables is not None:
            result['Variables'] = self.variables
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('Variables') is not None:
            self.variables = m.get('Variables')
        return self


class ModifyScenarioResponseBodyScenarioStrategyWorkingTime(TeaModel):
    def __init__(
        self,
        end_time: str = None,
        begin_time: str = None,
    ):
        self.end_time = end_time
        self.begin_time = begin_time

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.begin_time is not None:
            result['BeginTime'] = self.begin_time
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('BeginTime') is not None:
            self.begin_time = m.get('BeginTime')
        return self


class ModifyScenarioResponseBodyScenarioStrategy(TeaModel):
    def __init__(
        self,
        type: str = None,
        strategy_name: str = None,
        max_attempts_per_day: int = None,
        working_time: List[ModifyScenarioResponseBodyScenarioStrategyWorkingTime] = None,
        follow_up_strategy: str = None,
        end_time: int = None,
        customized: str = None,
        start_time: int = None,
        is_template: bool = None,
        strategy_id: str = None,
        repeat_days: List[str] = None,
        routing_strategy: str = None,
        strategy_description: str = None,
        min_attempt_interval: int = None,
        repeat_by: str = None,
    ):
        self.type = type
        self.strategy_name = strategy_name
        self.max_attempts_per_day = max_attempts_per_day
        self.working_time = working_time
        self.follow_up_strategy = follow_up_strategy
        self.end_time = end_time
        self.customized = customized
        self.start_time = start_time
        self.is_template = is_template
        self.strategy_id = strategy_id
        self.repeat_days = repeat_days
        self.routing_strategy = routing_strategy
        self.strategy_description = strategy_description
        self.min_attempt_interval = min_attempt_interval
        self.repeat_by = repeat_by

    def validate(self):
        if self.working_time:
            for k in self.working_time:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.strategy_name is not None:
            result['StrategyName'] = self.strategy_name
        if self.max_attempts_per_day is not None:
            result['MaxAttemptsPerDay'] = self.max_attempts_per_day
        result['WorkingTime'] = []
        if self.working_time is not None:
            for k in self.working_time:
                result['WorkingTime'].append(k.to_map() if k else None)
        if self.follow_up_strategy is not None:
            result['FollowUpStrategy'] = self.follow_up_strategy
        if self.end_time is not None:
            result['EndTime'] = self.end_time
        if self.customized is not None:
            result['Customized'] = self.customized
        if self.start_time is not None:
            result['StartTime'] = self.start_time
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.strategy_id is not None:
            result['StrategyId'] = self.strategy_id
        if self.repeat_days is not None:
            result['RepeatDays'] = self.repeat_days
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.strategy_description is not None:
            result['StrategyDescription'] = self.strategy_description
        if self.min_attempt_interval is not None:
            result['MinAttemptInterval'] = self.min_attempt_interval
        if self.repeat_by is not None:
            result['RepeatBy'] = self.repeat_by
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('StrategyName') is not None:
            self.strategy_name = m.get('StrategyName')
        if m.get('MaxAttemptsPerDay') is not None:
            self.max_attempts_per_day = m.get('MaxAttemptsPerDay')
        self.working_time = []
        if m.get('WorkingTime') is not None:
            for k in m.get('WorkingTime'):
                temp_model = ModifyScenarioResponseBodyScenarioStrategyWorkingTime()
                self.working_time.append(temp_model.from_map(k))
        if m.get('FollowUpStrategy') is not None:
            self.follow_up_strategy = m.get('FollowUpStrategy')
        if m.get('EndTime') is not None:
            self.end_time = m.get('EndTime')
        if m.get('Customized') is not None:
            self.customized = m.get('Customized')
        if m.get('StartTime') is not None:
            self.start_time = m.get('StartTime')
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('StrategyId') is not None:
            self.strategy_id = m.get('StrategyId')
        if m.get('RepeatDays') is not None:
            self.repeat_days = m.get('RepeatDays')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('StrategyDescription') is not None:
            self.strategy_description = m.get('StrategyDescription')
        if m.get('MinAttemptInterval') is not None:
            self.min_attempt_interval = m.get('MinAttemptInterval')
        if m.get('RepeatBy') is not None:
            self.repeat_by = m.get('RepeatBy')
        return self


class ModifyScenarioResponseBodyScenarioSurveysIntents(TeaModel):
    def __init__(
        self,
        node_id: str = None,
        intent_id: str = None,
    ):
        self.node_id = node_id
        self.intent_id = intent_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.node_id is not None:
            result['NodeId'] = self.node_id
        if self.intent_id is not None:
            result['IntentId'] = self.intent_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('NodeId') is not None:
            self.node_id = m.get('NodeId')
        if m.get('IntentId') is not None:
            self.intent_id = m.get('IntentId')
        return self


class ModifyScenarioResponseBodyScenarioSurveys(TeaModel):
    def __init__(
        self,
        round: int = None,
        survey_description: str = None,
        beebot_id: str = None,
        intents: List[ModifyScenarioResponseBodyScenarioSurveysIntents] = None,
        survey_name: str = None,
        role: str = None,
        survey_id: str = None,
    ):
        self.round = round
        self.survey_description = survey_description
        self.beebot_id = beebot_id
        self.intents = intents
        self.survey_name = survey_name
        self.role = role
        self.survey_id = survey_id

    def validate(self):
        if self.intents:
            for k in self.intents:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.round is not None:
            result['Round'] = self.round
        if self.survey_description is not None:
            result['SurveyDescription'] = self.survey_description
        if self.beebot_id is not None:
            result['BeebotId'] = self.beebot_id
        result['Intents'] = []
        if self.intents is not None:
            for k in self.intents:
                result['Intents'].append(k.to_map() if k else None)
        if self.survey_name is not None:
            result['SurveyName'] = self.survey_name
        if self.role is not None:
            result['Role'] = self.role
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SurveyDescription') is not None:
            self.survey_description = m.get('SurveyDescription')
        if m.get('BeebotId') is not None:
            self.beebot_id = m.get('BeebotId')
        self.intents = []
        if m.get('Intents') is not None:
            for k in m.get('Intents'):
                temp_model = ModifyScenarioResponseBodyScenarioSurveysIntents()
                self.intents.append(temp_model.from_map(k))
        if m.get('SurveyName') is not None:
            self.survey_name = m.get('SurveyName')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class ModifyScenarioResponseBodyScenarioVariables(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class ModifyScenarioResponseBodyScenario(TeaModel):
    def __init__(
        self,
        type: str = None,
        scenario_id: str = None,
        strategy: ModifyScenarioResponseBodyScenarioStrategy = None,
        is_template: bool = None,
        scenario_description: str = None,
        scenario_name: str = None,
        surveys: List[ModifyScenarioResponseBodyScenarioSurveys] = None,
        variables: List[ModifyScenarioResponseBodyScenarioVariables] = None,
    ):
        self.type = type
        self.scenario_id = scenario_id
        self.strategy = strategy
        self.is_template = is_template
        self.scenario_description = scenario_description
        self.scenario_name = scenario_name
        self.surveys = surveys
        self.variables = variables

    def validate(self):
        if self.strategy:
            self.strategy.validate()
        if self.surveys:
            for k in self.surveys:
                if k:
                    k.validate()
        if self.variables:
            for k in self.variables:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.type is not None:
            result['Type'] = self.type
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.strategy is not None:
            result['Strategy'] = self.strategy.to_map()
        if self.is_template is not None:
            result['IsTemplate'] = self.is_template
        if self.scenario_description is not None:
            result['ScenarioDescription'] = self.scenario_description
        if self.scenario_name is not None:
            result['ScenarioName'] = self.scenario_name
        result['Surveys'] = []
        if self.surveys is not None:
            for k in self.surveys:
                result['Surveys'].append(k.to_map() if k else None)
        result['Variables'] = []
        if self.variables is not None:
            for k in self.variables:
                result['Variables'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Type') is not None:
            self.type = m.get('Type')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Strategy') is not None:
            temp_model = ModifyScenarioResponseBodyScenarioStrategy()
            self.strategy = temp_model.from_map(m['Strategy'])
        if m.get('IsTemplate') is not None:
            self.is_template = m.get('IsTemplate')
        if m.get('ScenarioDescription') is not None:
            self.scenario_description = m.get('ScenarioDescription')
        if m.get('ScenarioName') is not None:
            self.scenario_name = m.get('ScenarioName')
        self.surveys = []
        if m.get('Surveys') is not None:
            for k in m.get('Surveys'):
                temp_model = ModifyScenarioResponseBodyScenarioSurveys()
                self.surveys.append(temp_model.from_map(k))
        self.variables = []
        if m.get('Variables') is not None:
            for k in m.get('Variables'):
                temp_model = ModifyScenarioResponseBodyScenarioVariables()
                self.variables.append(temp_model.from_map(k))
        return self


class ModifyScenarioResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        scenario: ModifyScenarioResponseBodyScenario = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.scenario = scenario

    def validate(self):
        if self.scenario:
            self.scenario.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.scenario is not None:
            result['Scenario'] = self.scenario.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('Scenario') is not None:
            temp_model = ModifyScenarioResponseBodyScenario()
            self.scenario = temp_model.from_map(m['Scenario'])
        return self


class ModifyScenarioResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyScenarioResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyScenarioResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        name: str = None,
        description: str = None,
        routing_strategy: str = None,
        allow_private_outbound_number: bool = None,
        outbound_phone_number_id: List[str] = None,
        user_id: List[str] = None,
        skill_level: List[int] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.name = name
        self.description = description
        self.routing_strategy = routing_strategy
        self.allow_private_outbound_number = allow_private_outbound_number
        self.outbound_phone_number_id = outbound_phone_number_id
        self.user_id = user_id
        self.skill_level = skill_level

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.routing_strategy is not None:
            result['RoutingStrategy'] = self.routing_strategy
        if self.allow_private_outbound_number is not None:
            result['AllowPrivateOutboundNumber'] = self.allow_private_outbound_number
        if self.outbound_phone_number_id is not None:
            result['OutboundPhoneNumberId'] = self.outbound_phone_number_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('RoutingStrategy') is not None:
            self.routing_strategy = m.get('RoutingStrategy')
        if m.get('AllowPrivateOutboundNumber') is not None:
            self.allow_private_outbound_number = m.get('AllowPrivateOutboundNumber')
        if m.get('OutboundPhoneNumberId') is not None:
            self.outbound_phone_number_id = m.get('OutboundPhoneNumberId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class ModifySkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifySkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySkillGroupOfUserRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_id: str = None,
        role_id: List[str] = None,
        skill_group_id: List[str] = None,
        skill_level: List[int] = None,
    ):
        self.instance_id = instance_id
        self.user_id = user_id
        self.role_id = role_id
        self.skill_group_id = skill_group_id
        self.skill_level = skill_level

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class ModifySkillGroupOfUserResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySkillGroupOfUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifySkillGroupOfUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySkillGroupOfUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySkillGroupOutboundNumbersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        operation_type: int = None,
        outbound_phone_number_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.operation_type = operation_type
        self.outbound_phone_number_id = outbound_phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.operation_type is not None:
            result['OperationType'] = self.operation_type
        if self.outbound_phone_number_id is not None:
            result['OutboundPhoneNumberId'] = self.outbound_phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('OperationType') is not None:
            self.operation_type = m.get('OperationType')
        if m.get('OutboundPhoneNumberId') is not None:
            self.outbound_phone_number_id = m.get('OutboundPhoneNumberId')
        return self


class ModifySkillGroupOutboundNumbersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySkillGroupOutboundNumbersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifySkillGroupOutboundNumbersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySkillGroupOutboundNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifySurveyRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        survey_id: str = None,
        scenario_id: str = None,
        name: str = None,
        description: str = None,
        flow_id: str = None,
        flow_json: str = None,
        corpora: str = None,
        speech_optimization_param: str = None,
        global_questions: str = None,
        role: str = None,
        round: int = None,
    ):
        self.instance_id = instance_id
        self.survey_id = survey_id
        self.scenario_id = scenario_id
        self.name = name
        self.description = description
        self.flow_id = flow_id
        self.flow_json = flow_json
        self.corpora = corpora
        self.speech_optimization_param = speech_optimization_param
        self.global_questions = global_questions
        self.role = role
        self.round = round

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.name is not None:
            result['Name'] = self.name
        if self.description is not None:
            result['Description'] = self.description
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.role is not None:
            result['Role'] = self.role
        if self.round is not None:
            result['Round'] = self.round
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        return self


class ModifySurveyResponseBodySurveyAsrCustomModel(TeaModel):
    def __init__(
        self,
        custom_model_status: int = None,
        corpora: str = None,
    ):
        self.custom_model_status = custom_model_status
        self.corpora = corpora

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.custom_model_status is not None:
            result['CustomModelStatus'] = self.custom_model_status
        if self.corpora is not None:
            result['Corpora'] = self.corpora
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('CustomModelStatus') is not None:
            self.custom_model_status = m.get('CustomModelStatus')
        if m.get('Corpora') is not None:
            self.corpora = m.get('Corpora')
        return self


class ModifySurveyResponseBodySurveyFlow(TeaModel):
    def __init__(
        self,
        is_published: bool = None,
        flow_json: str = None,
        flow_id: str = None,
    ):
        self.is_published = is_published
        self.flow_json = flow_json
        self.flow_id = flow_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.is_published is not None:
            result['IsPublished'] = self.is_published
        if self.flow_json is not None:
            result['FlowJson'] = self.flow_json
        if self.flow_id is not None:
            result['FlowId'] = self.flow_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('IsPublished') is not None:
            self.is_published = m.get('IsPublished')
        if m.get('FlowJson') is not None:
            self.flow_json = m.get('FlowJson')
        if m.get('FlowId') is not None:
            self.flow_id = m.get('FlowId')
        return self


class ModifySurveyResponseBodySurvey(TeaModel):
    def __init__(
        self,
        global_questions: str = None,
        round: int = None,
        speech_optimization_param: str = None,
        description: str = None,
        hot_words: str = None,
        asr_custom_model: ModifySurveyResponseBodySurveyAsrCustomModel = None,
        flow: ModifySurveyResponseBodySurveyFlow = None,
        role: str = None,
        name: str = None,
        scenario_uuid: str = None,
        id: str = None,
    ):
        self.global_questions = global_questions
        self.round = round
        self.speech_optimization_param = speech_optimization_param
        self.description = description
        self.hot_words = hot_words
        self.asr_custom_model = asr_custom_model
        self.flow = flow
        self.role = role
        self.name = name
        self.scenario_uuid = scenario_uuid
        self.id = id

    def validate(self):
        if self.asr_custom_model:
            self.asr_custom_model.validate()
        if self.flow:
            self.flow.validate()

    def to_map(self):
        result = dict()
        if self.global_questions is not None:
            result['GlobalQuestions'] = self.global_questions
        if self.round is not None:
            result['Round'] = self.round
        if self.speech_optimization_param is not None:
            result['SpeechOptimizationParam'] = self.speech_optimization_param
        if self.description is not None:
            result['Description'] = self.description
        if self.hot_words is not None:
            result['HotWords'] = self.hot_words
        if self.asr_custom_model is not None:
            result['AsrCustomModel'] = self.asr_custom_model.to_map()
        if self.flow is not None:
            result['Flow'] = self.flow.to_map()
        if self.role is not None:
            result['Role'] = self.role
        if self.name is not None:
            result['Name'] = self.name
        if self.scenario_uuid is not None:
            result['ScenarioUuid'] = self.scenario_uuid
        if self.id is not None:
            result['Id'] = self.id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('GlobalQuestions') is not None:
            self.global_questions = m.get('GlobalQuestions')
        if m.get('Round') is not None:
            self.round = m.get('Round')
        if m.get('SpeechOptimizationParam') is not None:
            self.speech_optimization_param = m.get('SpeechOptimizationParam')
        if m.get('Description') is not None:
            self.description = m.get('Description')
        if m.get('HotWords') is not None:
            self.hot_words = m.get('HotWords')
        if m.get('AsrCustomModel') is not None:
            temp_model = ModifySurveyResponseBodySurveyAsrCustomModel()
            self.asr_custom_model = temp_model.from_map(m['AsrCustomModel'])
        if m.get('Flow') is not None:
            temp_model = ModifySurveyResponseBodySurveyFlow()
            self.flow = temp_model.from_map(m['Flow'])
        if m.get('Role') is not None:
            self.role = m.get('Role')
        if m.get('Name') is not None:
            self.name = m.get('Name')
        if m.get('ScenarioUuid') is not None:
            self.scenario_uuid = m.get('ScenarioUuid')
        if m.get('Id') is not None:
            self.id = m.get('Id')
        return self


class ModifySurveyResponseBody(TeaModel):
    def __init__(
        self,
        survey: ModifySurveyResponseBodySurvey = None,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.survey = survey
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.survey:
            self.survey.validate()

    def to_map(self):
        result = dict()
        if self.survey is not None:
            result['Survey'] = self.survey.to_map()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Survey') is not None:
            temp_model = ModifySurveyResponseBodySurvey()
            self.survey = temp_model.from_map(m['Survey'])
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifySurveyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifySurveyResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifySurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ModifyUserRequest(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        instance_id: str = None,
        user_id: str = None,
        phone: str = None,
        email: str = None,
        private_outbound_number_id: str = None,
        role_id: List[str] = None,
        skill_group_id: List[str] = None,
        skill_level: List[int] = None,
    ):
        self.display_name = display_name
        self.instance_id = instance_id
        self.user_id = user_id
        self.phone = phone
        self.email = email
        self.private_outbound_number_id = private_outbound_number_id
        self.role_id = role_id
        self.skill_group_id = skill_group_id
        self.skill_level = skill_level

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        if self.phone is not None:
            result['Phone'] = self.phone
        if self.email is not None:
            result['Email'] = self.email
        if self.private_outbound_number_id is not None:
            result['PrivateOutboundNumberId'] = self.private_outbound_number_id
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.skill_level is not None:
            result['SkillLevel'] = self.skill_level
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        if m.get('Phone') is not None:
            self.phone = m.get('Phone')
        if m.get('Email') is not None:
            self.email = m.get('Email')
        if m.get('PrivateOutboundNumberId') is not None:
            self.private_outbound_number_id = m.get('PrivateOutboundNumberId')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('SkillLevel') is not None:
            self.skill_level = m.get('SkillLevel')
        return self


class ModifyUserResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ModifyUserResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ModifyUserResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ModifyUserResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PickGlobalOutboundNumbersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        callee_number: str = None,
        count: int = None,
        is_virtual: bool = None,
        skill_group_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.callee_number = callee_number
        self.count = count
        self.is_virtual = is_virtual
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.count is not None:
            result['Count'] = self.count
        if self.is_virtual is not None:
            result['IsVirtual'] = self.is_virtual
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('IsVirtual') is not None:
            self.is_virtual = m.get('IsVirtual')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair(TeaModel):
    def __init__(
        self,
        caller: PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller = None,
        callee: PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee = None,
    ):
        self.caller = caller
        self.callee = callee

    def validate(self):
        if self.caller:
            self.caller.validate()
        if self.callee:
            self.callee.validate()

    def to_map(self):
        result = dict()
        if self.caller is not None:
            result['Caller'] = self.caller.to_map()
        if self.callee is not None:
            result['Callee'] = self.callee.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Caller') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller()
            self.caller = temp_model.from_map(m['Caller'])
        if m.get('Callee') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee()
            self.callee = temp_model.from_map(m['Callee'])
        return self


class PickGlobalOutboundNumbersResponseBodyDialNumberPairs(TeaModel):
    def __init__(
        self,
        dial_number_pair: List[PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair] = None,
    ):
        self.dial_number_pair = dial_number_pair

    def validate(self):
        if self.dial_number_pair:
            for k in self.dial_number_pair:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['DialNumberPair'] = []
        if self.dial_number_pair is not None:
            for k in self.dial_number_pair:
                result['DialNumberPair'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dial_number_pair = []
        if m.get('DialNumberPair') is not None:
            for k in m.get('DialNumberPair'):
                temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairsDialNumberPair()
                self.dial_number_pair.append(temp_model.from_map(k))
        return self


class PickGlobalOutboundNumbersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        dial_number_pairs: PickGlobalOutboundNumbersResponseBodyDialNumberPairs = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.dial_number_pairs = dial_number_pairs

    def validate(self):
        if self.dial_number_pairs:
            self.dial_number_pairs.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.dial_number_pairs is not None:
            result['DialNumberPairs'] = self.dial_number_pairs.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('DialNumberPairs') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBodyDialNumberPairs()
            self.dial_number_pairs = temp_model.from_map(m['DialNumberPairs'])
        return self


class PickGlobalOutboundNumbersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PickGlobalOutboundNumbersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PickGlobalOutboundNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PickLocalNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        callee_number: str = None,
        candidate_number: List[str] = None,
    ):
        self.instance_id = instance_id
        self.callee_number = callee_number
        self.candidate_number = candidate_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.candidate_number is not None:
            result['CandidateNumber'] = self.candidate_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CandidateNumber') is not None:
            self.candidate_number = m.get('CandidateNumber')
        return self


class PickLocalNumberResponseBodyDataCaller(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickLocalNumberResponseBodyDataCallee(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickLocalNumberResponseBodyData(TeaModel):
    def __init__(
        self,
        caller: PickLocalNumberResponseBodyDataCaller = None,
        callee: PickLocalNumberResponseBodyDataCallee = None,
    ):
        self.caller = caller
        self.callee = callee

    def validate(self):
        if self.caller:
            self.caller.validate()
        if self.callee:
            self.callee.validate()

    def to_map(self):
        result = dict()
        if self.caller is not None:
            result['Caller'] = self.caller.to_map()
        if self.callee is not None:
            result['Callee'] = self.callee.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Caller') is not None:
            temp_model = PickLocalNumberResponseBodyDataCaller()
            self.caller = temp_model.from_map(m['Caller'])
        if m.get('Callee') is not None:
            temp_model = PickLocalNumberResponseBodyDataCallee()
            self.callee = temp_model.from_map(m['Callee'])
        return self


class PickLocalNumberResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        data: PickLocalNumberResponseBodyData = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.data = data
        self.code = code
        self.success = success

    def validate(self):
        if self.data:
            self.data.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.data is not None:
            result['Data'] = self.data.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Data') is not None:
            temp_model = PickLocalNumberResponseBodyData()
            self.data = temp_model.from_map(m['Data'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PickLocalNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PickLocalNumberResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PickLocalNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PickOutboundNumbersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        callee_number: str = None,
        count: int = None,
        candidate_number: List[str] = None,
    ):
        self.instance_id = instance_id
        self.callee_number = callee_number
        self.count = count
        self.candidate_number = candidate_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.count is not None:
            result['Count'] = self.count
        if self.candidate_number is not None:
            result['CandidateNumber'] = self.candidate_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('Count') is not None:
            self.count = m.get('Count')
        if m.get('CandidateNumber') is not None:
            self.candidate_number = m.get('CandidateNumber')
        return self


class PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee(TeaModel):
    def __init__(
        self,
        number: str = None,
        city: str = None,
        province: str = None,
    ):
        self.number = number
        self.city = city
        self.province = province

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.number is not None:
            result['Number'] = self.number
        if self.city is not None:
            result['City'] = self.city
        if self.province is not None:
            result['Province'] = self.province
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Number') is not None:
            self.number = m.get('Number')
        if m.get('City') is not None:
            self.city = m.get('City')
        if m.get('Province') is not None:
            self.province = m.get('Province')
        return self


class PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair(TeaModel):
    def __init__(
        self,
        caller: PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller = None,
        callee: PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee = None,
    ):
        self.caller = caller
        self.callee = callee

    def validate(self):
        if self.caller:
            self.caller.validate()
        if self.callee:
            self.callee.validate()

    def to_map(self):
        result = dict()
        if self.caller is not None:
            result['Caller'] = self.caller.to_map()
        if self.callee is not None:
            result['Callee'] = self.callee.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Caller') is not None:
            temp_model = PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCaller()
            self.caller = temp_model.from_map(m['Caller'])
        if m.get('Callee') is not None:
            temp_model = PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPairCallee()
            self.callee = temp_model.from_map(m['Callee'])
        return self


class PickOutboundNumbersResponseBodyDialNumberPairs(TeaModel):
    def __init__(
        self,
        dial_number_pair: List[PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair] = None,
    ):
        self.dial_number_pair = dial_number_pair

    def validate(self):
        if self.dial_number_pair:
            for k in self.dial_number_pair:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['DialNumberPair'] = []
        if self.dial_number_pair is not None:
            for k in self.dial_number_pair:
                result['DialNumberPair'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.dial_number_pair = []
        if m.get('DialNumberPair') is not None:
            for k in m.get('DialNumberPair'):
                temp_model = PickOutboundNumbersResponseBodyDialNumberPairsDialNumberPair()
                self.dial_number_pair.append(temp_model.from_map(k))
        return self


class PickOutboundNumbersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
        dial_number_pairs: PickOutboundNumbersResponseBodyDialNumberPairs = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success
        self.dial_number_pairs = dial_number_pairs

    def validate(self):
        if self.dial_number_pairs:
            self.dial_number_pairs.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.dial_number_pairs is not None:
            result['DialNumberPairs'] = self.dial_number_pairs.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('DialNumberPairs') is not None:
            temp_model = PickOutboundNumbersResponseBodyDialNumberPairs()
            self.dial_number_pairs = temp_model.from_map(m['DialNumberPairs'])
        return self


class PickOutboundNumbersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PickOutboundNumbersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PickOutboundNumbersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishContactFlowVersionRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        contact_flow_version_id: str = None,
        use_tian_gong: bool = None,
    ):
        self.instance_id = instance_id
        self.contact_flow_version_id = contact_flow_version_id
        self.use_tian_gong = use_tian_gong

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.contact_flow_version_id is not None:
            result['ContactFlowVersionId'] = self.contact_flow_version_id
        if self.use_tian_gong is not None:
            result['UseTianGong'] = self.use_tian_gong
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ContactFlowVersionId') is not None:
            self.contact_flow_version_id = m.get('ContactFlowVersionId')
        if m.get('UseTianGong') is not None:
            self.use_tian_gong = m.get('UseTianGong')
        return self


class PublishContactFlowVersionResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishContactFlowVersionResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PublishContactFlowVersionResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishContactFlowVersionResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishPredictiveJobGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
        skill_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id
        self.skill_group_id = skill_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        return self


class PublishPredictiveJobGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishPredictiveJobGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PublishPredictiveJobGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishPredictiveJobGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class PublishSurveyRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        scenario_id: str = None,
        survey_id: str = None,
    ):
        self.instance_id = instance_id
        self.scenario_id = scenario_id
        self.survey_id = survey_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.survey_id is not None:
            result['SurveyId'] = self.survey_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('SurveyId') is not None:
            self.survey_id = m.get('SurveyId')
        return self


class PublishSurveyResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class PublishSurveyResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: PublishSurveyResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = PublishSurveyResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RefreshTokenRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
    ):
        self.instance_id = instance_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        return self


class RefreshTokenResponseBodyToken(TeaModel):
    def __init__(
        self,
        signature: str = None,
        sign_data: str = None,
    ):
        self.signature = signature
        self.sign_data = sign_data

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.sign_data is not None:
            result['SignData'] = self.sign_data
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('SignData') is not None:
            self.sign_data = m.get('SignData')
        return self


class RefreshTokenResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        token: RefreshTokenResponseBodyToken = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.token = token
        self.code = code
        self.success = success

    def validate(self):
        if self.token:
            self.token.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.token is not None:
            result['Token'] = self.token.to_map()
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Token') is not None:
            temp_model = RefreshTokenResponseBodyToken()
            self.token = temp_model.from_map(m['Token'])
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RefreshTokenResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: RefreshTokenResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RefreshTokenResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemovePhoneNumberRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        phone_number_id: str = None,
    ):
        self.instance_id = instance_id
        self.phone_number_id = phone_number_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_number_id is not None:
            result['PhoneNumberId'] = self.phone_number_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumberId') is not None:
            self.phone_number_id = m.get('PhoneNumberId')
        return self


class RemovePhoneNumberResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemovePhoneNumberResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: RemovePhoneNumberResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RemovePhoneNumberResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveUsersRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class RemoveUsersResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveUsersResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: RemoveUsersResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RemoveUsersResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RemoveUsersFromSkillGroupRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        user_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class RemoveUsersFromSkillGroupResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RemoveUsersFromSkillGroupResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: RemoveUsersFromSkillGroupResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RemoveUsersFromSkillGroupResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class RequestLoginInfoRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        user_id: str = None,
    ):
        self.instance_id = instance_id
        self.user_id = user_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.user_id is not None:
            result['UserId'] = self.user_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('UserId') is not None:
            self.user_id = m.get('UserId')
        return self


class RequestLoginInfoResponseBodyLoginInfoRolesRole(TeaModel):
    def __init__(
        self,
        role_description: str = None,
        instance_id: str = None,
        role_name: str = None,
        role_id: str = None,
    ):
        self.role_description = role_description
        self.instance_id = instance_id
        self.role_name = role_name
        self.role_id = role_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.role_description is not None:
            result['RoleDescription'] = self.role_description
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.role_name is not None:
            result['RoleName'] = self.role_name
        if self.role_id is not None:
            result['RoleId'] = self.role_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RoleDescription') is not None:
            self.role_description = m.get('RoleDescription')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RoleName') is not None:
            self.role_name = m.get('RoleName')
        if m.get('RoleId') is not None:
            self.role_id = m.get('RoleId')
        return self


class RequestLoginInfoResponseBodyLoginInfoRoles(TeaModel):
    def __init__(
        self,
        role: List[RequestLoginInfoResponseBodyLoginInfoRolesRole] = None,
    ):
        self.role = role

    def validate(self):
        if self.role:
            for k in self.role:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        result['Role'] = []
        if self.role is not None:
            for k in self.role:
                result['Role'].append(k.to_map() if k else None)
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        self.role = []
        if m.get('Role') is not None:
            for k in m.get('Role'):
                temp_model = RequestLoginInfoResponseBodyLoginInfoRolesRole()
                self.role.append(temp_model.from_map(k))
        return self


class RequestLoginInfoResponseBodyLoginInfo(TeaModel):
    def __init__(
        self,
        display_name: str = None,
        signature: str = None,
        extension: str = None,
        sign_data: str = None,
        phone_number: str = None,
        region: str = None,
        agent_server_url: str = None,
        roles: RequestLoginInfoResponseBodyLoginInfoRoles = None,
        user_name: str = None,
        web_rtc_url: str = None,
        tenant_id: str = None,
    ):
        self.display_name = display_name
        self.signature = signature
        self.extension = extension
        self.sign_data = sign_data
        self.phone_number = phone_number
        self.region = region
        self.agent_server_url = agent_server_url
        self.roles = roles
        self.user_name = user_name
        self.web_rtc_url = web_rtc_url
        self.tenant_id = tenant_id

    def validate(self):
        if self.roles:
            self.roles.validate()

    def to_map(self):
        result = dict()
        if self.display_name is not None:
            result['DisplayName'] = self.display_name
        if self.signature is not None:
            result['Signature'] = self.signature
        if self.extension is not None:
            result['Extension'] = self.extension
        if self.sign_data is not None:
            result['SignData'] = self.sign_data
        if self.phone_number is not None:
            result['PhoneNumber'] = self.phone_number
        if self.region is not None:
            result['Region'] = self.region
        if self.agent_server_url is not None:
            result['AgentServerUrl'] = self.agent_server_url
        if self.roles is not None:
            result['Roles'] = self.roles.to_map()
        if self.user_name is not None:
            result['UserName'] = self.user_name
        if self.web_rtc_url is not None:
            result['WebRtcUrl'] = self.web_rtc_url
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('DisplayName') is not None:
            self.display_name = m.get('DisplayName')
        if m.get('Signature') is not None:
            self.signature = m.get('Signature')
        if m.get('Extension') is not None:
            self.extension = m.get('Extension')
        if m.get('SignData') is not None:
            self.sign_data = m.get('SignData')
        if m.get('PhoneNumber') is not None:
            self.phone_number = m.get('PhoneNumber')
        if m.get('Region') is not None:
            self.region = m.get('Region')
        if m.get('AgentServerUrl') is not None:
            self.agent_server_url = m.get('AgentServerUrl')
        if m.get('Roles') is not None:
            temp_model = RequestLoginInfoResponseBodyLoginInfoRoles()
            self.roles = temp_model.from_map(m['Roles'])
        if m.get('UserName') is not None:
            self.user_name = m.get('UserName')
        if m.get('WebRtcUrl') is not None:
            self.web_rtc_url = m.get('WebRtcUrl')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class RequestLoginInfoResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        login_info: RequestLoginInfoResponseBodyLoginInfo = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.login_info = login_info
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.login_info:
            self.login_info.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.login_info is not None:
            result['LoginInfo'] = self.login_info.to_map()
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('LoginInfo') is not None:
            temp_model = RequestLoginInfoResponseBodyLoginInfo()
            self.login_info = temp_model.from_map(m['LoginInfo'])
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class RequestLoginInfoResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: RequestLoginInfoResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = RequestLoginInfoResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResetUserStatusRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        ram_id_list: List[int] = None,
    ):
        self.instance_id = instance_id
        self.ram_id_list = ram_id_list

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.ram_id_list is not None:
            result['RamIdList'] = self.ram_id_list
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RamIdList') is not None:
            self.ram_id_list = m.get('RamIdList')
        return self


class ResetUserStatusResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResetUserStatusResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ResetUserStatusResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ResetUserStatusResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumeJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        all: bool = None,
        scenario_id: str = None,
        group_id: str = None,
        job_id: List[str] = None,
        job_reference_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.all = all
        self.scenario_id = scenario_id
        self.group_id = group_id
        self.job_id = job_id
        self.job_reference_id = job_reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.all is not None:
            result['All'] = self.all
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        return self


class ResumeJobsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumeJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ResumeJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ResumeJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class ResumePredictiveJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        all: bool = None,
        job_group_id: str = None,
        job_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.all = all
        self.job_group_id = job_group_id
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.all is not None:
            result['All'] = self.all
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class ResumePredictiveJobsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class ResumePredictiveJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: ResumePredictiveJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = ResumePredictiveJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveStatsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        record_time: int = None,
        call_id: str = None,
        caller_number: str = None,
        callee_number: str = None,
        call_start_time: int = None,
        stats: str = None,
        uid: str = None,
        tenant_id: str = None,
    ):
        self.instance_id = instance_id
        self.record_time = record_time
        self.call_id = call_id
        self.caller_number = caller_number
        self.callee_number = callee_number
        self.call_start_time = call_start_time
        self.stats = stats
        self.uid = uid
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.record_time is not None:
            result['RecordTime'] = self.record_time
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.caller_number is not None:
            result['CallerNumber'] = self.caller_number
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.call_start_time is not None:
            result['CallStartTime'] = self.call_start_time
        if self.stats is not None:
            result['Stats'] = self.stats
        if self.uid is not None:
            result['Uid'] = self.uid
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordTime') is not None:
            self.record_time = m.get('RecordTime')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallerNumber') is not None:
            self.caller_number = m.get('CallerNumber')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CallStartTime') is not None:
            self.call_start_time = m.get('CallStartTime')
        if m.get('Stats') is not None:
            self.stats = m.get('Stats')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class SaveStatsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        row_count: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.row_count = row_count
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveStatsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SaveStatsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SaveStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SaveWebRTCStatsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        record_time: int = None,
        call_id: str = None,
        caller_number: str = None,
        callee_number: str = None,
        call_start_time: int = None,
        stats: str = None,
        uid: str = None,
        tenant_id: str = None,
    ):
        self.instance_id = instance_id
        self.record_time = record_time
        self.call_id = call_id
        self.caller_number = caller_number
        self.callee_number = callee_number
        self.call_start_time = call_start_time
        self.stats = stats
        self.uid = uid
        self.tenant_id = tenant_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.record_time is not None:
            result['RecordTime'] = self.record_time
        if self.call_id is not None:
            result['CallId'] = self.call_id
        if self.caller_number is not None:
            result['CallerNumber'] = self.caller_number
        if self.callee_number is not None:
            result['CalleeNumber'] = self.callee_number
        if self.call_start_time is not None:
            result['CallStartTime'] = self.call_start_time
        if self.stats is not None:
            result['Stats'] = self.stats
        if self.uid is not None:
            result['Uid'] = self.uid
        if self.tenant_id is not None:
            result['TenantId'] = self.tenant_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('RecordTime') is not None:
            self.record_time = m.get('RecordTime')
        if m.get('CallId') is not None:
            self.call_id = m.get('CallId')
        if m.get('CallerNumber') is not None:
            self.caller_number = m.get('CallerNumber')
        if m.get('CalleeNumber') is not None:
            self.callee_number = m.get('CalleeNumber')
        if m.get('CallStartTime') is not None:
            self.call_start_time = m.get('CallStartTime')
        if m.get('Stats') is not None:
            self.stats = m.get('Stats')
        if m.get('Uid') is not None:
            self.uid = m.get('Uid')
        if m.get('TenantId') is not None:
            self.tenant_id = m.get('TenantId')
        return self


class SaveWebRTCStatsResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        row_count: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.row_count = row_count
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.row_count is not None:
            result['RowCount'] = self.row_count
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('RowCount') is not None:
            self.row_count = m.get('RowCount')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SaveWebRTCStatsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SaveWebRTCStatsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SaveWebRTCStatsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SendPredefinedShortMessageRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        phone_numbers: str = None,
        config_id: int = None,
        template_param: str = None,
    ):
        self.instance_id = instance_id
        self.phone_numbers = phone_numbers
        self.config_id = config_id
        self.template_param = template_param

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.phone_numbers is not None:
            result['PhoneNumbers'] = self.phone_numbers
        if self.config_id is not None:
            result['ConfigId'] = self.config_id
        if self.template_param is not None:
            result['TemplateParam'] = self.template_param
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('PhoneNumbers') is not None:
            self.phone_numbers = m.get('PhoneNumbers')
        if m.get('ConfigId') is not None:
            self.config_id = m.get('ConfigId')
        if m.get('TemplateParam') is not None:
            self.template_param = m.get('TemplateParam')
        return self


class SendPredefinedShortMessageResponseBody(TeaModel):
    def __init__(
        self,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        biz_id: str = None,
        success: bool = None,
    ):
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.biz_id = biz_id
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.biz_id is not None:
            result['BizId'] = self.biz_id
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('BizId') is not None:
            self.biz_id = m.get('BizId')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SendPredefinedShortMessageResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SendPredefinedShortMessageResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SendPredefinedShortMessageResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartBack2BackCallRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        workflow_id: str = None,
        call_center_number: str = None,
        caller: str = None,
        callee: str = None,
    ):
        self.instance_id = instance_id
        self.workflow_id = workflow_id
        self.call_center_number = call_center_number
        self.caller = caller
        self.callee = callee

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.workflow_id is not None:
            result['WorkflowId'] = self.workflow_id
        if self.call_center_number is not None:
            result['CallCenterNumber'] = self.call_center_number
        if self.caller is not None:
            result['Caller'] = self.caller
        if self.callee is not None:
            result['Callee'] = self.callee
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('WorkflowId') is not None:
            self.workflow_id = m.get('WorkflowId')
        if m.get('CallCenterNumber') is not None:
            self.call_center_number = m.get('CallCenterNumber')
        if m.get('Caller') is not None:
            self.caller = m.get('Caller')
        if m.get('Callee') is not None:
            self.callee = m.get('Callee')
        return self


class StartBack2BackCallResponseBody(TeaModel):
    def __init__(
        self,
        status_desc: str = None,
        task_id: str = None,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        status_code: str = None,
        code: str = None,
        success: bool = None,
        time_stamp: str = None,
    ):
        self.status_desc = status_desc
        self.task_id = task_id
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.status_code = status_code
        self.code = code
        self.success = success
        self.time_stamp = time_stamp

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.status_desc is not None:
            result['StatusDesc'] = self.status_desc
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.status_code is not None:
            result['StatusCode'] = self.status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        if self.time_stamp is not None:
            result['TimeStamp'] = self.time_stamp
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('StatusDesc') is not None:
            self.status_desc = m.get('StatusDesc')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('StatusCode') is not None:
            self.status_code = m.get('StatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        if m.get('TimeStamp') is not None:
            self.time_stamp = m.get('TimeStamp')
        return self


class StartBack2BackCallResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: StartBack2BackCallResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = StartBack2BackCallResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class StartJobRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        group_id: str = None,
        scenario_id: str = None,
        job_json: str = None,
        self_hosted_call_center: bool = None,
        calling_number: List[str] = None,
    ):
        self.instance_id = instance_id
        self.group_id = group_id
        self.scenario_id = scenario_id
        self.job_json = job_json
        self.self_hosted_call_center = self_hosted_call_center
        self.calling_number = calling_number

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.job_json is not None:
            result['JobJson'] = self.job_json
        if self.self_hosted_call_center is not None:
            result['SelfHostedCallCenter'] = self.self_hosted_call_center
        if self.calling_number is not None:
            result['CallingNumber'] = self.calling_number
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('JobJson') is not None:
            self.job_json = m.get('JobJson')
        if m.get('SelfHostedCallCenter') is not None:
            self.self_hosted_call_center = m.get('SelfHostedCallCenter')
        if m.get('CallingNumber') is not None:
            self.calling_number = m.get('CallingNumber')
        return self


class StartJobResponseBodyTaskIds(TeaModel):
    def __init__(
        self,
        key: str = None,
        value: str = None,
    ):
        self.key = key
        self.value = value

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.key is not None:
            result['Key'] = self.key
        if self.value is not None:
            result['Value'] = self.value
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Key') is not None:
            self.key = m.get('Key')
        if m.get('Value') is not None:
            self.value = m.get('Value')
        return self


class StartJobResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        task_ids: List[StartJobResponseBodyTaskIds] = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.task_ids = task_ids
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        if self.task_ids:
            for k in self.task_ids:
                if k:
                    k.validate()

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        result['TaskIds'] = []
        if self.task_ids is not None:
            for k in self.task_ids:
                result['TaskIds'].append(k.to_map() if k else None)
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        self.task_ids = []
        if m.get('TaskIds') is not None:
            for k in m.get('TaskIds'):
                temp_model = StartJobResponseBodyTaskIds()
                self.task_ids.append(temp_model.from_map(k))
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class StartJobResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: StartJobResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = StartJobResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitBatchJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_group_id: str = None,
    ):
        self.instance_id = instance_id
        self.job_group_id = job_group_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        return self


class SubmitBatchJobsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitBatchJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SubmitBatchJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SubmitBatchJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SubmitCabRecordingRequest(TeaModel):
    def __init__(
        self,
        instance_owner_id: int = None,
        instance_id: str = None,
        task_id: str = None,
        resource_recording: str = None,
        merged_recording: str = None,
    ):
        self.instance_owner_id = instance_owner_id
        self.instance_id = instance_id
        self.task_id = task_id
        self.resource_recording = resource_recording
        self.merged_recording = merged_recording

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.resource_recording is not None:
            result['ResourceRecording'] = self.resource_recording
        if self.merged_recording is not None:
            result['MergedRecording'] = self.merged_recording
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('ResourceRecording') is not None:
            self.resource_recording = m.get('ResourceRecording')
        if m.get('MergedRecording') is not None:
            self.merged_recording = m.get('MergedRecording')
        return self


class SubmitCabRecordingResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SubmitCabRecordingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SubmitCabRecordingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SubmitCabRecordingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        all: bool = None,
        scenario_id: str = None,
        group_id: str = None,
        job_id: List[str] = None,
        job_reference_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.all = all
        self.scenario_id = scenario_id
        self.group_id = group_id
        self.job_id = job_id
        self.job_reference_id = job_reference_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.all is not None:
            result['All'] = self.all
        if self.scenario_id is not None:
            result['ScenarioId'] = self.scenario_id
        if self.group_id is not None:
            result['GroupId'] = self.group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.job_reference_id is not None:
            result['JobReferenceId'] = self.job_reference_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('ScenarioId') is not None:
            self.scenario_id = m.get('ScenarioId')
        if m.get('GroupId') is not None:
            self.group_id = m.get('GroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('JobReferenceId') is not None:
            self.job_reference_id = m.get('JobReferenceId')
        return self


class SuspendJobsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SuspendJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SuspendJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class SuspendPredictiveJobsRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        skill_group_id: str = None,
        all: bool = None,
        job_group_id: str = None,
        job_id: List[str] = None,
    ):
        self.instance_id = instance_id
        self.skill_group_id = skill_group_id
        self.all = all
        self.job_group_id = job_group_id
        self.job_id = job_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.skill_group_id is not None:
            result['SkillGroupId'] = self.skill_group_id
        if self.all is not None:
            result['All'] = self.all
        if self.job_group_id is not None:
            result['JobGroupId'] = self.job_group_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('SkillGroupId') is not None:
            self.skill_group_id = m.get('SkillGroupId')
        if m.get('All') is not None:
            self.all = m.get('All')
        if m.get('JobGroupId') is not None:
            self.job_group_id = m.get('JobGroupId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        return self


class SuspendPredictiveJobsResponseBody(TeaModel):
    def __init__(
        self,
        message: str = None,
        request_id: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.message = message
        self.request_id = request_id
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.message is not None:
            result['Message'] = self.message
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class SuspendPredictiveJobsResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: SuspendPredictiveJobsResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = SuspendPredictiveJobsResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


class TaskPreparingRequest(TeaModel):
    def __init__(
        self,
        instance_id: str = None,
        job_id: str = None,
        instance_owner_id: int = None,
    ):
        self.instance_id = instance_id
        self.job_id = job_id
        self.instance_owner_id = instance_owner_id

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.instance_id is not None:
            result['InstanceId'] = self.instance_id
        if self.job_id is not None:
            result['JobId'] = self.job_id
        if self.instance_owner_id is not None:
            result['InstanceOwnerId'] = self.instance_owner_id
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('InstanceId') is not None:
            self.instance_id = m.get('InstanceId')
        if m.get('JobId') is not None:
            self.job_id = m.get('JobId')
        if m.get('InstanceOwnerId') is not None:
            self.instance_owner_id = m.get('InstanceOwnerId')
        return self


class TaskPreparingResponseBody(TeaModel):
    def __init__(
        self,
        task_id: str = None,
        request_id: str = None,
        message: str = None,
        http_status_code: int = None,
        code: str = None,
        success: bool = None,
    ):
        self.task_id = task_id
        self.request_id = request_id
        self.message = message
        self.http_status_code = http_status_code
        self.code = code
        self.success = success

    def validate(self):
        pass

    def to_map(self):
        result = dict()
        if self.task_id is not None:
            result['TaskId'] = self.task_id
        if self.request_id is not None:
            result['RequestId'] = self.request_id
        if self.message is not None:
            result['Message'] = self.message
        if self.http_status_code is not None:
            result['HttpStatusCode'] = self.http_status_code
        if self.code is not None:
            result['Code'] = self.code
        if self.success is not None:
            result['Success'] = self.success
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('TaskId') is not None:
            self.task_id = m.get('TaskId')
        if m.get('RequestId') is not None:
            self.request_id = m.get('RequestId')
        if m.get('Message') is not None:
            self.message = m.get('Message')
        if m.get('HttpStatusCode') is not None:
            self.http_status_code = m.get('HttpStatusCode')
        if m.get('Code') is not None:
            self.code = m.get('Code')
        if m.get('Success') is not None:
            self.success = m.get('Success')
        return self


class TaskPreparingResponse(TeaModel):
    def __init__(
        self,
        headers: Dict[str, str] = None,
        body: TaskPreparingResponseBody = None,
    ):
        self.headers = headers
        self.body = body

    def validate(self):
        self.validate_required(self.headers, 'headers')
        self.validate_required(self.body, 'body')
        if self.body:
            self.body.validate()

    def to_map(self):
        result = dict()
        if self.headers is not None:
            result['headers'] = self.headers
        if self.body is not None:
            result['body'] = self.body.to_map()
        return result

    def from_map(self, m: dict = None):
        m = m or dict()
        if m.get('headers') is not None:
            self.headers = m.get('headers')
        if m.get('body') is not None:
            temp_model = TaskPreparingResponseBody()
            self.body = temp_model.from_map(m['body'])
        return self


