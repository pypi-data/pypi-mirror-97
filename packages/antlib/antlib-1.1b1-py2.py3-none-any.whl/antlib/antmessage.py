# Copyright 2019 Garmin Canada, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''
Python version of the constants from the antmessage.h header
used by ANTLIB.
'''

import ctypes as ct

import antlib.antdefines as antdef

MESG_TX_SYNC = 0xA4
MESG_RX_SYNC = 0xA5
MESG_SYNC_SIZE = 1
MESG_SIZE_SIZE = 1
MESG_ID_SIZE = 1
MESG_CHANNEL_NUM_SIZE = 1
MESG_EXT_MESG_BF_SIZE = 1
MESG_CHECKSUM_SIZE = 1
MESG_DATA_SIZE = 9
MESG_ANT_MAX_PAYLOAD_SIZE = antdef.ANT_STANDARD_DATA_PAYLOAD_SIZE
MESG_MAX_EXT_DATA_SIZE = (antdef.ANT_EXT_MESG_DEVICE_ID_FIELD_SIZE + antdef.ANT_EXT_STRING_SIZE)
MESG_MAX_DATA_SIZE = (MESG_ANT_MAX_PAYLOAD_SIZE + MESG_EXT_MESG_BF_SIZE + MESG_MAX_EXT_DATA_SIZE)
MESG_MAX_SIZE_VALUE = (MESG_MAX_DATA_SIZE + MESG_CHANNEL_NUM_SIZE)
MESG_BUFFER_SIZE = (MESG_SIZE_SIZE + MESG_ID_SIZE + MESG_CHANNEL_NUM_SIZE + MESG_MAX_DATA_SIZE + MESG_CHECKSUM_SIZE)
MESG_FRAMED_SIZE = (MESG_ID_SIZE + MESG_CHANNEL_NUM_SIZE + MESG_MAX_DATA_SIZE)
MESG_HEADER_SIZE = (MESG_SYNC_SIZE + MESG_SIZE_SIZE + MESG_ID_SIZE)
MESG_FRAME_SIZE = (MESG_HEADER_SIZE + MESG_CHECKSUM_SIZE)
MESG_MAX_SIZE = (MESG_MAX_DATA_SIZE + MESG_FRAME_SIZE)
MESG_SIZE_OFFSET = (MESG_SYNC_SIZE)
MESG_ID_OFFSET = (MESG_SYNC_SIZE + MESG_SIZE_SIZE)
MESG_DATA_OFFSET = (MESG_HEADER_SIZE)
MESG_RECOMMENDED_BUFFER_SIZE = 64
MESG_INVALID_ID = 0x00
MESG_EVENT_ID = 0x01
MESG_VERSION_ID = 0x3E
MESG_RESPONSE_EVENT_ID = 0x40
MESG_UNASSIGN_CHANNEL_ID = 0x41
MESG_ASSIGN_CHANNEL_ID = 0x42
MESG_CHANNEL_MESG_PERIOD_ID = 0x43
MESG_CHANNEL_SEARCH_TIMEOUT_ID = 0x44
MESG_CHANNEL_RADIO_FREQ_ID = 0x45
MESG_NETWORK_KEY_ID = 0x46
MESG_RADIO_TX_POWER_ID = 0x47
MESG_RADIO_CW_MODE_ID = 0x48
MESG_SYSTEM_RESET_ID = 0x4A
MESG_OPEN_CHANNEL_ID = 0x4B
MESG_CLOSE_CHANNEL_ID = 0x4C
MESG_REQUEST_ID = 0x4D
MESG_BROADCAST_DATA_ID = 0x4E
MESG_ACKNOWLEDGED_DATA_ID = 0x4F
MESG_BURST_DATA_ID = 0x50
MESG_CHANNEL_ID_ID = 0x51
MESG_CHANNEL_STATUS_ID = 0x52
MESG_RADIO_CW_INIT_ID = 0x53
MESG_CAPABILITIES_ID = 0x54
MESG_STACKLIMIT_ID = 0x55
MESG_SCRIPT_DATA_ID = 0x56
MESG_SCRIPT_CMD_ID = 0x57
MESG_ID_LIST_ADD_ID = 0x59
MESG_CRYPTO_ID_LIST_ADD_ID = 0x59
MESG_ID_LIST_CONFIG_ID = 0x5A
MESG_CRYPTO_ID_LIST_CONFIG_ID = 0x5A
MESG_OPEN_RX_SCAN_ID = 0x5B
MESG_EXT_CHANNEL_RADIO_FREQ_ID = 0x5C
MESG_EXT_BROADCAST_DATA_ID = 0x5D
MESG_EXT_ACKNOWLEDGED_DATA_ID = 0x5E
MESG_EXT_BURST_DATA_ID = 0x5F
MESG_CHANNEL_RADIO_TX_POWER_ID = 0x60
MESG_GET_SERIAL_NUM_ID = 0x61
MESG_GET_TEMP_CAL_ID = 0x62
MESG_SET_LP_SEARCH_TIMEOUT_ID = 0x63
MESG_SET_TX_SEARCH_ON_NEXT_ID = 0x64
MESG_SERIAL_NUM_SET_CHANNEL_ID_ID = 0x65
MESG_RX_EXT_MESGS_ENABLE_ID = 0x66
MESG_RADIO_CONFIG_ALWAYS_ID = 0x67
MESG_ENABLE_LED_FLASH_ID = 0x68
MESG_XTAL_ENABLE_ID = 0x6D
MESG_ANTLIB_CONFIG_ID = 0x6E
MESG_STARTUP_MESG_ID = 0x6F
MESG_AUTO_FREQ_CONFIG_ID = 0x70
MESG_PROX_SEARCH_CONFIG_ID = 0x71
MESG_ADV_BURST_DATA_ID = 0x72
MESG_EVENT_BUFFERING_CONFIG_ID = 0x74
MESG_SET_SEARCH_CH_PRIORITY_ID = 0x75
MESG_HIGH_DUTY_SEARCH_MODE_ID = 0x77
MESG_CONFIG_ADV_BURST_ID = 0x78
MESG_EVENT_FILTER_CONFIG_ID = 0x79
MESG_SDU_CONFIG_ID = 0x7A
MESG_SDU_SET_MASK_ID = 0x7B
MESG_USER_CONFIG_PAGE_ID = 0x7C
MESG_ENCRYPT_ENABLE_ID = 0x7D
MESG_SET_CRYPTO_KEY_ID = 0x7E
MESG_SET_CRYPTO_INFO_ID = 0x7F
MESG_CUBE_CMD_ID = 0x80
MESG_ACTIVE_SEARCH_SHARING_ID = 0x81
MESG_NVM_CRYPTO_KEY_OPS_ID = 0x83
MESG_GET_PIN_DIODE_CONTROL_ID = 0x8D
MESG_PIN_DIODE_CONTROL_ID = 0x8E
MESG_FIT1_SET_AGC_ID = 0x8F
MESG_FIT1_SET_EQUIP_STATE_ID = 0x91
MESG_SET_CHANNEL_INPUT_MASK_ID = 0x90
MESG_SET_CHANNEL_DATA_TYPE_ID = 0x91
MESG_READ_PINS_FOR_SECT_ID = 0x92
MESG_TIMER_SELECT_ID = 0x93
MESG_ATOD_SETTINGS_ID = 0x94
MESG_SET_SHARED_ADDRESS_ID = 0x95
MESG_ATOD_EXTERNAL_ENABLE_ID = 0x96
MESG_ATOD_PIN_SETUP_ID = 0x97
MESG_SETUP_ALARM_ID = 0x98
MESG_ALARM_VARIABLE_MODIFY_TEST_ID = 0x99
MESG_PARTIAL_RESET_ID = 0x9A
MESG_OVERWRITE_TEMP_CAL_ID = 0x9B
MESG_SERIAL_PASSTHRU_SETTINGS_ID = 0x9C
MESG_BIST_ID = 0xAA
MESG_UNLOCK_INTERFACE_ID = 0xAD
MESG_SERIAL_ERROR_ID = 0xAE
MESG_SET_ID_STRING_ID = 0xAF
MESG_PORT_GET_IO_STATE_ID = 0xB4
MESG_PORT_SET_IO_STATE_ID = 0xB5
MESG_RSSI_ID = 0xC0
MESG_RSSI_BROADCAST_DATA_ID = 0xC1
MESG_RSSI_ACKNOWLEDGED_DATA_ID = 0xC2
MESG_RSSI_BURST_DATA_ID = 0xC3
MESG_RSSI_SEARCH_THRESHOLD_ID = 0xC4
MESG_SLEEP_ID = 0xC5
MESG_GET_GRMN_ESN_ID = 0xC6
MESG_SET_USB_INFO_ID = 0xC7
MESG_HCI_COMMAND_COMPLETE = 0xC8
MESG_EXT_ID_0 = 0xE0
MESG_EXT_ID_1 = 0xE1
MESG_EXT_ID_2 = 0xE2
MESG_EXT_RESPONSE_ID = 0xE000
MESG_EXT_REQUEST_ID = 0xE100
MESG_FS_INIT_MEMORY_ID = 0xE200
MESG_FS_FORMAT_MEMORY_ID = 0xE201
MESG_FS_GET_USED_SPACE_ID = 0xE202
MESG_FS_GET_FREE_SPACE_ID = 0xE203
MESG_FS_FIND_FILE_INDEX_ID = 0xE204
MESG_FS_DIRECTORY_READ_ABSOLUTE_ID = 0xE205
MESG_FS_DIRECTORY_READ_ENTRY_ID = 0xE206
MESG_FS_DIRECTORY_SAVE_ID = 0xE207
MESG_FS_DIRECTORY_GET_SIZE_ID = 0xE208
MESG_FS_DIRECTORY_REBUILD_ID = 0xE209
MESG_FS_FILE_CREATE_ID = 0xE20A
MESG_FS_FILE_OPEN_ID = 0xE20B
MESG_FS_FILE_DELETE_ID = 0xE20C
MESG_FS_FILE_CLOSE_ID = 0xE20D
MESG_FS_FILE_READ_ABSOLUTE_ID = 0xE20E
MESG_FS_FILE_READ_RELATIVE_ID = 0xE20F
MESG_FS_FILE_WRITE_ABSOLUTE_ID = 0xE210
MESG_FS_FILE_WRITE_RELATIVE_ID = 0xE211
MESG_FS_FILE_SET_SPECIFIC_FLAGS_ID = 0xE212
MESG_FS_FILE_GET_SIZE_ID = 0xE213
MESG_FS_FILE_GET_SPECIFIC_FILE_FLAGS_ID = 0xE214
MESG_FS_FILE_GET_SIZE_IN_MEM_ID = 0xE215
MESG_FS_DIRECTORY_READ_LOCK_ID = 0xE216
MESG_FS_FILE_SET_GENERAL_FLAGS_ID = 0xE21E
MESG_FS_DIRECTORY_WRITE_ABSOLUTE_ID = 0xE21F
MESG_MEMDEV_EEPROM_INIT_ID = 0xE220
MESG_MEMDEV_FLASH_INIT_ID = 0xE221
MESG_FS_ANTFS_EVENT_ID = 0xE230
MESG_FS_ANTFS_OPEN_ID = 0xE231
MESG_FS_ANTFS_CLOSE_ID = 0xE232
MESG_FS_ANTFS_CONFIG_BEACON_ID = 0xE233
MESG_FS_ANTFS_SET_AUTH_STRING_ID = 0xE234
MESG_FS_ANTFS_SET_BEACON_STATE_ID = 0xE235
MESG_FS_ANTFS_PAIR_RESPONSE_ID = 0xE236
MESG_FS_ANTFS_SET_LINK_FREQ_ID = 0xE237
MESG_FS_ANTFS_SET_BEACON_TIMEOUT_ID = 0xE238
MESG_FS_ANTFS_SET_PAIRING_TIMEOUT_ID = 0xE239
MESG_FS_ANTFS_REMOTE_FILE_CREATE_EN_ID = 0xE23A
MESG_FS_ANTFS_GET_CMD_PIPE_ID = 0xE23B
MESG_FS_ANTFS_SET_CMD_PIPE_ID = 0xE23C
MESG_FS_SYSTEM_TIME_ID = 0xE23D
MESG_FS_ANTFS_SET_ANTFS_STATE_ID = 0xE23E
MESG_FS_CRYPTO_ADD_USER_KEY_INDEX_ID = 0xE245
MESG_FS_CRYPTO_SET_USER_KEY_INDEX_ID = 0xE246
MESG_FS_CRYPTO_SET_USER_KEY_VAL_ID = 0xE247
MESG_FS_FIT_FILE_INTEGRITY_CHECK_ID = 0xE250
MESG_INVALID_SIZE = 0
MESG_VERSION_SIZE = 13
MESG_RESPONSE_EVENT_SIZE = 3
MESG_CHANNEL_STATUS_SIZE = 2
MESG_UNASSIGN_CHANNEL_SIZE = 1
MESG_ASSIGN_CHANNEL_SIZE = 3
MESG_CHANNEL_ID_SIZE = 5
MESG_CHANNEL_MESG_PERIOD_SIZE = 3
MESG_CHANNEL_SEARCH_TIMEOUT_SIZE = 2
MESG_CHANNEL_RADIO_FREQ_SIZE = 2
MESG_CHANNEL_RADIO_TX_POWER_SIZE = 2
MESG_NETWORK_KEY_SIZE = 9
MESG_RADIO_TX_POWER_SIZE = 2
MESG_RADIO_CW_MODE_SIZE = 3
MESG_RADIO_CW_INIT_SIZE = 1
MESG_SYSTEM_RESET_SIZE = 1
MESG_OPEN_CHANNEL_SIZE = 1
MESG_CLOSE_CHANNEL_SIZE = 1
MESG_REQUEST_SIZE = 2
MESG_REQUEST_USER_NVM_SIZE = 5
MESG_CAPABILITIES_SIZE = 8
MESG_STACKLIMIT_SIZE = 2
MESG_SCRIPT_DATA_SIZE = 10
MESG_SCRIPT_CMD_SIZE = 3
MESG_ID_LIST_ADD_SIZE = 6
MESG_ID_LIST_CONFIG_SIZE = 3
MESG_OPEN_RX_SCAN_SIZE = 1
MESG_EXT_CHANNEL_RADIO_FREQ_SIZE = 3
MESG_RADIO_CONFIG_ALWAYS_SIZE = 2
MESG_RX_EXT_MESGS_ENABLE_SIZE = 2
MESG_SET_TX_SEARCH_ON_NEXT_SIZE = 2
MESG_SET_LP_SEARCH_TIMEOUT_SIZE = 2
MESG_SERIAL_NUM_SET_CHANNEL_ID_SIZE = 3
MESG_ENABLE_LED_FLASH_SIZE = 2
MESG_GET_SERIAL_NUM_SIZE = 4
MESG_GET_TEMP_CAL_SIZE = 4
MESG_CONFIG_ADV_BURST_SIZE = 9
MESG_CONFIG_ADV_BURST_SIZE_EXT = 12
MESG_ANTLIB_CONFIG_SIZE = 2
MESG_XTAL_ENABLE_SIZE = 1
MESG_STARTUP_MESG_SIZE = 1
MESG_AUTO_FREQ_CONFIG_SIZE = 4
MESG_PROX_SEARCH_CONFIG_SIZE = 2
MESG_EVENT_BUFFERING_CONFIG_SIZE = 6
MESG_EVENT_FILTER_CONFIG_SIZE = 3
MESG_HIGH_DUTY_SEARCH_MODE_SIZE = 3
MESG_SDU_CONFIG_SIZE = 3
MESG_SDU_SET_MASK_SIZE = 9
MESG_USER_CONFIG_PAGE_SIZE = 3
MESG_ACTIVE_SEARCH_SHARING_SIZE = 2
MESG_SET_SEARCH_CH_PRIORITY_SIZE = 2
MESG_ENCRYPT_ENABLE_SIZE = 4
MESG_SET_CRYPTO_KEY_SIZE = 17
MESG_SET_CRYPTO_ID_SIZE = 5
MESG_SET_CRYPTO_USER_INFO_SIZE = 20
MESG_SET_CRYPTO_RNG_SEED_SIZE = 17
MESG_NVM_CRYPTO_KEY_LOAD_SIZE = 3
MESG_NVM_CRYPTO_KEY_STORE_SIZE = 18
MESG_CRYPTO_ID_LIST_ADD_SIZE = 6
MESG_CRYPTO_ID_LIST_CONFIG_SIZE = 3
MESG_GET_PIN_DIODE_CONTROL_SIZE = 1
MESG_PIN_DIODE_CONTROL_ID_SIZE = 2
MESG_FIT1_SET_EQUIP_STATE_SIZE = 1
MESG_FIT1_SET_AGC_SIZE = 1
MESG_BIST_SIZE = 6
MESG_UNLOCK_INTERFACE_SIZE = 1
MESG_SET_SHARED_ADDRESS_SIZE = 3
MESG_GET_GRMN_ESN_SIZE = 5
MESG_PORT_SET_IO_STATE_SIZE = 5
MESG_SLEEP_SIZE = 1
MESG_EXT_DATA_SIZE = 13
MESG_RSSI_SIZE = 5
MESG_RSSI_DATA_SIZE = 17
MESG_RSSI_RESPONSE_SIZE = 7
MESG_RSSI_SEARCH_THRESHOLD_SIZE = 2
MESG_MEMDEV_EEPROM_INIT_SIZE = 0x04
MESG_FS_INIT_MEMORY_SIZE = 0x01
MESG_FS_FORMAT_MEMORY_SIZE = 0x05
MESG_FS_DIRECTORY_SAVE_SIZE = 0x01
MESG_FS_DIRECTORY_REBUILD_SIZE = 0x01
MESG_FS_FILE_DELETE_SIZE = 0x02
MESG_FS_FILE_CLOSE_SIZE = 0x02
MESG_FS_FILE_SET_SPECIFIC_FLAGS_SIZE = 0x03
MESG_FS_DIRECTORY_READ_LOCK_SIZE = 0x02
MESG_FS_SYSTEM_TIME_SIZE = 0x05
MESG_FS_CRYPTO_ADD_USER_KEY_INDEX_SIZE = 0x34
MESG_FS_CRYPTO_SET_USER_KEY_INDEX_SIZE = 0x05
MESG_FS_CRYPTO_SET_USER_KEY_VAL_SIZE = 0x33
MESG_FS_FIT_FILE_INTEGRITY_CHECK_SIZE = 0x02
MESG_FS_ANTFS_OPEN_SIZE = 0x01
MESG_FS_ANTFS_CLOSE_SIZE = 0x01
MESG_FS_ANTFS_CONFIG_BEACON_SIZE = 0x09
MESG_FS_ANTFS_SET_AUTH_STRING_SIZE = 0x02
MESG_FS_ANTFS_SET_BEACON_STATE_SIZE = 0x02
MESG_FS_ANTFS_PAIR_RESPONSE_SIZE = 0x02
MESG_FS_ANTFS_SET_LINK_FREQ_SIZE = 0x03
MESG_FS_ANTFS_SET_BEACON_TIMEOUT_SIZE = 0x02
MESG_FS_ANTFS_SET_PAIRING_TIMEOUT_SIZE = 0x02
MESG_FS_ANTFS_REMOTE_FILE_CREATE_EN_SIZE = 0x02
MESG_FS_GET_USED_SPACE_SIZE = 0x03
MESG_FS_GET_FREE_SPACE_SIZE = 0x03
MESG_FS_FIND_FILE_INDEX_SIZE = 0x07
MESG_FS_DIRECTORY_READ_ABSOLUTE_SIZE = 0x08
MESG_FS_DIRECTORY_READ_ENTRY_SIZE = 0x05
MESG_FS_DIRECTORY_GET_SIZE_SIZE = 0x03
MESG_FS_FILE_CREATE_SIZE = 0x0B
MESG_FS_FILE_OPEN_SIZE = 0x06
MESG_FS_FILE_READ_ABSOLUTE_SIZE = 0x09
MESG_FS_FILE_READ_RELATIVE_SIZE = 0x05
MESG_FS_FILE_WRITE_ABSOLUTE_SIZE = 0x09
MESG_FS_FILE_WRITE_RELATIVE_SIZE = 0x05
MESG_FS_FILE_GET_SIZE_SIZE = 0x04
MESG_FS_FILE_GET_SIZE_IN_MEM_SIZE = 0x04
MESG_FS_FILE_GET_SPECIFIC_FILE_FLAGS_SIZE = 0x04
MESG_FS_SYSTEM_TIME_REQUEST_SIZE = 0x03
MESG_FS_ANTFS_GET_CMD_PIPE_SIZE = 0x05
MESG_FS_ANTFS_SET_CMD_PIPE_SIZE = 0x05
MESG_FS_REQUEST_RESPONSE_SIZE = 0x03


# MARSHALL_ANT_MESSAGE classes
_MARSHALL_MESG_MAX_SIZE_VALUE = 42
_ARRAY42 = ct.c_ubyte*_MARSHALL_MESG_MAX_SIZE_VALUE
_ARRAY42CHAR = ct.c_char*_MARSHALL_MESG_MAX_SIZE_VALUE

# Message/Payload Sizes
CRYPTO_ID_SIZE = 4
CRYPTO_KEY_SIZE = 16
CRYPTO_USER_DATA_SIZE = 19
NETWORK_KEY_SIZE = 8

class MarshallAntMessage(ct.Structure):
    #pylint: disable=too-few-public-methods
    '''
    Used for passing messages to the c library. Applications should not use
    this type directly, use AntMessage instead.
    '''
    _fields_ = [
        ("msgid", ct.c_ubyte),  # ucMessageID in c code
        ("data", _ARRAY42)]      # aucData in c code

    def __str__(self):
        return ('[{:02x}]'.format(self.msgid)
                + ''.join('[{:02x}]'.format(x)
                          for x in bytearray(self.data)))

class MarshallAntMessageItem(ct.Structure):
    #pylint: disable=too-few-public-methods
    '''
    Used for passing messages to the c library. Applications should not use
    this type directly, use AntMessage instead.
    '''
    _fields_ = [
        ("size", ct.c_ubyte),               # ucSize in c code
        ("message", MarshallAntMessage)]    # stANTMessage in c code

    def __init__(self, src=None):
        '''
        Params:
            src - Optional AntMessage instance to initialize data from.
        '''
        super(MarshallAntMessageItem, self).__init__()
        if src:
            self.size = len(src.data)
            self.message.msgid = src.msgid
            self.message.data[0:self.size] = src.data

    def __str__(self):
        return '[{:02x}]'.format(self.ucSize) + str(self.stANTMessage)

    def tomsg(self):
        '''
        Get an AntMessage instance representing this message.
        '''
        return AntMessage(
            self.message.msgid,
            self.message.data[0:self.size])


class AntMessage(object):
    #pylint: disable=too-few-public-methods
    '''
    Represents a single ANT message.

    attributes:
        msgid - The ANT message ID. Should be an integer in the range 0-255.
        data - The payload of the ANT message. Should be a list-like object
               of integers in the range 0-255.
    '''
    __slots__ = [
        'msgid',
        'data',
    ]
    def __init__(self, msgid, data):
        self.msgid = msgid
        self.data = data

    def __str__(self):
        return ''.join(
            '[{:02X}]'.format(x) for x in ([len(self.data), self.msgid] + self.data)
        )

    def __repr__(self):
        return '<AntMessage {}>'.format(self)


    @property
    def channel(self):
        '''
        Channel subfield of the message.
        '''
        return self.data[0] & antdef.CHANNEL_NUMBER_MASK

    @channel.setter
    def channel(self, value):
        self.data[0] = (self.data[0] & ~antdef.CHANNEL_NUMBER_MASK) | (value & antdef.CHANNEL_NUMBER_MASK)

    @property
    def sequence_number(self):
        '''
        Sequence number subfield. Only valid for burst messages.
        '''
        return self.data[0] & antdef.SEQUENCE_NUMBER_MASK

    @sequence_number.setter
    def sequence_number(self, value):
        self.data[0] = (self.data[0] & ~antdef.SEQUENCE_NUMBER_MASK) | (value & antdef.SEQUENCE_NUMBER_MASK)

def next_sequence_number(num, is_final_mesg=False):
    '''
    Get the next sequence number in order for a burst message.

    parameters:
        num - The previous sequence number. This must be valid and not have the last message bit
              set, otherwise results will be incorrect.
        is_final_mesg - Optional boolean indicating to set the last message flag.
    '''
    num += antdef.SEQUENCE_NUMBER_INC
    if num > antdef.SEQUENCE_NUMBER_ROLLOVER:
        num -= antdef.SEQUENCE_NUMBER_ROLLOVER
    if is_final_mesg:
        num |= antdef.SEQUENCE_LAST_MESSAGE
    return num
