# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from assetic.api_client import ApiClient


class AssetApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asset_create_association(self, request_representation, id, **kwargs):  # noqa: E501
        """Create an association between 2 assets  # noqa: E501

        Sample request: <br /><pre>          {              \"Relation\": \"Relates To\",              \"Id\": \"57d6eb30-2b1b-e711-80bc-005056947278\"          }      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_create_association(request_representation, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetAssociationRequestRepresentation request_representation: (required)
        :param str id: (required)
        :return: AssetAssociationListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_create_association_with_http_info(request_representation, id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_create_association_with_http_info(request_representation, id, **kwargs)  # noqa: E501
            return data

    def asset_create_association_with_http_info(self, request_representation, id, **kwargs):  # noqa: E501
        """Create an association between 2 assets  # noqa: E501

        Sample request: <br /><pre>          {              \"Relation\": \"Relates To\",              \"Id\": \"57d6eb30-2b1b-e711-80bc-005056947278\"          }      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_create_association_with_http_info(request_representation, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AssetAssociationRequestRepresentation request_representation: (required)
        :param str id: (required)
        :return: AssetAssociationListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_representation', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_create_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_representation' is set
        if ('request_representation' not in params or
                params['request_representation'] is None):
            raise ValueError("Missing the required parameter `request_representation` when calling `asset_create_association`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_create_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request_representation' in params:
            body_params = params['request_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/associations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAssociationListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_delete_association(self, id, to_id, **kwargs):  # noqa: E501
        """Remove association between 2 assets  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/association/d26d9afd-1e0d-e711-80bb-005056947278      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_delete_association(id, to_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str to_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_delete_association_with_http_info(id, to_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_delete_association_with_http_info(id, to_id, **kwargs)  # noqa: E501
            return data

    def asset_delete_association_with_http_info(self, id, to_id, **kwargs):  # noqa: E501
        """Remove association between 2 assets  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/association/d26d9afd-1e0d-e711-80bb-005056947278      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_delete_association_with_http_info(id, to_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param str to_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'to_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_delete_association" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_delete_association`")  # noqa: E501
        # verify the required parameter 'to_id' is set
        if ('to_id' not in params or
                params['to_id'] is None):
            raise ValueError("Missing the required parameter `to_id` when calling `asset_delete_association`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'to_id' in params:
            path_params['toId'] = params['to_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/associations/{toId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_get(self, id, attributes, **kwargs):  # noqa: E501
        """Get complex asset by either its complex asset internal GUID or its own friendly complex asset id  # noqa: E501

        To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><span class=\"code-block\"><pre>  /api/v2/assets/ABAB  /api/v2/assets/ABAB?attributes=Comment,DimensionDetail,RaterComment  /api/v2/assets/495365a0-7e6a-e611-9469-06edd62954d7?attributes=Comment,DimensionDetail,RaterComment      </pre></span>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get(id, attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :param list[str] attributes: List of attributes required to be retrieved (required)
        :return: ComplexAssetRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_get_with_http_info(id, attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_get_with_http_info(id, attributes, **kwargs)  # noqa: E501
            return data

    def asset_get_with_http_info(self, id, attributes, **kwargs):  # noqa: E501
        """Get complex asset by either its complex asset internal GUID or its own friendly complex asset id  # noqa: E501

        To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><span class=\"code-block\"><pre>  /api/v2/assets/ABAB  /api/v2/assets/ABAB?attributes=Comment,DimensionDetail,RaterComment  /api/v2/assets/495365a0-7e6a-e611-9469-06edd62954d7?attributes=Comment,DimensionDetail,RaterComment      </pre></span>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_with_http_info(id, attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :param list[str] attributes: List of attributes required to be retrieved (required)
        :return: ComplexAssetRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_get`")  # noqa: E501
        # verify the required parameter 'attributes' is set
        if ('attributes' not in params or
                params['attributes'] is None):
            raise ValueError("Missing the required parameter `attributes` when calling `asset_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
            collection_formats['attributes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexAssetRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_get_0(self, attributes, **kwargs):  # noqa: E501
        """Get a collection of asset  # noqa: E501

        Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br />  Supported sorting operators: <br /><table><tr><td>-asc</td><td>ascending</td></tr><tr><td>-desc</td><td>descending</td></tr></table><br />  To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.filters=AssetName~contains~'Alice'~or~AssetCategory='Artworks'  /api/v2/assets/?attributes=Comment,DimensionDetail,RaterComment  /api/v2/assets/?sorts=AssetName-asc,AssetId-asc  /api/v2/assets/?PageSize=20&amp;page=1      </pre></span><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.filters=AssetName~contains~'Alice'~or~AssetCategory='Artworks'      &amp;attributes=Comment,attributes=Comment,DimensionDetail,RaterComment      </pre></span><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.in=AssetId='ABAB','CDAB','EFAB','ABAW','ABA','ABB'      &amp;requestParams.in=AssetCategory='Artworks','Airport Buildings','Buildings','Bridges'      &amp;requestParams.in=LastModified='2019-11-19T17:29:31','2019-11-12T12:09:57'      </pre></span><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.in=Id='3421f9ae-504a-e711-80be-005056947278'      ,'7d199c56-0571-e711-80bf-005056947278'      ,'60c82181-870f-4051-91c1-b1d67ba740e5'      </pre></span>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_0(attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] attributes:  (required)
        :param list[list[object]] request_params_in:
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: ComplexAssetListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_get_0_with_http_info(attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_get_0_with_http_info(attributes, **kwargs)  # noqa: E501
            return data

    def asset_get_0_with_http_info(self, attributes, **kwargs):  # noqa: E501
        """Get a collection of asset  # noqa: E501

        Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br />  Supported sorting operators: <br /><table><tr><td>-asc</td><td>ascending</td></tr><tr><td>-desc</td><td>descending</td></tr></table><br />  To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.filters=AssetName~contains~'Alice'~or~AssetCategory='Artworks'  /api/v2/assets/?attributes=Comment,DimensionDetail,RaterComment  /api/v2/assets/?sorts=AssetName-asc,AssetId-asc  /api/v2/assets/?PageSize=20&amp;page=1      </pre></span><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.filters=AssetName~contains~'Alice'~or~AssetCategory='Artworks'      &amp;attributes=Comment,attributes=Comment,DimensionDetail,RaterComment      </pre></span><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.in=AssetId='ABAB','CDAB','EFAB','ABAW','ABA','ABB'      &amp;requestParams.in=AssetCategory='Artworks','Airport Buildings','Buildings','Bridges'      &amp;requestParams.in=LastModified='2019-11-19T17:29:31','2019-11-12T12:09:57'      </pre></span><span class=\"code-block\"><pre>  /api/v2/assets/?requestParams.in=Id='3421f9ae-504a-e711-80be-005056947278'      ,'7d199c56-0571-e711-80bf-005056947278'      ,'60c82181-870f-4051-91c1-b1d67ba740e5'      </pre></span>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_0_with_http_info(attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] attributes:  (required)
        :param list[list[object]] request_params_in:
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: ComplexAssetListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attributes', 'request_params_in', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attributes' is set
        if ('attributes' not in params or
                params['attributes'] is None):
            raise ValueError("Missing the required parameter `attributes` when calling `asset_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
            collection_formats['attributes'] = 'multi'  # noqa: E501
        if 'request_params_in' in params:
            query_params.append(('requestParams.in', params['request_params_in']))  # noqa: E501
            collection_formats['requestParams.in'] = 'multi'  # noqa: E501
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexAssetListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_get_associations(self, id, **kwargs):  # noqa: E501
        """Get a collection of associations of a particular asset  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/association/?PageSize=20&amp;page=1      </pre><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/association/?PageSize=20&amp;page=10      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_associations(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int request_params_page:
        :param int request_params_page_size:
        :return: AssetAssociationListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_get_associations_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_get_associations_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_get_associations_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a collection of associations of a particular asset  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/association/?PageSize=20&amp;page=1      </pre><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/association/?PageSize=20&amp;page=10      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_associations_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param int request_params_page:
        :param int request_params_page_size:
        :return: AssetAssociationListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_get_associations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_get_associations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetAssociationListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_get_functional_location_by_asset_id(self, id, **kwargs):  # noqa: E501
        """Get an associated functional location of an asset  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/functionallocation      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_functional_location_by_asset_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Asset Id (required)
        :return: AssetFunctionalLocationAssociationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_get_functional_location_by_asset_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_get_functional_location_by_asset_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_get_functional_location_by_asset_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get an associated functional location of an asset  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/functionallocation      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_get_functional_location_by_asset_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Asset Id (required)
        :return: AssetFunctionalLocationAssociationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_get_functional_location_by_asset_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_get_functional_location_by_asset_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/functionallocation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetFunctionalLocationAssociationRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_link_complex_asset_to_functional_location(self, id, functional_location_representation, **kwargs):  # noqa: E501
        """Associate an asset with a functional location  # noqa: E501

        Sample request: <br /><pre>          {              \"FunctionalLocationId\": \"57d6eb30-2b1b-e711-80bc-005056947278\"          }      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_link_complex_asset_to_functional_location(id, functional_location_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param AssetFunctionalLocationAssociationRepresentation functional_location_representation: (required)
        :return: AssetFunctionalLocationAssociationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_link_complex_asset_to_functional_location_with_http_info(id, functional_location_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_link_complex_asset_to_functional_location_with_http_info(id, functional_location_representation, **kwargs)  # noqa: E501
            return data

    def asset_link_complex_asset_to_functional_location_with_http_info(self, id, functional_location_representation, **kwargs):  # noqa: E501
        """Associate an asset with a functional location  # noqa: E501

        Sample request: <br /><pre>          {              \"FunctionalLocationId\": \"57d6eb30-2b1b-e711-80bc-005056947278\"          }      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_link_complex_asset_to_functional_location_with_http_info(id, functional_location_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param AssetFunctionalLocationAssociationRepresentation functional_location_representation: (required)
        :return: AssetFunctionalLocationAssociationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'functional_location_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_link_complex_asset_to_functional_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_link_complex_asset_to_functional_location`")  # noqa: E501
        # verify the required parameter 'functional_location_representation' is set
        if ('functional_location_representation' not in params or
                params['functional_location_representation'] is None):
            raise ValueError("Missing the required parameter `functional_location_representation` when calling `asset_link_complex_asset_to_functional_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'functional_location_representation' in params:
            body_params = params['functional_location_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/functionallocation', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AssetFunctionalLocationAssociationRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_post(self, complex_asset_representation, **kwargs):  # noqa: E501
        """Create an asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_post(complex_asset_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComplexAssetRepresentation complex_asset_representation:  (required)
        :return: CreatedRepresentationComplexAssetRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_post_with_http_info(complex_asset_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_post_with_http_info(complex_asset_representation, **kwargs)  # noqa: E501
            return data

    def asset_post_with_http_info(self, complex_asset_representation, **kwargs):  # noqa: E501
        """Create an asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_post_with_http_info(complex_asset_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ComplexAssetRepresentation complex_asset_representation:  (required)
        :return: CreatedRepresentationComplexAssetRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['complex_asset_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'complex_asset_representation' is set
        if ('complex_asset_representation' not in params or
                params['complex_asset_representation'] is None):
            raise ValueError("Missing the required parameter `complex_asset_representation` when calling `asset_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'complex_asset_representation' in params:
            body_params = params['complex_asset_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedRepresentationComplexAssetRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_put(self, id, complex_asset_representation, **kwargs):  # noqa: E501
        """Update an asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_put(id, complex_asset_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param ComplexAssetRepresentation complex_asset_representation:  (required)
        :return: ComplexAssetRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_put_with_http_info(id, complex_asset_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_put_with_http_info(id, complex_asset_representation, **kwargs)  # noqa: E501
            return data

    def asset_put_with_http_info(self, id, complex_asset_representation, **kwargs):  # noqa: E501
        """Update an asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_put_with_http_info(id, complex_asset_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param ComplexAssetRepresentation complex_asset_representation:  (required)
        :return: ComplexAssetRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'complex_asset_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_put`")  # noqa: E501
        # verify the required parameter 'complex_asset_representation' is set
        if ('complex_asset_representation' not in params or
                params['complex_asset_representation'] is None):
            raise ValueError("Missing the required parameter `complex_asset_representation` when calling `asset_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'complex_asset_representation' in params:
            body_params = params['complex_asset_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplexAssetRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_search_asset_spatial_locations(self, **kwargs):  # noqa: E501
        """Get Asset Spatial Locations  # noqa: E501

        Supported units:  <ul><li>km/kilometer(s)/kilometre(s)</li><li>m/meter(s)/metre(s)</li></ul><br />  Supported condition operators:  <table><tr><td>near_point</td><td>return all assets which locations are intersecting with given range</td></tr></table><br />  Supported filter schema: <br />      Please use odata metadata for assets<br /><br />  Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br /><br />  Sample request: <br /><br /><pre>  /api/v2/assets/locations/?requestParams.longitude=144.5437&amp;requestParams.latitude=-37.6691      &amp;requestParams.condition=near_point      &amp;requestParams.range=3400&amp;requestParams.unit=meter  </pre><pre>  /api/v2/assets/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10  </pre><pre>  /api/v2/assets/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10      &amp;requestParams.filters=ComplexAssetName~contains~'Alice'  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_search_asset_spatial_locations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float request_params_longitude:
        :param float request_params_latitude:
        :param str request_params_condition:
        :param float request_params_range:
        :param str request_params_unit:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: GeoJsonListFeatureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_search_asset_spatial_locations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_search_asset_spatial_locations_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_search_asset_spatial_locations_with_http_info(self, **kwargs):  # noqa: E501
        """Get Asset Spatial Locations  # noqa: E501

        Supported units:  <ul><li>km/kilometer(s)/kilometre(s)</li><li>m/meter(s)/metre(s)</li></ul><br />  Supported condition operators:  <table><tr><td>near_point</td><td>return all assets which locations are intersecting with given range</td></tr></table><br />  Supported filter schema: <br />      Please use odata metadata for assets<br /><br />  Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br /><br />  Sample request: <br /><br /><pre>  /api/v2/assets/locations/?requestParams.longitude=144.5437&amp;requestParams.latitude=-37.6691      &amp;requestParams.condition=near_point      &amp;requestParams.range=3400&amp;requestParams.unit=meter  </pre><pre>  /api/v2/assets/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10  </pre><pre>  /api/v2/assets/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10      &amp;requestParams.filters=ComplexAssetName~contains~'Alice'  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_search_asset_spatial_locations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float request_params_longitude:
        :param float request_params_latitude:
        :param str request_params_condition:
        :param float request_params_range:
        :param str request_params_unit:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: GeoJsonListFeatureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_params_longitude', 'request_params_latitude', 'request_params_condition', 'request_params_range', 'request_params_unit', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_search_asset_spatial_locations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_params_longitude' in params:
            query_params.append(('requestParams.longitude', params['request_params_longitude']))  # noqa: E501
        if 'request_params_latitude' in params:
            query_params.append(('requestParams.latitude', params['request_params_latitude']))  # noqa: E501
        if 'request_params_condition' in params:
            query_params.append(('requestParams.condition', params['request_params_condition']))  # noqa: E501
        if 'request_params_range' in params:
            query_params.append(('requestParams.range', params['request_params_range']))  # noqa: E501
        if 'request_params_unit' in params:
            query_params.append(('requestParams.unit', params['request_params_unit']))  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoJsonListFeatureCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_search_spatial_information_by_asset_id(self, id, **kwargs):  # noqa: E501
        """Get Asset Spatial Location by asset Id  # noqa: E501

        <br />  <pre> </pre>              Sample request: <br /><pre>                  GET /Assetic3/api/v2/assets/7d199c56-0571-e711-80bf-005056947278/location HTTP/1.1                  Content-Type: application/json                  Accept: application/hal+json              </pre><br />              Sample response: <br /><br /><pre>              {                      \"Data\": {                          \"type\": \"Feature\",                          \"geometry\": {                              \"type\": \"GeometryCollection\",                              \"geometries\": [                                  {                                      \"type\": \"Point\",                                      \"coordinates\": [                                          144.95545327663422,                                          -37.818679315562655                                      ]                                  }                              ]                          },                          \"properties\": {                              \"AssetPhysicalLocation\": null,                              \"AssetId\": \"7d199c56-0571-e711-80bf-005056947278\"                          }                      },                  \"_links\": {                      \"self\": {                          \"href\": \"/Assetic3/api/v2/assets/locations/\"                      }                  }              }              </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_search_spatial_information_by_asset_id(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: GeoJsonFeatureGeometryCollectionLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_search_spatial_information_by_asset_id_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_search_spatial_information_by_asset_id_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_search_spatial_information_by_asset_id_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Asset Spatial Location by asset Id  # noqa: E501

        <br />  <pre> </pre>              Sample request: <br /><pre>                  GET /Assetic3/api/v2/assets/7d199c56-0571-e711-80bf-005056947278/location HTTP/1.1                  Content-Type: application/json                  Accept: application/hal+json              </pre><br />              Sample response: <br /><br /><pre>              {                      \"Data\": {                          \"type\": \"Feature\",                          \"geometry\": {                              \"type\": \"GeometryCollection\",                              \"geometries\": [                                  {                                      \"type\": \"Point\",                                      \"coordinates\": [                                          144.95545327663422,                                          -37.818679315562655                                      ]                                  }                              ]                          },                          \"properties\": {                              \"AssetPhysicalLocation\": null,                              \"AssetId\": \"7d199c56-0571-e711-80bf-005056947278\"                          }                      },                  \"_links\": {                      \"self\": {                          \"href\": \"/Assetic3/api/v2/assets/locations/\"                      }                  }              }              </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_search_spatial_information_by_asset_id_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: GeoJsonFeatureGeometryCollectionLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_search_spatial_information_by_asset_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_search_spatial_information_by_asset_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/location', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoJsonFeatureGeometryCollectionLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_un_link_complex_asset_from_functional_location(self, id, **kwargs):  # noqa: E501
        """Disassociate an asset from a functional location  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/functionallocation      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_un_link_complex_asset_from_functional_location(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_un_link_complex_asset_from_functional_location_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_un_link_complex_asset_from_functional_location_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def asset_un_link_complex_asset_from_functional_location_with_http_info(self, id, **kwargs):  # noqa: E501
        """Disassociate an asset from a functional location  # noqa: E501

        Sample request: <br /><pre>  /api/v2/assets/62adb56b-f9fa-4f15-af79-003ae2fb5b72/functionallocation      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_un_link_complex_asset_from_functional_location_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_un_link_complex_asset_from_functional_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_un_link_complex_asset_from_functional_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/functionallocation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_update_spatial_information_by_asset_id(self, id, spatial_location, **kwargs):  # noqa: E501
        """Update asset spatial location by asset id  # noqa: E501

        <strong>                  WARNING: {Assetic3.Integration.Representations.AssetSpatialLocationRepresentation.SpatialData} is deprecated                  and is going to be removed in the future. Use                  {Assetic3.Integration.Representations.AssetSpatialLocationRepresentation.Data} instead.<br /></strong>  <br />  <br />  <pre> </pre>              Sample request: <br /><pre>              PUT /Assetic3/api/v2/assets/7d199c56-0571-e711-80bf-005056947278/location HTTP/1.1              Content-Type: application/json              Accept: application/hal+json              {                  \"Data\":{                      \"type\":\"Feature\",                      \"geometry\":{                          \"type\":\"GeometryCollection\",                          \"geometries\":[                              {                                  \"type\":\"Point\",                                  \"coordinates\":[                                      144.95545327663422,                                      -37.818679315562655                                  ]                              }                          ]                      },                      \"properties\":{                          \"AssetId\":\"7d199c56-0571-e711-80bf-005056947278\",                          \"AssetPhysicalLocation\": null                      }                  }              }              </pre>              Sample response: <br /><br /><pre>              {                      \"Data\": {                          \"type\": \"Feature\",                          \"geometry\": {                              \"type\": \"GeometryCollection\",                              \"geometries\": [                                  {                                      \"type\": \"Point\",                                      \"coordinates\": [                                          144.95545327663422,                                          -37.818679315562655                                      ]                                  }                              ]                          },                          \"properties\": {                              \"AssetPhysicalLocation\": null,                              \"AssetId\": \"7d199c56-0571-e711-80bf-005056947278\"                          }                      },                  \"_links\": {                      \"self\": {                          \"href\": \"/Assetic3/api/v2/assets/locations/\"                      }                  }              }              </pre>              Update spatial location and physical location sample request: <br /><br /><pre>              PUT /Assetic3/api/v2/assets/d26d9afd-1e0d-e711-80bb-005056947278/location HTTP/1.1              Content-Type: application/json              {                  \"Data\": {                      \"type\": \"Feature\",                      \"geometry\": {                          \"type\": \"GeometryCollection\",                          \"geometries\": [                              {                                  \"type\": \"Point\",                                  \"coordinates\": [                                      115.16903023479783,                                      -34.324928275867556                                  ]                              },                              {                                  \"type\": \"Polygon\",                                  \"coordinates\": [                                      [                                          [                                              115.169055,                                              -34.324979                                          ],                                          [                                              115.16909,                                              -34.324905                                          ],                                          [                                              115.169006,                                              -34.324876                                          ],                                          [                                              115.168971,                                              -34.324954                                          ],                                          [                                              115.169055,                                              -34.324979                                          ]                                      ]                                  ]                              }                          ]                      },                      \"properties\": {                          \"AssetPhysicalLocation\": {                              \"AddressId\": \"3266b2fc-a7f5-e711-80d6-005056947278\",                              \"StreetNumber\": \"72\",                              \"StreetAddress\": \"Commercial Road\",                              \"CitySuburb\": \"Prahran\",                              \"State\": \"VIC\",                              \"ZipPostcode\": \"3181\",                              \"Country\": \"Australia\",                              \"OtherLocation\": null,                              \"WhereLocation\": null                          },                          \"AssetId\": \"d26d9afd-1e0d-e711-80bb-005056947278\"                      }                  }              }              </pre>              Update physical location sample request: <br /><br /><pre>              PUT /Assetic3/api/v2/assets/8fde603a-3aea-4417-bd55-eea2b0b224e2/location HTTP/1.1              Content-Type: application/json              {                     \"Data\": {                         \"type\": \"Feature\",                         \"geometry\": {                             \"type\": \"GeometryCollection\",                             \"geometries\": []                         },                         \"properties\": {                             \"AssetPhysicalLocation\": {                                 \"AddressId\": \"3266b2fc-a7f5-e711-80d6-005056947278\",                                 \"StreetNumber\": \"72\",                                 \"StreetAddress\": \"Commercial Road\",                                 \"CitySuburb\": \"Prahran\",                                 \"State\": \"VIC\",                                 \"ZipPostcode\": \"3181\",                                 \"Country\": \"Australia\",                                 \"OtherLocation\": null,                                 \"WhereLocation\": null                             },                             \"AssetId\": \"8fde603a-3aea-4417-bd55-eea2b0b224e2\"                         }                     }                 }              </pre>              Alternative sample request for updating physical location: <br /><br /><pre>              PUT /Assetic3/api/v2/assets/8fde603a-3aea-4417-bd55-eea2b0b224e2/location HTTP/1.1              Content-Type: application/json              {                     \"Data\": {                         \"type\": \"Feature\",                         \"geometry\": null,                         \"properties\": {                             \"AssetPhysicalLocation\": {                                 \"StreetNumber\": \"72\",                                 \"StreetAddress\": \"Commercial Road\",                                 \"CitySuburb\": \"Prahran\",                                 \"State\": \"VIC\",                                 \"ZipPostcode\": \"3181\",                                 \"Country\": \"Australia\",                                 \"OtherLocation\": null,                                 \"WhereLocation\": null                             },                             \"AssetId\": \"8fde603a-3aea-4417-bd55-eea2b0b224e2\"                         }                     }                 }              </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_update_spatial_information_by_asset_id(id, spatial_location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param AssetSpatialLocationRepresentation spatial_location: (required)
        :return: GeoJsonFeatureGeometryCollectionLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_update_spatial_information_by_asset_id_with_http_info(id, spatial_location, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_update_spatial_information_by_asset_id_with_http_info(id, spatial_location, **kwargs)  # noqa: E501
            return data

    def asset_update_spatial_information_by_asset_id_with_http_info(self, id, spatial_location, **kwargs):  # noqa: E501
        """Update asset spatial location by asset id  # noqa: E501

        <strong>                  WARNING: {Assetic3.Integration.Representations.AssetSpatialLocationRepresentation.SpatialData} is deprecated                  and is going to be removed in the future. Use                  {Assetic3.Integration.Representations.AssetSpatialLocationRepresentation.Data} instead.<br /></strong>  <br />  <br />  <pre> </pre>              Sample request: <br /><pre>              PUT /Assetic3/api/v2/assets/7d199c56-0571-e711-80bf-005056947278/location HTTP/1.1              Content-Type: application/json              Accept: application/hal+json              {                  \"Data\":{                      \"type\":\"Feature\",                      \"geometry\":{                          \"type\":\"GeometryCollection\",                          \"geometries\":[                              {                                  \"type\":\"Point\",                                  \"coordinates\":[                                      144.95545327663422,                                      -37.818679315562655                                  ]                              }                          ]                      },                      \"properties\":{                          \"AssetId\":\"7d199c56-0571-e711-80bf-005056947278\",                          \"AssetPhysicalLocation\": null                      }                  }              }              </pre>              Sample response: <br /><br /><pre>              {                      \"Data\": {                          \"type\": \"Feature\",                          \"geometry\": {                              \"type\": \"GeometryCollection\",                              \"geometries\": [                                  {                                      \"type\": \"Point\",                                      \"coordinates\": [                                          144.95545327663422,                                          -37.818679315562655                                      ]                                  }                              ]                          },                          \"properties\": {                              \"AssetPhysicalLocation\": null,                              \"AssetId\": \"7d199c56-0571-e711-80bf-005056947278\"                          }                      },                  \"_links\": {                      \"self\": {                          \"href\": \"/Assetic3/api/v2/assets/locations/\"                      }                  }              }              </pre>              Update spatial location and physical location sample request: <br /><br /><pre>              PUT /Assetic3/api/v2/assets/d26d9afd-1e0d-e711-80bb-005056947278/location HTTP/1.1              Content-Type: application/json              {                  \"Data\": {                      \"type\": \"Feature\",                      \"geometry\": {                          \"type\": \"GeometryCollection\",                          \"geometries\": [                              {                                  \"type\": \"Point\",                                  \"coordinates\": [                                      115.16903023479783,                                      -34.324928275867556                                  ]                              },                              {                                  \"type\": \"Polygon\",                                  \"coordinates\": [                                      [                                          [                                              115.169055,                                              -34.324979                                          ],                                          [                                              115.16909,                                              -34.324905                                          ],                                          [                                              115.169006,                                              -34.324876                                          ],                                          [                                              115.168971,                                              -34.324954                                          ],                                          [                                              115.169055,                                              -34.324979                                          ]                                      ]                                  ]                              }                          ]                      },                      \"properties\": {                          \"AssetPhysicalLocation\": {                              \"AddressId\": \"3266b2fc-a7f5-e711-80d6-005056947278\",                              \"StreetNumber\": \"72\",                              \"StreetAddress\": \"Commercial Road\",                              \"CitySuburb\": \"Prahran\",                              \"State\": \"VIC\",                              \"ZipPostcode\": \"3181\",                              \"Country\": \"Australia\",                              \"OtherLocation\": null,                              \"WhereLocation\": null                          },                          \"AssetId\": \"d26d9afd-1e0d-e711-80bb-005056947278\"                      }                  }              }              </pre>              Update physical location sample request: <br /><br /><pre>              PUT /Assetic3/api/v2/assets/8fde603a-3aea-4417-bd55-eea2b0b224e2/location HTTP/1.1              Content-Type: application/json              {                     \"Data\": {                         \"type\": \"Feature\",                         \"geometry\": {                             \"type\": \"GeometryCollection\",                             \"geometries\": []                         },                         \"properties\": {                             \"AssetPhysicalLocation\": {                                 \"AddressId\": \"3266b2fc-a7f5-e711-80d6-005056947278\",                                 \"StreetNumber\": \"72\",                                 \"StreetAddress\": \"Commercial Road\",                                 \"CitySuburb\": \"Prahran\",                                 \"State\": \"VIC\",                                 \"ZipPostcode\": \"3181\",                                 \"Country\": \"Australia\",                                 \"OtherLocation\": null,                                 \"WhereLocation\": null                             },                             \"AssetId\": \"8fde603a-3aea-4417-bd55-eea2b0b224e2\"                         }                     }                 }              </pre>              Alternative sample request for updating physical location: <br /><br /><pre>              PUT /Assetic3/api/v2/assets/8fde603a-3aea-4417-bd55-eea2b0b224e2/location HTTP/1.1              Content-Type: application/json              {                     \"Data\": {                         \"type\": \"Feature\",                         \"geometry\": null,                         \"properties\": {                             \"AssetPhysicalLocation\": {                                 \"StreetNumber\": \"72\",                                 \"StreetAddress\": \"Commercial Road\",                                 \"CitySuburb\": \"Prahran\",                                 \"State\": \"VIC\",                                 \"ZipPostcode\": \"3181\",                                 \"Country\": \"Australia\",                                 \"OtherLocation\": null,                                 \"WhereLocation\": null                             },                             \"AssetId\": \"8fde603a-3aea-4417-bd55-eea2b0b224e2\"                         }                     }                 }              </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_update_spatial_information_by_asset_id_with_http_info(id, spatial_location, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param AssetSpatialLocationRepresentation spatial_location: (required)
        :return: GeoJsonFeatureGeometryCollectionLocation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'spatial_location']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_update_spatial_information_by_asset_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `asset_update_spatial_information_by_asset_id`")  # noqa: E501
        # verify the required parameter 'spatial_location' is set
        if ('spatial_location' not in params or
                params['spatial_location'] is None):
            raise ValueError("Missing the required parameter `spatial_location` when calling `asset_update_spatial_information_by_asset_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'spatial_location' in params:
            body_params = params['spatial_location']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/assets/{id}/location', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoJsonFeatureGeometryCollectionLocation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
