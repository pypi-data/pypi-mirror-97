# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from assetic.api_client import ApiClient


class ComponentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def component_get(self, id, **kwargs):  # noqa: E501
        """Get component by either component internal id (GUID) or its friendly id  # noqa: E501

        Sample requests: <br /><pre>  /api/v2/components/CP000ABAB  /api/v2/components/c1bf4b20-f3b1-e611-946c-06edd62954d7      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :return: ComponentRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.component_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def component_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get component by either component internal id (GUID) or its friendly id  # noqa: E501

        Sample requests: <br /><pre>  /api/v2/components/CP000ABAB  /api/v2/components/c1bf4b20-f3b1-e611-946c-06edd62954d7      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :return: ComponentRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `component_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def component_get_0(self, **kwargs):  # noqa: E501
        """Get a collection of component  # noqa: E501

        Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br />  Supported sorting operators: <br /><table><tr><td>-asc</td><td>ascending</td></tr><tr><td>-desc</td><td>descending</td></tr></table><br /><strong>Note:</strong><ul><li>Dimension Unit has to be in <strong>Singular form</strong>, such as Metre, Mile, Gallon (US), Kilovolt Ampere, Kilometre Per Hour, Celsius, etc..</li></ul>  Sample request: <br /><pre>  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'~and~MaterialType~eq~'Brick Walls'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'~and~DesignLife&gt;='50'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'~or~DimensionUnit='Metre'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'&amp;sorts=Name-desc      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_get_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: ComponentListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_get_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.component_get_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def component_get_0_with_http_info(self, **kwargs):  # noqa: E501
        """Get a collection of component  # noqa: E501

        Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br />  Supported sorting operators: <br /><table><tr><td>-asc</td><td>ascending</td></tr><tr><td>-desc</td><td>descending</td></tr></table><br /><strong>Note:</strong><ul><li>Dimension Unit has to be in <strong>Singular form</strong>, such as Metre, Mile, Gallon (US), Kilovolt Ampere, Kilometre Per Hour, Celsius, etc..</li></ul>  Sample request: <br /><pre>  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'~and~MaterialType~eq~'Brick Walls'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'~and~DesignLife&gt;='50'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'~or~DimensionUnit='Metre'  /api/v2/components/?requestParams.filters=AssetId~contains~'ABAB'&amp;sorts=Name-desc      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_get_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: ComponentListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_get_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def component_get_dimension(self, id, **kwargs):  # noqa: E501
        """Get dimension list of given component id  # noqa: E501

        Sample requests: <br /><pre>  /api/v2/components/CP00101011/dimensions  /api/v2/components/ad7dfac3-53ef-e611-8568-b0c090253c49/dimensions      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_get_dimension(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :return: ComponentDimensionListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_get_dimension_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.component_get_dimension_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def component_get_dimension_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get dimension list of given component id  # noqa: E501

        Sample requests: <br /><pre>  /api/v2/components/CP00101011/dimensions  /api/v2/components/ad7dfac3-53ef-e611-8568-b0c090253c49/dimensions      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_get_dimension_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :return: ComponentDimensionListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_get_dimension" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `component_get_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components/{id}/dimensions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentDimensionListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def component_post(self, create_component_representation, **kwargs):  # noqa: E501
        """Create component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_post(create_component_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateComponentRepresentation create_component_representation: Create Component Representation (required)
        :return: CreatedRepresentationComponentRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_post_with_http_info(create_component_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.component_post_with_http_info(create_component_representation, **kwargs)  # noqa: E501
            return data

    def component_post_with_http_info(self, create_component_representation, **kwargs):  # noqa: E501
        """Create component  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_post_with_http_info(create_component_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CreateComponentRepresentation create_component_representation: Create Component Representation (required)
        :return: CreatedRepresentationComponentRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['create_component_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'create_component_representation' is set
        if ('create_component_representation' not in params or
                params['create_component_representation'] is None):
            raise ValueError("Missing the required parameter `create_component_representation` when calling `component_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_component_representation' in params:
            body_params = params['create_component_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedRepresentationComponentRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def component_post_dimension(self, id, component_dimension_representation, **kwargs):  # noqa: E501
        """Create dimension of given component id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_post_dimension(id, component_dimension_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component id (required)
        :param ComponentDimensionRepresentation component_dimension_representation: Component Dimension Representation (required)
        :return: CreatedRepresentationComponentDimensionRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_post_dimension_with_http_info(id, component_dimension_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.component_post_dimension_with_http_info(id, component_dimension_representation, **kwargs)  # noqa: E501
            return data

    def component_post_dimension_with_http_info(self, id, component_dimension_representation, **kwargs):  # noqa: E501
        """Create dimension of given component id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_post_dimension_with_http_info(id, component_dimension_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component id (required)
        :param ComponentDimensionRepresentation component_dimension_representation: Component Dimension Representation (required)
        :return: CreatedRepresentationComponentDimensionRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'component_dimension_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_post_dimension" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `component_post_dimension`")  # noqa: E501
        # verify the required parameter 'component_dimension_representation' is set
        if ('component_dimension_representation' not in params or
                params['component_dimension_representation'] is None):
            raise ValueError("Missing the required parameter `component_dimension_representation` when calling `component_post_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component_dimension_representation' in params:
            body_params = params['component_dimension_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components/{id}/dimensions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedRepresentationComponentDimensionRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def component_put(self, id, update_component_representation, **kwargs):  # noqa: E501
        """Update Component  # noqa: E501

        <strong>Note:</strong>  <ul>    <li>Component Type cannot be changed.</li>    <li>Dimension Unit has to be in <strong>Singular form</strong>, such as Metre, Mile, Gallon (US), Kilovolt Ampere, Kilometre Per Hour, Celsius, etc..</li>  </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_put(id, update_component_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :param UpdateComponentRepresentation update_component_representation: Update Component Representation (required)
        :return: ComponentRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_put_with_http_info(id, update_component_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.component_put_with_http_info(id, update_component_representation, **kwargs)  # noqa: E501
            return data

    def component_put_with_http_info(self, id, update_component_representation, **kwargs):  # noqa: E501
        """Update Component  # noqa: E501

        <strong>Note:</strong>  <ul>    <li>Component Type cannot be changed.</li>    <li>Dimension Unit has to be in <strong>Singular form</strong>, such as Metre, Mile, Gallon (US), Kilovolt Ampere, Kilometre Per Hour, Celsius, etc..</li>  </ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_put_with_http_info(id, update_component_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :param UpdateComponentRepresentation update_component_representation: Update Component Representation (required)
        :return: ComponentRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'update_component_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `component_put`")  # noqa: E501
        # verify the required parameter 'update_component_representation' is set
        if ('update_component_representation' not in params or
                params['update_component_representation'] is None):
            raise ValueError("Missing the required parameter `update_component_representation` when calling `component_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'update_component_representation' in params:
            body_params = params['update_component_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def component_put_dimension(self, id, dimension_id, component_dimension_representation, **kwargs):  # noqa: E501
        """Update dimension of given component id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_put_dimension(id, dimension_id, component_dimension_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :param str dimension_id: Dimension Id (required)
        :param ComponentDimensionRepresentation component_dimension_representation: Component Dimension Representation (required)
        :return: ComponentDimensionRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.component_put_dimension_with_http_info(id, dimension_id, component_dimension_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.component_put_dimension_with_http_info(id, dimension_id, component_dimension_representation, **kwargs)  # noqa: E501
            return data

    def component_put_dimension_with_http_info(self, id, dimension_id, component_dimension_representation, **kwargs):  # noqa: E501
        """Update dimension of given component id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.component_put_dimension_with_http_info(id, dimension_id, component_dimension_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Component Id (required)
        :param str dimension_id: Dimension Id (required)
        :param ComponentDimensionRepresentation component_dimension_representation: Component Dimension Representation (required)
        :return: ComponentDimensionRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'dimension_id', 'component_dimension_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method component_put_dimension" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `component_put_dimension`")  # noqa: E501
        # verify the required parameter 'dimension_id' is set
        if ('dimension_id' not in params or
                params['dimension_id'] is None):
            raise ValueError("Missing the required parameter `dimension_id` when calling `component_put_dimension`")  # noqa: E501
        # verify the required parameter 'component_dimension_representation' is set
        if ('component_dimension_representation' not in params or
                params['component_dimension_representation'] is None):
            raise ValueError("Missing the required parameter `component_dimension_representation` when calling `component_put_dimension`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'dimension_id' in params:
            path_params['dimensionId'] = params['dimension_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'component_dimension_representation' in params:
            body_params = params['component_dimension_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/components/{id}/dimensions/{dimensionId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComponentDimensionRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
