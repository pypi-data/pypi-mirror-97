# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from assetic.api_client import ApiClient


class FunctionalLocationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def functional_location_get(self, id, attributes, **kwargs):  # noqa: E501
        """Get functional location by either its functional location internal GUID or its own friendly functional location id  # noqa: E501

        To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><pre>  /api/v2/functionallocations/ABBF  /api/v2/functionallocations/ABBF?attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider  /api/v2/functionallocations/495365a0-7e6a-e611-9469-06edd62954d7?attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_get(id, attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :param list[str] attributes: List of attributes required to be retrieved (required)
        :return: FunctionalLocationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.functional_location_get_with_http_info(id, attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.functional_location_get_with_http_info(id, attributes, **kwargs)  # noqa: E501
            return data

    def functional_location_get_with_http_info(self, id, attributes, **kwargs):  # noqa: E501
        """Get functional location by either its functional location internal GUID or its own friendly functional location id  # noqa: E501

        To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><pre>  /api/v2/functionallocations/ABBF  /api/v2/functionallocations/ABBF?attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider  /api/v2/functionallocations/495365a0-7e6a-e611-9469-06edd62954d7?attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_get_with_http_info(id, attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :param list[str] attributes: List of attributes required to be retrieved (required)
        :return: FunctionalLocationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'attributes']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functional_location_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `functional_location_get`")  # noqa: E501
        # verify the required parameter 'attributes' is set
        if ('attributes' not in params or
                params['attributes'] is None):
            raise ValueError("Missing the required parameter `attributes` when calling `functional_location_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
            collection_formats['attributes'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/functionallocations/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionalLocationRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def functional_location_get_0(self, attributes, **kwargs):  # noqa: E501
        """Get a collection of functional location  # noqa: E501

        Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br />  Supported sorting operators: <br /><table><tr><td>-asc</td><td>ascending</td></tr><tr><td>-desc</td><td>descending</td></tr></table><br />  To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><pre>  /api/v2/functionallocations/?requestParams.filters=FunctionalLocationName~contains~'York Butter'~or~FunctionalLocationType='Buildings'  /api/v2/functionallocations/?attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider  /api/v2/functionallocations/?sorts=FunctionalLocationName-asc,FunctionalLocationType-asc  /api/v2/functionallocations/?PageSize=20&amp;page=1  /api/v2/functionallocations/?requestParams.filters=FunctionalLocationName~contains~'York Butter'~or~FunctionalLocationType='Buildings'      &amp;attributes=Comment,attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_get_0(attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] attributes:  (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: FunctionalLocationListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.functional_location_get_0_with_http_info(attributes, **kwargs)  # noqa: E501
        else:
            (data) = self.functional_location_get_0_with_http_info(attributes, **kwargs)  # noqa: E501
            return data

    def functional_location_get_0_with_http_info(self, attributes, **kwargs):  # noqa: E501
        """Get a collection of functional location  # noqa: E501

        Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br />  Supported sorting operators: <br /><table><tr><td>-asc</td><td>ascending</td></tr><tr><td>-desc</td><td>descending</td></tr></table><br />  To get Attributes metadata, please refer to <pre>/api/v2/search/{id}/metadata</pre><br /><br />  Sample request: <br /><pre>  /api/v2/functionallocations/?requestParams.filters=FunctionalLocationName~contains~'York Butter'~or~FunctionalLocationType='Buildings'  /api/v2/functionallocations/?attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider  /api/v2/functionallocations/?sorts=FunctionalLocationName-asc,FunctionalLocationType-asc  /api/v2/functionallocations/?PageSize=20&amp;page=1  /api/v2/functionallocations/?requestParams.filters=FunctionalLocationName~contains~'York Butter'~or~FunctionalLocationType='Buildings'      &amp;attributes=Comment,attributes=GroupAssetComment,GroupAssetDimensionDetail,GroupAssetServiceProvider      </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_get_0_with_http_info(attributes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] attributes:  (required)
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: FunctionalLocationListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attributes', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functional_location_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attributes' is set
        if ('attributes' not in params or
                params['attributes'] is None):
            raise ValueError("Missing the required parameter `attributes` when calling `functional_location_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attributes' in params:
            query_params.append(('attributes', params['attributes']))  # noqa: E501
            collection_formats['attributes'] = 'multi'  # noqa: E501
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/functionallocations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionalLocationListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def functional_location_post(self, functional_location_representation, **kwargs):  # noqa: E501
        """Create a functional location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_post(functional_location_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionalLocationRepresentation functional_location_representation:  (required)
        :return: CreatedRepresentationFunctionalLocationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.functional_location_post_with_http_info(functional_location_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.functional_location_post_with_http_info(functional_location_representation, **kwargs)  # noqa: E501
            return data

    def functional_location_post_with_http_info(self, functional_location_representation, **kwargs):  # noqa: E501
        """Create a functional location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_post_with_http_info(functional_location_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param FunctionalLocationRepresentation functional_location_representation:  (required)
        :return: CreatedRepresentationFunctionalLocationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['functional_location_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functional_location_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'functional_location_representation' is set
        if ('functional_location_representation' not in params or
                params['functional_location_representation'] is None):
            raise ValueError("Missing the required parameter `functional_location_representation` when calling `functional_location_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'functional_location_representation' in params:
            body_params = params['functional_location_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/functionallocations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedRepresentationFunctionalLocationRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def functional_location_put(self, id, functional_location_representation, **kwargs):  # noqa: E501
        """Update a functional location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_put(id, functional_location_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param FunctionalLocationRepresentation functional_location_representation:  (required)
        :return: FunctionalLocationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.functional_location_put_with_http_info(id, functional_location_representation, **kwargs)  # noqa: E501
        else:
            (data) = self.functional_location_put_with_http_info(id, functional_location_representation, **kwargs)  # noqa: E501
            return data

    def functional_location_put_with_http_info(self, id, functional_location_representation, **kwargs):  # noqa: E501
        """Update a functional location  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.functional_location_put_with_http_info(id, functional_location_representation, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :param FunctionalLocationRepresentation functional_location_representation:  (required)
        :return: FunctionalLocationRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'functional_location_representation']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method functional_location_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `functional_location_put`")  # noqa: E501
        # verify the required parameter 'functional_location_representation' is set
        if ('functional_location_representation' not in params or
                params['functional_location_representation'] is None):
            raise ValueError("Missing the required parameter `functional_location_representation` when calling `functional_location_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'functional_location_representation' in params:
            body_params = params['functional_location_representation']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/functionallocations/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='FunctionalLocationRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
