# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from assetic.api_client import ApiClient


class WorkOrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def work_order_get_location(self, **kwargs):  # noqa: E501
        """Get Work Order Spatial Locations  # noqa: E501

        Supported units:  <ul><li>km/kilometer(s)/kilometre(s)</li><li>m/meter(s)/metre(s)</li></ul><br />  Supported condition operators:  <table><tr><td>near_point</td><td>return all work orders which locations are intersecting with given range</td></tr></table><br />  Supported filter schema: <br />      Please use odata metadata for workorders<br /><br />  Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br /><br />  Sample request: <br /><br /><pre>  /api/v2/workorder/locations/?requestParams.longitude=144.5437&amp;requestParams.latitude=-37.6691      &amp;requestParams.condition=near_point      &amp;requestParams.range=3400&amp;requestParams.unit=meter  </pre><pre>  /api/v2/workorder/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10  </pre><pre>  /api/v2/workorder/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10      &amp;requestParams.filters=ComplexAssetName~contains~'Alice'  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_get_location(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float request_params_longitude:
        :param float request_params_latitude:
        :param str request_params_condition:
        :param float request_params_range:
        :param str request_params_unit:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: GeoJsonListFeatureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_get_location_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.work_order_get_location_with_http_info(**kwargs)  # noqa: E501
            return data

    def work_order_get_location_with_http_info(self, **kwargs):  # noqa: E501
        """Get Work Order Spatial Locations  # noqa: E501

        Supported units:  <ul><li>km/kilometer(s)/kilometre(s)</li><li>m/meter(s)/metre(s)</li></ul><br />  Supported condition operators:  <table><tr><td>near_point</td><td>return all work orders which locations are intersecting with given range</td></tr></table><br />  Supported filter schema: <br />      Please use odata metadata for workorders<br /><br />  Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br /><br />  Sample request: <br /><br /><pre>  /api/v2/workorder/locations/?requestParams.longitude=144.5437&amp;requestParams.latitude=-37.6691      &amp;requestParams.condition=near_point      &amp;requestParams.range=3400&amp;requestParams.unit=meter  </pre><pre>  /api/v2/workorder/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10  </pre><pre>  /api/v2/workorder/locations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10      &amp;requestParams.filters=ComplexAssetName~contains~'Alice'  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_get_location_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float request_params_longitude:
        :param float request_params_latitude:
        :param str request_params_condition:
        :param float request_params_range:
        :param str request_params_unit:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: GeoJsonListFeatureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_params_longitude', 'request_params_latitude', 'request_params_condition', 'request_params_range', 'request_params_unit', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_get_location" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'request_params_longitude' in params:
            query_params.append(('requestParams.longitude', params['request_params_longitude']))  # noqa: E501
        if 'request_params_latitude' in params:
            query_params.append(('requestParams.latitude', params['request_params_latitude']))  # noqa: E501
        if 'request_params_condition' in params:
            query_params.append(('requestParams.condition', params['request_params_condition']))  # noqa: E501
        if 'request_params_range' in params:
            query_params.append(('requestParams.range', params['request_params_range']))  # noqa: E501
        if 'request_params_unit' in params:
            query_params.append(('requestParams.unit', params['request_params_unit']))  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoJsonListFeatureCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_integration_api_add_work_task(self, id, work_task, **kwargs):  # noqa: E501
        """Add Work Task to Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_add_work_task(id, work_task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Work Order Id (required)
        :param MaintenanceWorkTask work_task: workTask object (required)
        :return: CreatedRepresentationMaintenanceWorkTask
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_integration_api_add_work_task_with_http_info(id, work_task, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_integration_api_add_work_task_with_http_info(id, work_task, **kwargs)  # noqa: E501
            return data

    def work_order_integration_api_add_work_task_with_http_info(self, id, work_task, **kwargs):  # noqa: E501
        """Add Work Task to Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_add_work_task_with_http_info(id, work_task, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Work Order Id (required)
        :param MaintenanceWorkTask work_task: workTask object (required)
        :return: CreatedRepresentationMaintenanceWorkTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'work_task']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_integration_api_add_work_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_integration_api_add_work_task`")  # noqa: E501
        # verify the required parameter 'work_task' is set
        if ('work_task' not in params or
                params['work_task'] is None):
            raise ValueError("Missing the required parameter `work_task` when calling `work_order_integration_api_add_work_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'work_task' in params:
            body_params = params['work_task']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}/worktask', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedRepresentationMaintenanceWorkTask',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_integration_api_get(self, **kwargs):  # noqa: E501
        """Gets work order based on request parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assigned_id:
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: MaintenanceWorkOrderListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_integration_api_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.work_order_integration_api_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def work_order_integration_api_get_with_http_info(self, **kwargs):  # noqa: E501
        """Gets work order based on request parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str assigned_id:
        :param list[str] request_params_sorts:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: MaintenanceWorkOrderListRepresentation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['assigned_id', 'request_params_sorts', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_integration_api_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'assigned_id' in params:
            query_params.append(('assignedId', params['assigned_id']))  # noqa: E501
        if 'request_params_sorts' in params:
            query_params.append(('requestParams.sorts', params['request_params_sorts']))  # noqa: E501
            collection_formats['requestParams.sorts'] = 'multi'  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintenanceWorkOrderListRepresentation',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_integration_api_get_0(self, id, **kwargs):  # noqa: E501
        """Get work order based on Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_get_0(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :return: MaintenanceWorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_integration_api_get_0_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_integration_api_get_0_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def work_order_integration_api_get_0_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get work order based on Id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_get_0_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :return: MaintenanceWorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_integration_api_get_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_integration_api_get_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintenanceWorkOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_integration_api_post(self, maintenance_work_order, **kwargs):  # noqa: E501
        """Creates a new Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_post(maintenance_work_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintenanceWorkOrder maintenance_work_order: Work order to create (required)
        :return: CreatedRepresentationMaintenanceWorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_integration_api_post_with_http_info(maintenance_work_order, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_integration_api_post_with_http_info(maintenance_work_order, **kwargs)  # noqa: E501
            return data

    def work_order_integration_api_post_with_http_info(self, maintenance_work_order, **kwargs):  # noqa: E501
        """Creates a new Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_post_with_http_info(maintenance_work_order, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintenanceWorkOrder maintenance_work_order: Work order to create (required)
        :return: CreatedRepresentationMaintenanceWorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintenance_work_order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_integration_api_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'maintenance_work_order' is set
        if ('maintenance_work_order' not in params or
                params['maintenance_work_order'] is None):
            raise ValueError("Missing the required parameter `maintenance_work_order` when calling `work_order_integration_api_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintenance_work_order' in params:
            body_params = params['maintenance_work_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CreatedRepresentationMaintenanceWorkOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_integration_api_put(self, maintenance_work_order, id, **kwargs):  # noqa: E501
        """Updates Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_put(maintenance_work_order, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintenanceWorkOrder maintenance_work_order: Maintenance WorkOrder object (required)
        :param str id: Work Order Id (required)
        :return: MaintenanceWorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_integration_api_put_with_http_info(maintenance_work_order, id, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_integration_api_put_with_http_info(maintenance_work_order, id, **kwargs)  # noqa: E501
            return data

    def work_order_integration_api_put_with_http_info(self, maintenance_work_order, id, **kwargs):  # noqa: E501
        """Updates Work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_integration_api_put_with_http_info(maintenance_work_order, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MaintenanceWorkOrder maintenance_work_order: Maintenance WorkOrder object (required)
        :param str id: Work Order Id (required)
        :return: MaintenanceWorkOrder
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['maintenance_work_order', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_integration_api_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'maintenance_work_order' is set
        if ('maintenance_work_order' not in params or
                params['maintenance_work_order'] is None):
            raise ValueError("Missing the required parameter `maintenance_work_order` when calling `work_order_integration_api_put`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `work_order_integration_api_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'maintenance_work_order' in params:
            body_params = params['maintenance_work_order']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/octet-stream', 'application/x-www-form-urlencoded', 'application/hal+json', 'application/hal+xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorder/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MaintenanceWorkOrder',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def work_order_resources_get_location(self, mode, **kwargs):  # noqa: E501
        """Get Work Order Resources Spatial Locations grouped by Work Order  # noqa: E501

        Supported mode:  <table><tr><td>resource</td><td>Returns work order resources direclty </td></tr><tr><td>workorder</td><td>Returns work ordre resources grouped by work order</td></tr></table><br />  Supported units:  <ul><li>km/kilometer(s)/kilometre(s)</li><li>m/meter(s)/metre(s)</li></ul><br />  Supported condition operators:  <table><tr><td>near_point</td><td>return all work order resources which locations are intersecting with given range</td></tr></table><br />  Supported filter schema: <br />      Please use odata metadata for workorderresource<br /><br />  Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br /><br />  Sample request: <br /><br /><pre>  /api/v2/workorderresources/workorderslocations/?requestParams.longitude=144.5437&amp;requestParams.latitude=-37.6691      &amp;requestParams.condition=near_point      &amp;requestParams.range=3400&amp;requestParams.unit=meter      &amp;requestParams.mode=workorder  </pre><pre>  /api/v2/workorderresources/workorderslocations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10  </pre><pre>  /api/v2/workorderresources/workorderslocations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10      &amp;requestParams.filters=RSMnttResourceName~eq~'Alice Bob'  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_resources_get_location(mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mode: (required)
        :param float request_params_longitude:
        :param float request_params_latitude:
        :param str request_params_condition:
        :param float request_params_range:
        :param str request_params_unit:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: GeoJsonListFeatureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.work_order_resources_get_location_with_http_info(mode, **kwargs)  # noqa: E501
        else:
            (data) = self.work_order_resources_get_location_with_http_info(mode, **kwargs)  # noqa: E501
            return data

    def work_order_resources_get_location_with_http_info(self, mode, **kwargs):  # noqa: E501
        """Get Work Order Resources Spatial Locations grouped by Work Order  # noqa: E501

        Supported mode:  <table><tr><td>resource</td><td>Returns work order resources direclty </td></tr><tr><td>workorder</td><td>Returns work ordre resources grouped by work order</td></tr></table><br />  Supported units:  <ul><li>km/kilometer(s)/kilometre(s)</li><li>m/meter(s)/metre(s)</li></ul><br />  Supported condition operators:  <table><tr><td>near_point</td><td>return all work order resources which locations are intersecting with given range</td></tr></table><br />  Supported filter schema: <br />      Please use odata metadata for workorderresource<br /><br />  Supported filter operators: <br /><table><tr><td>=</td><td>is equal to</td></tr><tr><td>&gt;</td><td>is greater than</td></tr><tr><td>&gt;=</td><td>is greater than or equal to</td></tr><tr><td>&lt;</td><td>is less than</td></tr><tr><td>&lt;=</td><td>is less than or equal to</td></tr><tr><td>~eq~</td><td>is equal to</td></tr><tr><td>~neq~</td><td>is not equal to</td></tr><tr><td>~lt~</td><td>is less than</td></tr><tr><td>~lte~</td><td>is less than or equal to</td></tr><tr><td>~gt~</td><td>is greater than</td></tr><tr><td>~gte~</td><td>is greater than or equal to</td></tr><tr><td>~startswith~</td><td>starts with</td></tr><tr><td>~contains~</td><td>contains</td></tr><tr><td>~notsubstringof~</td><td>does not contain</td></tr><tr><td>~endswith~</td><td>ends with</td></tr><tr><td>~doesnotcontain~</td><td>does not contain</td></tr><tr><td>~or~</td><td>or</td></tr><tr><td>~and~</td><td>and</td></tr></table><br /><br />  Sample request: <br /><br /><pre>  /api/v2/workorderresources/workorderslocations/?requestParams.longitude=144.5437&amp;requestParams.latitude=-37.6691      &amp;requestParams.condition=near_point      &amp;requestParams.range=3400&amp;requestParams.unit=meter      &amp;requestParams.mode=workorder  </pre><pre>  /api/v2/workorderresources/workorderslocations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10  </pre><pre>  /api/v2/workorderresources/workorderslocations/?requestParams.longitude=115.0753&amp;requestParams.latitude=-33.9544      &amp;requestParams.condition=near_point      &amp;requestParams.range=3.5&amp;requestParams.unit=kilometer      &amp;requestParams.page=2&amp;requestParams.pagesize=10      &amp;requestParams.filters=RSMnttResourceName~eq~'Alice Bob'  </pre>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.work_order_resources_get_location_with_http_info(mode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str mode: (required)
        :param float request_params_longitude:
        :param float request_params_latitude:
        :param str request_params_condition:
        :param float request_params_range:
        :param str request_params_unit:
        :param list[str] request_params_filters:
        :param int request_params_page:
        :param int request_params_page_size:
        :return: GeoJsonListFeatureCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['mode', 'request_params_longitude', 'request_params_latitude', 'request_params_condition', 'request_params_range', 'request_params_unit', 'request_params_filters', 'request_params_page', 'request_params_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method work_order_resources_get_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'mode' is set
        if ('mode' not in params or
                params['mode'] is None):
            raise ValueError("Missing the required parameter `mode` when calling `work_order_resources_get_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'request_params_longitude' in params:
            query_params.append(('requestParams.longitude', params['request_params_longitude']))  # noqa: E501
        if 'request_params_latitude' in params:
            query_params.append(('requestParams.latitude', params['request_params_latitude']))  # noqa: E501
        if 'request_params_condition' in params:
            query_params.append(('requestParams.condition', params['request_params_condition']))  # noqa: E501
        if 'request_params_range' in params:
            query_params.append(('requestParams.range', params['request_params_range']))  # noqa: E501
        if 'request_params_unit' in params:
            query_params.append(('requestParams.unit', params['request_params_unit']))  # noqa: E501
        if 'request_params_filters' in params:
            query_params.append(('requestParams.filters', params['request_params_filters']))  # noqa: E501
            collection_formats['requestParams.filters'] = 'multi'  # noqa: E501
        if 'request_params_page' in params:
            query_params.append(('requestParams.page', params['request_params_page']))  # noqa: E501
        if 'request_params_page_size' in params:
            query_params.append(('requestParams.pageSize', params['request_params_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/v2/workorderresources/locations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GeoJsonListFeatureCollection',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
