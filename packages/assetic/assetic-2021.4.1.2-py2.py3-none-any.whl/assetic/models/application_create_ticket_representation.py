# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class ApplicationCreateTicketRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticket_id': 'str',
        'feed_back_type': 'str',
        'summary': 'str',
        'description': 'str',
        'stack_trace': 'str',
        'status': 'str',
        'referrer_module': 'str',
        'resolution': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'ticket_id': 'TicketId',
        'feed_back_type': 'FeedBackType',
        'summary': 'Summary',
        'description': 'Description',
        'stack_trace': 'StackTrace',
        'status': 'Status',
        'referrer_module': 'ReferrerModule',
        'resolution': 'Resolution',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, ticket_id=None, feed_back_type=None, summary=None, description=None, stack_trace=None, status=None, referrer_module=None, resolution=None, links=None, embedded=None):  # noqa: E501
        """ApplicationCreateTicketRepresentation - a model defined in Swagger"""  # noqa: E501

        self._ticket_id = None
        self._feed_back_type = None
        self._summary = None
        self._description = None
        self._stack_trace = None
        self._status = None
        self._referrer_module = None
        self._resolution = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if ticket_id is not None:
            self.ticket_id = ticket_id
        if feed_back_type is not None:
            self.feed_back_type = feed_back_type
        if summary is not None:
            self.summary = summary
        if description is not None:
            self.description = description
        if stack_trace is not None:
            self.stack_trace = stack_trace
        if status is not None:
            self.status = status
        if referrer_module is not None:
            self.referrer_module = referrer_module
        if resolution is not None:
            self.resolution = resolution
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def ticket_id(self):
        """Gets the ticket_id of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The ticket_id of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._ticket_id

    @ticket_id.setter
    def ticket_id(self, ticket_id):
        """Sets the ticket_id of this ApplicationCreateTicketRepresentation.


        :param ticket_id: The ticket_id of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._ticket_id = ticket_id

    @property
    def feed_back_type(self):
        """Gets the feed_back_type of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The feed_back_type of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._feed_back_type

    @feed_back_type.setter
    def feed_back_type(self, feed_back_type):
        """Sets the feed_back_type of this ApplicationCreateTicketRepresentation.


        :param feed_back_type: The feed_back_type of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._feed_back_type = feed_back_type

    @property
    def summary(self):
        """Gets the summary of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The summary of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ApplicationCreateTicketRepresentation.


        :param summary: The summary of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def description(self):
        """Gets the description of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The description of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationCreateTicketRepresentation.


        :param description: The description of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def stack_trace(self):
        """Gets the stack_trace of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The stack_trace of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this ApplicationCreateTicketRepresentation.


        :param stack_trace: The stack_trace of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._stack_trace = stack_trace

    @property
    def status(self):
        """Gets the status of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The status of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ApplicationCreateTicketRepresentation.


        :param status: The status of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def referrer_module(self):
        """Gets the referrer_module of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The referrer_module of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._referrer_module

    @referrer_module.setter
    def referrer_module(self, referrer_module):
        """Sets the referrer_module of this ApplicationCreateTicketRepresentation.


        :param referrer_module: The referrer_module of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._referrer_module = referrer_module

    @property
    def resolution(self):
        """Gets the resolution of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The resolution of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this ApplicationCreateTicketRepresentation.


        :param resolution: The resolution of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: str
        """

        self._resolution = resolution

    @property
    def links(self):
        """Gets the links of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The links of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ApplicationCreateTicketRepresentation.


        :param links: The links of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this ApplicationCreateTicketRepresentation.  # noqa: E501


        :return: The embedded of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this ApplicationCreateTicketRepresentation.


        :param embedded: The embedded of this ApplicationCreateTicketRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationCreateTicketRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationCreateTicketRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
