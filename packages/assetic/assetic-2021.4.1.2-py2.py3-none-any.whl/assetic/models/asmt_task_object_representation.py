# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AsmtTaskObjectRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'label': 'str',
        'type_label': 'str',
        'type': 'str',
        'location_wkt': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'label': 'Label',
        'type_label': 'TypeLabel',
        'type': 'Type',
        'location_wkt': 'LocationWkt'
    }

    def __init__(self, id=None, name=None, label=None, type_label=None, type=None, location_wkt=None):  # noqa: E501
        """AsmtTaskObjectRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._label = None
        self._type_label = None
        self._type = None
        self._location_wkt = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if type_label is not None:
            self.type_label = type_label
        if type is not None:
            self.type = type
        if location_wkt is not None:
            self.location_wkt = location_wkt

    @property
    def id(self):
        """Gets the id of this AsmtTaskObjectRepresentation.  # noqa: E501


        :return: The id of this AsmtTaskObjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsmtTaskObjectRepresentation.


        :param id: The id of this AsmtTaskObjectRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this AsmtTaskObjectRepresentation.  # noqa: E501


        :return: The name of this AsmtTaskObjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AsmtTaskObjectRepresentation.


        :param name: The name of this AsmtTaskObjectRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this AsmtTaskObjectRepresentation.  # noqa: E501


        :return: The label of this AsmtTaskObjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AsmtTaskObjectRepresentation.


        :param label: The label of this AsmtTaskObjectRepresentation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def type_label(self):
        """Gets the type_label of this AsmtTaskObjectRepresentation.  # noqa: E501


        :return: The type_label of this AsmtTaskObjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type_label

    @type_label.setter
    def type_label(self, type_label):
        """Sets the type_label of this AsmtTaskObjectRepresentation.


        :param type_label: The type_label of this AsmtTaskObjectRepresentation.  # noqa: E501
        :type: str
        """

        self._type_label = type_label

    @property
    def type(self):
        """Gets the type of this AsmtTaskObjectRepresentation.  # noqa: E501


        :return: The type of this AsmtTaskObjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AsmtTaskObjectRepresentation.


        :param type: The type of this AsmtTaskObjectRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["ComplexAsset", "SimpleAsset", "NetworkEntity", "GroupAsset", "WorkOrder", "WorkRequest", "Component"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                    .format(type, allowed_values)
                )

        self._type = type

    @property
    def location_wkt(self):
        """Gets the location_wkt of this AsmtTaskObjectRepresentation.  # noqa: E501


        :return: The location_wkt of this AsmtTaskObjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._location_wkt

    @location_wkt.setter
    def location_wkt(self, location_wkt):
        """Sets the location_wkt of this AsmtTaskObjectRepresentation.


        :param location_wkt: The location_wkt of this AsmtTaskObjectRepresentation.  # noqa: E501
        :type: str
        """

        self._location_wkt = location_wkt

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsmtTaskObjectRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsmtTaskObjectRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
