# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.asmt_task_form_representation import AsmtTaskFormRepresentation  # noqa: F401,E501
##from assetic.models.asmt_task_object_representation import AsmtTaskObjectRepresentation  # noqa: F401,E501
##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501
##from assetic.models.rs_resource_representation import RsResourceRepresentation  # noqa: F401,E501


class AsmtTaskRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'asmt_project_id': 'str',
        'status': 'str',
        'assessment_level': 'str',
        'rs_resource_id_assigned_to': 'RsResourceRepresentation',
        'name': 'str',
        'task_id': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'completion_date': 'datetime',
        'priority': 'int',
        'results_count': 'int',
        'comments': 'str',
        'asmt_task_forms': 'list[AsmtTaskFormRepresentation]',
        'task_type_id': 'int',
        'asset_object': 'AsmtTaskObjectRepresentation',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'asmt_project_id': 'AsmtProjectId',
        'status': 'Status',
        'assessment_level': 'AssessmentLevel',
        'rs_resource_id_assigned_to': 'RsResourceIdAssignedTo',
        'name': 'Name',
        'task_id': 'TaskId',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'completion_date': 'CompletionDate',
        'priority': 'Priority',
        'results_count': 'ResultsCount',
        'comments': 'Comments',
        'asmt_task_forms': 'AsmtTaskForms',
        'task_type_id': 'TaskTypeId',
        'asset_object': 'AssetObject',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, asmt_project_id=None, status=None, assessment_level=None, rs_resource_id_assigned_to=None, name=None, task_id=None, start_date=None, end_date=None, completion_date=None, priority=None, results_count=None, comments=None, asmt_task_forms=None, task_type_id=None, asset_object=None, links=None, embedded=None):  # noqa: E501
        """AsmtTaskRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._asmt_project_id = None
        self._status = None
        self._assessment_level = None
        self._rs_resource_id_assigned_to = None
        self._name = None
        self._task_id = None
        self._start_date = None
        self._end_date = None
        self._completion_date = None
        self._priority = None
        self._results_count = None
        self._comments = None
        self._asmt_task_forms = None
        self._task_type_id = None
        self._asset_object = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if asmt_project_id is not None:
            self.asmt_project_id = asmt_project_id
        if status is not None:
            self.status = status
        if assessment_level is not None:
            self.assessment_level = assessment_level
        if rs_resource_id_assigned_to is not None:
            self.rs_resource_id_assigned_to = rs_resource_id_assigned_to
        if name is not None:
            self.name = name
        if task_id is not None:
            self.task_id = task_id
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if completion_date is not None:
            self.completion_date = completion_date
        if priority is not None:
            self.priority = priority
        if results_count is not None:
            self.results_count = results_count
        if comments is not None:
            self.comments = comments
        if asmt_task_forms is not None:
            self.asmt_task_forms = asmt_task_forms
        if task_type_id is not None:
            self.task_type_id = task_type_id
        if asset_object is not None:
            self.asset_object = asset_object
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this AsmtTaskRepresentation.  # noqa: E501


        :return: The id of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AsmtTaskRepresentation.


        :param id: The id of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def asmt_project_id(self):
        """Gets the asmt_project_id of this AsmtTaskRepresentation.  # noqa: E501


        :return: The asmt_project_id of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asmt_project_id

    @asmt_project_id.setter
    def asmt_project_id(self, asmt_project_id):
        """Sets the asmt_project_id of this AsmtTaskRepresentation.


        :param asmt_project_id: The asmt_project_id of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """

        self._asmt_project_id = asmt_project_id

    @property
    def status(self):
        """Gets the status of this AsmtTaskRepresentation.  # noqa: E501


        :return: The status of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AsmtTaskRepresentation.


        :param status: The status of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Pending", "Open", "Completed"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if status not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(status)
            except ValueError:
                raise ValueError(
                    "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                    .format(status, allowed_values)
                )

        self._status = status

    @property
    def assessment_level(self):
        """Gets the assessment_level of this AsmtTaskRepresentation.  # noqa: E501


        :return: The assessment_level of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._assessment_level

    @assessment_level.setter
    def assessment_level(self, assessment_level):
        """Sets the assessment_level of this AsmtTaskRepresentation.


        :param assessment_level: The assessment_level of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["SelectedAsset", "AllChildSimpleAsset"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if assessment_level not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(assessment_level)
            except ValueError:
                raise ValueError(
                    "Invalid value for `assessment_level` ({0}), must be one of {1}"  # noqa: E501
                    .format(assessment_level, allowed_values)
                )

        self._assessment_level = assessment_level

    @property
    def rs_resource_id_assigned_to(self):
        """Gets the rs_resource_id_assigned_to of this AsmtTaskRepresentation.  # noqa: E501


        :return: The rs_resource_id_assigned_to of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._rs_resource_id_assigned_to

    @rs_resource_id_assigned_to.setter
    def rs_resource_id_assigned_to(self, rs_resource_id_assigned_to):
        """Sets the rs_resource_id_assigned_to of this AsmtTaskRepresentation.


        :param rs_resource_id_assigned_to: The rs_resource_id_assigned_to of this AsmtTaskRepresentation.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._rs_resource_id_assigned_to = rs_resource_id_assigned_to

    @property
    def name(self):
        """Gets the name of this AsmtTaskRepresentation.  # noqa: E501


        :return: The name of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AsmtTaskRepresentation.


        :param name: The name of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def task_id(self):
        """Gets the task_id of this AsmtTaskRepresentation.  # noqa: E501


        :return: The task_id of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this AsmtTaskRepresentation.


        :param task_id: The task_id of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def start_date(self):
        """Gets the start_date of this AsmtTaskRepresentation.  # noqa: E501


        :return: The start_date of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AsmtTaskRepresentation.


        :param start_date: The start_date of this AsmtTaskRepresentation.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this AsmtTaskRepresentation.  # noqa: E501


        :return: The end_date of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AsmtTaskRepresentation.


        :param end_date: The end_date of this AsmtTaskRepresentation.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def completion_date(self):
        """Gets the completion_date of this AsmtTaskRepresentation.  # noqa: E501


        :return: The completion_date of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this AsmtTaskRepresentation.


        :param completion_date: The completion_date of this AsmtTaskRepresentation.  # noqa: E501
        :type: datetime
        """

        self._completion_date = completion_date

    @property
    def priority(self):
        """Gets the priority of this AsmtTaskRepresentation.  # noqa: E501


        :return: The priority of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AsmtTaskRepresentation.


        :param priority: The priority of this AsmtTaskRepresentation.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def results_count(self):
        """Gets the results_count of this AsmtTaskRepresentation.  # noqa: E501


        :return: The results_count of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._results_count

    @results_count.setter
    def results_count(self, results_count):
        """Sets the results_count of this AsmtTaskRepresentation.


        :param results_count: The results_count of this AsmtTaskRepresentation.  # noqa: E501
        :type: int
        """

        self._results_count = results_count

    @property
    def comments(self):
        """Gets the comments of this AsmtTaskRepresentation.  # noqa: E501


        :return: The comments of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AsmtTaskRepresentation.


        :param comments: The comments of this AsmtTaskRepresentation.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def asmt_task_forms(self):
        """Gets the asmt_task_forms of this AsmtTaskRepresentation.  # noqa: E501


        :return: The asmt_task_forms of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: list[AsmtTaskFormRepresentation]
        """
        return self._asmt_task_forms

    @asmt_task_forms.setter
    def asmt_task_forms(self, asmt_task_forms):
        """Sets the asmt_task_forms of this AsmtTaskRepresentation.


        :param asmt_task_forms: The asmt_task_forms of this AsmtTaskRepresentation.  # noqa: E501
        :type: list[AsmtTaskFormRepresentation]
        """

        self._asmt_task_forms = asmt_task_forms

    @property
    def task_type_id(self):
        """Gets the task_type_id of this AsmtTaskRepresentation.  # noqa: E501


        :return: The task_type_id of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._task_type_id

    @task_type_id.setter
    def task_type_id(self, task_type_id):
        """Sets the task_type_id of this AsmtTaskRepresentation.


        :param task_type_id: The task_type_id of this AsmtTaskRepresentation.  # noqa: E501
        :type: int
        """

        self._task_type_id = task_type_id

    @property
    def asset_object(self):
        """Gets the asset_object of this AsmtTaskRepresentation.  # noqa: E501


        :return: The asset_object of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: AsmtTaskObjectRepresentation
        """
        return self._asset_object

    @asset_object.setter
    def asset_object(self, asset_object):
        """Sets the asset_object of this AsmtTaskRepresentation.


        :param asset_object: The asset_object of this AsmtTaskRepresentation.  # noqa: E501
        :type: AsmtTaskObjectRepresentation
        """

        self._asset_object = asset_object

    @property
    def links(self):
        """Gets the links of this AsmtTaskRepresentation.  # noqa: E501


        :return: The links of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AsmtTaskRepresentation.


        :param links: The links of this AsmtTaskRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this AsmtTaskRepresentation.  # noqa: E501


        :return: The embedded of this AsmtTaskRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AsmtTaskRepresentation.


        :param embedded: The embedded of this AsmtTaskRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AsmtTaskRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AsmtTaskRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
