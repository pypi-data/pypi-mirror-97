# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.form_layout_representation import FormLayoutRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class AssessmentFormTabRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'str',
        'sort_order': 'int',
        'visible': 'bool',
        'form_layout': 'FormLayoutRepresentation',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'label': 'Label',
        'sort_order': 'SortOrder',
        'visible': 'Visible',
        'form_layout': 'FormLayout',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, label=None, sort_order=None, visible=None, form_layout=None, links=None, embedded=None):  # noqa: E501
        """AssessmentFormTabRepresentation - a model defined in Swagger"""  # noqa: E501

        self._label = None
        self._sort_order = None
        self._visible = None
        self._form_layout = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if label is not None:
            self.label = label
        if sort_order is not None:
            self.sort_order = sort_order
        if visible is not None:
            self.visible = visible
        if form_layout is not None:
            self.form_layout = form_layout
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def label(self):
        """Gets the label of this AssessmentFormTabRepresentation.  # noqa: E501


        :return: The label of this AssessmentFormTabRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AssessmentFormTabRepresentation.


        :param label: The label of this AssessmentFormTabRepresentation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def sort_order(self):
        """Gets the sort_order of this AssessmentFormTabRepresentation.  # noqa: E501


        :return: The sort_order of this AssessmentFormTabRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this AssessmentFormTabRepresentation.


        :param sort_order: The sort_order of this AssessmentFormTabRepresentation.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def visible(self):
        """Gets the visible of this AssessmentFormTabRepresentation.  # noqa: E501


        :return: The visible of this AssessmentFormTabRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this AssessmentFormTabRepresentation.


        :param visible: The visible of this AssessmentFormTabRepresentation.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def form_layout(self):
        """Gets the form_layout of this AssessmentFormTabRepresentation.  # noqa: E501


        :return: The form_layout of this AssessmentFormTabRepresentation.  # noqa: E501
        :rtype: FormLayoutRepresentation
        """
        return self._form_layout

    @form_layout.setter
    def form_layout(self, form_layout):
        """Sets the form_layout of this AssessmentFormTabRepresentation.


        :param form_layout: The form_layout of this AssessmentFormTabRepresentation.  # noqa: E501
        :type: FormLayoutRepresentation
        """

        self._form_layout = form_layout

    @property
    def links(self):
        """Gets the links of this AssessmentFormTabRepresentation.  # noqa: E501


        :return: The links of this AssessmentFormTabRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssessmentFormTabRepresentation.


        :param links: The links of this AssessmentFormTabRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this AssessmentFormTabRepresentation.  # noqa: E501


        :return: The embedded of this AssessmentFormTabRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AssessmentFormTabRepresentation.


        :param embedded: The embedded of this AssessmentFormTabRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssessmentFormTabRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssessmentFormTabRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
