# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.assessment_project_type_representation import AssessmentProjectTypeRepresentation  # noqa: F401,E501
##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501
##from assetic.models.rs_resource_representation import RsResourceRepresentation  # noqa: F401,E501


class AssessmentProjectRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_id': 'str',
        'name': 'str',
        'project_type': 'AssessmentProjectTypeRepresentation',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'last_modified': 'datetime',
        'project_manager': 'RsResourceRepresentation',
        'status': 'str',
        'comments': 'str',
        'priority': 'int',
        'task_count': 'int',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'project_id': 'ProjectId',
        'name': 'Name',
        'project_type': 'ProjectType',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'last_modified': 'LastModified',
        'project_manager': 'ProjectManager',
        'status': 'Status',
        'comments': 'Comments',
        'priority': 'Priority',
        'task_count': 'TaskCount',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, project_id=None, name=None, project_type=None, start_date=None, end_date=None, last_modified=None, project_manager=None, status=None, comments=None, priority=None, task_count=None, links=None, embedded=None):  # noqa: E501
        """AssessmentProjectRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._project_id = None
        self._name = None
        self._project_type = None
        self._start_date = None
        self._end_date = None
        self._last_modified = None
        self._project_manager = None
        self._status = None
        self._comments = None
        self._priority = None
        self._task_count = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if name is not None:
            self.name = name
        if project_type is not None:
            self.project_type = project_type
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if last_modified is not None:
            self.last_modified = last_modified
        if project_manager is not None:
            self.project_manager = project_manager
        if status is not None:
            self.status = status
        if comments is not None:
            self.comments = comments
        if priority is not None:
            self.priority = priority
        if task_count is not None:
            self.task_count = task_count
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The id of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AssessmentProjectRepresentation.


        :param id: The id of this AssessmentProjectRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The project_id of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this AssessmentProjectRepresentation.


        :param project_id: The project_id of this AssessmentProjectRepresentation.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def name(self):
        """Gets the name of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The name of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AssessmentProjectRepresentation.


        :param name: The name of this AssessmentProjectRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def project_type(self):
        """Gets the project_type of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The project_type of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: AssessmentProjectTypeRepresentation
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type):
        """Sets the project_type of this AssessmentProjectRepresentation.


        :param project_type: The project_type of this AssessmentProjectRepresentation.  # noqa: E501
        :type: AssessmentProjectTypeRepresentation
        """

        self._project_type = project_type

    @property
    def start_date(self):
        """Gets the start_date of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The start_date of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this AssessmentProjectRepresentation.


        :param start_date: The start_date of this AssessmentProjectRepresentation.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The end_date of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this AssessmentProjectRepresentation.


        :param end_date: The end_date of this AssessmentProjectRepresentation.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def last_modified(self):
        """Gets the last_modified of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The last_modified of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this AssessmentProjectRepresentation.


        :param last_modified: The last_modified of this AssessmentProjectRepresentation.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def project_manager(self):
        """Gets the project_manager of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The project_manager of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._project_manager

    @project_manager.setter
    def project_manager(self, project_manager):
        """Sets the project_manager of this AssessmentProjectRepresentation.


        :param project_manager: The project_manager of this AssessmentProjectRepresentation.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._project_manager = project_manager

    @property
    def status(self):
        """Gets the status of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The status of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AssessmentProjectRepresentation.


        :param status: The status of this AssessmentProjectRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unknown", "Pending", "Open", "Completed"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if status not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(status)
            except ValueError:
                raise ValueError(
                    "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                    .format(status, allowed_values)
                )

        self._status = status

    @property
    def comments(self):
        """Gets the comments of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The comments of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AssessmentProjectRepresentation.


        :param comments: The comments of this AssessmentProjectRepresentation.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def priority(self):
        """Gets the priority of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The priority of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this AssessmentProjectRepresentation.


        :param priority: The priority of this AssessmentProjectRepresentation.  # noqa: E501
        :type: int
        """

        self._priority = priority

    @property
    def task_count(self):
        """Gets the task_count of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The task_count of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._task_count

    @task_count.setter
    def task_count(self, task_count):
        """Sets the task_count of this AssessmentProjectRepresentation.


        :param task_count: The task_count of this AssessmentProjectRepresentation.  # noqa: E501
        :type: int
        """

        self._task_count = task_count

    @property
    def links(self):
        """Gets the links of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The links of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AssessmentProjectRepresentation.


        :param links: The links of this AssessmentProjectRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this AssessmentProjectRepresentation.  # noqa: E501


        :return: The embedded of this AssessmentProjectRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AssessmentProjectRepresentation.


        :param embedded: The embedded of this AssessmentProjectRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssessmentProjectRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssessmentProjectRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
