# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class BillOfMaterial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'unit_rate': 'float',
        'unit_type': 'str',
        'material_type_id': 'str',
        'material_type': 'str',
        'simple_asset_type_id': 'str',
        'simple_asset_type': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'unit_rate': 'UnitRate',
        'unit_type': 'UnitType',
        'material_type_id': 'MaterialTypeId',
        'material_type': 'MaterialType',
        'simple_asset_type_id': 'SimpleAssetTypeId',
        'simple_asset_type': 'SimpleAssetType',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, unit_rate=None, unit_type=None, material_type_id=None, material_type=None, simple_asset_type_id=None, simple_asset_type=None, links=None, embedded=None):  # noqa: E501
        """BillOfMaterial - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._unit_rate = None
        self._unit_type = None
        self._material_type_id = None
        self._material_type = None
        self._simple_asset_type_id = None
        self._simple_asset_type = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if unit_rate is not None:
            self.unit_rate = unit_rate
        if unit_type is not None:
            self.unit_type = unit_type
        if material_type_id is not None:
            self.material_type_id = material_type_id
        if material_type is not None:
            self.material_type = material_type
        if simple_asset_type_id is not None:
            self.simple_asset_type_id = simple_asset_type_id
        if simple_asset_type is not None:
            self.simple_asset_type = simple_asset_type
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this BillOfMaterial.  # noqa: E501


        :return: The id of this BillOfMaterial.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillOfMaterial.


        :param id: The id of this BillOfMaterial.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def unit_rate(self):
        """Gets the unit_rate of this BillOfMaterial.  # noqa: E501


        :return: The unit_rate of this BillOfMaterial.  # noqa: E501
        :rtype: float
        """
        return self._unit_rate

    @unit_rate.setter
    def unit_rate(self, unit_rate):
        """Sets the unit_rate of this BillOfMaterial.


        :param unit_rate: The unit_rate of this BillOfMaterial.  # noqa: E501
        :type: float
        """

        self._unit_rate = unit_rate

    @property
    def unit_type(self):
        """Gets the unit_type of this BillOfMaterial.  # noqa: E501


        :return: The unit_type of this BillOfMaterial.  # noqa: E501
        :rtype: str
        """
        return self._unit_type

    @unit_type.setter
    def unit_type(self, unit_type):
        """Sets the unit_type of this BillOfMaterial.


        :param unit_type: The unit_type of this BillOfMaterial.  # noqa: E501
        :type: str
        """

        self._unit_type = unit_type

    @property
    def material_type_id(self):
        """Gets the material_type_id of this BillOfMaterial.  # noqa: E501


        :return: The material_type_id of this BillOfMaterial.  # noqa: E501
        :rtype: str
        """
        return self._material_type_id

    @material_type_id.setter
    def material_type_id(self, material_type_id):
        """Sets the material_type_id of this BillOfMaterial.


        :param material_type_id: The material_type_id of this BillOfMaterial.  # noqa: E501
        :type: str
        """

        self._material_type_id = material_type_id

    @property
    def material_type(self):
        """Gets the material_type of this BillOfMaterial.  # noqa: E501


        :return: The material_type of this BillOfMaterial.  # noqa: E501
        :rtype: str
        """
        return self._material_type

    @material_type.setter
    def material_type(self, material_type):
        """Sets the material_type of this BillOfMaterial.


        :param material_type: The material_type of this BillOfMaterial.  # noqa: E501
        :type: str
        """

        self._material_type = material_type

    @property
    def simple_asset_type_id(self):
        """Gets the simple_asset_type_id of this BillOfMaterial.  # noqa: E501


        :return: The simple_asset_type_id of this BillOfMaterial.  # noqa: E501
        :rtype: str
        """
        return self._simple_asset_type_id

    @simple_asset_type_id.setter
    def simple_asset_type_id(self, simple_asset_type_id):
        """Sets the simple_asset_type_id of this BillOfMaterial.


        :param simple_asset_type_id: The simple_asset_type_id of this BillOfMaterial.  # noqa: E501
        :type: str
        """

        self._simple_asset_type_id = simple_asset_type_id

    @property
    def simple_asset_type(self):
        """Gets the simple_asset_type of this BillOfMaterial.  # noqa: E501


        :return: The simple_asset_type of this BillOfMaterial.  # noqa: E501
        :rtype: str
        """
        return self._simple_asset_type

    @simple_asset_type.setter
    def simple_asset_type(self, simple_asset_type):
        """Sets the simple_asset_type of this BillOfMaterial.


        :param simple_asset_type: The simple_asset_type of this BillOfMaterial.  # noqa: E501
        :type: str
        """

        self._simple_asset_type = simple_asset_type

    @property
    def links(self):
        """Gets the links of this BillOfMaterial.  # noqa: E501


        :return: The links of this BillOfMaterial.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BillOfMaterial.


        :param links: The links of this BillOfMaterial.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this BillOfMaterial.  # noqa: E501


        :return: The embedded of this BillOfMaterial.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this BillOfMaterial.


        :param embedded: The embedded of this BillOfMaterial.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillOfMaterial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillOfMaterial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
