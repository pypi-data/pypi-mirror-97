# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class ComplexAssetRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'asset_id': 'str',
        'asset_name': 'str',
        'asset_category': 'str',
        'asset_category_id': 'str',
        'asset_external_identifier': 'str',
        'last_modified': 'datetime',
        'asset_class': 'str',
        'asset_sub_class': 'str',
        'asset_type': 'str',
        'asset_sub_type': 'str',
        'asset_criticality': 'str',
        'asset_work_group': 'str',
        'status': 'str',
        'asset_maintenance_type': 'str',
        'asset_maintenance_sub_type': 'str',
        'asset_security_group': 'str',
        'attributes': 'dict(str, str)',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'asset_id': 'AssetId',
        'asset_name': 'AssetName',
        'asset_category': 'AssetCategory',
        'asset_category_id': 'AssetCategoryId',
        'asset_external_identifier': 'AssetExternalIdentifier',
        'last_modified': 'LastModified',
        'asset_class': 'AssetClass',
        'asset_sub_class': 'AssetSubClass',
        'asset_type': 'AssetType',
        'asset_sub_type': 'AssetSubType',
        'asset_criticality': 'AssetCriticality',
        'asset_work_group': 'AssetWorkGroup',
        'status': 'Status',
        'asset_maintenance_type': 'AssetMaintenanceType',
        'asset_maintenance_sub_type': 'AssetMaintenanceSubType',
        'asset_security_group': 'AssetSecurityGroup',
        'attributes': 'Attributes',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, asset_id=None, asset_name=None, asset_category=None, asset_category_id=None, asset_external_identifier=None, last_modified=None, asset_class=None, asset_sub_class=None, asset_type=None, asset_sub_type=None, asset_criticality=None, asset_work_group=None, status=None, asset_maintenance_type=None, asset_maintenance_sub_type=None, asset_security_group=None, attributes=None, links=None, embedded=None):  # noqa: E501
        """ComplexAssetRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._asset_id = None
        self._asset_name = None
        self._asset_category = None
        self._asset_category_id = None
        self._asset_external_identifier = None
        self._last_modified = None
        self._asset_class = None
        self._asset_sub_class = None
        self._asset_type = None
        self._asset_sub_type = None
        self._asset_criticality = None
        self._asset_work_group = None
        self._status = None
        self._asset_maintenance_type = None
        self._asset_maintenance_sub_type = None
        self._asset_security_group = None
        self._attributes = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if asset_id is not None:
            self.asset_id = asset_id
        if asset_name is not None:
            self.asset_name = asset_name
        if asset_category is not None:
            self.asset_category = asset_category
        if asset_category_id is not None:
            self.asset_category_id = asset_category_id
        if asset_external_identifier is not None:
            self.asset_external_identifier = asset_external_identifier
        if last_modified is not None:
            self.last_modified = last_modified
        if asset_class is not None:
            self.asset_class = asset_class
        if asset_sub_class is not None:
            self.asset_sub_class = asset_sub_class
        if asset_type is not None:
            self.asset_type = asset_type
        if asset_sub_type is not None:
            self.asset_sub_type = asset_sub_type
        if asset_criticality is not None:
            self.asset_criticality = asset_criticality
        if asset_work_group is not None:
            self.asset_work_group = asset_work_group
        if status is not None:
            self.status = status
        if asset_maintenance_type is not None:
            self.asset_maintenance_type = asset_maintenance_type
        if asset_maintenance_sub_type is not None:
            self.asset_maintenance_sub_type = asset_maintenance_sub_type
        if asset_security_group is not None:
            self.asset_security_group = asset_security_group
        if attributes is not None:
            self.attributes = attributes
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this ComplexAssetRepresentation.  # noqa: E501


        :return: The id of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ComplexAssetRepresentation.


        :param id: The id of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def asset_id(self):
        """Gets the asset_id of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_id of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this ComplexAssetRepresentation.


        :param asset_id: The asset_id of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def asset_name(self):
        """Gets the asset_name of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_name of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this ComplexAssetRepresentation.


        :param asset_name: The asset_name of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def asset_category(self):
        """Gets the asset_category of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_category of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_category

    @asset_category.setter
    def asset_category(self, asset_category):
        """Sets the asset_category of this ComplexAssetRepresentation.


        :param asset_category: The asset_category of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_category = asset_category

    @property
    def asset_category_id(self):
        """Gets the asset_category_id of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_category_id of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_category_id

    @asset_category_id.setter
    def asset_category_id(self, asset_category_id):
        """Sets the asset_category_id of this ComplexAssetRepresentation.


        :param asset_category_id: The asset_category_id of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_category_id = asset_category_id

    @property
    def asset_external_identifier(self):
        """Gets the asset_external_identifier of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_external_identifier of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_external_identifier

    @asset_external_identifier.setter
    def asset_external_identifier(self, asset_external_identifier):
        """Sets the asset_external_identifier of this ComplexAssetRepresentation.


        :param asset_external_identifier: The asset_external_identifier of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_external_identifier = asset_external_identifier

    @property
    def last_modified(self):
        """Gets the last_modified of this ComplexAssetRepresentation.  # noqa: E501


        :return: The last_modified of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this ComplexAssetRepresentation.


        :param last_modified: The last_modified of this ComplexAssetRepresentation.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def asset_class(self):
        """Gets the asset_class of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_class of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_class

    @asset_class.setter
    def asset_class(self, asset_class):
        """Sets the asset_class of this ComplexAssetRepresentation.


        :param asset_class: The asset_class of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_class = asset_class

    @property
    def asset_sub_class(self):
        """Gets the asset_sub_class of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_sub_class of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_sub_class

    @asset_sub_class.setter
    def asset_sub_class(self, asset_sub_class):
        """Sets the asset_sub_class of this ComplexAssetRepresentation.


        :param asset_sub_class: The asset_sub_class of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_sub_class = asset_sub_class

    @property
    def asset_type(self):
        """Gets the asset_type of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_type of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this ComplexAssetRepresentation.


        :param asset_type: The asset_type of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def asset_sub_type(self):
        """Gets the asset_sub_type of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_sub_type of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_sub_type

    @asset_sub_type.setter
    def asset_sub_type(self, asset_sub_type):
        """Sets the asset_sub_type of this ComplexAssetRepresentation.


        :param asset_sub_type: The asset_sub_type of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_sub_type = asset_sub_type

    @property
    def asset_criticality(self):
        """Gets the asset_criticality of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_criticality of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_criticality

    @asset_criticality.setter
    def asset_criticality(self, asset_criticality):
        """Sets the asset_criticality of this ComplexAssetRepresentation.


        :param asset_criticality: The asset_criticality of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_criticality = asset_criticality

    @property
    def asset_work_group(self):
        """Gets the asset_work_group of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_work_group of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_work_group

    @asset_work_group.setter
    def asset_work_group(self, asset_work_group):
        """Sets the asset_work_group of this ComplexAssetRepresentation.


        :param asset_work_group: The asset_work_group of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_work_group = asset_work_group

    @property
    def status(self):
        """Gets the status of this ComplexAssetRepresentation.  # noqa: E501


        :return: The status of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ComplexAssetRepresentation.


        :param status: The status of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def asset_maintenance_type(self):
        """Gets the asset_maintenance_type of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_maintenance_type of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_maintenance_type

    @asset_maintenance_type.setter
    def asset_maintenance_type(self, asset_maintenance_type):
        """Sets the asset_maintenance_type of this ComplexAssetRepresentation.


        :param asset_maintenance_type: The asset_maintenance_type of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_maintenance_type = asset_maintenance_type

    @property
    def asset_maintenance_sub_type(self):
        """Gets the asset_maintenance_sub_type of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_maintenance_sub_type of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_maintenance_sub_type

    @asset_maintenance_sub_type.setter
    def asset_maintenance_sub_type(self, asset_maintenance_sub_type):
        """Sets the asset_maintenance_sub_type of this ComplexAssetRepresentation.


        :param asset_maintenance_sub_type: The asset_maintenance_sub_type of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_maintenance_sub_type = asset_maintenance_sub_type

    @property
    def asset_security_group(self):
        """Gets the asset_security_group of this ComplexAssetRepresentation.  # noqa: E501


        :return: The asset_security_group of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_security_group

    @asset_security_group.setter
    def asset_security_group(self, asset_security_group):
        """Sets the asset_security_group of this ComplexAssetRepresentation.


        :param asset_security_group: The asset_security_group of this ComplexAssetRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_security_group = asset_security_group

    @property
    def attributes(self):
        """Gets the attributes of this ComplexAssetRepresentation.  # noqa: E501


        :return: The attributes of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this ComplexAssetRepresentation.


        :param attributes: The attributes of this ComplexAssetRepresentation.  # noqa: E501
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def links(self):
        """Gets the links of this ComplexAssetRepresentation.  # noqa: E501


        :return: The links of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ComplexAssetRepresentation.


        :param links: The links of this ComplexAssetRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this ComplexAssetRepresentation.  # noqa: E501


        :return: The embedded of this ComplexAssetRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this ComplexAssetRepresentation.


        :param embedded: The embedded of this ComplexAssetRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ComplexAssetRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplexAssetRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
