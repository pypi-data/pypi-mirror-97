# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class CustomAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'street_number': 'str',
        'street_address': 'str',
        'city_suburb': 'str',
        'state': 'str',
        'zip_postcode': 'str',
        'country': 'str',
        'google_place_id': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'street_number': 'StreetNumber',
        'street_address': 'StreetAddress',
        'city_suburb': 'CitySuburb',
        'state': 'State',
        'zip_postcode': 'ZipPostcode',
        'country': 'Country',
        'google_place_id': 'GooglePlaceId',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, street_number=None, street_address=None, city_suburb=None, state=None, zip_postcode=None, country=None, google_place_id=None, links=None, embedded=None):  # noqa: E501
        """CustomAddress - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._street_number = None
        self._street_address = None
        self._city_suburb = None
        self._state = None
        self._zip_postcode = None
        self._country = None
        self._google_place_id = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if street_number is not None:
            self.street_number = street_number
        if street_address is not None:
            self.street_address = street_address
        if city_suburb is not None:
            self.city_suburb = city_suburb
        if state is not None:
            self.state = state
        if zip_postcode is not None:
            self.zip_postcode = zip_postcode
        if country is not None:
            self.country = country
        if google_place_id is not None:
            self.google_place_id = google_place_id
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this CustomAddress.  # noqa: E501


        :return: The id of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomAddress.


        :param id: The id of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def street_number(self):
        """Gets the street_number of this CustomAddress.  # noqa: E501


        :return: The street_number of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this CustomAddress.


        :param street_number: The street_number of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def street_address(self):
        """Gets the street_address of this CustomAddress.  # noqa: E501


        :return: The street_address of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_address

    @street_address.setter
    def street_address(self, street_address):
        """Sets the street_address of this CustomAddress.


        :param street_address: The street_address of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._street_address = street_address

    @property
    def city_suburb(self):
        """Gets the city_suburb of this CustomAddress.  # noqa: E501


        :return: The city_suburb of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._city_suburb

    @city_suburb.setter
    def city_suburb(self, city_suburb):
        """Sets the city_suburb of this CustomAddress.


        :param city_suburb: The city_suburb of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._city_suburb = city_suburb

    @property
    def state(self):
        """Gets the state of this CustomAddress.  # noqa: E501


        :return: The state of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CustomAddress.


        :param state: The state of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_postcode(self):
        """Gets the zip_postcode of this CustomAddress.  # noqa: E501


        :return: The zip_postcode of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip_postcode

    @zip_postcode.setter
    def zip_postcode(self, zip_postcode):
        """Sets the zip_postcode of this CustomAddress.


        :param zip_postcode: The zip_postcode of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._zip_postcode = zip_postcode

    @property
    def country(self):
        """Gets the country of this CustomAddress.  # noqa: E501


        :return: The country of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CustomAddress.


        :param country: The country of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def google_place_id(self):
        """Gets the google_place_id of this CustomAddress.  # noqa: E501


        :return: The google_place_id of this CustomAddress.  # noqa: E501
        :rtype: str
        """
        return self._google_place_id

    @google_place_id.setter
    def google_place_id(self, google_place_id):
        """Sets the google_place_id of this CustomAddress.


        :param google_place_id: The google_place_id of this CustomAddress.  # noqa: E501
        :type: str
        """

        self._google_place_id = google_place_id

    @property
    def links(self):
        """Gets the links of this CustomAddress.  # noqa: E501


        :return: The links of this CustomAddress.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomAddress.


        :param links: The links of this CustomAddress.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this CustomAddress.  # noqa: E501


        :return: The embedded of this CustomAddress.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this CustomAddress.


        :param embedded: The embedded of this CustomAddress.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
