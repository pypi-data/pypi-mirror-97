# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DbGeographyWellKnownValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coordinate_system_id': 'int',
        'well_known_text': 'str',
        'well_known_binary': 'str'
    }

    attribute_map = {
        'coordinate_system_id': 'CoordinateSystemId',
        'well_known_text': 'WellKnownText',
        'well_known_binary': 'WellKnownBinary'
    }

    def __init__(self, coordinate_system_id=None, well_known_text=None, well_known_binary=None):  # noqa: E501
        """DbGeographyWellKnownValue - a model defined in Swagger"""  # noqa: E501

        self._coordinate_system_id = None
        self._well_known_text = None
        self._well_known_binary = None
        self.discriminator = None

        if coordinate_system_id is not None:
            self.coordinate_system_id = coordinate_system_id
        if well_known_text is not None:
            self.well_known_text = well_known_text
        if well_known_binary is not None:
            self.well_known_binary = well_known_binary

    @property
    def coordinate_system_id(self):
        """Gets the coordinate_system_id of this DbGeographyWellKnownValue.  # noqa: E501


        :return: The coordinate_system_id of this DbGeographyWellKnownValue.  # noqa: E501
        :rtype: int
        """
        return self._coordinate_system_id

    @coordinate_system_id.setter
    def coordinate_system_id(self, coordinate_system_id):
        """Sets the coordinate_system_id of this DbGeographyWellKnownValue.


        :param coordinate_system_id: The coordinate_system_id of this DbGeographyWellKnownValue.  # noqa: E501
        :type: int
        """

        self._coordinate_system_id = coordinate_system_id

    @property
    def well_known_text(self):
        """Gets the well_known_text of this DbGeographyWellKnownValue.  # noqa: E501


        :return: The well_known_text of this DbGeographyWellKnownValue.  # noqa: E501
        :rtype: str
        """
        return self._well_known_text

    @well_known_text.setter
    def well_known_text(self, well_known_text):
        """Sets the well_known_text of this DbGeographyWellKnownValue.


        :param well_known_text: The well_known_text of this DbGeographyWellKnownValue.  # noqa: E501
        :type: str
        """

        self._well_known_text = well_known_text

    @property
    def well_known_binary(self):
        """Gets the well_known_binary of this DbGeographyWellKnownValue.  # noqa: E501


        :return: The well_known_binary of this DbGeographyWellKnownValue.  # noqa: E501
        :rtype: str
        """
        return self._well_known_binary

    @well_known_binary.setter
    def well_known_binary(self, well_known_binary):
        """Sets the well_known_binary of this DbGeographyWellKnownValue.


        :param well_known_binary: The well_known_binary of this DbGeographyWellKnownValue.  # noqa: E501
        :type: str
        """
        if well_known_binary is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', well_known_binary):  # noqa: E501
            raise ValueError(r"Invalid value for `well_known_binary`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._well_known_binary = well_known_binary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DbGeographyWellKnownValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DbGeographyWellKnownValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
