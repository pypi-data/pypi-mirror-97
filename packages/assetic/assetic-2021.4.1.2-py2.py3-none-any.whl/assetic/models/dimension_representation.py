# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class DimensionRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_id': 'str',
        'asset_name': 'str',
        'asset_category_id': 'str',
        'asset_category': 'str',
        'component_guid_id': 'str',
        'component_id': 'str',
        'component_name': 'str',
        'component_type': 'str',
        'component_type_id': 'str',
        'component_network_measure_unit_name': 'str',
        'component_network_measure_unit_id': 'int',
        'measurement_record_id': 'str',
        'friendly_measurement_record_id': 'int',
        'record_type': 'str',
        'measurement_type_name': 'str',
        'measurement_type_id': 'int',
        'measurement_type': 'str',
        'measurement': 'float',
        'measurement_unit_name': 'str',
        'measurement_unit_id': 'int',
        'multiplier': 'float',
        'message': 'str',
        'comments': 'str',
        'last_modified': 'datetime',
        'last_modified_by': 'str',
        'shape_name': 'str',
        'shape_label': 'str',
        'diameter': 'float',
        'diameter_unit': 'str',
        'length': 'float',
        'length_unit': 'str',
        'width': 'float',
        'width_unit': 'str',
        'depth': 'float',
        'depth_unit': 'str',
        'height': 'float',
        'height_unit': 'str',
        'base': 'float',
        'base_unit': 'str',
        'top': 'float',
        'top_unit': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'asset_id': 'AssetId',
        'asset_name': 'AssetName',
        'asset_category_id': 'AssetCategoryId',
        'asset_category': 'AssetCategory',
        'component_guid_id': 'ComponentGuidId',
        'component_id': 'ComponentId',
        'component_name': 'ComponentName',
        'component_type': 'ComponentType',
        'component_type_id': 'ComponentTypeId',
        'component_network_measure_unit_name': 'ComponentNetworkMeasureUnitName',
        'component_network_measure_unit_id': 'ComponentNetworkMeasureUnitId',
        'measurement_record_id': 'MeasurementRecordId',
        'friendly_measurement_record_id': 'FriendlyMeasurementRecordId',
        'record_type': 'RecordType',
        'measurement_type_name': 'MeasurementTypeName',
        'measurement_type_id': 'MeasurementTypeId',
        'measurement_type': 'MeasurementType',
        'measurement': 'Measurement',
        'measurement_unit_name': 'MeasurementUnitName',
        'measurement_unit_id': 'MeasurementUnitId',
        'multiplier': 'Multiplier',
        'message': 'Message',
        'comments': 'Comments',
        'last_modified': 'LastModified',
        'last_modified_by': 'LastModifiedBy',
        'shape_name': 'ShapeName',
        'shape_label': 'ShapeLabel',
        'diameter': 'Diameter',
        'diameter_unit': 'DiameterUnit',
        'length': 'Length',
        'length_unit': 'LengthUnit',
        'width': 'Width',
        'width_unit': 'WidthUnit',
        'depth': 'Depth',
        'depth_unit': 'DepthUnit',
        'height': 'Height',
        'height_unit': 'HeightUnit',
        'base': 'Base',
        'base_unit': 'BaseUnit',
        'top': 'Top',
        'top_unit': 'TopUnit',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, asset_id=None, asset_name=None, asset_category_id=None, asset_category=None, component_guid_id=None, component_id=None, component_name=None, component_type=None, component_type_id=None, component_network_measure_unit_name=None, component_network_measure_unit_id=None, measurement_record_id=None, friendly_measurement_record_id=None, record_type=None, measurement_type_name=None, measurement_type_id=None, measurement_type=None, measurement=None, measurement_unit_name=None, measurement_unit_id=None, multiplier=None, message=None, comments=None, last_modified=None, last_modified_by=None, shape_name=None, shape_label=None, diameter=None, diameter_unit=None, length=None, length_unit=None, width=None, width_unit=None, depth=None, depth_unit=None, height=None, height_unit=None, base=None, base_unit=None, top=None, top_unit=None, links=None, embedded=None):  # noqa: E501
        """DimensionRepresentation - a model defined in Swagger"""  # noqa: E501

        self._asset_id = None
        self._asset_name = None
        self._asset_category_id = None
        self._asset_category = None
        self._component_guid_id = None
        self._component_id = None
        self._component_name = None
        self._component_type = None
        self._component_type_id = None
        self._component_network_measure_unit_name = None
        self._component_network_measure_unit_id = None
        self._measurement_record_id = None
        self._friendly_measurement_record_id = None
        self._record_type = None
        self._measurement_type_name = None
        self._measurement_type_id = None
        self._measurement_type = None
        self._measurement = None
        self._measurement_unit_name = None
        self._measurement_unit_id = None
        self._multiplier = None
        self._message = None
        self._comments = None
        self._last_modified = None
        self._last_modified_by = None
        self._shape_name = None
        self._shape_label = None
        self._diameter = None
        self._diameter_unit = None
        self._length = None
        self._length_unit = None
        self._width = None
        self._width_unit = None
        self._depth = None
        self._depth_unit = None
        self._height = None
        self._height_unit = None
        self._base = None
        self._base_unit = None
        self._top = None
        self._top_unit = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if asset_id is not None:
            self.asset_id = asset_id
        if asset_name is not None:
            self.asset_name = asset_name
        if asset_category_id is not None:
            self.asset_category_id = asset_category_id
        if asset_category is not None:
            self.asset_category = asset_category
        if component_guid_id is not None:
            self.component_guid_id = component_guid_id
        if component_id is not None:
            self.component_id = component_id
        if component_name is not None:
            self.component_name = component_name
        if component_type is not None:
            self.component_type = component_type
        if component_type_id is not None:
            self.component_type_id = component_type_id
        if component_network_measure_unit_name is not None:
            self.component_network_measure_unit_name = component_network_measure_unit_name
        if component_network_measure_unit_id is not None:
            self.component_network_measure_unit_id = component_network_measure_unit_id
        if measurement_record_id is not None:
            self.measurement_record_id = measurement_record_id
        if friendly_measurement_record_id is not None:
            self.friendly_measurement_record_id = friendly_measurement_record_id
        if record_type is not None:
            self.record_type = record_type
        if measurement_type_name is not None:
            self.measurement_type_name = measurement_type_name
        if measurement_type_id is not None:
            self.measurement_type_id = measurement_type_id
        if measurement_type is not None:
            self.measurement_type = measurement_type
        if measurement is not None:
            self.measurement = measurement
        if measurement_unit_name is not None:
            self.measurement_unit_name = measurement_unit_name
        if measurement_unit_id is not None:
            self.measurement_unit_id = measurement_unit_id
        if multiplier is not None:
            self.multiplier = multiplier
        if message is not None:
            self.message = message
        if comments is not None:
            self.comments = comments
        if last_modified is not None:
            self.last_modified = last_modified
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if shape_name is not None:
            self.shape_name = shape_name
        if shape_label is not None:
            self.shape_label = shape_label
        if diameter is not None:
            self.diameter = diameter
        if diameter_unit is not None:
            self.diameter_unit = diameter_unit
        if length is not None:
            self.length = length
        if length_unit is not None:
            self.length_unit = length_unit
        if width is not None:
            self.width = width
        if width_unit is not None:
            self.width_unit = width_unit
        if depth is not None:
            self.depth = depth
        if depth_unit is not None:
            self.depth_unit = depth_unit
        if height is not None:
            self.height = height
        if height_unit is not None:
            self.height_unit = height_unit
        if base is not None:
            self.base = base
        if base_unit is not None:
            self.base_unit = base_unit
        if top is not None:
            self.top = top
        if top_unit is not None:
            self.top_unit = top_unit
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def asset_id(self):
        """Gets the asset_id of this DimensionRepresentation.  # noqa: E501


        :return: The asset_id of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this DimensionRepresentation.


        :param asset_id: The asset_id of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def asset_name(self):
        """Gets the asset_name of this DimensionRepresentation.  # noqa: E501


        :return: The asset_name of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_name

    @asset_name.setter
    def asset_name(self, asset_name):
        """Sets the asset_name of this DimensionRepresentation.


        :param asset_name: The asset_name of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_name = asset_name

    @property
    def asset_category_id(self):
        """Gets the asset_category_id of this DimensionRepresentation.  # noqa: E501


        :return: The asset_category_id of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_category_id

    @asset_category_id.setter
    def asset_category_id(self, asset_category_id):
        """Sets the asset_category_id of this DimensionRepresentation.


        :param asset_category_id: The asset_category_id of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_category_id = asset_category_id

    @property
    def asset_category(self):
        """Gets the asset_category of this DimensionRepresentation.  # noqa: E501


        :return: The asset_category of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._asset_category

    @asset_category.setter
    def asset_category(self, asset_category):
        """Sets the asset_category of this DimensionRepresentation.


        :param asset_category: The asset_category of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._asset_category = asset_category

    @property
    def component_guid_id(self):
        """Gets the component_guid_id of this DimensionRepresentation.  # noqa: E501


        :return: The component_guid_id of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_guid_id

    @component_guid_id.setter
    def component_guid_id(self, component_guid_id):
        """Sets the component_guid_id of this DimensionRepresentation.


        :param component_guid_id: The component_guid_id of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_guid_id = component_guid_id

    @property
    def component_id(self):
        """Gets the component_id of this DimensionRepresentation.  # noqa: E501


        :return: The component_id of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this DimensionRepresentation.


        :param component_id: The component_id of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def component_name(self):
        """Gets the component_name of this DimensionRepresentation.  # noqa: E501


        :return: The component_name of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this DimensionRepresentation.


        :param component_name: The component_name of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def component_type(self):
        """Gets the component_type of this DimensionRepresentation.  # noqa: E501


        :return: The component_type of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this DimensionRepresentation.


        :param component_type: The component_type of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def component_type_id(self):
        """Gets the component_type_id of this DimensionRepresentation.  # noqa: E501


        :return: The component_type_id of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_type_id

    @component_type_id.setter
    def component_type_id(self, component_type_id):
        """Sets the component_type_id of this DimensionRepresentation.


        :param component_type_id: The component_type_id of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_type_id = component_type_id

    @property
    def component_network_measure_unit_name(self):
        """Gets the component_network_measure_unit_name of this DimensionRepresentation.  # noqa: E501


        :return: The component_network_measure_unit_name of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._component_network_measure_unit_name

    @component_network_measure_unit_name.setter
    def component_network_measure_unit_name(self, component_network_measure_unit_name):
        """Sets the component_network_measure_unit_name of this DimensionRepresentation.


        :param component_network_measure_unit_name: The component_network_measure_unit_name of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._component_network_measure_unit_name = component_network_measure_unit_name

    @property
    def component_network_measure_unit_id(self):
        """Gets the component_network_measure_unit_id of this DimensionRepresentation.  # noqa: E501


        :return: The component_network_measure_unit_id of this DimensionRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._component_network_measure_unit_id

    @component_network_measure_unit_id.setter
    def component_network_measure_unit_id(self, component_network_measure_unit_id):
        """Sets the component_network_measure_unit_id of this DimensionRepresentation.


        :param component_network_measure_unit_id: The component_network_measure_unit_id of this DimensionRepresentation.  # noqa: E501
        :type: int
        """

        self._component_network_measure_unit_id = component_network_measure_unit_id

    @property
    def measurement_record_id(self):
        """Gets the measurement_record_id of this DimensionRepresentation.  # noqa: E501


        :return: The measurement_record_id of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._measurement_record_id

    @measurement_record_id.setter
    def measurement_record_id(self, measurement_record_id):
        """Sets the measurement_record_id of this DimensionRepresentation.


        :param measurement_record_id: The measurement_record_id of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._measurement_record_id = measurement_record_id

    @property
    def friendly_measurement_record_id(self):
        """Gets the friendly_measurement_record_id of this DimensionRepresentation.  # noqa: E501


        :return: The friendly_measurement_record_id of this DimensionRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._friendly_measurement_record_id

    @friendly_measurement_record_id.setter
    def friendly_measurement_record_id(self, friendly_measurement_record_id):
        """Sets the friendly_measurement_record_id of this DimensionRepresentation.


        :param friendly_measurement_record_id: The friendly_measurement_record_id of this DimensionRepresentation.  # noqa: E501
        :type: int
        """

        self._friendly_measurement_record_id = friendly_measurement_record_id

    @property
    def record_type(self):
        """Gets the record_type of this DimensionRepresentation.  # noqa: E501


        :return: The record_type of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this DimensionRepresentation.


        :param record_type: The record_type of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._record_type = record_type

    @property
    def measurement_type_name(self):
        """Gets the measurement_type_name of this DimensionRepresentation.  # noqa: E501


        :return: The measurement_type_name of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._measurement_type_name

    @measurement_type_name.setter
    def measurement_type_name(self, measurement_type_name):
        """Sets the measurement_type_name of this DimensionRepresentation.


        :param measurement_type_name: The measurement_type_name of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._measurement_type_name = measurement_type_name

    @property
    def measurement_type_id(self):
        """Gets the measurement_type_id of this DimensionRepresentation.  # noqa: E501


        :return: The measurement_type_id of this DimensionRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._measurement_type_id

    @measurement_type_id.setter
    def measurement_type_id(self, measurement_type_id):
        """Sets the measurement_type_id of this DimensionRepresentation.


        :param measurement_type_id: The measurement_type_id of this DimensionRepresentation.  # noqa: E501
        :type: int
        """

        self._measurement_type_id = measurement_type_id

    @property
    def measurement_type(self):
        """Gets the measurement_type of this DimensionRepresentation.  # noqa: E501


        :return: The measurement_type of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._measurement_type

    @measurement_type.setter
    def measurement_type(self, measurement_type):
        """Sets the measurement_type of this DimensionRepresentation.


        :param measurement_type: The measurement_type of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._measurement_type = measurement_type

    @property
    def measurement(self):
        """Gets the measurement of this DimensionRepresentation.  # noqa: E501


        :return: The measurement of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._measurement

    @measurement.setter
    def measurement(self, measurement):
        """Sets the measurement of this DimensionRepresentation.


        :param measurement: The measurement of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._measurement = measurement

    @property
    def measurement_unit_name(self):
        """Gets the measurement_unit_name of this DimensionRepresentation.  # noqa: E501


        :return: The measurement_unit_name of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._measurement_unit_name

    @measurement_unit_name.setter
    def measurement_unit_name(self, measurement_unit_name):
        """Sets the measurement_unit_name of this DimensionRepresentation.


        :param measurement_unit_name: The measurement_unit_name of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._measurement_unit_name = measurement_unit_name

    @property
    def measurement_unit_id(self):
        """Gets the measurement_unit_id of this DimensionRepresentation.  # noqa: E501


        :return: The measurement_unit_id of this DimensionRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._measurement_unit_id

    @measurement_unit_id.setter
    def measurement_unit_id(self, measurement_unit_id):
        """Sets the measurement_unit_id of this DimensionRepresentation.


        :param measurement_unit_id: The measurement_unit_id of this DimensionRepresentation.  # noqa: E501
        :type: int
        """

        self._measurement_unit_id = measurement_unit_id

    @property
    def multiplier(self):
        """Gets the multiplier of this DimensionRepresentation.  # noqa: E501


        :return: The multiplier of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier):
        """Sets the multiplier of this DimensionRepresentation.


        :param multiplier: The multiplier of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._multiplier = multiplier

    @property
    def message(self):
        """Gets the message of this DimensionRepresentation.  # noqa: E501


        :return: The message of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DimensionRepresentation.


        :param message: The message of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def comments(self):
        """Gets the comments of this DimensionRepresentation.  # noqa: E501


        :return: The comments of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this DimensionRepresentation.


        :param comments: The comments of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def last_modified(self):
        """Gets the last_modified of this DimensionRepresentation.  # noqa: E501


        :return: The last_modified of this DimensionRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DimensionRepresentation.


        :param last_modified: The last_modified of this DimensionRepresentation.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this DimensionRepresentation.  # noqa: E501


        :return: The last_modified_by of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this DimensionRepresentation.


        :param last_modified_by: The last_modified_by of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def shape_name(self):
        """Gets the shape_name of this DimensionRepresentation.  # noqa: E501


        :return: The shape_name of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._shape_name

    @shape_name.setter
    def shape_name(self, shape_name):
        """Sets the shape_name of this DimensionRepresentation.


        :param shape_name: The shape_name of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._shape_name = shape_name

    @property
    def shape_label(self):
        """Gets the shape_label of this DimensionRepresentation.  # noqa: E501


        :return: The shape_label of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._shape_label

    @shape_label.setter
    def shape_label(self, shape_label):
        """Sets the shape_label of this DimensionRepresentation.


        :param shape_label: The shape_label of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._shape_label = shape_label

    @property
    def diameter(self):
        """Gets the diameter of this DimensionRepresentation.  # noqa: E501


        :return: The diameter of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this DimensionRepresentation.


        :param diameter: The diameter of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._diameter = diameter

    @property
    def diameter_unit(self):
        """Gets the diameter_unit of this DimensionRepresentation.  # noqa: E501


        :return: The diameter_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._diameter_unit

    @diameter_unit.setter
    def diameter_unit(self, diameter_unit):
        """Sets the diameter_unit of this DimensionRepresentation.


        :param diameter_unit: The diameter_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._diameter_unit = diameter_unit

    @property
    def length(self):
        """Gets the length of this DimensionRepresentation.  # noqa: E501


        :return: The length of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this DimensionRepresentation.


        :param length: The length of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def length_unit(self):
        """Gets the length_unit of this DimensionRepresentation.  # noqa: E501


        :return: The length_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._length_unit

    @length_unit.setter
    def length_unit(self, length_unit):
        """Sets the length_unit of this DimensionRepresentation.


        :param length_unit: The length_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._length_unit = length_unit

    @property
    def width(self):
        """Gets the width of this DimensionRepresentation.  # noqa: E501


        :return: The width of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this DimensionRepresentation.


        :param width: The width of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._width = width

    @property
    def width_unit(self):
        """Gets the width_unit of this DimensionRepresentation.  # noqa: E501


        :return: The width_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._width_unit

    @width_unit.setter
    def width_unit(self, width_unit):
        """Sets the width_unit of this DimensionRepresentation.


        :param width_unit: The width_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._width_unit = width_unit

    @property
    def depth(self):
        """Gets the depth of this DimensionRepresentation.  # noqa: E501


        :return: The depth of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this DimensionRepresentation.


        :param depth: The depth of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._depth = depth

    @property
    def depth_unit(self):
        """Gets the depth_unit of this DimensionRepresentation.  # noqa: E501


        :return: The depth_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._depth_unit

    @depth_unit.setter
    def depth_unit(self, depth_unit):
        """Sets the depth_unit of this DimensionRepresentation.


        :param depth_unit: The depth_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._depth_unit = depth_unit

    @property
    def height(self):
        """Gets the height of this DimensionRepresentation.  # noqa: E501


        :return: The height of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this DimensionRepresentation.


        :param height: The height of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._height = height

    @property
    def height_unit(self):
        """Gets the height_unit of this DimensionRepresentation.  # noqa: E501


        :return: The height_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._height_unit

    @height_unit.setter
    def height_unit(self, height_unit):
        """Sets the height_unit of this DimensionRepresentation.


        :param height_unit: The height_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._height_unit = height_unit

    @property
    def base(self):
        """Gets the base of this DimensionRepresentation.  # noqa: E501


        :return: The base of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this DimensionRepresentation.


        :param base: The base of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._base = base

    @property
    def base_unit(self):
        """Gets the base_unit of this DimensionRepresentation.  # noqa: E501


        :return: The base_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._base_unit

    @base_unit.setter
    def base_unit(self, base_unit):
        """Sets the base_unit of this DimensionRepresentation.


        :param base_unit: The base_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._base_unit = base_unit

    @property
    def top(self):
        """Gets the top of this DimensionRepresentation.  # noqa: E501


        :return: The top of this DimensionRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this DimensionRepresentation.


        :param top: The top of this DimensionRepresentation.  # noqa: E501
        :type: float
        """

        self._top = top

    @property
    def top_unit(self):
        """Gets the top_unit of this DimensionRepresentation.  # noqa: E501


        :return: The top_unit of this DimensionRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._top_unit

    @top_unit.setter
    def top_unit(self, top_unit):
        """Sets the top_unit of this DimensionRepresentation.


        :param top_unit: The top_unit of this DimensionRepresentation.  # noqa: E501
        :type: str
        """

        self._top_unit = top_unit

    @property
    def links(self):
        """Gets the links of this DimensionRepresentation.  # noqa: E501


        :return: The links of this DimensionRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DimensionRepresentation.


        :param links: The links of this DimensionRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this DimensionRepresentation.  # noqa: E501


        :return: The embedded of this DimensionRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this DimensionRepresentation.


        :param embedded: The embedded of this DimensionRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DimensionRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DimensionRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
