# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class DocumentParentRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_id': 'str',
        'parent_identifier': 'str',
        'parent_type': 'str',
        'record_id': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'parent_id': 'ParentId',
        'parent_identifier': 'ParentIdentifier',
        'parent_type': 'ParentType',
        'record_id': 'RecordId',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, parent_id=None, parent_identifier=None, parent_type=None, record_id=None, links=None, embedded=None):  # noqa: E501
        """DocumentParentRepresentation - a model defined in Swagger"""  # noqa: E501

        self._parent_id = None
        self._parent_identifier = None
        self._parent_type = None
        self._record_id = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if parent_id is not None:
            self.parent_id = parent_id
        if parent_identifier is not None:
            self.parent_identifier = parent_identifier
        if parent_type is not None:
            self.parent_type = parent_type
        if record_id is not None:
            self.record_id = record_id
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def parent_id(self):
        """Gets the parent_id of this DocumentParentRepresentation.  # noqa: E501


        :return: The parent_id of this DocumentParentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this DocumentParentRepresentation.


        :param parent_id: The parent_id of this DocumentParentRepresentation.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_identifier(self):
        """Gets the parent_identifier of this DocumentParentRepresentation.  # noqa: E501


        :return: The parent_identifier of this DocumentParentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._parent_identifier

    @parent_identifier.setter
    def parent_identifier(self, parent_identifier):
        """Sets the parent_identifier of this DocumentParentRepresentation.


        :param parent_identifier: The parent_identifier of this DocumentParentRepresentation.  # noqa: E501
        :type: str
        """

        self._parent_identifier = parent_identifier

    @property
    def parent_type(self):
        """Gets the parent_type of this DocumentParentRepresentation.  # noqa: E501


        :return: The parent_type of this DocumentParentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this DocumentParentRepresentation.


        :param parent_type: The parent_type of this DocumentParentRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "All", "ComplexAsset", "WorkRequest", "L2Assessment", "DataExchange", "GroupAssets", "Reports", "WorkOrder", "JobPlan", "SearchProfle", "FinancialYearAccountingReports", "FinancialPeriodAccountingReports", "AsmtProject", "AsmtTask", "AsmtFormResult", "WorkOrder2", "ValuationReport", "RevaluationReport", "BulkProcess", "DataExchangeProfile", "BackgroundWorkerLog", "TransactionBatchExportJournals", "FinancialYearFairValueJournalReport", "FinancialPeriodFairValueJournalReport", "FinancialYearHistoricalJournalReport", "FinancialPeriodHistoriucalJournalReport", "ReconciliationHistoricalReport", "ReconciliationFairvalueReport", "ServiceBusWorkerErrorDocument", "BasicReconciliationHistoricalReport", "BasicReconciliationFairvalueReport", "SysBackgroundWorker", "Predictor", "JobPlan2"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if parent_type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(parent_type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `parent_type` ({0}), must be one of {1}"  # noqa: E501
                    .format(parent_type, allowed_values)
                )

        self._parent_type = parent_type

    @property
    def record_id(self):
        """Gets the record_id of this DocumentParentRepresentation.  # noqa: E501


        :return: The record_id of this DocumentParentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this DocumentParentRepresentation.


        :param record_id: The record_id of this DocumentParentRepresentation.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def links(self):
        """Gets the links of this DocumentParentRepresentation.  # noqa: E501


        :return: The links of this DocumentParentRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DocumentParentRepresentation.


        :param links: The links of this DocumentParentRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this DocumentParentRepresentation.  # noqa: E501


        :return: The embedded of this DocumentParentRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this DocumentParentRepresentation.


        :param embedded: The embedded of this DocumentParentRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentParentRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentParentRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
