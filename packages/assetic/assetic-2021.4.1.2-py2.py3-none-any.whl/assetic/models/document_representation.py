# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.document_asmt_representation import DocumentAsmtRepresentation  # noqa: F401,E501
##from assetic.models.document_asset_representation import DocumentAssetRepresentation  # noqa: F401,E501
##from assetic.models.document_group_asset_representation import DocumentGroupAssetRepresentation  # noqa: F401,E501
##from assetic.models.document_work_order_representation import DocumentWorkOrderRepresentation  # noqa: F401,E501
##from assetic.models.document_work_request_representation import DocumentWorkRequestRepresentation  # noqa: F401,E501
##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.file_properties_representation import FilePropertiesRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class DocumentRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'label': 'str',
        'external_id': 'str',
        'description': 'str',
        'expiry_date': 'datetime',
        'is_expired': 'bool',
        'created_date': 'datetime',
        'last_modified': 'datetime',
        'document_size': 'float',
        'document_link': 'str',
        'mime_type': 'str',
        'document_group': 'int',
        'doc_group_value': 'str',
        'doc_group_label': 'str',
        'document_sub_category': 'int',
        'doc_sub_category_value': 'str',
        'doc_sub_category_label': 'str',
        'document_category': 'int',
        'doc_category_value': 'str',
        'doc_category_label': 'str',
        'created_user_first_name': 'str',
        'created_user_last_name': 'str',
        'last_modified_user_first_name': 'str',
        'last_modified_user_last_name': 'str',
        'file_property': 'list[FilePropertiesRepresentation]',
        'document_source': 'str',
        'parent_type': 'str',
        'parent_id': 'str',
        'parent_identifier': 'str',
        'record_id': 'str',
        'is_key_photo': 'bool',
        'is_image': 'bool',
        'status': 'str',
        'document_asset': 'DocumentAssetRepresentation',
        'document_work_request': 'DocumentWorkRequestRepresentation',
        'document_work_order': 'DocumentWorkOrderRepresentation',
        'document_assessment_form_result': 'DocumentAsmtRepresentation',
        'document_group_asset': 'DocumentGroupAssetRepresentation',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'label': 'Label',
        'external_id': 'ExternalId',
        'description': 'Description',
        'expiry_date': 'ExpiryDate',
        'is_expired': 'IsExpired',
        'created_date': 'CreatedDate',
        'last_modified': 'LastModified',
        'document_size': 'DocumentSize',
        'document_link': 'DocumentLink',
        'mime_type': 'MimeType',
        'document_group': 'DocumentGroup',
        'doc_group_value': 'DocGroupValue',
        'doc_group_label': 'DocGroupLabel',
        'document_sub_category': 'DocumentSubCategory',
        'doc_sub_category_value': 'DocSubCategoryValue',
        'doc_sub_category_label': 'DocSubCategoryLabel',
        'document_category': 'DocumentCategory',
        'doc_category_value': 'DocCategoryValue',
        'doc_category_label': 'DocCategoryLabel',
        'created_user_first_name': 'CreatedUserFirstName',
        'created_user_last_name': 'CreatedUserLastName',
        'last_modified_user_first_name': 'LastModifiedUserFirstName',
        'last_modified_user_last_name': 'LastModifiedUserLastName',
        'file_property': 'FileProperty',
        'document_source': 'DocumentSource',
        'parent_type': 'ParentType',
        'parent_id': 'ParentId',
        'parent_identifier': 'ParentIdentifier',
        'record_id': 'RecordId',
        'is_key_photo': 'IsKeyPhoto',
        'is_image': 'IsImage',
        'status': 'Status',
        'document_asset': 'DocumentAsset',
        'document_work_request': 'DocumentWorkRequest',
        'document_work_order': 'DocumentWorkOrder',
        'document_assessment_form_result': 'DocumentAssessmentFormResult',
        'document_group_asset': 'DocumentGroupAsset',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, name=None, label=None, external_id=None, description=None, expiry_date=None, is_expired=None, created_date=None, last_modified=None, document_size=None, document_link=None, mime_type=None, document_group=None, doc_group_value=None, doc_group_label=None, document_sub_category=None, doc_sub_category_value=None, doc_sub_category_label=None, document_category=None, doc_category_value=None, doc_category_label=None, created_user_first_name=None, created_user_last_name=None, last_modified_user_first_name=None, last_modified_user_last_name=None, file_property=None, document_source=None, parent_type=None, parent_id=None, parent_identifier=None, record_id=None, is_key_photo=None, is_image=None, status=None, document_asset=None, document_work_request=None, document_work_order=None, document_assessment_form_result=None, document_group_asset=None, links=None, embedded=None):  # noqa: E501
        """DocumentRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._label = None
        self._external_id = None
        self._description = None
        self._expiry_date = None
        self._is_expired = None
        self._created_date = None
        self._last_modified = None
        self._document_size = None
        self._document_link = None
        self._mime_type = None
        self._document_group = None
        self._doc_group_value = None
        self._doc_group_label = None
        self._document_sub_category = None
        self._doc_sub_category_value = None
        self._doc_sub_category_label = None
        self._document_category = None
        self._doc_category_value = None
        self._doc_category_label = None
        self._created_user_first_name = None
        self._created_user_last_name = None
        self._last_modified_user_first_name = None
        self._last_modified_user_last_name = None
        self._file_property = None
        self._document_source = None
        self._parent_type = None
        self._parent_id = None
        self._parent_identifier = None
        self._record_id = None
        self._is_key_photo = None
        self._is_image = None
        self._status = None
        self._document_asset = None
        self._document_work_request = None
        self._document_work_order = None
        self._document_assessment_form_result = None
        self._document_group_asset = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if external_id is not None:
            self.external_id = external_id
        if description is not None:
            self.description = description
        if expiry_date is not None:
            self.expiry_date = expiry_date
        if is_expired is not None:
            self.is_expired = is_expired
        if created_date is not None:
            self.created_date = created_date
        if last_modified is not None:
            self.last_modified = last_modified
        if document_size is not None:
            self.document_size = document_size
        if document_link is not None:
            self.document_link = document_link
        if mime_type is not None:
            self.mime_type = mime_type
        if document_group is not None:
            self.document_group = document_group
        if doc_group_value is not None:
            self.doc_group_value = doc_group_value
        if doc_group_label is not None:
            self.doc_group_label = doc_group_label
        if document_sub_category is not None:
            self.document_sub_category = document_sub_category
        if doc_sub_category_value is not None:
            self.doc_sub_category_value = doc_sub_category_value
        if doc_sub_category_label is not None:
            self.doc_sub_category_label = doc_sub_category_label
        if document_category is not None:
            self.document_category = document_category
        if doc_category_value is not None:
            self.doc_category_value = doc_category_value
        if doc_category_label is not None:
            self.doc_category_label = doc_category_label
        if created_user_first_name is not None:
            self.created_user_first_name = created_user_first_name
        if created_user_last_name is not None:
            self.created_user_last_name = created_user_last_name
        if last_modified_user_first_name is not None:
            self.last_modified_user_first_name = last_modified_user_first_name
        if last_modified_user_last_name is not None:
            self.last_modified_user_last_name = last_modified_user_last_name
        if file_property is not None:
            self.file_property = file_property
        if document_source is not None:
            self.document_source = document_source
        if parent_type is not None:
            self.parent_type = parent_type
        if parent_id is not None:
            self.parent_id = parent_id
        if parent_identifier is not None:
            self.parent_identifier = parent_identifier
        if record_id is not None:
            self.record_id = record_id
        if is_key_photo is not None:
            self.is_key_photo = is_key_photo
        if is_image is not None:
            self.is_image = is_image
        if status is not None:
            self.status = status
        if document_asset is not None:
            self.document_asset = document_asset
        if document_work_request is not None:
            self.document_work_request = document_work_request
        if document_work_order is not None:
            self.document_work_order = document_work_order
        if document_assessment_form_result is not None:
            self.document_assessment_form_result = document_assessment_form_result
        if document_group_asset is not None:
            self.document_group_asset = document_group_asset
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this DocumentRepresentation.  # noqa: E501


        :return: The id of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentRepresentation.


        :param id: The id of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DocumentRepresentation.  # noqa: E501


        :return: The name of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentRepresentation.


        :param name: The name of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this DocumentRepresentation.  # noqa: E501


        :return: The label of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this DocumentRepresentation.


        :param label: The label of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def external_id(self):
        """Gets the external_id of this DocumentRepresentation.  # noqa: E501


        :return: The external_id of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this DocumentRepresentation.


        :param external_id: The external_id of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def description(self):
        """Gets the description of this DocumentRepresentation.  # noqa: E501


        :return: The description of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentRepresentation.


        :param description: The description of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expiry_date(self):
        """Gets the expiry_date of this DocumentRepresentation.  # noqa: E501


        :return: The expiry_date of this DocumentRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._expiry_date

    @expiry_date.setter
    def expiry_date(self, expiry_date):
        """Sets the expiry_date of this DocumentRepresentation.


        :param expiry_date: The expiry_date of this DocumentRepresentation.  # noqa: E501
        :type: datetime
        """

        self._expiry_date = expiry_date

    @property
    def is_expired(self):
        """Gets the is_expired of this DocumentRepresentation.  # noqa: E501


        :return: The is_expired of this DocumentRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._is_expired

    @is_expired.setter
    def is_expired(self, is_expired):
        """Sets the is_expired of this DocumentRepresentation.


        :param is_expired: The is_expired of this DocumentRepresentation.  # noqa: E501
        :type: bool
        """

        self._is_expired = is_expired

    @property
    def created_date(self):
        """Gets the created_date of this DocumentRepresentation.  # noqa: E501


        :return: The created_date of this DocumentRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DocumentRepresentation.


        :param created_date: The created_date of this DocumentRepresentation.  # noqa: E501
        :type: datetime
        """

        self._created_date = created_date

    @property
    def last_modified(self):
        """Gets the last_modified of this DocumentRepresentation.  # noqa: E501


        :return: The last_modified of this DocumentRepresentation.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this DocumentRepresentation.


        :param last_modified: The last_modified of this DocumentRepresentation.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def document_size(self):
        """Gets the document_size of this DocumentRepresentation.  # noqa: E501


        :return: The document_size of this DocumentRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._document_size

    @document_size.setter
    def document_size(self, document_size):
        """Sets the document_size of this DocumentRepresentation.


        :param document_size: The document_size of this DocumentRepresentation.  # noqa: E501
        :type: float
        """

        self._document_size = document_size

    @property
    def document_link(self):
        """Gets the document_link of this DocumentRepresentation.  # noqa: E501


        :return: The document_link of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._document_link

    @document_link.setter
    def document_link(self, document_link):
        """Sets the document_link of this DocumentRepresentation.


        :param document_link: The document_link of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._document_link = document_link

    @property
    def mime_type(self):
        """Gets the mime_type of this DocumentRepresentation.  # noqa: E501


        :return: The mime_type of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type):
        """Sets the mime_type of this DocumentRepresentation.


        :param mime_type: The mime_type of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._mime_type = mime_type

    @property
    def document_group(self):
        """Gets the document_group of this DocumentRepresentation.  # noqa: E501


        :return: The document_group of this DocumentRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._document_group

    @document_group.setter
    def document_group(self, document_group):
        """Sets the document_group of this DocumentRepresentation.


        :param document_group: The document_group of this DocumentRepresentation.  # noqa: E501
        :type: int
        """

        self._document_group = document_group

    @property
    def doc_group_value(self):
        """Gets the doc_group_value of this DocumentRepresentation.  # noqa: E501


        :return: The doc_group_value of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._doc_group_value

    @doc_group_value.setter
    def doc_group_value(self, doc_group_value):
        """Sets the doc_group_value of this DocumentRepresentation.


        :param doc_group_value: The doc_group_value of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._doc_group_value = doc_group_value

    @property
    def doc_group_label(self):
        """Gets the doc_group_label of this DocumentRepresentation.  # noqa: E501


        :return: The doc_group_label of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._doc_group_label

    @doc_group_label.setter
    def doc_group_label(self, doc_group_label):
        """Sets the doc_group_label of this DocumentRepresentation.


        :param doc_group_label: The doc_group_label of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._doc_group_label = doc_group_label

    @property
    def document_sub_category(self):
        """Gets the document_sub_category of this DocumentRepresentation.  # noqa: E501


        :return: The document_sub_category of this DocumentRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._document_sub_category

    @document_sub_category.setter
    def document_sub_category(self, document_sub_category):
        """Sets the document_sub_category of this DocumentRepresentation.


        :param document_sub_category: The document_sub_category of this DocumentRepresentation.  # noqa: E501
        :type: int
        """

        self._document_sub_category = document_sub_category

    @property
    def doc_sub_category_value(self):
        """Gets the doc_sub_category_value of this DocumentRepresentation.  # noqa: E501


        :return: The doc_sub_category_value of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._doc_sub_category_value

    @doc_sub_category_value.setter
    def doc_sub_category_value(self, doc_sub_category_value):
        """Sets the doc_sub_category_value of this DocumentRepresentation.


        :param doc_sub_category_value: The doc_sub_category_value of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._doc_sub_category_value = doc_sub_category_value

    @property
    def doc_sub_category_label(self):
        """Gets the doc_sub_category_label of this DocumentRepresentation.  # noqa: E501


        :return: The doc_sub_category_label of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._doc_sub_category_label

    @doc_sub_category_label.setter
    def doc_sub_category_label(self, doc_sub_category_label):
        """Sets the doc_sub_category_label of this DocumentRepresentation.


        :param doc_sub_category_label: The doc_sub_category_label of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._doc_sub_category_label = doc_sub_category_label

    @property
    def document_category(self):
        """Gets the document_category of this DocumentRepresentation.  # noqa: E501


        :return: The document_category of this DocumentRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._document_category

    @document_category.setter
    def document_category(self, document_category):
        """Sets the document_category of this DocumentRepresentation.


        :param document_category: The document_category of this DocumentRepresentation.  # noqa: E501
        :type: int
        """

        self._document_category = document_category

    @property
    def doc_category_value(self):
        """Gets the doc_category_value of this DocumentRepresentation.  # noqa: E501


        :return: The doc_category_value of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._doc_category_value

    @doc_category_value.setter
    def doc_category_value(self, doc_category_value):
        """Sets the doc_category_value of this DocumentRepresentation.


        :param doc_category_value: The doc_category_value of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._doc_category_value = doc_category_value

    @property
    def doc_category_label(self):
        """Gets the doc_category_label of this DocumentRepresentation.  # noqa: E501


        :return: The doc_category_label of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._doc_category_label

    @doc_category_label.setter
    def doc_category_label(self, doc_category_label):
        """Sets the doc_category_label of this DocumentRepresentation.


        :param doc_category_label: The doc_category_label of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._doc_category_label = doc_category_label

    @property
    def created_user_first_name(self):
        """Gets the created_user_first_name of this DocumentRepresentation.  # noqa: E501


        :return: The created_user_first_name of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._created_user_first_name

    @created_user_first_name.setter
    def created_user_first_name(self, created_user_first_name):
        """Sets the created_user_first_name of this DocumentRepresentation.


        :param created_user_first_name: The created_user_first_name of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._created_user_first_name = created_user_first_name

    @property
    def created_user_last_name(self):
        """Gets the created_user_last_name of this DocumentRepresentation.  # noqa: E501


        :return: The created_user_last_name of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._created_user_last_name

    @created_user_last_name.setter
    def created_user_last_name(self, created_user_last_name):
        """Sets the created_user_last_name of this DocumentRepresentation.


        :param created_user_last_name: The created_user_last_name of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._created_user_last_name = created_user_last_name

    @property
    def last_modified_user_first_name(self):
        """Gets the last_modified_user_first_name of this DocumentRepresentation.  # noqa: E501


        :return: The last_modified_user_first_name of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user_first_name

    @last_modified_user_first_name.setter
    def last_modified_user_first_name(self, last_modified_user_first_name):
        """Sets the last_modified_user_first_name of this DocumentRepresentation.


        :param last_modified_user_first_name: The last_modified_user_first_name of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._last_modified_user_first_name = last_modified_user_first_name

    @property
    def last_modified_user_last_name(self):
        """Gets the last_modified_user_last_name of this DocumentRepresentation.  # noqa: E501


        :return: The last_modified_user_last_name of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_user_last_name

    @last_modified_user_last_name.setter
    def last_modified_user_last_name(self, last_modified_user_last_name):
        """Sets the last_modified_user_last_name of this DocumentRepresentation.


        :param last_modified_user_last_name: The last_modified_user_last_name of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._last_modified_user_last_name = last_modified_user_last_name

    @property
    def file_property(self):
        """Gets the file_property of this DocumentRepresentation.  # noqa: E501


        :return: The file_property of this DocumentRepresentation.  # noqa: E501
        :rtype: list[FilePropertiesRepresentation]
        """
        return self._file_property

    @file_property.setter
    def file_property(self, file_property):
        """Sets the file_property of this DocumentRepresentation.


        :param file_property: The file_property of this DocumentRepresentation.  # noqa: E501
        :type: list[FilePropertiesRepresentation]
        """

        self._file_property = file_property

    @property
    def document_source(self):
        """Gets the document_source of this DocumentRepresentation.  # noqa: E501


        :return: The document_source of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._document_source

    @document_source.setter
    def document_source(self, document_source):
        """Sets the document_source of this DocumentRepresentation.


        :param document_source: The document_source of this DocumentRepresentation.  # noqa: E501
        :type: str
        """
        if document_source is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', document_source):  # noqa: E501
            raise ValueError(r"Invalid value for `document_source`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._document_source = document_source

    @property
    def parent_type(self):
        """Gets the parent_type of this DocumentRepresentation.  # noqa: E501


        :return: The parent_type of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._parent_type

    @parent_type.setter
    def parent_type(self, parent_type):
        """Sets the parent_type of this DocumentRepresentation.


        :param parent_type: The parent_type of this DocumentRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "All", "ComplexAsset", "WorkRequest", "L2Assessment", "DataExchange", "GroupAssets", "Reports", "WorkOrder", "JobPlan", "SearchProfle", "FinancialYearAccountingReports", "FinancialPeriodAccountingReports", "AsmtProject", "AsmtTask", "AsmtFormResult", "WorkOrder2", "ValuationReport", "RevaluationReport", "BulkProcess", "DataExchangeProfile", "BackgroundWorkerLog", "TransactionBatchExportJournals", "FinancialYearFairValueJournalReport", "FinancialPeriodFairValueJournalReport", "FinancialYearHistoricalJournalReport", "FinancialPeriodHistoriucalJournalReport", "ReconciliationHistoricalReport", "ReconciliationFairvalueReport", "ServiceBusWorkerErrorDocument", "BasicReconciliationHistoricalReport", "BasicReconciliationFairvalueReport", "SysBackgroundWorker", "Predictor", "JobPlan2"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if parent_type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(parent_type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `parent_type` ({0}), must be one of {1}"  # noqa: E501
                    .format(parent_type, allowed_values)
                )

        self._parent_type = parent_type

    @property
    def parent_id(self):
        """Gets the parent_id of this DocumentRepresentation.  # noqa: E501


        :return: The parent_id of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this DocumentRepresentation.


        :param parent_id: The parent_id of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def parent_identifier(self):
        """Gets the parent_identifier of this DocumentRepresentation.  # noqa: E501


        :return: The parent_identifier of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._parent_identifier

    @parent_identifier.setter
    def parent_identifier(self, parent_identifier):
        """Sets the parent_identifier of this DocumentRepresentation.


        :param parent_identifier: The parent_identifier of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._parent_identifier = parent_identifier

    @property
    def record_id(self):
        """Gets the record_id of this DocumentRepresentation.  # noqa: E501


        :return: The record_id of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this DocumentRepresentation.


        :param record_id: The record_id of this DocumentRepresentation.  # noqa: E501
        :type: str
        """

        self._record_id = record_id

    @property
    def is_key_photo(self):
        """Gets the is_key_photo of this DocumentRepresentation.  # noqa: E501


        :return: The is_key_photo of this DocumentRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._is_key_photo

    @is_key_photo.setter
    def is_key_photo(self, is_key_photo):
        """Sets the is_key_photo of this DocumentRepresentation.


        :param is_key_photo: The is_key_photo of this DocumentRepresentation.  # noqa: E501
        :type: bool
        """

        self._is_key_photo = is_key_photo

    @property
    def is_image(self):
        """Gets the is_image of this DocumentRepresentation.  # noqa: E501


        :return: The is_image of this DocumentRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._is_image

    @is_image.setter
    def is_image(self, is_image):
        """Sets the is_image of this DocumentRepresentation.


        :param is_image: The is_image of this DocumentRepresentation.  # noqa: E501
        :type: bool
        """

        self._is_image = is_image

    @property
    def status(self):
        """Gets the status of this DocumentRepresentation.  # noqa: E501


        :return: The status of this DocumentRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DocumentRepresentation.


        :param status: The status of this DocumentRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Initial", "Proposed", "FailedToSave", "Active", "InActive", "OutofSystem"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if status not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(status)
            except ValueError:
                raise ValueError(
                    "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                    .format(status, allowed_values)
                )

        self._status = status

    @property
    def document_asset(self):
        """Gets the document_asset of this DocumentRepresentation.  # noqa: E501


        :return: The document_asset of this DocumentRepresentation.  # noqa: E501
        :rtype: DocumentAssetRepresentation
        """
        return self._document_asset

    @document_asset.setter
    def document_asset(self, document_asset):
        """Sets the document_asset of this DocumentRepresentation.


        :param document_asset: The document_asset of this DocumentRepresentation.  # noqa: E501
        :type: DocumentAssetRepresentation
        """

        self._document_asset = document_asset

    @property
    def document_work_request(self):
        """Gets the document_work_request of this DocumentRepresentation.  # noqa: E501


        :return: The document_work_request of this DocumentRepresentation.  # noqa: E501
        :rtype: DocumentWorkRequestRepresentation
        """
        return self._document_work_request

    @document_work_request.setter
    def document_work_request(self, document_work_request):
        """Sets the document_work_request of this DocumentRepresentation.


        :param document_work_request: The document_work_request of this DocumentRepresentation.  # noqa: E501
        :type: DocumentWorkRequestRepresentation
        """

        self._document_work_request = document_work_request

    @property
    def document_work_order(self):
        """Gets the document_work_order of this DocumentRepresentation.  # noqa: E501


        :return: The document_work_order of this DocumentRepresentation.  # noqa: E501
        :rtype: DocumentWorkOrderRepresentation
        """
        return self._document_work_order

    @document_work_order.setter
    def document_work_order(self, document_work_order):
        """Sets the document_work_order of this DocumentRepresentation.


        :param document_work_order: The document_work_order of this DocumentRepresentation.  # noqa: E501
        :type: DocumentWorkOrderRepresentation
        """

        self._document_work_order = document_work_order

    @property
    def document_assessment_form_result(self):
        """Gets the document_assessment_form_result of this DocumentRepresentation.  # noqa: E501


        :return: The document_assessment_form_result of this DocumentRepresentation.  # noqa: E501
        :rtype: DocumentAsmtRepresentation
        """
        return self._document_assessment_form_result

    @document_assessment_form_result.setter
    def document_assessment_form_result(self, document_assessment_form_result):
        """Sets the document_assessment_form_result of this DocumentRepresentation.


        :param document_assessment_form_result: The document_assessment_form_result of this DocumentRepresentation.  # noqa: E501
        :type: DocumentAsmtRepresentation
        """

        self._document_assessment_form_result = document_assessment_form_result

    @property
    def document_group_asset(self):
        """Gets the document_group_asset of this DocumentRepresentation.  # noqa: E501


        :return: The document_group_asset of this DocumentRepresentation.  # noqa: E501
        :rtype: DocumentGroupAssetRepresentation
        """
        return self._document_group_asset

    @document_group_asset.setter
    def document_group_asset(self, document_group_asset):
        """Sets the document_group_asset of this DocumentRepresentation.


        :param document_group_asset: The document_group_asset of this DocumentRepresentation.  # noqa: E501
        :type: DocumentGroupAssetRepresentation
        """

        self._document_group_asset = document_group_asset

    @property
    def links(self):
        """Gets the links of this DocumentRepresentation.  # noqa: E501


        :return: The links of this DocumentRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this DocumentRepresentation.


        :param links: The links of this DocumentRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this DocumentRepresentation.  # noqa: E501


        :return: The embedded of this DocumentRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this DocumentRepresentation.


        :param embedded: The embedded of this DocumentRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DocumentRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
