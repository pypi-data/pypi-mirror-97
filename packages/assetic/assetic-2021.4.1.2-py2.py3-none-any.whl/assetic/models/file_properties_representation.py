# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FilePropertiesRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'file_size': 'float',
        'mimetype': 'str',
        'filecontent': 'str',
        'fileuuid': 'str',
        'encoding': 'str'
    }

    attribute_map = {
        'name': 'Name',
        'file_size': 'FileSize',
        'mimetype': 'mimetype',
        'filecontent': 'filecontent',
        'fileuuid': 'fileuuid',
        'encoding': 'encoding'
    }

    def __init__(self, name=None, file_size=None, mimetype=None, filecontent=None, fileuuid=None, encoding=None):  # noqa: E501
        """FilePropertiesRepresentation - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._file_size = None
        self._mimetype = None
        self._filecontent = None
        self._fileuuid = None
        self._encoding = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if file_size is not None:
            self.file_size = file_size
        if mimetype is not None:
            self.mimetype = mimetype
        if filecontent is not None:
            self.filecontent = filecontent
        if fileuuid is not None:
            self.fileuuid = fileuuid
        if encoding is not None:
            self.encoding = encoding

    @property
    def name(self):
        """Gets the name of this FilePropertiesRepresentation.  # noqa: E501


        :return: The name of this FilePropertiesRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FilePropertiesRepresentation.


        :param name: The name of this FilePropertiesRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def file_size(self):
        """Gets the file_size of this FilePropertiesRepresentation.  # noqa: E501


        :return: The file_size of this FilePropertiesRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this FilePropertiesRepresentation.


        :param file_size: The file_size of this FilePropertiesRepresentation.  # noqa: E501
        :type: float
        """

        self._file_size = file_size

    @property
    def mimetype(self):
        """Gets the mimetype of this FilePropertiesRepresentation.  # noqa: E501


        :return: The mimetype of this FilePropertiesRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this FilePropertiesRepresentation.


        :param mimetype: The mimetype of this FilePropertiesRepresentation.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def filecontent(self):
        """Gets the filecontent of this FilePropertiesRepresentation.  # noqa: E501


        :return: The filecontent of this FilePropertiesRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._filecontent

    @filecontent.setter
    def filecontent(self, filecontent):
        """Sets the filecontent of this FilePropertiesRepresentation.


        :param filecontent: The filecontent of this FilePropertiesRepresentation.  # noqa: E501
        :type: str
        """

        self._filecontent = filecontent

    @property
    def fileuuid(self):
        """Gets the fileuuid of this FilePropertiesRepresentation.  # noqa: E501


        :return: The fileuuid of this FilePropertiesRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._fileuuid

    @fileuuid.setter
    def fileuuid(self, fileuuid):
        """Sets the fileuuid of this FilePropertiesRepresentation.


        :param fileuuid: The fileuuid of this FilePropertiesRepresentation.  # noqa: E501
        :type: str
        """

        self._fileuuid = fileuuid

    @property
    def encoding(self):
        """Gets the encoding of this FilePropertiesRepresentation.  # noqa: E501


        :return: The encoding of this FilePropertiesRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this FilePropertiesRepresentation.


        :param encoding: The encoding of this FilePropertiesRepresentation.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilePropertiesRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilePropertiesRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
