# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.form_control_calculation_control_representation import FormControlCalculationControlRepresentation  # noqa: F401,E501
##from assetic.models.form_control_combobox_item_representation import FormControlComboboxItemRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class FormControlRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'label': 'str',
        'help_string': 'str',
        'visible': 'bool',
        'required': 'bool',
        'readonly': 'bool',
        'sort_order': 'int',
        'type': 'str',
        'type_name': 'str',
        'data_type': 'str',
        'combobox_items': 'list[FormControlComboboxItemRepresentation]',
        'form_control_parent_name': 'str',
        'calculation': 'str',
        'calculation_fields': 'list[FormControlCalculationControlRepresentation]',
        'calculation_result': 'object',
        'numeric_min': 'int',
        'numeric_max': 'int',
        'numeric_mask': 'str',
        'numeric_step': 'float',
        'text_length': 'int',
        'label_weight': 'int',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'name': 'Name',
        'label': 'Label',
        'help_string': 'HelpString',
        'visible': 'Visible',
        'required': 'Required',
        'readonly': 'Readonly',
        'sort_order': 'SortOrder',
        'type': 'Type',
        'type_name': 'TypeName',
        'data_type': 'DataType',
        'combobox_items': 'ComboboxItems',
        'form_control_parent_name': 'FORMControlParentName',
        'calculation': 'Calculation',
        'calculation_fields': 'CalculationFields',
        'calculation_result': 'CalculationResult',
        'numeric_min': 'NumericMin',
        'numeric_max': 'NumericMax',
        'numeric_mask': 'NumericMask',
        'numeric_step': 'NumericStep',
        'text_length': 'TextLength',
        'label_weight': 'LabelWeight',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, name=None, label=None, help_string=None, visible=None, required=None, readonly=None, sort_order=None, type=None, type_name=None, data_type=None, combobox_items=None, form_control_parent_name=None, calculation=None, calculation_fields=None, calculation_result=None, numeric_min=None, numeric_max=None, numeric_mask=None, numeric_step=None, text_length=None, label_weight=None, links=None, embedded=None):  # noqa: E501
        """FormControlRepresentation - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._label = None
        self._help_string = None
        self._visible = None
        self._required = None
        self._readonly = None
        self._sort_order = None
        self._type = None
        self._type_name = None
        self._data_type = None
        self._combobox_items = None
        self._form_control_parent_name = None
        self._calculation = None
        self._calculation_fields = None
        self._calculation_result = None
        self._numeric_min = None
        self._numeric_max = None
        self._numeric_mask = None
        self._numeric_step = None
        self._text_length = None
        self._label_weight = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if help_string is not None:
            self.help_string = help_string
        if visible is not None:
            self.visible = visible
        if required is not None:
            self.required = required
        if readonly is not None:
            self.readonly = readonly
        if sort_order is not None:
            self.sort_order = sort_order
        if type is not None:
            self.type = type
        if type_name is not None:
            self.type_name = type_name
        if data_type is not None:
            self.data_type = data_type
        if combobox_items is not None:
            self.combobox_items = combobox_items
        if form_control_parent_name is not None:
            self.form_control_parent_name = form_control_parent_name
        if calculation is not None:
            self.calculation = calculation
        if calculation_fields is not None:
            self.calculation_fields = calculation_fields
        if calculation_result is not None:
            self.calculation_result = calculation_result
        if numeric_min is not None:
            self.numeric_min = numeric_min
        if numeric_max is not None:
            self.numeric_max = numeric_max
        if numeric_mask is not None:
            self.numeric_mask = numeric_mask
        if numeric_step is not None:
            self.numeric_step = numeric_step
        if text_length is not None:
            self.text_length = text_length
        if label_weight is not None:
            self.label_weight = label_weight
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def name(self):
        """Gets the name of this FormControlRepresentation.  # noqa: E501


        :return: The name of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormControlRepresentation.


        :param name: The name of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this FormControlRepresentation.  # noqa: E501


        :return: The label of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormControlRepresentation.


        :param label: The label of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def help_string(self):
        """Gets the help_string of this FormControlRepresentation.  # noqa: E501


        :return: The help_string of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._help_string

    @help_string.setter
    def help_string(self, help_string):
        """Sets the help_string of this FormControlRepresentation.


        :param help_string: The help_string of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._help_string = help_string

    @property
    def visible(self):
        """Gets the visible of this FormControlRepresentation.  # noqa: E501


        :return: The visible of this FormControlRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this FormControlRepresentation.


        :param visible: The visible of this FormControlRepresentation.  # noqa: E501
        :type: bool
        """

        self._visible = visible

    @property
    def required(self):
        """Gets the required of this FormControlRepresentation.  # noqa: E501


        :return: The required of this FormControlRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this FormControlRepresentation.


        :param required: The required of this FormControlRepresentation.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def readonly(self):
        """Gets the readonly of this FormControlRepresentation.  # noqa: E501


        :return: The readonly of this FormControlRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._readonly

    @readonly.setter
    def readonly(self, readonly):
        """Sets the readonly of this FormControlRepresentation.


        :param readonly: The readonly of this FormControlRepresentation.  # noqa: E501
        :type: bool
        """

        self._readonly = readonly

    @property
    def sort_order(self):
        """Gets the sort_order of this FormControlRepresentation.  # noqa: E501


        :return: The sort_order of this FormControlRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FormControlRepresentation.


        :param sort_order: The sort_order of this FormControlRepresentation.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def type(self):
        """Gets the type of this FormControlRepresentation.  # noqa: E501


        :return: The type of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormControlRepresentation.


        :param type: The type of this FormControlRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Textbox", "Checkbox", "DatePicker", "TextArea", "HyperLinkEdit", "NumericTextBox", "AcCombobox", "ResourceChooser", "Timespan", "Map", "UdfCombobox", "UdfHierarchyCombobox", "NumericCalculation", "Label"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                    .format(type, allowed_values)
                )

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this FormControlRepresentation.  # noqa: E501


        :return: The type_name of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this FormControlRepresentation.


        :param type_name: The type_name of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def data_type(self):
        """Gets the data_type of this FormControlRepresentation.  # noqa: E501


        :return: The data_type of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this FormControlRepresentation.


        :param data_type: The data_type of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def combobox_items(self):
        """Gets the combobox_items of this FormControlRepresentation.  # noqa: E501


        :return: The combobox_items of this FormControlRepresentation.  # noqa: E501
        :rtype: list[FormControlComboboxItemRepresentation]
        """
        return self._combobox_items

    @combobox_items.setter
    def combobox_items(self, combobox_items):
        """Sets the combobox_items of this FormControlRepresentation.


        :param combobox_items: The combobox_items of this FormControlRepresentation.  # noqa: E501
        :type: list[FormControlComboboxItemRepresentation]
        """

        self._combobox_items = combobox_items

    @property
    def form_control_parent_name(self):
        """Gets the form_control_parent_name of this FormControlRepresentation.  # noqa: E501


        :return: The form_control_parent_name of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._form_control_parent_name

    @form_control_parent_name.setter
    def form_control_parent_name(self, form_control_parent_name):
        """Sets the form_control_parent_name of this FormControlRepresentation.


        :param form_control_parent_name: The form_control_parent_name of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._form_control_parent_name = form_control_parent_name

    @property
    def calculation(self):
        """Gets the calculation of this FormControlRepresentation.  # noqa: E501


        :return: The calculation of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._calculation

    @calculation.setter
    def calculation(self, calculation):
        """Sets the calculation of this FormControlRepresentation.


        :param calculation: The calculation of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._calculation = calculation

    @property
    def calculation_fields(self):
        """Gets the calculation_fields of this FormControlRepresentation.  # noqa: E501


        :return: The calculation_fields of this FormControlRepresentation.  # noqa: E501
        :rtype: list[FormControlCalculationControlRepresentation]
        """
        return self._calculation_fields

    @calculation_fields.setter
    def calculation_fields(self, calculation_fields):
        """Sets the calculation_fields of this FormControlRepresentation.


        :param calculation_fields: The calculation_fields of this FormControlRepresentation.  # noqa: E501
        :type: list[FormControlCalculationControlRepresentation]
        """

        self._calculation_fields = calculation_fields

    @property
    def calculation_result(self):
        """Gets the calculation_result of this FormControlRepresentation.  # noqa: E501


        :return: The calculation_result of this FormControlRepresentation.  # noqa: E501
        :rtype: object
        """
        return self._calculation_result

    @calculation_result.setter
    def calculation_result(self, calculation_result):
        """Sets the calculation_result of this FormControlRepresentation.


        :param calculation_result: The calculation_result of this FormControlRepresentation.  # noqa: E501
        :type: object
        """

        self._calculation_result = calculation_result

    @property
    def numeric_min(self):
        """Gets the numeric_min of this FormControlRepresentation.  # noqa: E501


        :return: The numeric_min of this FormControlRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._numeric_min

    @numeric_min.setter
    def numeric_min(self, numeric_min):
        """Sets the numeric_min of this FormControlRepresentation.


        :param numeric_min: The numeric_min of this FormControlRepresentation.  # noqa: E501
        :type: int
        """

        self._numeric_min = numeric_min

    @property
    def numeric_max(self):
        """Gets the numeric_max of this FormControlRepresentation.  # noqa: E501


        :return: The numeric_max of this FormControlRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._numeric_max

    @numeric_max.setter
    def numeric_max(self, numeric_max):
        """Sets the numeric_max of this FormControlRepresentation.


        :param numeric_max: The numeric_max of this FormControlRepresentation.  # noqa: E501
        :type: int
        """

        self._numeric_max = numeric_max

    @property
    def numeric_mask(self):
        """Gets the numeric_mask of this FormControlRepresentation.  # noqa: E501


        :return: The numeric_mask of this FormControlRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._numeric_mask

    @numeric_mask.setter
    def numeric_mask(self, numeric_mask):
        """Sets the numeric_mask of this FormControlRepresentation.


        :param numeric_mask: The numeric_mask of this FormControlRepresentation.  # noqa: E501
        :type: str
        """

        self._numeric_mask = numeric_mask

    @property
    def numeric_step(self):
        """Gets the numeric_step of this FormControlRepresentation.  # noqa: E501


        :return: The numeric_step of this FormControlRepresentation.  # noqa: E501
        :rtype: float
        """
        return self._numeric_step

    @numeric_step.setter
    def numeric_step(self, numeric_step):
        """Sets the numeric_step of this FormControlRepresentation.


        :param numeric_step: The numeric_step of this FormControlRepresentation.  # noqa: E501
        :type: float
        """

        self._numeric_step = numeric_step

    @property
    def text_length(self):
        """Gets the text_length of this FormControlRepresentation.  # noqa: E501


        :return: The text_length of this FormControlRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._text_length

    @text_length.setter
    def text_length(self, text_length):
        """Sets the text_length of this FormControlRepresentation.


        :param text_length: The text_length of this FormControlRepresentation.  # noqa: E501
        :type: int
        """

        self._text_length = text_length

    @property
    def label_weight(self):
        """Gets the label_weight of this FormControlRepresentation.  # noqa: E501


        :return: The label_weight of this FormControlRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._label_weight

    @label_weight.setter
    def label_weight(self, label_weight):
        """Sets the label_weight of this FormControlRepresentation.


        :param label_weight: The label_weight of this FormControlRepresentation.  # noqa: E501
        :type: int
        """

        self._label_weight = label_weight

    @property
    def links(self):
        """Gets the links of this FormControlRepresentation.  # noqa: E501


        :return: The links of this FormControlRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FormControlRepresentation.


        :param links: The links of this FormControlRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this FormControlRepresentation.  # noqa: E501


        :return: The embedded of this FormControlRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this FormControlRepresentation.


        :param embedded: The embedded of this FormControlRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormControlRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormControlRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
