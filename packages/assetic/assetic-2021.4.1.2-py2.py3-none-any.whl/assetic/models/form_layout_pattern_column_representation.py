# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.form_layout_pattern_row_representation import FormLayoutPatternRowRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class FormLayoutPatternColumnRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'container_id': 'int',
        'relative_width': 'int',
        'layout_pattern_row': 'FormLayoutPatternRowRepresentation',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'container_id': 'ContainerId',
        'relative_width': 'RelativeWidth',
        'layout_pattern_row': 'LayoutPatternRow',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, container_id=None, relative_width=None, layout_pattern_row=None, links=None, embedded=None):  # noqa: E501
        """FormLayoutPatternColumnRepresentation - a model defined in Swagger"""  # noqa: E501

        self._container_id = None
        self._relative_width = None
        self._layout_pattern_row = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if container_id is not None:
            self.container_id = container_id
        if relative_width is not None:
            self.relative_width = relative_width
        if layout_pattern_row is not None:
            self.layout_pattern_row = layout_pattern_row
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def container_id(self):
        """Gets the container_id of this FormLayoutPatternColumnRepresentation.  # noqa: E501


        :return: The container_id of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this FormLayoutPatternColumnRepresentation.


        :param container_id: The container_id of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :type: int
        """

        self._container_id = container_id

    @property
    def relative_width(self):
        """Gets the relative_width of this FormLayoutPatternColumnRepresentation.  # noqa: E501


        :return: The relative_width of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._relative_width

    @relative_width.setter
    def relative_width(self, relative_width):
        """Sets the relative_width of this FormLayoutPatternColumnRepresentation.


        :param relative_width: The relative_width of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :type: int
        """

        self._relative_width = relative_width

    @property
    def layout_pattern_row(self):
        """Gets the layout_pattern_row of this FormLayoutPatternColumnRepresentation.  # noqa: E501


        :return: The layout_pattern_row of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :rtype: FormLayoutPatternRowRepresentation
        """
        return self._layout_pattern_row

    @layout_pattern_row.setter
    def layout_pattern_row(self, layout_pattern_row):
        """Sets the layout_pattern_row of this FormLayoutPatternColumnRepresentation.


        :param layout_pattern_row: The layout_pattern_row of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :type: FormLayoutPatternRowRepresentation
        """

        self._layout_pattern_row = layout_pattern_row

    @property
    def links(self):
        """Gets the links of this FormLayoutPatternColumnRepresentation.  # noqa: E501


        :return: The links of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FormLayoutPatternColumnRepresentation.


        :param links: The links of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this FormLayoutPatternColumnRepresentation.  # noqa: E501


        :return: The embedded of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this FormLayoutPatternColumnRepresentation.


        :param embedded: The embedded of this FormLayoutPatternColumnRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormLayoutPatternColumnRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormLayoutPatternColumnRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
