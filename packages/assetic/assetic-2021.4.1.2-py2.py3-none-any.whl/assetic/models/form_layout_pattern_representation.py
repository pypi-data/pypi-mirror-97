# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.form_layout_pattern_row_representation import FormLayoutPatternRowRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class FormLayoutPatternRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'label': 'str',
        'layout_pattern_rows': 'list[FormLayoutPatternRowRepresentation]',
        'container_count': 'int',
        'form_type': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'label': 'Label',
        'layout_pattern_rows': 'LayoutPatternRows',
        'container_count': 'ContainerCount',
        'form_type': 'FormType',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, name=None, label=None, layout_pattern_rows=None, container_count=None, form_type=None, links=None, embedded=None):  # noqa: E501
        """FormLayoutPatternRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._label = None
        self._layout_pattern_rows = None
        self._container_count = None
        self._form_type = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if label is not None:
            self.label = label
        if layout_pattern_rows is not None:
            self.layout_pattern_rows = layout_pattern_rows
        if container_count is not None:
            self.container_count = container_count
        if form_type is not None:
            self.form_type = form_type
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The id of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormLayoutPatternRepresentation.


        :param id: The id of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The name of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormLayoutPatternRepresentation.


        :param name: The name of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def label(self):
        """Gets the label of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The label of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormLayoutPatternRepresentation.


        :param label: The label of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def layout_pattern_rows(self):
        """Gets the layout_pattern_rows of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The layout_pattern_rows of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: list[FormLayoutPatternRowRepresentation]
        """
        return self._layout_pattern_rows

    @layout_pattern_rows.setter
    def layout_pattern_rows(self, layout_pattern_rows):
        """Sets the layout_pattern_rows of this FormLayoutPatternRepresentation.


        :param layout_pattern_rows: The layout_pattern_rows of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: list[FormLayoutPatternRowRepresentation]
        """

        self._layout_pattern_rows = layout_pattern_rows

    @property
    def container_count(self):
        """Gets the container_count of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The container_count of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._container_count

    @container_count.setter
    def container_count(self, container_count):
        """Sets the container_count of this FormLayoutPatternRepresentation.


        :param container_count: The container_count of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: int
        """

        self._container_count = container_count

    @property
    def form_type(self):
        """Gets the form_type of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The form_type of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._form_type

    @form_type.setter
    def form_type(self, form_type):
        """Sets the form_type of this FormLayoutPatternRepresentation.


        :param form_type: The form_type of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Dashboard", "AssessmentForm"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if form_type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(form_type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `form_type` ({0}), must be one of {1}"  # noqa: E501
                    .format(form_type, allowed_values)
                )

        self._form_type = form_type

    @property
    def links(self):
        """Gets the links of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The links of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FormLayoutPatternRepresentation.


        :param links: The links of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this FormLayoutPatternRepresentation.  # noqa: E501


        :return: The embedded of this FormLayoutPatternRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this FormLayoutPatternRepresentation.


        :param embedded: The embedded of this FormLayoutPatternRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormLayoutPatternRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormLayoutPatternRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
