# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.form_layout_pattern_column_representation import FormLayoutPatternColumnRepresentation  # noqa: F401,E501
##from assetic.models.form_widget_representation import FormWidgetRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class FormLayoutPatternRowRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sort_order': 'int',
        'layout_pattern_columns': 'list[FormLayoutPatternColumnRepresentation]',
        'widgets': 'list[FormWidgetRepresentation]',
        'has_tree': 'bool',
        'for_icon': 'bool',
        'is_first_row': 'bool',
        'row_count': 'int',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'sort_order': 'SortOrder',
        'layout_pattern_columns': 'LayoutPatternColumns',
        'widgets': 'Widgets',
        'has_tree': 'HasTree',
        'for_icon': 'ForIcon',
        'is_first_row': 'IsFirstRow',
        'row_count': 'RowCount',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, sort_order=None, layout_pattern_columns=None, widgets=None, has_tree=None, for_icon=None, is_first_row=None, row_count=None, links=None, embedded=None):  # noqa: E501
        """FormLayoutPatternRowRepresentation - a model defined in Swagger"""  # noqa: E501

        self._sort_order = None
        self._layout_pattern_columns = None
        self._widgets = None
        self._has_tree = None
        self._for_icon = None
        self._is_first_row = None
        self._row_count = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if sort_order is not None:
            self.sort_order = sort_order
        if layout_pattern_columns is not None:
            self.layout_pattern_columns = layout_pattern_columns
        if widgets is not None:
            self.widgets = widgets
        if has_tree is not None:
            self.has_tree = has_tree
        if for_icon is not None:
            self.for_icon = for_icon
        if is_first_row is not None:
            self.is_first_row = is_first_row
        if row_count is not None:
            self.row_count = row_count
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def sort_order(self):
        """Gets the sort_order of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The sort_order of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FormLayoutPatternRowRepresentation.


        :param sort_order: The sort_order of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def layout_pattern_columns(self):
        """Gets the layout_pattern_columns of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The layout_pattern_columns of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: list[FormLayoutPatternColumnRepresentation]
        """
        return self._layout_pattern_columns

    @layout_pattern_columns.setter
    def layout_pattern_columns(self, layout_pattern_columns):
        """Sets the layout_pattern_columns of this FormLayoutPatternRowRepresentation.


        :param layout_pattern_columns: The layout_pattern_columns of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: list[FormLayoutPatternColumnRepresentation]
        """

        self._layout_pattern_columns = layout_pattern_columns

    @property
    def widgets(self):
        """Gets the widgets of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The widgets of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: list[FormWidgetRepresentation]
        """
        return self._widgets

    @widgets.setter
    def widgets(self, widgets):
        """Sets the widgets of this FormLayoutPatternRowRepresentation.


        :param widgets: The widgets of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: list[FormWidgetRepresentation]
        """

        self._widgets = widgets

    @property
    def has_tree(self):
        """Gets the has_tree of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The has_tree of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._has_tree

    @has_tree.setter
    def has_tree(self, has_tree):
        """Sets the has_tree of this FormLayoutPatternRowRepresentation.


        :param has_tree: The has_tree of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: bool
        """

        self._has_tree = has_tree

    @property
    def for_icon(self):
        """Gets the for_icon of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The for_icon of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._for_icon

    @for_icon.setter
    def for_icon(self, for_icon):
        """Sets the for_icon of this FormLayoutPatternRowRepresentation.


        :param for_icon: The for_icon of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: bool
        """

        self._for_icon = for_icon

    @property
    def is_first_row(self):
        """Gets the is_first_row of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The is_first_row of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._is_first_row

    @is_first_row.setter
    def is_first_row(self, is_first_row):
        """Sets the is_first_row of this FormLayoutPatternRowRepresentation.


        :param is_first_row: The is_first_row of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: bool
        """

        self._is_first_row = is_first_row

    @property
    def row_count(self):
        """Gets the row_count of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The row_count of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._row_count

    @row_count.setter
    def row_count(self, row_count):
        """Sets the row_count of this FormLayoutPatternRowRepresentation.


        :param row_count: The row_count of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: int
        """

        self._row_count = row_count

    @property
    def links(self):
        """Gets the links of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The links of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FormLayoutPatternRowRepresentation.


        :param links: The links of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this FormLayoutPatternRowRepresentation.  # noqa: E501


        :return: The embedded of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this FormLayoutPatternRowRepresentation.


        :param embedded: The embedded of this FormLayoutPatternRowRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormLayoutPatternRowRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormLayoutPatternRowRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
