# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.form_control_group_representation import FormControlGroupRepresentation  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class FormWidgetRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'view': 'str',
        'view_name': 'str',
        'type': 'str',
        'type_name': 'str',
        'layout_container': 'int',
        'sort_order': 'int',
        'collapsed': 'bool',
        'is_required_by_page': 'bool',
        'label': 'str',
        'name': 'str',
        'form_control_group': 'FormControlGroupRepresentation',
        'view_template': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'view': 'View',
        'view_name': 'ViewName',
        'type': 'Type',
        'type_name': 'TypeName',
        'layout_container': 'LayoutContainer',
        'sort_order': 'SortOrder',
        'collapsed': 'Collapsed',
        'is_required_by_page': 'IsRequiredByPage',
        'label': 'Label',
        'name': 'Name',
        'form_control_group': 'FormControlGroup',
        'view_template': 'ViewTemplate',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, view=None, view_name=None, type=None, type_name=None, layout_container=None, sort_order=None, collapsed=None, is_required_by_page=None, label=None, name=None, form_control_group=None, view_template=None, links=None, embedded=None):  # noqa: E501
        """FormWidgetRepresentation - a model defined in Swagger"""  # noqa: E501

        self._view = None
        self._view_name = None
        self._type = None
        self._type_name = None
        self._layout_container = None
        self._sort_order = None
        self._collapsed = None
        self._is_required_by_page = None
        self._label = None
        self._name = None
        self._form_control_group = None
        self._view_template = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if view is not None:
            self.view = view
        if view_name is not None:
            self.view_name = view_name
        if type is not None:
            self.type = type
        if type_name is not None:
            self.type_name = type_name
        if layout_container is not None:
            self.layout_container = layout_container
        if sort_order is not None:
            self.sort_order = sort_order
        if collapsed is not None:
            self.collapsed = collapsed
        if is_required_by_page is not None:
            self.is_required_by_page = is_required_by_page
        if label is not None:
            self.label = label
        if name is not None:
            self.name = name
        if form_control_group is not None:
            self.form_control_group = form_control_group
        if view_template is not None:
            self.view_template = view_template
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def view(self):
        """Gets the view of this FormWidgetRepresentation.  # noqa: E501


        :return: The view of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this FormWidgetRepresentation.


        :param view: The view of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """

        self._view = view

    @property
    def view_name(self):
        """Gets the view_name of this FormWidgetRepresentation.  # noqa: E501


        :return: The view_name of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._view_name

    @view_name.setter
    def view_name(self, view_name):
        """Sets the view_name of this FormWidgetRepresentation.


        :param view_name: The view_name of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """

        self._view_name = view_name

    @property
    def type(self):
        """Gets the type of this FormWidgetRepresentation.  # noqa: E501


        :return: The type of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormWidgetRepresentation.


        :param type: The type of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["Global", "User", "Special", "FormGroup"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                    .format(type, allowed_values)
                )

        self._type = type

    @property
    def type_name(self):
        """Gets the type_name of this FormWidgetRepresentation.  # noqa: E501


        :return: The type_name of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._type_name

    @type_name.setter
    def type_name(self, type_name):
        """Sets the type_name of this FormWidgetRepresentation.


        :param type_name: The type_name of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """

        self._type_name = type_name

    @property
    def layout_container(self):
        """Gets the layout_container of this FormWidgetRepresentation.  # noqa: E501


        :return: The layout_container of this FormWidgetRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._layout_container

    @layout_container.setter
    def layout_container(self, layout_container):
        """Sets the layout_container of this FormWidgetRepresentation.


        :param layout_container: The layout_container of this FormWidgetRepresentation.  # noqa: E501
        :type: int
        """

        self._layout_container = layout_container

    @property
    def sort_order(self):
        """Gets the sort_order of this FormWidgetRepresentation.  # noqa: E501


        :return: The sort_order of this FormWidgetRepresentation.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FormWidgetRepresentation.


        :param sort_order: The sort_order of this FormWidgetRepresentation.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def collapsed(self):
        """Gets the collapsed of this FormWidgetRepresentation.  # noqa: E501


        :return: The collapsed of this FormWidgetRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._collapsed

    @collapsed.setter
    def collapsed(self, collapsed):
        """Sets the collapsed of this FormWidgetRepresentation.


        :param collapsed: The collapsed of this FormWidgetRepresentation.  # noqa: E501
        :type: bool
        """

        self._collapsed = collapsed

    @property
    def is_required_by_page(self):
        """Gets the is_required_by_page of this FormWidgetRepresentation.  # noqa: E501


        :return: The is_required_by_page of this FormWidgetRepresentation.  # noqa: E501
        :rtype: bool
        """
        return self._is_required_by_page

    @is_required_by_page.setter
    def is_required_by_page(self, is_required_by_page):
        """Sets the is_required_by_page of this FormWidgetRepresentation.


        :param is_required_by_page: The is_required_by_page of this FormWidgetRepresentation.  # noqa: E501
        :type: bool
        """

        self._is_required_by_page = is_required_by_page

    @property
    def label(self):
        """Gets the label of this FormWidgetRepresentation.  # noqa: E501


        :return: The label of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this FormWidgetRepresentation.


        :param label: The label of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def name(self):
        """Gets the name of this FormWidgetRepresentation.  # noqa: E501


        :return: The name of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormWidgetRepresentation.


        :param name: The name of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def form_control_group(self):
        """Gets the form_control_group of this FormWidgetRepresentation.  # noqa: E501


        :return: The form_control_group of this FormWidgetRepresentation.  # noqa: E501
        :rtype: FormControlGroupRepresentation
        """
        return self._form_control_group

    @form_control_group.setter
    def form_control_group(self, form_control_group):
        """Sets the form_control_group of this FormWidgetRepresentation.


        :param form_control_group: The form_control_group of this FormWidgetRepresentation.  # noqa: E501
        :type: FormControlGroupRepresentation
        """

        self._form_control_group = form_control_group

    @property
    def view_template(self):
        """Gets the view_template of this FormWidgetRepresentation.  # noqa: E501


        :return: The view_template of this FormWidgetRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._view_template

    @view_template.setter
    def view_template(self, view_template):
        """Sets the view_template of this FormWidgetRepresentation.


        :param view_template: The view_template of this FormWidgetRepresentation.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "StatusTile", "StatusTileChart", "StatusSearchGrid", "StatusTileDocuments", "StatusTileMap", "StatusTilePivotGrid", "ImageLink", "SpecialCaAttributes", "SpecialCaCoreFields", "SpecialCagAttributes", "SpecialCaOciGraph", "SpecialCaLocation", "SpecialCpAttributes", "SpecialCpOciGraph", "SpecialCpSimpleAssetGrid", "SpecialSagAttributes", "SpecialSagSimpleAssetGrid", "ComplexAsset", "Component", "SimpleAsset", "Document", "GroupAsset", "NetworkEntity", "WorkOrder", "WorkRequest", "WorkTask", "FormControlGroup", "SpecialCategoryLink", "SpecialServiceIndexGraph", "StatusTileAttributes", "SpecialCaAssociations", "SpecialMntCoreFields", "StatusTileHierarchy", "SpecialServiceAreaCoreFields"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if view_template not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(view_template)
            except ValueError:
                raise ValueError(
                    "Invalid value for `view_template` ({0}), must be one of {1}"  # noqa: E501
                    .format(view_template, allowed_values)
                )

        self._view_template = view_template

    @property
    def links(self):
        """Gets the links of this FormWidgetRepresentation.  # noqa: E501


        :return: The links of this FormWidgetRepresentation.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this FormWidgetRepresentation.


        :param links: The links of this FormWidgetRepresentation.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this FormWidgetRepresentation.  # noqa: E501


        :return: The embedded of this FormWidgetRepresentation.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this FormWidgetRepresentation.


        :param embedded: The embedded of this FormWidgetRepresentation.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormWidgetRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormWidgetRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
