# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.curies_link import CuriesLink  # noqa: F401,E501


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'curie': 'CuriesLink',
        'rel': 'str',
        'href': 'str',
        'title': 'str',
        'type': 'str',
        'deprecation': 'str',
        'name': 'str',
        'profile': 'str',
        'href_lang': 'str',
        'is_templated': 'bool'
    }

    attribute_map = {
        'curie': 'Curie',
        'rel': 'Rel',
        'href': 'Href',
        'title': 'Title',
        'type': 'Type',
        'deprecation': 'Deprecation',
        'name': 'Name',
        'profile': 'Profile',
        'href_lang': 'HrefLang',
        'is_templated': 'IsTemplated'
    }

    def __init__(self, curie=None, rel=None, href=None, title=None, type=None, deprecation=None, name=None, profile=None, href_lang=None, is_templated=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501

        self._curie = None
        self._rel = None
        self._href = None
        self._title = None
        self._type = None
        self._deprecation = None
        self._name = None
        self._profile = None
        self._href_lang = None
        self._is_templated = None
        self.discriminator = None

        if curie is not None:
            self.curie = curie
        if rel is not None:
            self.rel = rel
        if href is not None:
            self.href = href
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if deprecation is not None:
            self.deprecation = deprecation
        if name is not None:
            self.name = name
        if profile is not None:
            self.profile = profile
        if href_lang is not None:
            self.href_lang = href_lang
        if is_templated is not None:
            self.is_templated = is_templated

    @property
    def curie(self):
        """Gets the curie of this Link.  # noqa: E501


        :return: The curie of this Link.  # noqa: E501
        :rtype: CuriesLink
        """
        return self._curie

    @curie.setter
    def curie(self, curie):
        """Sets the curie of this Link.


        :param curie: The curie of this Link.  # noqa: E501
        :type: CuriesLink
        """

        self._curie = curie

    @property
    def rel(self):
        """Gets the rel of this Link.  # noqa: E501


        :return: The rel of this Link.  # noqa: E501
        :rtype: str
        """
        return self._rel

    @rel.setter
    def rel(self, rel):
        """Sets the rel of this Link.


        :param rel: The rel of this Link.  # noqa: E501
        :type: str
        """

        self._rel = rel

    @property
    def href(self):
        """Gets the href of this Link.  # noqa: E501


        :return: The href of this Link.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this Link.


        :param href: The href of this Link.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def title(self):
        """Gets the title of this Link.  # noqa: E501


        :return: The title of this Link.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Link.


        :param title: The title of this Link.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this Link.  # noqa: E501


        :return: The type of this Link.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Link.


        :param type: The type of this Link.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def deprecation(self):
        """Gets the deprecation of this Link.  # noqa: E501


        :return: The deprecation of this Link.  # noqa: E501
        :rtype: str
        """
        return self._deprecation

    @deprecation.setter
    def deprecation(self, deprecation):
        """Sets the deprecation of this Link.


        :param deprecation: The deprecation of this Link.  # noqa: E501
        :type: str
        """

        self._deprecation = deprecation

    @property
    def name(self):
        """Gets the name of this Link.  # noqa: E501


        :return: The name of this Link.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Link.


        :param name: The name of this Link.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def profile(self):
        """Gets the profile of this Link.  # noqa: E501


        :return: The profile of this Link.  # noqa: E501
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this Link.


        :param profile: The profile of this Link.  # noqa: E501
        :type: str
        """

        self._profile = profile

    @property
    def href_lang(self):
        """Gets the href_lang of this Link.  # noqa: E501


        :return: The href_lang of this Link.  # noqa: E501
        :rtype: str
        """
        return self._href_lang

    @href_lang.setter
    def href_lang(self, href_lang):
        """Sets the href_lang of this Link.


        :param href_lang: The href_lang of this Link.  # noqa: E501
        :type: str
        """

        self._href_lang = href_lang

    @property
    def is_templated(self):
        """Gets the is_templated of this Link.  # noqa: E501


        :return: The is_templated of this Link.  # noqa: E501
        :rtype: bool
        """
        return self._is_templated

    @is_templated.setter
    def is_templated(self, is_templated):
        """Sets the is_templated of this Link.


        :param is_templated: The is_templated of this Link.  # noqa: E501
        :type: bool
        """

        self._is_templated = is_templated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
