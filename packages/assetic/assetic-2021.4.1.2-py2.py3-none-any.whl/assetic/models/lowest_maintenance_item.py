# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501


class LowestMaintenanceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'maintenance_task_id': 'str',
        'component_id': 'str',
        'network_entity_id': 'str',
        'network_entity_name': 'str',
        'component_name': 'str',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'maintenance_task_id': 'MaintenanceTaskId',
        'component_id': 'ComponentId',
        'network_entity_id': 'NetworkEntityId',
        'network_entity_name': 'NetworkEntityName',
        'component_name': 'ComponentName',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, maintenance_task_id=None, component_id=None, network_entity_id=None, network_entity_name=None, component_name=None, links=None, embedded=None):  # noqa: E501
        """LowestMaintenanceItem - a model defined in Swagger"""  # noqa: E501

        self._maintenance_task_id = None
        self._component_id = None
        self._network_entity_id = None
        self._network_entity_name = None
        self._component_name = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if maintenance_task_id is not None:
            self.maintenance_task_id = maintenance_task_id
        if component_id is not None:
            self.component_id = component_id
        if network_entity_id is not None:
            self.network_entity_id = network_entity_id
        if network_entity_name is not None:
            self.network_entity_name = network_entity_name
        if component_name is not None:
            self.component_name = component_name
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def maintenance_task_id(self):
        """Gets the maintenance_task_id of this LowestMaintenanceItem.  # noqa: E501


        :return: The maintenance_task_id of this LowestMaintenanceItem.  # noqa: E501
        :rtype: str
        """
        return self._maintenance_task_id

    @maintenance_task_id.setter
    def maintenance_task_id(self, maintenance_task_id):
        """Sets the maintenance_task_id of this LowestMaintenanceItem.


        :param maintenance_task_id: The maintenance_task_id of this LowestMaintenanceItem.  # noqa: E501
        :type: str
        """

        self._maintenance_task_id = maintenance_task_id

    @property
    def component_id(self):
        """Gets the component_id of this LowestMaintenanceItem.  # noqa: E501


        :return: The component_id of this LowestMaintenanceItem.  # noqa: E501
        :rtype: str
        """
        return self._component_id

    @component_id.setter
    def component_id(self, component_id):
        """Sets the component_id of this LowestMaintenanceItem.


        :param component_id: The component_id of this LowestMaintenanceItem.  # noqa: E501
        :type: str
        """

        self._component_id = component_id

    @property
    def network_entity_id(self):
        """Gets the network_entity_id of this LowestMaintenanceItem.  # noqa: E501


        :return: The network_entity_id of this LowestMaintenanceItem.  # noqa: E501
        :rtype: str
        """
        return self._network_entity_id

    @network_entity_id.setter
    def network_entity_id(self, network_entity_id):
        """Sets the network_entity_id of this LowestMaintenanceItem.


        :param network_entity_id: The network_entity_id of this LowestMaintenanceItem.  # noqa: E501
        :type: str
        """

        self._network_entity_id = network_entity_id

    @property
    def network_entity_name(self):
        """Gets the network_entity_name of this LowestMaintenanceItem.  # noqa: E501


        :return: The network_entity_name of this LowestMaintenanceItem.  # noqa: E501
        :rtype: str
        """
        return self._network_entity_name

    @network_entity_name.setter
    def network_entity_name(self, network_entity_name):
        """Sets the network_entity_name of this LowestMaintenanceItem.


        :param network_entity_name: The network_entity_name of this LowestMaintenanceItem.  # noqa: E501
        :type: str
        """

        self._network_entity_name = network_entity_name

    @property
    def component_name(self):
        """Gets the component_name of this LowestMaintenanceItem.  # noqa: E501


        :return: The component_name of this LowestMaintenanceItem.  # noqa: E501
        :rtype: str
        """
        return self._component_name

    @component_name.setter
    def component_name(self, component_name):
        """Sets the component_name of this LowestMaintenanceItem.


        :param component_name: The component_name of this LowestMaintenanceItem.  # noqa: E501
        :type: str
        """

        self._component_name = component_name

    @property
    def links(self):
        """Gets the links of this LowestMaintenanceItem.  # noqa: E501


        :return: The links of this LowestMaintenanceItem.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LowestMaintenanceItem.


        :param links: The links of this LowestMaintenanceItem.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this LowestMaintenanceItem.  # noqa: E501


        :return: The embedded of this LowestMaintenanceItem.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this LowestMaintenanceItem.


        :param embedded: The embedded of this LowestMaintenanceItem.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LowestMaintenanceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LowestMaintenanceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
