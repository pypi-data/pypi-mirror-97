# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501
##from assetic.models.rs_resource_representation import RsResourceRepresentation  # noqa: F401,E501


class MaintenanceResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'hours_required': 'float',
        'actual_hours': 'float',
        'actual_costs': 'float',
        'resource': 'RsResourceRepresentation',
        'status_id': 'int',
        'actual_start': 'datetime',
        'actual_finish': 'datetime',
        'assigned_group_craft_id': 'str',
        'craft': 'str',
        'work_group': 'str',
        'work_group_id': 'int',
        'group_craft_id': 'str',
        'unit_craft_id': 'str',
        'craft_quantity': 'int',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'hours_required': 'HoursRequired',
        'actual_hours': 'ActualHours',
        'actual_costs': 'ActualCosts',
        'resource': 'Resource',
        'status_id': 'StatusId',
        'actual_start': 'ActualStart',
        'actual_finish': 'ActualFinish',
        'assigned_group_craft_id': 'AssignedGroupCraftId',
        'craft': 'Craft',
        'work_group': 'WorkGroup',
        'work_group_id': 'WorkGroupId',
        'group_craft_id': 'GroupCraftId',
        'unit_craft_id': 'UnitCraftId',
        'craft_quantity': 'CraftQuantity',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, hours_required=None, actual_hours=None, actual_costs=None, resource=None, status_id=None, actual_start=None, actual_finish=None, assigned_group_craft_id=None, craft=None, work_group=None, work_group_id=None, group_craft_id=None, unit_craft_id=None, craft_quantity=None, links=None, embedded=None):  # noqa: E501
        """MaintenanceResource - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._hours_required = None
        self._actual_hours = None
        self._actual_costs = None
        self._resource = None
        self._status_id = None
        self._actual_start = None
        self._actual_finish = None
        self._assigned_group_craft_id = None
        self._craft = None
        self._work_group = None
        self._work_group_id = None
        self._group_craft_id = None
        self._unit_craft_id = None
        self._craft_quantity = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if hours_required is not None:
            self.hours_required = hours_required
        if actual_hours is not None:
            self.actual_hours = actual_hours
        if actual_costs is not None:
            self.actual_costs = actual_costs
        if resource is not None:
            self.resource = resource
        if status_id is not None:
            self.status_id = status_id
        if actual_start is not None:
            self.actual_start = actual_start
        if actual_finish is not None:
            self.actual_finish = actual_finish
        if assigned_group_craft_id is not None:
            self.assigned_group_craft_id = assigned_group_craft_id
        if craft is not None:
            self.craft = craft
        if work_group is not None:
            self.work_group = work_group
        if work_group_id is not None:
            self.work_group_id = work_group_id
        if group_craft_id is not None:
            self.group_craft_id = group_craft_id
        if unit_craft_id is not None:
            self.unit_craft_id = unit_craft_id
        if craft_quantity is not None:
            self.craft_quantity = craft_quantity
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this MaintenanceResource.  # noqa: E501


        :return: The id of this MaintenanceResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaintenanceResource.


        :param id: The id of this MaintenanceResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def hours_required(self):
        """Gets the hours_required of this MaintenanceResource.  # noqa: E501


        :return: The hours_required of this MaintenanceResource.  # noqa: E501
        :rtype: float
        """
        return self._hours_required

    @hours_required.setter
    def hours_required(self, hours_required):
        """Sets the hours_required of this MaintenanceResource.


        :param hours_required: The hours_required of this MaintenanceResource.  # noqa: E501
        :type: float
        """

        self._hours_required = hours_required

    @property
    def actual_hours(self):
        """Gets the actual_hours of this MaintenanceResource.  # noqa: E501


        :return: The actual_hours of this MaintenanceResource.  # noqa: E501
        :rtype: float
        """
        return self._actual_hours

    @actual_hours.setter
    def actual_hours(self, actual_hours):
        """Sets the actual_hours of this MaintenanceResource.


        :param actual_hours: The actual_hours of this MaintenanceResource.  # noqa: E501
        :type: float
        """

        self._actual_hours = actual_hours

    @property
    def actual_costs(self):
        """Gets the actual_costs of this MaintenanceResource.  # noqa: E501


        :return: The actual_costs of this MaintenanceResource.  # noqa: E501
        :rtype: float
        """
        return self._actual_costs

    @actual_costs.setter
    def actual_costs(self, actual_costs):
        """Sets the actual_costs of this MaintenanceResource.


        :param actual_costs: The actual_costs of this MaintenanceResource.  # noqa: E501
        :type: float
        """

        self._actual_costs = actual_costs

    @property
    def resource(self):
        """Gets the resource of this MaintenanceResource.  # noqa: E501


        :return: The resource of this MaintenanceResource.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this MaintenanceResource.


        :param resource: The resource of this MaintenanceResource.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._resource = resource

    @property
    def status_id(self):
        """Gets the status_id of this MaintenanceResource.  # noqa: E501


        :return: The status_id of this MaintenanceResource.  # noqa: E501
        :rtype: int
        """
        return self._status_id

    @status_id.setter
    def status_id(self, status_id):
        """Sets the status_id of this MaintenanceResource.


        :param status_id: The status_id of this MaintenanceResource.  # noqa: E501
        :type: int
        """

        self._status_id = status_id

    @property
    def actual_start(self):
        """Gets the actual_start of this MaintenanceResource.  # noqa: E501


        :return: The actual_start of this MaintenanceResource.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_start

    @actual_start.setter
    def actual_start(self, actual_start):
        """Sets the actual_start of this MaintenanceResource.


        :param actual_start: The actual_start of this MaintenanceResource.  # noqa: E501
        :type: datetime
        """

        self._actual_start = actual_start

    @property
    def actual_finish(self):
        """Gets the actual_finish of this MaintenanceResource.  # noqa: E501


        :return: The actual_finish of this MaintenanceResource.  # noqa: E501
        :rtype: datetime
        """
        return self._actual_finish

    @actual_finish.setter
    def actual_finish(self, actual_finish):
        """Sets the actual_finish of this MaintenanceResource.


        :param actual_finish: The actual_finish of this MaintenanceResource.  # noqa: E501
        :type: datetime
        """

        self._actual_finish = actual_finish

    @property
    def assigned_group_craft_id(self):
        """Gets the assigned_group_craft_id of this MaintenanceResource.  # noqa: E501


        :return: The assigned_group_craft_id of this MaintenanceResource.  # noqa: E501
        :rtype: str
        """
        return self._assigned_group_craft_id

    @assigned_group_craft_id.setter
    def assigned_group_craft_id(self, assigned_group_craft_id):
        """Sets the assigned_group_craft_id of this MaintenanceResource.


        :param assigned_group_craft_id: The assigned_group_craft_id of this MaintenanceResource.  # noqa: E501
        :type: str
        """

        self._assigned_group_craft_id = assigned_group_craft_id

    @property
    def craft(self):
        """Gets the craft of this MaintenanceResource.  # noqa: E501


        :return: The craft of this MaintenanceResource.  # noqa: E501
        :rtype: str
        """
        return self._craft

    @craft.setter
    def craft(self, craft):
        """Sets the craft of this MaintenanceResource.


        :param craft: The craft of this MaintenanceResource.  # noqa: E501
        :type: str
        """

        self._craft = craft

    @property
    def work_group(self):
        """Gets the work_group of this MaintenanceResource.  # noqa: E501


        :return: The work_group of this MaintenanceResource.  # noqa: E501
        :rtype: str
        """
        return self._work_group

    @work_group.setter
    def work_group(self, work_group):
        """Sets the work_group of this MaintenanceResource.


        :param work_group: The work_group of this MaintenanceResource.  # noqa: E501
        :type: str
        """

        self._work_group = work_group

    @property
    def work_group_id(self):
        """Gets the work_group_id of this MaintenanceResource.  # noqa: E501


        :return: The work_group_id of this MaintenanceResource.  # noqa: E501
        :rtype: int
        """
        return self._work_group_id

    @work_group_id.setter
    def work_group_id(self, work_group_id):
        """Sets the work_group_id of this MaintenanceResource.


        :param work_group_id: The work_group_id of this MaintenanceResource.  # noqa: E501
        :type: int
        """

        self._work_group_id = work_group_id

    @property
    def group_craft_id(self):
        """Gets the group_craft_id of this MaintenanceResource.  # noqa: E501


        :return: The group_craft_id of this MaintenanceResource.  # noqa: E501
        :rtype: str
        """
        return self._group_craft_id

    @group_craft_id.setter
    def group_craft_id(self, group_craft_id):
        """Sets the group_craft_id of this MaintenanceResource.


        :param group_craft_id: The group_craft_id of this MaintenanceResource.  # noqa: E501
        :type: str
        """

        self._group_craft_id = group_craft_id

    @property
    def unit_craft_id(self):
        """Gets the unit_craft_id of this MaintenanceResource.  # noqa: E501


        :return: The unit_craft_id of this MaintenanceResource.  # noqa: E501
        :rtype: str
        """
        return self._unit_craft_id

    @unit_craft_id.setter
    def unit_craft_id(self, unit_craft_id):
        """Sets the unit_craft_id of this MaintenanceResource.


        :param unit_craft_id: The unit_craft_id of this MaintenanceResource.  # noqa: E501
        :type: str
        """

        self._unit_craft_id = unit_craft_id

    @property
    def craft_quantity(self):
        """Gets the craft_quantity of this MaintenanceResource.  # noqa: E501


        :return: The craft_quantity of this MaintenanceResource.  # noqa: E501
        :rtype: int
        """
        return self._craft_quantity

    @craft_quantity.setter
    def craft_quantity(self, craft_quantity):
        """Sets the craft_quantity of this MaintenanceResource.


        :param craft_quantity: The craft_quantity of this MaintenanceResource.  # noqa: E501
        :type: int
        """

        self._craft_quantity = craft_quantity

    @property
    def links(self):
        """Gets the links of this MaintenanceResource.  # noqa: E501


        :return: The links of this MaintenanceResource.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MaintenanceResource.


        :param links: The links of this MaintenanceResource.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this MaintenanceResource.  # noqa: E501


        :return: The embedded of this MaintenanceResource.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this MaintenanceResource.


        :param embedded: The embedded of this MaintenanceResource.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
