# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501
##from assetic.models.linked_work_request import LinkedWorkRequest  # noqa: F401,E501
##from assetic.models.maintenance_asset import MaintenanceAsset  # noqa: F401,E501
##from assetic.models.maintenance_labour import MaintenanceLabour  # noqa: F401,E501
##from assetic.models.maintenance_material import MaintenanceMaterial  # noqa: F401,E501
##from assetic.models.maintenance_scheduling import MaintenanceScheduling  # noqa: F401,E501
##from assetic.models.maintenance_service import MaintenanceService  # noqa: F401,E501
##from assetic.models.maintenance_work_task import MaintenanceWorkTask  # noqa: F401,E501
##from assetic.models.rs_resource_representation import RsResourceRepresentation  # noqa: F401,E501
##from assetic.models.supporting_information import SupportingInformation  # noqa: F401,E501
##from assetic.models.work_type import WorkType  # noqa: F401,E501


class MaintenanceWorkOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'friendly_id_str': 'str',
        'brief_description': 'str',
        'external_id': 'str',
        'reference_number': 'str',
        'work_order_source_id': 'str',
        'reference_work_order_id': 'str',
        'loss_of_service_required': 'bool',
        'created_date_time': 'datetime',
        'last_modified': 'datetime',
        'creator_id': 'str',
        'requestor_id': 'str',
        'responsible_officer_id': 'str',
        'requested_by': 'RsResourceRepresentation',
        'created_by': 'RsResourceRepresentation',
        'responsible_officer': 'RsResourceRepresentation',
        'status': 'str',
        'asset_id': 'str',
        'priority_id': 'int',
        'priority': 'str',
        'work_tasks': 'list[MaintenanceWorkTask]',
        'location_description': 'str',
        'point_string': 'str',
        'estimated_duration': 'float',
        'asset': 'MaintenanceAsset',
        'supporting_information': 'list[SupportingInformation]',
        'wr_supporting_information': 'list[SupportingInformation]',
        'maintenance_materials': 'list[MaintenanceMaterial]',
        'maintenance_services': 'list[MaintenanceService]',
        'work_order_type': 'WorkType',
        'failure_sub_code_id': 'int',
        'cause_sub_code_id': 'int',
        'remedy_code_id': 'int',
        'preventive_maintenance_id': 'str',
        'scheduling': 'MaintenanceScheduling',
        'labours': 'list[MaintenanceLabour]',
        'meter_reading_required': 'bool',
        'linked_work_requests': 'list[LinkedWorkRequest]',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'friendly_id_str': 'FriendlyIdStr',
        'brief_description': 'BriefDescription',
        'external_id': 'ExternalId',
        'reference_number': 'ReferenceNumber',
        'work_order_source_id': 'WorkOrderSourceId',
        'reference_work_order_id': 'ReferenceWorkOrderId',
        'loss_of_service_required': 'LossOfServiceRequired',
        'created_date_time': 'CreatedDateTime',
        'last_modified': 'LastModified',
        'creator_id': 'CreatorId',
        'requestor_id': 'RequestorId',
        'responsible_officer_id': 'ResponsibleOfficerId',
        'requested_by': 'RequestedBy',
        'created_by': 'CreatedBy',
        'responsible_officer': 'ResponsibleOfficer',
        'status': 'Status',
        'asset_id': 'AssetId',
        'priority_id': 'PriorityId',
        'priority': 'Priority',
        'work_tasks': 'WorkTasks',
        'location_description': 'LocationDescription',
        'point_string': 'PointString',
        'estimated_duration': 'EstimatedDuration',
        'asset': 'Asset',
        'supporting_information': 'SupportingInformation',
        'wr_supporting_information': 'WRSupportingInformation',
        'maintenance_materials': 'MaintenanceMaterials',
        'maintenance_services': 'MaintenanceServices',
        'work_order_type': 'WorkOrderType',
        'failure_sub_code_id': 'FailureSubCodeId',
        'cause_sub_code_id': 'CauseSubCodeId',
        'remedy_code_id': 'RemedyCodeId',
        'preventive_maintenance_id': 'PreventiveMaintenanceId',
        'scheduling': 'Scheduling',
        'labours': 'Labours',
        'meter_reading_required': 'MeterReadingRequired',
        'linked_work_requests': 'LinkedWorkRequests',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, friendly_id_str=None, brief_description=None, external_id=None, reference_number=None, work_order_source_id=None, reference_work_order_id=None, loss_of_service_required=None, created_date_time=None, last_modified=None, creator_id=None, requestor_id=None, responsible_officer_id=None, requested_by=None, created_by=None, responsible_officer=None, status=None, asset_id=None, priority_id=None, priority=None, work_tasks=None, location_description=None, point_string=None, estimated_duration=None, asset=None, supporting_information=None, wr_supporting_information=None, maintenance_materials=None, maintenance_services=None, work_order_type=None, failure_sub_code_id=None, cause_sub_code_id=None, remedy_code_id=None, preventive_maintenance_id=None, scheduling=None, labours=None, meter_reading_required=None, linked_work_requests=None, links=None, embedded=None):  # noqa: E501
        """MaintenanceWorkOrder - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._friendly_id_str = None
        self._brief_description = None
        self._external_id = None
        self._reference_number = None
        self._work_order_source_id = None
        self._reference_work_order_id = None
        self._loss_of_service_required = None
        self._created_date_time = None
        self._last_modified = None
        self._creator_id = None
        self._requestor_id = None
        self._responsible_officer_id = None
        self._requested_by = None
        self._created_by = None
        self._responsible_officer = None
        self._status = None
        self._asset_id = None
        self._priority_id = None
        self._priority = None
        self._work_tasks = None
        self._location_description = None
        self._point_string = None
        self._estimated_duration = None
        self._asset = None
        self._supporting_information = None
        self._wr_supporting_information = None
        self._maintenance_materials = None
        self._maintenance_services = None
        self._work_order_type = None
        self._failure_sub_code_id = None
        self._cause_sub_code_id = None
        self._remedy_code_id = None
        self._preventive_maintenance_id = None
        self._scheduling = None
        self._labours = None
        self._meter_reading_required = None
        self._linked_work_requests = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if friendly_id_str is not None:
            self.friendly_id_str = friendly_id_str
        if brief_description is not None:
            self.brief_description = brief_description
        if external_id is not None:
            self.external_id = external_id
        if reference_number is not None:
            self.reference_number = reference_number
        if work_order_source_id is not None:
            self.work_order_source_id = work_order_source_id
        if reference_work_order_id is not None:
            self.reference_work_order_id = reference_work_order_id
        if loss_of_service_required is not None:
            self.loss_of_service_required = loss_of_service_required
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if last_modified is not None:
            self.last_modified = last_modified
        if creator_id is not None:
            self.creator_id = creator_id
        if requestor_id is not None:
            self.requestor_id = requestor_id
        if responsible_officer_id is not None:
            self.responsible_officer_id = responsible_officer_id
        if requested_by is not None:
            self.requested_by = requested_by
        if created_by is not None:
            self.created_by = created_by
        if responsible_officer is not None:
            self.responsible_officer = responsible_officer
        if status is not None:
            self.status = status
        if asset_id is not None:
            self.asset_id = asset_id
        if priority_id is not None:
            self.priority_id = priority_id
        if priority is not None:
            self.priority = priority
        if work_tasks is not None:
            self.work_tasks = work_tasks
        if location_description is not None:
            self.location_description = location_description
        if point_string is not None:
            self.point_string = point_string
        if estimated_duration is not None:
            self.estimated_duration = estimated_duration
        if asset is not None:
            self.asset = asset
        if supporting_information is not None:
            self.supporting_information = supporting_information
        if wr_supporting_information is not None:
            self.wr_supporting_information = wr_supporting_information
        if maintenance_materials is not None:
            self.maintenance_materials = maintenance_materials
        if maintenance_services is not None:
            self.maintenance_services = maintenance_services
        if work_order_type is not None:
            self.work_order_type = work_order_type
        if failure_sub_code_id is not None:
            self.failure_sub_code_id = failure_sub_code_id
        if cause_sub_code_id is not None:
            self.cause_sub_code_id = cause_sub_code_id
        if remedy_code_id is not None:
            self.remedy_code_id = remedy_code_id
        if preventive_maintenance_id is not None:
            self.preventive_maintenance_id = preventive_maintenance_id
        if scheduling is not None:
            self.scheduling = scheduling
        if labours is not None:
            self.labours = labours
        if meter_reading_required is not None:
            self.meter_reading_required = meter_reading_required
        if linked_work_requests is not None:
            self.linked_work_requests = linked_work_requests
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaintenanceWorkOrder.


        :param id: The id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def friendly_id_str(self):
        """Gets the friendly_id_str of this MaintenanceWorkOrder.  # noqa: E501


        :return: The friendly_id_str of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._friendly_id_str

    @friendly_id_str.setter
    def friendly_id_str(self, friendly_id_str):
        """Sets the friendly_id_str of this MaintenanceWorkOrder.


        :param friendly_id_str: The friendly_id_str of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._friendly_id_str = friendly_id_str

    @property
    def brief_description(self):
        """Gets the brief_description of this MaintenanceWorkOrder.  # noqa: E501


        :return: The brief_description of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._brief_description

    @brief_description.setter
    def brief_description(self, brief_description):
        """Sets the brief_description of this MaintenanceWorkOrder.


        :param brief_description: The brief_description of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._brief_description = brief_description

    @property
    def external_id(self):
        """Gets the external_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The external_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this MaintenanceWorkOrder.


        :param external_id: The external_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def reference_number(self):
        """Gets the reference_number of this MaintenanceWorkOrder.  # noqa: E501


        :return: The reference_number of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this MaintenanceWorkOrder.


        :param reference_number: The reference_number of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._reference_number = reference_number

    @property
    def work_order_source_id(self):
        """Gets the work_order_source_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The work_order_source_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._work_order_source_id

    @work_order_source_id.setter
    def work_order_source_id(self, work_order_source_id):
        """Sets the work_order_source_id of this MaintenanceWorkOrder.


        :param work_order_source_id: The work_order_source_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._work_order_source_id = work_order_source_id

    @property
    def reference_work_order_id(self):
        """Gets the reference_work_order_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The reference_work_order_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._reference_work_order_id

    @reference_work_order_id.setter
    def reference_work_order_id(self, reference_work_order_id):
        """Sets the reference_work_order_id of this MaintenanceWorkOrder.


        :param reference_work_order_id: The reference_work_order_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._reference_work_order_id = reference_work_order_id

    @property
    def loss_of_service_required(self):
        """Gets the loss_of_service_required of this MaintenanceWorkOrder.  # noqa: E501


        :return: The loss_of_service_required of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: bool
        """
        return self._loss_of_service_required

    @loss_of_service_required.setter
    def loss_of_service_required(self, loss_of_service_required):
        """Sets the loss_of_service_required of this MaintenanceWorkOrder.


        :param loss_of_service_required: The loss_of_service_required of this MaintenanceWorkOrder.  # noqa: E501
        :type: bool
        """

        self._loss_of_service_required = loss_of_service_required

    @property
    def created_date_time(self):
        """Gets the created_date_time of this MaintenanceWorkOrder.  # noqa: E501


        :return: The created_date_time of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this MaintenanceWorkOrder.


        :param created_date_time: The created_date_time of this MaintenanceWorkOrder.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def last_modified(self):
        """Gets the last_modified of this MaintenanceWorkOrder.  # noqa: E501


        :return: The last_modified of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this MaintenanceWorkOrder.


        :param last_modified: The last_modified of this MaintenanceWorkOrder.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def creator_id(self):
        """Gets the creator_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The creator_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this MaintenanceWorkOrder.


        :param creator_id: The creator_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._creator_id = creator_id

    @property
    def requestor_id(self):
        """Gets the requestor_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The requestor_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._requestor_id

    @requestor_id.setter
    def requestor_id(self, requestor_id):
        """Sets the requestor_id of this MaintenanceWorkOrder.


        :param requestor_id: The requestor_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._requestor_id = requestor_id

    @property
    def responsible_officer_id(self):
        """Gets the responsible_officer_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The responsible_officer_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._responsible_officer_id

    @responsible_officer_id.setter
    def responsible_officer_id(self, responsible_officer_id):
        """Sets the responsible_officer_id of this MaintenanceWorkOrder.


        :param responsible_officer_id: The responsible_officer_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._responsible_officer_id = responsible_officer_id

    @property
    def requested_by(self):
        """Gets the requested_by of this MaintenanceWorkOrder.  # noqa: E501


        :return: The requested_by of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._requested_by

    @requested_by.setter
    def requested_by(self, requested_by):
        """Sets the requested_by of this MaintenanceWorkOrder.


        :param requested_by: The requested_by of this MaintenanceWorkOrder.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._requested_by = requested_by

    @property
    def created_by(self):
        """Gets the created_by of this MaintenanceWorkOrder.  # noqa: E501


        :return: The created_by of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this MaintenanceWorkOrder.


        :param created_by: The created_by of this MaintenanceWorkOrder.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._created_by = created_by

    @property
    def responsible_officer(self):
        """Gets the responsible_officer of this MaintenanceWorkOrder.  # noqa: E501


        :return: The responsible_officer of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._responsible_officer

    @responsible_officer.setter
    def responsible_officer(self, responsible_officer):
        """Sets the responsible_officer of this MaintenanceWorkOrder.


        :param responsible_officer: The responsible_officer of this MaintenanceWorkOrder.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._responsible_officer = responsible_officer

    @property
    def status(self):
        """Gets the status of this MaintenanceWorkOrder.  # noqa: E501


        :return: The status of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MaintenanceWorkOrder.


        :param status: The status of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def asset_id(self):
        """Gets the asset_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The asset_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this MaintenanceWorkOrder.


        :param asset_id: The asset_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def priority_id(self):
        """Gets the priority_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The priority_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._priority_id

    @priority_id.setter
    def priority_id(self, priority_id):
        """Sets the priority_id of this MaintenanceWorkOrder.


        :param priority_id: The priority_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: int
        """

        self._priority_id = priority_id

    @property
    def priority(self):
        """Gets the priority of this MaintenanceWorkOrder.  # noqa: E501


        :return: The priority of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this MaintenanceWorkOrder.


        :param priority: The priority of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._priority = priority

    @property
    def work_tasks(self):
        """Gets the work_tasks of this MaintenanceWorkOrder.  # noqa: E501


        :return: The work_tasks of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[MaintenanceWorkTask]
        """
        return self._work_tasks

    @work_tasks.setter
    def work_tasks(self, work_tasks):
        """Sets the work_tasks of this MaintenanceWorkOrder.


        :param work_tasks: The work_tasks of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[MaintenanceWorkTask]
        """

        self._work_tasks = work_tasks

    @property
    def location_description(self):
        """Gets the location_description of this MaintenanceWorkOrder.  # noqa: E501


        :return: The location_description of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._location_description

    @location_description.setter
    def location_description(self, location_description):
        """Sets the location_description of this MaintenanceWorkOrder.


        :param location_description: The location_description of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._location_description = location_description

    @property
    def point_string(self):
        """Gets the point_string of this MaintenanceWorkOrder.  # noqa: E501


        :return: The point_string of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._point_string

    @point_string.setter
    def point_string(self, point_string):
        """Sets the point_string of this MaintenanceWorkOrder.


        :param point_string: The point_string of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._point_string = point_string

    @property
    def estimated_duration(self):
        """Gets the estimated_duration of this MaintenanceWorkOrder.  # noqa: E501


        :return: The estimated_duration of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: float
        """
        return self._estimated_duration

    @estimated_duration.setter
    def estimated_duration(self, estimated_duration):
        """Sets the estimated_duration of this MaintenanceWorkOrder.


        :param estimated_duration: The estimated_duration of this MaintenanceWorkOrder.  # noqa: E501
        :type: float
        """

        self._estimated_duration = estimated_duration

    @property
    def asset(self):
        """Gets the asset of this MaintenanceWorkOrder.  # noqa: E501


        :return: The asset of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: MaintenanceAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this MaintenanceWorkOrder.


        :param asset: The asset of this MaintenanceWorkOrder.  # noqa: E501
        :type: MaintenanceAsset
        """

        self._asset = asset

    @property
    def supporting_information(self):
        """Gets the supporting_information of this MaintenanceWorkOrder.  # noqa: E501


        :return: The supporting_information of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[SupportingInformation]
        """
        return self._supporting_information

    @supporting_information.setter
    def supporting_information(self, supporting_information):
        """Sets the supporting_information of this MaintenanceWorkOrder.


        :param supporting_information: The supporting_information of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[SupportingInformation]
        """

        self._supporting_information = supporting_information

    @property
    def wr_supporting_information(self):
        """Gets the wr_supporting_information of this MaintenanceWorkOrder.  # noqa: E501


        :return: The wr_supporting_information of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[SupportingInformation]
        """
        return self._wr_supporting_information

    @wr_supporting_information.setter
    def wr_supporting_information(self, wr_supporting_information):
        """Sets the wr_supporting_information of this MaintenanceWorkOrder.


        :param wr_supporting_information: The wr_supporting_information of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[SupportingInformation]
        """

        self._wr_supporting_information = wr_supporting_information

    @property
    def maintenance_materials(self):
        """Gets the maintenance_materials of this MaintenanceWorkOrder.  # noqa: E501


        :return: The maintenance_materials of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[MaintenanceMaterial]
        """
        return self._maintenance_materials

    @maintenance_materials.setter
    def maintenance_materials(self, maintenance_materials):
        """Sets the maintenance_materials of this MaintenanceWorkOrder.


        :param maintenance_materials: The maintenance_materials of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[MaintenanceMaterial]
        """

        self._maintenance_materials = maintenance_materials

    @property
    def maintenance_services(self):
        """Gets the maintenance_services of this MaintenanceWorkOrder.  # noqa: E501


        :return: The maintenance_services of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[MaintenanceService]
        """
        return self._maintenance_services

    @maintenance_services.setter
    def maintenance_services(self, maintenance_services):
        """Sets the maintenance_services of this MaintenanceWorkOrder.


        :param maintenance_services: The maintenance_services of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[MaintenanceService]
        """

        self._maintenance_services = maintenance_services

    @property
    def work_order_type(self):
        """Gets the work_order_type of this MaintenanceWorkOrder.  # noqa: E501


        :return: The work_order_type of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: WorkType
        """
        return self._work_order_type

    @work_order_type.setter
    def work_order_type(self, work_order_type):
        """Sets the work_order_type of this MaintenanceWorkOrder.


        :param work_order_type: The work_order_type of this MaintenanceWorkOrder.  # noqa: E501
        :type: WorkType
        """

        self._work_order_type = work_order_type

    @property
    def failure_sub_code_id(self):
        """Gets the failure_sub_code_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The failure_sub_code_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._failure_sub_code_id

    @failure_sub_code_id.setter
    def failure_sub_code_id(self, failure_sub_code_id):
        """Sets the failure_sub_code_id of this MaintenanceWorkOrder.


        :param failure_sub_code_id: The failure_sub_code_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: int
        """

        self._failure_sub_code_id = failure_sub_code_id

    @property
    def cause_sub_code_id(self):
        """Gets the cause_sub_code_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The cause_sub_code_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._cause_sub_code_id

    @cause_sub_code_id.setter
    def cause_sub_code_id(self, cause_sub_code_id):
        """Sets the cause_sub_code_id of this MaintenanceWorkOrder.


        :param cause_sub_code_id: The cause_sub_code_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: int
        """

        self._cause_sub_code_id = cause_sub_code_id

    @property
    def remedy_code_id(self):
        """Gets the remedy_code_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The remedy_code_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: int
        """
        return self._remedy_code_id

    @remedy_code_id.setter
    def remedy_code_id(self, remedy_code_id):
        """Sets the remedy_code_id of this MaintenanceWorkOrder.


        :param remedy_code_id: The remedy_code_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: int
        """

        self._remedy_code_id = remedy_code_id

    @property
    def preventive_maintenance_id(self):
        """Gets the preventive_maintenance_id of this MaintenanceWorkOrder.  # noqa: E501


        :return: The preventive_maintenance_id of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: str
        """
        return self._preventive_maintenance_id

    @preventive_maintenance_id.setter
    def preventive_maintenance_id(self, preventive_maintenance_id):
        """Sets the preventive_maintenance_id of this MaintenanceWorkOrder.


        :param preventive_maintenance_id: The preventive_maintenance_id of this MaintenanceWorkOrder.  # noqa: E501
        :type: str
        """

        self._preventive_maintenance_id = preventive_maintenance_id

    @property
    def scheduling(self):
        """Gets the scheduling of this MaintenanceWorkOrder.  # noqa: E501


        :return: The scheduling of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: MaintenanceScheduling
        """
        return self._scheduling

    @scheduling.setter
    def scheduling(self, scheduling):
        """Sets the scheduling of this MaintenanceWorkOrder.


        :param scheduling: The scheduling of this MaintenanceWorkOrder.  # noqa: E501
        :type: MaintenanceScheduling
        """

        self._scheduling = scheduling

    @property
    def labours(self):
        """Gets the labours of this MaintenanceWorkOrder.  # noqa: E501


        :return: The labours of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[MaintenanceLabour]
        """
        return self._labours

    @labours.setter
    def labours(self, labours):
        """Sets the labours of this MaintenanceWorkOrder.


        :param labours: The labours of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[MaintenanceLabour]
        """

        self._labours = labours

    @property
    def meter_reading_required(self):
        """Gets the meter_reading_required of this MaintenanceWorkOrder.  # noqa: E501


        :return: The meter_reading_required of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: bool
        """
        return self._meter_reading_required

    @meter_reading_required.setter
    def meter_reading_required(self, meter_reading_required):
        """Sets the meter_reading_required of this MaintenanceWorkOrder.


        :param meter_reading_required: The meter_reading_required of this MaintenanceWorkOrder.  # noqa: E501
        :type: bool
        """

        self._meter_reading_required = meter_reading_required

    @property
    def linked_work_requests(self):
        """Gets the linked_work_requests of this MaintenanceWorkOrder.  # noqa: E501


        :return: The linked_work_requests of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[LinkedWorkRequest]
        """
        return self._linked_work_requests

    @linked_work_requests.setter
    def linked_work_requests(self, linked_work_requests):
        """Sets the linked_work_requests of this MaintenanceWorkOrder.


        :param linked_work_requests: The linked_work_requests of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[LinkedWorkRequest]
        """

        self._linked_work_requests = linked_work_requests

    @property
    def links(self):
        """Gets the links of this MaintenanceWorkOrder.  # noqa: E501


        :return: The links of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MaintenanceWorkOrder.


        :param links: The links of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this MaintenanceWorkOrder.  # noqa: E501


        :return: The embedded of this MaintenanceWorkOrder.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this MaintenanceWorkOrder.


        :param embedded: The embedded of this MaintenanceWorkOrder.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceWorkOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceWorkOrder):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
