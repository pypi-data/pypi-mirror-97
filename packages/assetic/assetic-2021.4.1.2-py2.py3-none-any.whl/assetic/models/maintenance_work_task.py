# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.asmt_task_form_representation import AsmtTaskFormRepresentation  # noqa: F401,E501
##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501
##from assetic.models.lowest_maintenance_item import LowestMaintenanceItem  # noqa: F401,E501


class MaintenanceWorkTask(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'friendly_id': 'int',
        'brief_description': 'str',
        'status': 'int',
        'lowest_maintenance_item': 'LowestMaintenanceItem',
        'type': 'str',
        'type_id': 'int',
        'asmt_task_forms': 'list[AsmtTaskFormRepresentation]',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'friendly_id': 'FriendlyId',
        'brief_description': 'BriefDescription',
        'status': 'Status',
        'lowest_maintenance_item': 'LowestMaintenanceItem',
        'type': 'Type',
        'type_id': 'TypeId',
        'asmt_task_forms': 'AsmtTaskForms',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, friendly_id=None, brief_description=None, status=None, lowest_maintenance_item=None, type=None, type_id=None, asmt_task_forms=None, links=None, embedded=None):  # noqa: E501
        """MaintenanceWorkTask - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._friendly_id = None
        self._brief_description = None
        self._status = None
        self._lowest_maintenance_item = None
        self._type = None
        self._type_id = None
        self._asmt_task_forms = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if friendly_id is not None:
            self.friendly_id = friendly_id
        if brief_description is not None:
            self.brief_description = brief_description
        if status is not None:
            self.status = status
        if lowest_maintenance_item is not None:
            self.lowest_maintenance_item = lowest_maintenance_item
        if type is not None:
            self.type = type
        if type_id is not None:
            self.type_id = type_id
        if asmt_task_forms is not None:
            self.asmt_task_forms = asmt_task_forms
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this MaintenanceWorkTask.  # noqa: E501


        :return: The id of this MaintenanceWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MaintenanceWorkTask.


        :param id: The id of this MaintenanceWorkTask.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def friendly_id(self):
        """Gets the friendly_id of this MaintenanceWorkTask.  # noqa: E501


        :return: The friendly_id of this MaintenanceWorkTask.  # noqa: E501
        :rtype: int
        """
        return self._friendly_id

    @friendly_id.setter
    def friendly_id(self, friendly_id):
        """Sets the friendly_id of this MaintenanceWorkTask.


        :param friendly_id: The friendly_id of this MaintenanceWorkTask.  # noqa: E501
        :type: int
        """

        self._friendly_id = friendly_id

    @property
    def brief_description(self):
        """Gets the brief_description of this MaintenanceWorkTask.  # noqa: E501


        :return: The brief_description of this MaintenanceWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._brief_description

    @brief_description.setter
    def brief_description(self, brief_description):
        """Sets the brief_description of this MaintenanceWorkTask.


        :param brief_description: The brief_description of this MaintenanceWorkTask.  # noqa: E501
        :type: str
        """

        self._brief_description = brief_description

    @property
    def status(self):
        """Gets the status of this MaintenanceWorkTask.  # noqa: E501


        :return: The status of this MaintenanceWorkTask.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MaintenanceWorkTask.


        :param status: The status of this MaintenanceWorkTask.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def lowest_maintenance_item(self):
        """Gets the lowest_maintenance_item of this MaintenanceWorkTask.  # noqa: E501


        :return: The lowest_maintenance_item of this MaintenanceWorkTask.  # noqa: E501
        :rtype: LowestMaintenanceItem
        """
        return self._lowest_maintenance_item

    @lowest_maintenance_item.setter
    def lowest_maintenance_item(self, lowest_maintenance_item):
        """Sets the lowest_maintenance_item of this MaintenanceWorkTask.


        :param lowest_maintenance_item: The lowest_maintenance_item of this MaintenanceWorkTask.  # noqa: E501
        :type: LowestMaintenanceItem
        """

        self._lowest_maintenance_item = lowest_maintenance_item

    @property
    def type(self):
        """Gets the type of this MaintenanceWorkTask.  # noqa: E501


        :return: The type of this MaintenanceWorkTask.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MaintenanceWorkTask.


        :param type: The type of this MaintenanceWorkTask.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def type_id(self):
        """Gets the type_id of this MaintenanceWorkTask.  # noqa: E501


        :return: The type_id of this MaintenanceWorkTask.  # noqa: E501
        :rtype: int
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this MaintenanceWorkTask.


        :param type_id: The type_id of this MaintenanceWorkTask.  # noqa: E501
        :type: int
        """

        self._type_id = type_id

    @property
    def asmt_task_forms(self):
        """Gets the asmt_task_forms of this MaintenanceWorkTask.  # noqa: E501


        :return: The asmt_task_forms of this MaintenanceWorkTask.  # noqa: E501
        :rtype: list[AsmtTaskFormRepresentation]
        """
        return self._asmt_task_forms

    @asmt_task_forms.setter
    def asmt_task_forms(self, asmt_task_forms):
        """Sets the asmt_task_forms of this MaintenanceWorkTask.


        :param asmt_task_forms: The asmt_task_forms of this MaintenanceWorkTask.  # noqa: E501
        :type: list[AsmtTaskFormRepresentation]
        """

        self._asmt_task_forms = asmt_task_forms

    @property
    def links(self):
        """Gets the links of this MaintenanceWorkTask.  # noqa: E501


        :return: The links of this MaintenanceWorkTask.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this MaintenanceWorkTask.


        :param links: The links of this MaintenanceWorkTask.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this MaintenanceWorkTask.  # noqa: E501


        :return: The embedded of this MaintenanceWorkTask.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this MaintenanceWorkTask.


        :param embedded: The embedded of this MaintenanceWorkTask.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MaintenanceWorkTask, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MaintenanceWorkTask):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
