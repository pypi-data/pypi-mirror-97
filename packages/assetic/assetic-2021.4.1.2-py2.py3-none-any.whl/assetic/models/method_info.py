# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.custom_attribute_data import CustomAttributeData  # noqa: F401,E501
##from assetic.models.i_custom_attribute_provider import ICustomAttributeProvider  # noqa: F401,E501
##from assetic.models.module import Module  # noqa: F401,E501
##from assetic.models.parameter_info import ParameterInfo  # noqa: F401,E501
##from assetic.models.runtime_method_handle import RuntimeMethodHandle  # noqa: F401,E501


class MethodInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'member_type': 'str',
        'return_type': 'str',
        'return_parameter': 'ParameterInfo',
        'return_type_custom_attributes': 'ICustomAttributeProvider',
        'method_implementation_flags': 'str',
        'method_handle': 'RuntimeMethodHandle',
        'attributes': 'str',
        'calling_convention': 'str',
        'is_generic_method_definition': 'bool',
        'contains_generic_parameters': 'bool',
        'is_generic_method': 'bool',
        'is_security_critical': 'bool',
        'is_security_safe_critical': 'bool',
        'is_security_transparent': 'bool',
        'is_public': 'bool',
        'is_private': 'bool',
        'is_family': 'bool',
        'is_assembly': 'bool',
        'is_family_and_assembly': 'bool',
        'is_family_or_assembly': 'bool',
        'is_static': 'bool',
        'is_final': 'bool',
        'is_virtual': 'bool',
        'is_hide_by_sig': 'bool',
        'is_abstract': 'bool',
        'is_special_name': 'bool',
        'is_constructor': 'bool',
        'name': 'str',
        'declaring_type': 'str',
        'reflected_type': 'str',
        'custom_attributes': 'list[CustomAttributeData]',
        'metadata_token': 'int',
        'module': 'Module'
    }

    attribute_map = {
        'member_type': 'MemberType',
        'return_type': 'ReturnType',
        'return_parameter': 'ReturnParameter',
        'return_type_custom_attributes': 'ReturnTypeCustomAttributes',
        'method_implementation_flags': 'MethodImplementationFlags',
        'method_handle': 'MethodHandle',
        'attributes': 'Attributes',
        'calling_convention': 'CallingConvention',
        'is_generic_method_definition': 'IsGenericMethodDefinition',
        'contains_generic_parameters': 'ContainsGenericParameters',
        'is_generic_method': 'IsGenericMethod',
        'is_security_critical': 'IsSecurityCritical',
        'is_security_safe_critical': 'IsSecuritySafeCritical',
        'is_security_transparent': 'IsSecurityTransparent',
        'is_public': 'IsPublic',
        'is_private': 'IsPrivate',
        'is_family': 'IsFamily',
        'is_assembly': 'IsAssembly',
        'is_family_and_assembly': 'IsFamilyAndAssembly',
        'is_family_or_assembly': 'IsFamilyOrAssembly',
        'is_static': 'IsStatic',
        'is_final': 'IsFinal',
        'is_virtual': 'IsVirtual',
        'is_hide_by_sig': 'IsHideBySig',
        'is_abstract': 'IsAbstract',
        'is_special_name': 'IsSpecialName',
        'is_constructor': 'IsConstructor',
        'name': 'Name',
        'declaring_type': 'DeclaringType',
        'reflected_type': 'ReflectedType',
        'custom_attributes': 'CustomAttributes',
        'metadata_token': 'MetadataToken',
        'module': 'Module'
    }

    def __init__(self, member_type=None, return_type=None, return_parameter=None, return_type_custom_attributes=None, method_implementation_flags=None, method_handle=None, attributes=None, calling_convention=None, is_generic_method_definition=None, contains_generic_parameters=None, is_generic_method=None, is_security_critical=None, is_security_safe_critical=None, is_security_transparent=None, is_public=None, is_private=None, is_family=None, is_assembly=None, is_family_and_assembly=None, is_family_or_assembly=None, is_static=None, is_final=None, is_virtual=None, is_hide_by_sig=None, is_abstract=None, is_special_name=None, is_constructor=None, name=None, declaring_type=None, reflected_type=None, custom_attributes=None, metadata_token=None, module=None):  # noqa: E501
        """MethodInfo - a model defined in Swagger"""  # noqa: E501

        self._member_type = None
        self._return_type = None
        self._return_parameter = None
        self._return_type_custom_attributes = None
        self._method_implementation_flags = None
        self._method_handle = None
        self._attributes = None
        self._calling_convention = None
        self._is_generic_method_definition = None
        self._contains_generic_parameters = None
        self._is_generic_method = None
        self._is_security_critical = None
        self._is_security_safe_critical = None
        self._is_security_transparent = None
        self._is_public = None
        self._is_private = None
        self._is_family = None
        self._is_assembly = None
        self._is_family_and_assembly = None
        self._is_family_or_assembly = None
        self._is_static = None
        self._is_final = None
        self._is_virtual = None
        self._is_hide_by_sig = None
        self._is_abstract = None
        self._is_special_name = None
        self._is_constructor = None
        self._name = None
        self._declaring_type = None
        self._reflected_type = None
        self._custom_attributes = None
        self._metadata_token = None
        self._module = None
        self.discriminator = None

        if member_type is not None:
            self.member_type = member_type
        if return_type is not None:
            self.return_type = return_type
        if return_parameter is not None:
            self.return_parameter = return_parameter
        if return_type_custom_attributes is not None:
            self.return_type_custom_attributes = return_type_custom_attributes
        if method_implementation_flags is not None:
            self.method_implementation_flags = method_implementation_flags
        if method_handle is not None:
            self.method_handle = method_handle
        if attributes is not None:
            self.attributes = attributes
        if calling_convention is not None:
            self.calling_convention = calling_convention
        if is_generic_method_definition is not None:
            self.is_generic_method_definition = is_generic_method_definition
        if contains_generic_parameters is not None:
            self.contains_generic_parameters = contains_generic_parameters
        if is_generic_method is not None:
            self.is_generic_method = is_generic_method
        if is_security_critical is not None:
            self.is_security_critical = is_security_critical
        if is_security_safe_critical is not None:
            self.is_security_safe_critical = is_security_safe_critical
        if is_security_transparent is not None:
            self.is_security_transparent = is_security_transparent
        if is_public is not None:
            self.is_public = is_public
        if is_private is not None:
            self.is_private = is_private
        if is_family is not None:
            self.is_family = is_family
        if is_assembly is not None:
            self.is_assembly = is_assembly
        if is_family_and_assembly is not None:
            self.is_family_and_assembly = is_family_and_assembly
        if is_family_or_assembly is not None:
            self.is_family_or_assembly = is_family_or_assembly
        if is_static is not None:
            self.is_static = is_static
        if is_final is not None:
            self.is_final = is_final
        if is_virtual is not None:
            self.is_virtual = is_virtual
        if is_hide_by_sig is not None:
            self.is_hide_by_sig = is_hide_by_sig
        if is_abstract is not None:
            self.is_abstract = is_abstract
        if is_special_name is not None:
            self.is_special_name = is_special_name
        if is_constructor is not None:
            self.is_constructor = is_constructor
        if name is not None:
            self.name = name
        if declaring_type is not None:
            self.declaring_type = declaring_type
        if reflected_type is not None:
            self.reflected_type = reflected_type
        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if metadata_token is not None:
            self.metadata_token = metadata_token
        if module is not None:
            self.module = module

    @property
    def member_type(self):
        """Gets the member_type of this MethodInfo.  # noqa: E501


        :return: The member_type of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._member_type

    @member_type.setter
    def member_type(self, member_type):
        """Sets the member_type of this MethodInfo.


        :param member_type: The member_type of this MethodInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Constructor", "Event", "Field", "Method", "Property", "TypeInfo", "Custom", "NestedType", "All"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if member_type not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(member_type)
            except ValueError:
                raise ValueError(
                    "Invalid value for `member_type` ({0}), must be one of {1}"  # noqa: E501
                    .format(member_type, allowed_values)
                )

        self._member_type = member_type

    @property
    def return_type(self):
        """Gets the return_type of this MethodInfo.  # noqa: E501


        :return: The return_type of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._return_type

    @return_type.setter
    def return_type(self, return_type):
        """Sets the return_type of this MethodInfo.


        :param return_type: The return_type of this MethodInfo.  # noqa: E501
        :type: str
        """

        self._return_type = return_type

    @property
    def return_parameter(self):
        """Gets the return_parameter of this MethodInfo.  # noqa: E501


        :return: The return_parameter of this MethodInfo.  # noqa: E501
        :rtype: ParameterInfo
        """
        return self._return_parameter

    @return_parameter.setter
    def return_parameter(self, return_parameter):
        """Sets the return_parameter of this MethodInfo.


        :param return_parameter: The return_parameter of this MethodInfo.  # noqa: E501
        :type: ParameterInfo
        """

        self._return_parameter = return_parameter

    @property
    def return_type_custom_attributes(self):
        """Gets the return_type_custom_attributes of this MethodInfo.  # noqa: E501


        :return: The return_type_custom_attributes of this MethodInfo.  # noqa: E501
        :rtype: ICustomAttributeProvider
        """
        return self._return_type_custom_attributes

    @return_type_custom_attributes.setter
    def return_type_custom_attributes(self, return_type_custom_attributes):
        """Sets the return_type_custom_attributes of this MethodInfo.


        :param return_type_custom_attributes: The return_type_custom_attributes of this MethodInfo.  # noqa: E501
        :type: ICustomAttributeProvider
        """

        self._return_type_custom_attributes = return_type_custom_attributes

    @property
    def method_implementation_flags(self):
        """Gets the method_implementation_flags of this MethodInfo.  # noqa: E501


        :return: The method_implementation_flags of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._method_implementation_flags

    @method_implementation_flags.setter
    def method_implementation_flags(self, method_implementation_flags):
        """Sets the method_implementation_flags of this MethodInfo.


        :param method_implementation_flags: The method_implementation_flags of this MethodInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["CodeTypeMask", "IL", "Native", "OPTIL", "Runtime", "ManagedMask", "Unmanaged", "Managed", "ForwardRef", "PreserveSig", "InternalCall", "Synchronized", "NoInlining", "AggressiveInlining", "NoOptimization", "MaxMethodImplVal"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if method_implementation_flags not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(method_implementation_flags)
            except ValueError:
                raise ValueError(
                    "Invalid value for `method_implementation_flags` ({0}), must be one of {1}"  # noqa: E501
                    .format(method_implementation_flags, allowed_values)
                )

        self._method_implementation_flags = method_implementation_flags

    @property
    def method_handle(self):
        """Gets the method_handle of this MethodInfo.  # noqa: E501


        :return: The method_handle of this MethodInfo.  # noqa: E501
        :rtype: RuntimeMethodHandle
        """
        return self._method_handle

    @method_handle.setter
    def method_handle(self, method_handle):
        """Sets the method_handle of this MethodInfo.


        :param method_handle: The method_handle of this MethodInfo.  # noqa: E501
        :type: RuntimeMethodHandle
        """

        self._method_handle = method_handle

    @property
    def attributes(self):
        """Gets the attributes of this MethodInfo.  # noqa: E501


        :return: The attributes of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """Sets the attributes of this MethodInfo.


        :param attributes: The attributes of this MethodInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["MemberAccessMask", "PrivateScope", "Private", "FamANDAssem", "Assembly", "Family", "FamORAssem", "Public", "Static", "Final", "Virtual", "HideBySig", "CheckAccessOnOverride", "VtableLayoutMask", "ReuseSlot", "NewSlot", "Abstract", "SpecialName", "PinvokeImpl", "UnmanagedExport", "RTSpecialName", "ReservedMask", "HasSecurity", "RequireSecObject"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if attributes not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(attributes)
            except ValueError:
                raise ValueError(
                    "Invalid value for `attributes` ({0}), must be one of {1}"  # noqa: E501
                    .format(attributes, allowed_values)
                )

        self._attributes = attributes

    @property
    def calling_convention(self):
        """Gets the calling_convention of this MethodInfo.  # noqa: E501


        :return: The calling_convention of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._calling_convention

    @calling_convention.setter
    def calling_convention(self, calling_convention):
        """Sets the calling_convention of this MethodInfo.


        :param calling_convention: The calling_convention of this MethodInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["Standard", "VarArgs", "Any", "HasThis", "ExplicitThis"]  # noqa: E501
        if "None" in allowed_values:
            allowed_values.append(None)
        if calling_convention not in allowed_values:
            # Could be an integer enum returned by API
            try:
                int_type = int(calling_convention)
            except ValueError:
                raise ValueError(
                    "Invalid value for `calling_convention` ({0}), must be one of {1}"  # noqa: E501
                    .format(calling_convention, allowed_values)
                )

        self._calling_convention = calling_convention

    @property
    def is_generic_method_definition(self):
        """Gets the is_generic_method_definition of this MethodInfo.  # noqa: E501


        :return: The is_generic_method_definition of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic_method_definition

    @is_generic_method_definition.setter
    def is_generic_method_definition(self, is_generic_method_definition):
        """Sets the is_generic_method_definition of this MethodInfo.


        :param is_generic_method_definition: The is_generic_method_definition of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_generic_method_definition = is_generic_method_definition

    @property
    def contains_generic_parameters(self):
        """Gets the contains_generic_parameters of this MethodInfo.  # noqa: E501


        :return: The contains_generic_parameters of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._contains_generic_parameters

    @contains_generic_parameters.setter
    def contains_generic_parameters(self, contains_generic_parameters):
        """Sets the contains_generic_parameters of this MethodInfo.


        :param contains_generic_parameters: The contains_generic_parameters of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._contains_generic_parameters = contains_generic_parameters

    @property
    def is_generic_method(self):
        """Gets the is_generic_method of this MethodInfo.  # noqa: E501


        :return: The is_generic_method of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_generic_method

    @is_generic_method.setter
    def is_generic_method(self, is_generic_method):
        """Sets the is_generic_method of this MethodInfo.


        :param is_generic_method: The is_generic_method of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_generic_method = is_generic_method

    @property
    def is_security_critical(self):
        """Gets the is_security_critical of this MethodInfo.  # noqa: E501


        :return: The is_security_critical of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_critical

    @is_security_critical.setter
    def is_security_critical(self, is_security_critical):
        """Sets the is_security_critical of this MethodInfo.


        :param is_security_critical: The is_security_critical of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_security_critical = is_security_critical

    @property
    def is_security_safe_critical(self):
        """Gets the is_security_safe_critical of this MethodInfo.  # noqa: E501


        :return: The is_security_safe_critical of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_safe_critical

    @is_security_safe_critical.setter
    def is_security_safe_critical(self, is_security_safe_critical):
        """Sets the is_security_safe_critical of this MethodInfo.


        :param is_security_safe_critical: The is_security_safe_critical of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_security_safe_critical = is_security_safe_critical

    @property
    def is_security_transparent(self):
        """Gets the is_security_transparent of this MethodInfo.  # noqa: E501


        :return: The is_security_transparent of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_security_transparent

    @is_security_transparent.setter
    def is_security_transparent(self, is_security_transparent):
        """Sets the is_security_transparent of this MethodInfo.


        :param is_security_transparent: The is_security_transparent of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_security_transparent = is_security_transparent

    @property
    def is_public(self):
        """Gets the is_public of this MethodInfo.  # noqa: E501


        :return: The is_public of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this MethodInfo.


        :param is_public: The is_public of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def is_private(self):
        """Gets the is_private of this MethodInfo.  # noqa: E501


        :return: The is_private of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private):
        """Sets the is_private of this MethodInfo.


        :param is_private: The is_private of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_private = is_private

    @property
    def is_family(self):
        """Gets the is_family of this MethodInfo.  # noqa: E501


        :return: The is_family of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_family

    @is_family.setter
    def is_family(self, is_family):
        """Sets the is_family of this MethodInfo.


        :param is_family: The is_family of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_family = is_family

    @property
    def is_assembly(self):
        """Gets the is_assembly of this MethodInfo.  # noqa: E501


        :return: The is_assembly of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_assembly

    @is_assembly.setter
    def is_assembly(self, is_assembly):
        """Sets the is_assembly of this MethodInfo.


        :param is_assembly: The is_assembly of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_assembly = is_assembly

    @property
    def is_family_and_assembly(self):
        """Gets the is_family_and_assembly of this MethodInfo.  # noqa: E501


        :return: The is_family_and_assembly of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_and_assembly

    @is_family_and_assembly.setter
    def is_family_and_assembly(self, is_family_and_assembly):
        """Sets the is_family_and_assembly of this MethodInfo.


        :param is_family_and_assembly: The is_family_and_assembly of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_family_and_assembly = is_family_and_assembly

    @property
    def is_family_or_assembly(self):
        """Gets the is_family_or_assembly of this MethodInfo.  # noqa: E501


        :return: The is_family_or_assembly of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_family_or_assembly

    @is_family_or_assembly.setter
    def is_family_or_assembly(self, is_family_or_assembly):
        """Sets the is_family_or_assembly of this MethodInfo.


        :param is_family_or_assembly: The is_family_or_assembly of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_family_or_assembly = is_family_or_assembly

    @property
    def is_static(self):
        """Gets the is_static of this MethodInfo.  # noqa: E501


        :return: The is_static of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_static

    @is_static.setter
    def is_static(self, is_static):
        """Sets the is_static of this MethodInfo.


        :param is_static: The is_static of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_static = is_static

    @property
    def is_final(self):
        """Gets the is_final of this MethodInfo.  # noqa: E501


        :return: The is_final of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_final

    @is_final.setter
    def is_final(self, is_final):
        """Sets the is_final of this MethodInfo.


        :param is_final: The is_final of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_final = is_final

    @property
    def is_virtual(self):
        """Gets the is_virtual of this MethodInfo.  # noqa: E501


        :return: The is_virtual of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_virtual

    @is_virtual.setter
    def is_virtual(self, is_virtual):
        """Sets the is_virtual of this MethodInfo.


        :param is_virtual: The is_virtual of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_virtual = is_virtual

    @property
    def is_hide_by_sig(self):
        """Gets the is_hide_by_sig of this MethodInfo.  # noqa: E501


        :return: The is_hide_by_sig of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_hide_by_sig

    @is_hide_by_sig.setter
    def is_hide_by_sig(self, is_hide_by_sig):
        """Sets the is_hide_by_sig of this MethodInfo.


        :param is_hide_by_sig: The is_hide_by_sig of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_hide_by_sig = is_hide_by_sig

    @property
    def is_abstract(self):
        """Gets the is_abstract of this MethodInfo.  # noqa: E501


        :return: The is_abstract of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_abstract

    @is_abstract.setter
    def is_abstract(self, is_abstract):
        """Sets the is_abstract of this MethodInfo.


        :param is_abstract: The is_abstract of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_abstract = is_abstract

    @property
    def is_special_name(self):
        """Gets the is_special_name of this MethodInfo.  # noqa: E501


        :return: The is_special_name of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_special_name

    @is_special_name.setter
    def is_special_name(self, is_special_name):
        """Sets the is_special_name of this MethodInfo.


        :param is_special_name: The is_special_name of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_special_name = is_special_name

    @property
    def is_constructor(self):
        """Gets the is_constructor of this MethodInfo.  # noqa: E501


        :return: The is_constructor of this MethodInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_constructor

    @is_constructor.setter
    def is_constructor(self, is_constructor):
        """Sets the is_constructor of this MethodInfo.


        :param is_constructor: The is_constructor of this MethodInfo.  # noqa: E501
        :type: bool
        """

        self._is_constructor = is_constructor

    @property
    def name(self):
        """Gets the name of this MethodInfo.  # noqa: E501


        :return: The name of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MethodInfo.


        :param name: The name of this MethodInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def declaring_type(self):
        """Gets the declaring_type of this MethodInfo.  # noqa: E501


        :return: The declaring_type of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._declaring_type

    @declaring_type.setter
    def declaring_type(self, declaring_type):
        """Sets the declaring_type of this MethodInfo.


        :param declaring_type: The declaring_type of this MethodInfo.  # noqa: E501
        :type: str
        """

        self._declaring_type = declaring_type

    @property
    def reflected_type(self):
        """Gets the reflected_type of this MethodInfo.  # noqa: E501


        :return: The reflected_type of this MethodInfo.  # noqa: E501
        :rtype: str
        """
        return self._reflected_type

    @reflected_type.setter
    def reflected_type(self, reflected_type):
        """Sets the reflected_type of this MethodInfo.


        :param reflected_type: The reflected_type of this MethodInfo.  # noqa: E501
        :type: str
        """

        self._reflected_type = reflected_type

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this MethodInfo.  # noqa: E501


        :return: The custom_attributes of this MethodInfo.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this MethodInfo.


        :param custom_attributes: The custom_attributes of this MethodInfo.  # noqa: E501
        :type: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def metadata_token(self):
        """Gets the metadata_token of this MethodInfo.  # noqa: E501


        :return: The metadata_token of this MethodInfo.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this MethodInfo.


        :param metadata_token: The metadata_token of this MethodInfo.  # noqa: E501
        :type: int
        """

        self._metadata_token = metadata_token

    @property
    def module(self):
        """Gets the module of this MethodInfo.  # noqa: E501


        :return: The module of this MethodInfo.  # noqa: E501
        :rtype: Module
        """
        return self._module

    @module.setter
    def module(self, module):
        """Sets the module of this MethodInfo.


        :param module: The module of this MethodInfo.  # noqa: E501
        :type: Module
        """

        self._module = module

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MethodInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MethodInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
