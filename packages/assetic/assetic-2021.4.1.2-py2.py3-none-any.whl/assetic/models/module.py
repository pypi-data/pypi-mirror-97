# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.assembly import Assembly  # noqa: F401,E501
##from assetic.models.custom_attribute_data import CustomAttributeData  # noqa: F401,E501
##from assetic.models.module_handle import ModuleHandle  # noqa: F401,E501


class Module(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_attributes': 'list[CustomAttributeData]',
        'md_stream_version': 'int',
        'fully_qualified_name': 'str',
        'module_version_id': 'str',
        'metadata_token': 'int',
        'scope_name': 'str',
        'name': 'str',
        'assembly': 'Assembly',
        'module_handle': 'ModuleHandle'
    }

    attribute_map = {
        'custom_attributes': 'CustomAttributes',
        'md_stream_version': 'MDStreamVersion',
        'fully_qualified_name': 'FullyQualifiedName',
        'module_version_id': 'ModuleVersionId',
        'metadata_token': 'MetadataToken',
        'scope_name': 'ScopeName',
        'name': 'Name',
        'assembly': 'Assembly',
        'module_handle': 'ModuleHandle'
    }

    def __init__(self, custom_attributes=None, md_stream_version=None, fully_qualified_name=None, module_version_id=None, metadata_token=None, scope_name=None, name=None, assembly=None, module_handle=None):  # noqa: E501
        """Module - a model defined in Swagger"""  # noqa: E501

        self._custom_attributes = None
        self._md_stream_version = None
        self._fully_qualified_name = None
        self._module_version_id = None
        self._metadata_token = None
        self._scope_name = None
        self._name = None
        self._assembly = None
        self._module_handle = None
        self.discriminator = None

        if custom_attributes is not None:
            self.custom_attributes = custom_attributes
        if md_stream_version is not None:
            self.md_stream_version = md_stream_version
        if fully_qualified_name is not None:
            self.fully_qualified_name = fully_qualified_name
        if module_version_id is not None:
            self.module_version_id = module_version_id
        if metadata_token is not None:
            self.metadata_token = metadata_token
        if scope_name is not None:
            self.scope_name = scope_name
        if name is not None:
            self.name = name
        if assembly is not None:
            self.assembly = assembly
        if module_handle is not None:
            self.module_handle = module_handle

    @property
    def custom_attributes(self):
        """Gets the custom_attributes of this Module.  # noqa: E501


        :return: The custom_attributes of this Module.  # noqa: E501
        :rtype: list[CustomAttributeData]
        """
        return self._custom_attributes

    @custom_attributes.setter
    def custom_attributes(self, custom_attributes):
        """Sets the custom_attributes of this Module.


        :param custom_attributes: The custom_attributes of this Module.  # noqa: E501
        :type: list[CustomAttributeData]
        """

        self._custom_attributes = custom_attributes

    @property
    def md_stream_version(self):
        """Gets the md_stream_version of this Module.  # noqa: E501


        :return: The md_stream_version of this Module.  # noqa: E501
        :rtype: int
        """
        return self._md_stream_version

    @md_stream_version.setter
    def md_stream_version(self, md_stream_version):
        """Sets the md_stream_version of this Module.


        :param md_stream_version: The md_stream_version of this Module.  # noqa: E501
        :type: int
        """

        self._md_stream_version = md_stream_version

    @property
    def fully_qualified_name(self):
        """Gets the fully_qualified_name of this Module.  # noqa: E501


        :return: The fully_qualified_name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._fully_qualified_name

    @fully_qualified_name.setter
    def fully_qualified_name(self, fully_qualified_name):
        """Sets the fully_qualified_name of this Module.


        :param fully_qualified_name: The fully_qualified_name of this Module.  # noqa: E501
        :type: str
        """

        self._fully_qualified_name = fully_qualified_name

    @property
    def module_version_id(self):
        """Gets the module_version_id of this Module.  # noqa: E501


        :return: The module_version_id of this Module.  # noqa: E501
        :rtype: str
        """
        return self._module_version_id

    @module_version_id.setter
    def module_version_id(self, module_version_id):
        """Sets the module_version_id of this Module.


        :param module_version_id: The module_version_id of this Module.  # noqa: E501
        :type: str
        """

        self._module_version_id = module_version_id

    @property
    def metadata_token(self):
        """Gets the metadata_token of this Module.  # noqa: E501


        :return: The metadata_token of this Module.  # noqa: E501
        :rtype: int
        """
        return self._metadata_token

    @metadata_token.setter
    def metadata_token(self, metadata_token):
        """Sets the metadata_token of this Module.


        :param metadata_token: The metadata_token of this Module.  # noqa: E501
        :type: int
        """

        self._metadata_token = metadata_token

    @property
    def scope_name(self):
        """Gets the scope_name of this Module.  # noqa: E501


        :return: The scope_name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this Module.


        :param scope_name: The scope_name of this Module.  # noqa: E501
        :type: str
        """

        self._scope_name = scope_name

    @property
    def name(self):
        """Gets the name of this Module.  # noqa: E501


        :return: The name of this Module.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Module.


        :param name: The name of this Module.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assembly(self):
        """Gets the assembly of this Module.  # noqa: E501


        :return: The assembly of this Module.  # noqa: E501
        :rtype: Assembly
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this Module.


        :param assembly: The assembly of this Module.  # noqa: E501
        :type: Assembly
        """

        self._assembly = assembly

    @property
    def module_handle(self):
        """Gets the module_handle of this Module.  # noqa: E501


        :return: The module_handle of this Module.  # noqa: E501
        :rtype: ModuleHandle
        """
        return self._module_handle

    @module_handle.setter
    def module_handle(self, module_handle):
        """Sets the module_handle of this Module.


        :param module_handle: The module_handle of this Module.  # noqa: E501
        :type: ModuleHandle
        """

        self._module_handle = module_handle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Module, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Module):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
