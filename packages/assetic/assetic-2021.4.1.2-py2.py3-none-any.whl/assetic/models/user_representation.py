# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.claim_type_representation import ClaimTypeRepresentation  # noqa: F401,E501
##from assetic.models.rs_resource_representation import RsResourceRepresentation  # noqa: F401,E501


class UserRepresentation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'image': 'str',
        'environment_name': 'str',
        'resource': 'RsResourceRepresentation',
        'claims': 'list[ClaimTypeRepresentation]'
    }

    attribute_map = {
        'id': 'Id',
        'user_name': 'UserName',
        'first_name': 'FirstName',
        'last_name': 'LastName',
        'email': 'Email',
        'image': 'Image',
        'environment_name': 'EnvironmentName',
        'resource': 'Resource',
        'claims': 'Claims'
    }

    def __init__(self, id=None, user_name=None, first_name=None, last_name=None, email=None, image=None, environment_name=None, resource=None, claims=None):  # noqa: E501
        """UserRepresentation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._image = None
        self._environment_name = None
        self._resource = None
        self._claims = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if user_name is not None:
            self.user_name = user_name
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if email is not None:
            self.email = email
        if image is not None:
            self.image = image
        if environment_name is not None:
            self.environment_name = environment_name
        if resource is not None:
            self.resource = resource
        if claims is not None:
            self.claims = claims

    @property
    def id(self):
        """Gets the id of this UserRepresentation.  # noqa: E501


        :return: The id of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserRepresentation.


        :param id: The id of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_name(self):
        """Gets the user_name of this UserRepresentation.  # noqa: E501


        :return: The user_name of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this UserRepresentation.


        :param user_name: The user_name of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this UserRepresentation.  # noqa: E501


        :return: The first_name of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserRepresentation.


        :param first_name: The first_name of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserRepresentation.  # noqa: E501


        :return: The last_name of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserRepresentation.


        :param last_name: The last_name of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this UserRepresentation.  # noqa: E501


        :return: The email of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRepresentation.


        :param email: The email of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def image(self):
        """Gets the image of this UserRepresentation.  # noqa: E501


        :return: The image of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this UserRepresentation.


        :param image: The image of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def environment_name(self):
        """Gets the environment_name of this UserRepresentation.  # noqa: E501


        :return: The environment_name of this UserRepresentation.  # noqa: E501
        :rtype: str
        """
        return self._environment_name

    @environment_name.setter
    def environment_name(self, environment_name):
        """Sets the environment_name of this UserRepresentation.


        :param environment_name: The environment_name of this UserRepresentation.  # noqa: E501
        :type: str
        """

        self._environment_name = environment_name

    @property
    def resource(self):
        """Gets the resource of this UserRepresentation.  # noqa: E501


        :return: The resource of this UserRepresentation.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this UserRepresentation.


        :param resource: The resource of this UserRepresentation.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._resource = resource

    @property
    def claims(self):
        """Gets the claims of this UserRepresentation.  # noqa: E501


        :return: The claims of this UserRepresentation.  # noqa: E501
        :rtype: list[ClaimTypeRepresentation]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this UserRepresentation.


        :param claims: The claims of this UserRepresentation.  # noqa: E501
        :type: list[ClaimTypeRepresentation]
        """

        self._claims = claims

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserRepresentation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRepresentation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
