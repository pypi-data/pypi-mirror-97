# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.document_representation import DocumentRepresentation  # noqa: F401,E501
##from assetic.models.embedded_resource import EmbeddedResource  # noqa: F401,E501
##from assetic.models.link import Link  # noqa: F401,E501
##from assetic.models.requestor_representation import RequestorRepresentation  # noqa: F401,E501
##from assetic.models.rs_resource_representation import RsResourceRepresentation  # noqa: F401,E501
##from assetic.models.supporting_information import SupportingInformation  # noqa: F401,E501
##from assetic.models.work_request_physical_location import WorkRequestPhysicalLocation  # noqa: F401,E501
##from assetic.models.work_request_spatial_location import WorkRequestSpatialLocation  # noqa: F401,E501


class WorkRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'friendly_id_str': 'str',
        'contact_type': 'int',
        'requestor_id': 'str',
        'work_request_source_id': 'int',
        'work_request_priority_id': 'int',
        'description': 'str',
        'supporting_information': 'str',
        'created_date_time': 'datetime',
        'feedback_required': 'bool',
        'feedback_method_id': 'int',
        'location': 'str',
        'work_request_status_id': 'int',
        'work_request_status': 'str',
        'work_request_type_id': 'int',
        'work_request_sub_type_id': 'int',
        'closed_date': 'datetime',
        'acknowledge_due_date': 'datetime',
        'resolution_due_date': 'datetime',
        'complex_asset_id': 'str',
        'asset_id': 'str',
        'created_by': 'str',
        'work_order_id': 'str',
        'external_identifier': 'str',
        'work_order_priority_id': 'int',
        'reference_number': 'str',
        'last_modified': 'datetime',
        'requestor': 'RequestorRepresentation',
        'reactive_inspector_id': 'str',
        'reactive_inspector': 'RsResourceRepresentation',
        'responsible_officer_id': 'str',
        'responsible_officer': 'RsResourceRepresentation',
        'reactive_inspection_date': 'datetime',
        'supporting_information_history': 'list[SupportingInformation]',
        'attached_documents': 'list[DocumentRepresentation]',
        'work_request_physical_location': 'WorkRequestPhysicalLocation',
        'work_request_spatial_location': 'WorkRequestSpatialLocation',
        'links': 'list[Link]',
        'embedded': 'list[EmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'friendly_id_str': 'FriendlyIdStr',
        'contact_type': 'ContactType',
        'requestor_id': 'RequestorId',
        'work_request_source_id': 'WorkRequestSourceId',
        'work_request_priority_id': 'WorkRequestPriorityId',
        'description': 'Description',
        'supporting_information': 'SupportingInformation',
        'created_date_time': 'CreatedDateTime',
        'feedback_required': 'FeedbackRequired',
        'feedback_method_id': 'FeedbackMethodId',
        'location': 'Location',
        'work_request_status_id': 'WorkRequestStatusId',
        'work_request_status': 'WorkRequestStatus',
        'work_request_type_id': 'WorkRequestTypeId',
        'work_request_sub_type_id': 'WorkRequestSubTypeId',
        'closed_date': 'ClosedDate',
        'acknowledge_due_date': 'AcknowledgeDueDate',
        'resolution_due_date': 'ResolutionDueDate',
        'complex_asset_id': 'ComplexAssetId',
        'asset_id': 'AssetId',
        'created_by': 'CreatedBy',
        'work_order_id': 'WorkOrderId',
        'external_identifier': 'ExternalIdentifier',
        'work_order_priority_id': 'WorkOrderPriorityId',
        'reference_number': 'ReferenceNumber',
        'last_modified': 'LastModified',
        'requestor': 'Requestor',
        'reactive_inspector_id': 'ReactiveInspectorId',
        'reactive_inspector': 'ReactiveInspector',
        'responsible_officer_id': 'ResponsibleOfficerId',
        'responsible_officer': 'ResponsibleOfficer',
        'reactive_inspection_date': 'ReactiveInspectionDate',
        'supporting_information_history': 'SupportingInformationHistory',
        'attached_documents': 'AttachedDocuments',
        'work_request_physical_location': 'WorkRequestPhysicalLocation',
        'work_request_spatial_location': 'WorkRequestSpatialLocation',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, friendly_id_str=None, contact_type=None, requestor_id=None, work_request_source_id=None, work_request_priority_id=None, description=None, supporting_information=None, created_date_time=None, feedback_required=None, feedback_method_id=None, location=None, work_request_status_id=None, work_request_status=None, work_request_type_id=None, work_request_sub_type_id=None, closed_date=None, acknowledge_due_date=None, resolution_due_date=None, complex_asset_id=None, asset_id=None, created_by=None, work_order_id=None, external_identifier=None, work_order_priority_id=None, reference_number=None, last_modified=None, requestor=None, reactive_inspector_id=None, reactive_inspector=None, responsible_officer_id=None, responsible_officer=None, reactive_inspection_date=None, supporting_information_history=None, attached_documents=None, work_request_physical_location=None, work_request_spatial_location=None, links=None, embedded=None):  # noqa: E501
        """WorkRequest - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._friendly_id_str = None
        self._contact_type = None
        self._requestor_id = None
        self._work_request_source_id = None
        self._work_request_priority_id = None
        self._description = None
        self._supporting_information = None
        self._created_date_time = None
        self._feedback_required = None
        self._feedback_method_id = None
        self._location = None
        self._work_request_status_id = None
        self._work_request_status = None
        self._work_request_type_id = None
        self._work_request_sub_type_id = None
        self._closed_date = None
        self._acknowledge_due_date = None
        self._resolution_due_date = None
        self._complex_asset_id = None
        self._asset_id = None
        self._created_by = None
        self._work_order_id = None
        self._external_identifier = None
        self._work_order_priority_id = None
        self._reference_number = None
        self._last_modified = None
        self._requestor = None
        self._reactive_inspector_id = None
        self._reactive_inspector = None
        self._responsible_officer_id = None
        self._responsible_officer = None
        self._reactive_inspection_date = None
        self._supporting_information_history = None
        self._attached_documents = None
        self._work_request_physical_location = None
        self._work_request_spatial_location = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if friendly_id_str is not None:
            self.friendly_id_str = friendly_id_str
        if contact_type is not None:
            self.contact_type = contact_type
        if requestor_id is not None:
            self.requestor_id = requestor_id
        if work_request_source_id is not None:
            self.work_request_source_id = work_request_source_id
        if work_request_priority_id is not None:
            self.work_request_priority_id = work_request_priority_id
        if description is not None:
            self.description = description
        if supporting_information is not None:
            self.supporting_information = supporting_information
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if feedback_required is not None:
            self.feedback_required = feedback_required
        if feedback_method_id is not None:
            self.feedback_method_id = feedback_method_id
        if location is not None:
            self.location = location
        if work_request_status_id is not None:
            self.work_request_status_id = work_request_status_id
        if work_request_status is not None:
            self.work_request_status = work_request_status
        if work_request_type_id is not None:
            self.work_request_type_id = work_request_type_id
        if work_request_sub_type_id is not None:
            self.work_request_sub_type_id = work_request_sub_type_id
        if closed_date is not None:
            self.closed_date = closed_date
        if acknowledge_due_date is not None:
            self.acknowledge_due_date = acknowledge_due_date
        if resolution_due_date is not None:
            self.resolution_due_date = resolution_due_date
        if complex_asset_id is not None:
            self.complex_asset_id = complex_asset_id
        if asset_id is not None:
            self.asset_id = asset_id
        if created_by is not None:
            self.created_by = created_by
        if work_order_id is not None:
            self.work_order_id = work_order_id
        if external_identifier is not None:
            self.external_identifier = external_identifier
        if work_order_priority_id is not None:
            self.work_order_priority_id = work_order_priority_id
        if reference_number is not None:
            self.reference_number = reference_number
        if last_modified is not None:
            self.last_modified = last_modified
        if requestor is not None:
            self.requestor = requestor
        if reactive_inspector_id is not None:
            self.reactive_inspector_id = reactive_inspector_id
        if reactive_inspector is not None:
            self.reactive_inspector = reactive_inspector
        if responsible_officer_id is not None:
            self.responsible_officer_id = responsible_officer_id
        if responsible_officer is not None:
            self.responsible_officer = responsible_officer
        if reactive_inspection_date is not None:
            self.reactive_inspection_date = reactive_inspection_date
        if supporting_information_history is not None:
            self.supporting_information_history = supporting_information_history
        if attached_documents is not None:
            self.attached_documents = attached_documents
        if work_request_physical_location is not None:
            self.work_request_physical_location = work_request_physical_location
        if work_request_spatial_location is not None:
            self.work_request_spatial_location = work_request_spatial_location
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this WorkRequest.  # noqa: E501


        :return: The id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkRequest.


        :param id: The id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def friendly_id_str(self):
        """Gets the friendly_id_str of this WorkRequest.  # noqa: E501


        :return: The friendly_id_str of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._friendly_id_str

    @friendly_id_str.setter
    def friendly_id_str(self, friendly_id_str):
        """Sets the friendly_id_str of this WorkRequest.


        :param friendly_id_str: The friendly_id_str of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._friendly_id_str = friendly_id_str

    @property
    def contact_type(self):
        """Gets the contact_type of this WorkRequest.  # noqa: E501


        :return: The contact_type of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._contact_type

    @contact_type.setter
    def contact_type(self, contact_type):
        """Sets the contact_type of this WorkRequest.


        :param contact_type: The contact_type of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._contact_type = contact_type

    @property
    def requestor_id(self):
        """Gets the requestor_id of this WorkRequest.  # noqa: E501


        :return: The requestor_id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._requestor_id

    @requestor_id.setter
    def requestor_id(self, requestor_id):
        """Sets the requestor_id of this WorkRequest.


        :param requestor_id: The requestor_id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._requestor_id = requestor_id

    @property
    def work_request_source_id(self):
        """Gets the work_request_source_id of this WorkRequest.  # noqa: E501


        :return: The work_request_source_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._work_request_source_id

    @work_request_source_id.setter
    def work_request_source_id(self, work_request_source_id):
        """Sets the work_request_source_id of this WorkRequest.


        :param work_request_source_id: The work_request_source_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._work_request_source_id = work_request_source_id

    @property
    def work_request_priority_id(self):
        """Gets the work_request_priority_id of this WorkRequest.  # noqa: E501


        :return: The work_request_priority_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._work_request_priority_id

    @work_request_priority_id.setter
    def work_request_priority_id(self, work_request_priority_id):
        """Sets the work_request_priority_id of this WorkRequest.


        :param work_request_priority_id: The work_request_priority_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._work_request_priority_id = work_request_priority_id

    @property
    def description(self):
        """Gets the description of this WorkRequest.  # noqa: E501


        :return: The description of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkRequest.


        :param description: The description of this WorkRequest.  # noqa: E501
        :type: str
        """
        if description is not None and len(description) > 100:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `100`")  # noqa: E501
        if description is not None and len(description) < 0:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `0`")  # noqa: E501

        self._description = description

    @property
    def supporting_information(self):
        """Gets the supporting_information of this WorkRequest.  # noqa: E501


        :return: The supporting_information of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._supporting_information

    @supporting_information.setter
    def supporting_information(self, supporting_information):
        """Sets the supporting_information of this WorkRequest.


        :param supporting_information: The supporting_information of this WorkRequest.  # noqa: E501
        :type: str
        """
        if supporting_information is not None and len(supporting_information) > 4000:
            raise ValueError("Invalid value for `supporting_information`, length must be less than or equal to `4000`")  # noqa: E501
        if supporting_information is not None and len(supporting_information) < 0:
            raise ValueError("Invalid value for `supporting_information`, length must be greater than or equal to `0`")  # noqa: E501

        self._supporting_information = supporting_information

    @property
    def created_date_time(self):
        """Gets the created_date_time of this WorkRequest.  # noqa: E501


        :return: The created_date_time of this WorkRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this WorkRequest.


        :param created_date_time: The created_date_time of this WorkRequest.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def feedback_required(self):
        """Gets the feedback_required of this WorkRequest.  # noqa: E501


        :return: The feedback_required of this WorkRequest.  # noqa: E501
        :rtype: bool
        """
        return self._feedback_required

    @feedback_required.setter
    def feedback_required(self, feedback_required):
        """Sets the feedback_required of this WorkRequest.


        :param feedback_required: The feedback_required of this WorkRequest.  # noqa: E501
        :type: bool
        """

        self._feedback_required = feedback_required

    @property
    def feedback_method_id(self):
        """Gets the feedback_method_id of this WorkRequest.  # noqa: E501


        :return: The feedback_method_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._feedback_method_id

    @feedback_method_id.setter
    def feedback_method_id(self, feedback_method_id):
        """Sets the feedback_method_id of this WorkRequest.


        :param feedback_method_id: The feedback_method_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._feedback_method_id = feedback_method_id

    @property
    def location(self):
        """Gets the location of this WorkRequest.  # noqa: E501


        :return: The location of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this WorkRequest.


        :param location: The location of this WorkRequest.  # noqa: E501
        :type: str
        """
        if location is not None and len(location) > 100:
            raise ValueError("Invalid value for `location`, length must be less than or equal to `100`")  # noqa: E501
        if location is not None and len(location) < 0:
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `0`")  # noqa: E501

        self._location = location

    @property
    def work_request_status_id(self):
        """Gets the work_request_status_id of this WorkRequest.  # noqa: E501


        :return: The work_request_status_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._work_request_status_id

    @work_request_status_id.setter
    def work_request_status_id(self, work_request_status_id):
        """Sets the work_request_status_id of this WorkRequest.


        :param work_request_status_id: The work_request_status_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._work_request_status_id = work_request_status_id

    @property
    def work_request_status(self):
        """Gets the work_request_status of this WorkRequest.  # noqa: E501


        :return: The work_request_status of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._work_request_status

    @work_request_status.setter
    def work_request_status(self, work_request_status):
        """Sets the work_request_status of this WorkRequest.


        :param work_request_status: The work_request_status of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._work_request_status = work_request_status

    @property
    def work_request_type_id(self):
        """Gets the work_request_type_id of this WorkRequest.  # noqa: E501


        :return: The work_request_type_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._work_request_type_id

    @work_request_type_id.setter
    def work_request_type_id(self, work_request_type_id):
        """Sets the work_request_type_id of this WorkRequest.


        :param work_request_type_id: The work_request_type_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._work_request_type_id = work_request_type_id

    @property
    def work_request_sub_type_id(self):
        """Gets the work_request_sub_type_id of this WorkRequest.  # noqa: E501


        :return: The work_request_sub_type_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._work_request_sub_type_id

    @work_request_sub_type_id.setter
    def work_request_sub_type_id(self, work_request_sub_type_id):
        """Sets the work_request_sub_type_id of this WorkRequest.


        :param work_request_sub_type_id: The work_request_sub_type_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._work_request_sub_type_id = work_request_sub_type_id

    @property
    def closed_date(self):
        """Gets the closed_date of this WorkRequest.  # noqa: E501


        :return: The closed_date of this WorkRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this WorkRequest.


        :param closed_date: The closed_date of this WorkRequest.  # noqa: E501
        :type: datetime
        """

        self._closed_date = closed_date

    @property
    def acknowledge_due_date(self):
        """Gets the acknowledge_due_date of this WorkRequest.  # noqa: E501


        :return: The acknowledge_due_date of this WorkRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._acknowledge_due_date

    @acknowledge_due_date.setter
    def acknowledge_due_date(self, acknowledge_due_date):
        """Sets the acknowledge_due_date of this WorkRequest.


        :param acknowledge_due_date: The acknowledge_due_date of this WorkRequest.  # noqa: E501
        :type: datetime
        """

        self._acknowledge_due_date = acknowledge_due_date

    @property
    def resolution_due_date(self):
        """Gets the resolution_due_date of this WorkRequest.  # noqa: E501


        :return: The resolution_due_date of this WorkRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._resolution_due_date

    @resolution_due_date.setter
    def resolution_due_date(self, resolution_due_date):
        """Sets the resolution_due_date of this WorkRequest.


        :param resolution_due_date: The resolution_due_date of this WorkRequest.  # noqa: E501
        :type: datetime
        """

        self._resolution_due_date = resolution_due_date

    @property
    def complex_asset_id(self):
        """Gets the complex_asset_id of this WorkRequest.  # noqa: E501


        :return: The complex_asset_id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._complex_asset_id

    @complex_asset_id.setter
    def complex_asset_id(self, complex_asset_id):
        """Sets the complex_asset_id of this WorkRequest.


        :param complex_asset_id: The complex_asset_id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._complex_asset_id = complex_asset_id

    @property
    def asset_id(self):
        """Gets the asset_id of this WorkRequest.  # noqa: E501


        :return: The asset_id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._asset_id

    @asset_id.setter
    def asset_id(self, asset_id):
        """Sets the asset_id of this WorkRequest.


        :param asset_id: The asset_id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._asset_id = asset_id

    @property
    def created_by(self):
        """Gets the created_by of this WorkRequest.  # noqa: E501


        :return: The created_by of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this WorkRequest.


        :param created_by: The created_by of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def work_order_id(self):
        """Gets the work_order_id of this WorkRequest.  # noqa: E501


        :return: The work_order_id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._work_order_id

    @work_order_id.setter
    def work_order_id(self, work_order_id):
        """Sets the work_order_id of this WorkRequest.


        :param work_order_id: The work_order_id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._work_order_id = work_order_id

    @property
    def external_identifier(self):
        """Gets the external_identifier of this WorkRequest.  # noqa: E501


        :return: The external_identifier of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._external_identifier

    @external_identifier.setter
    def external_identifier(self, external_identifier):
        """Sets the external_identifier of this WorkRequest.


        :param external_identifier: The external_identifier of this WorkRequest.  # noqa: E501
        :type: str
        """
        if external_identifier is not None and len(external_identifier) > 200:
            raise ValueError("Invalid value for `external_identifier`, length must be less than or equal to `200`")  # noqa: E501
        if external_identifier is not None and len(external_identifier) < 0:
            raise ValueError("Invalid value for `external_identifier`, length must be greater than or equal to `0`")  # noqa: E501

        self._external_identifier = external_identifier

    @property
    def work_order_priority_id(self):
        """Gets the work_order_priority_id of this WorkRequest.  # noqa: E501


        :return: The work_order_priority_id of this WorkRequest.  # noqa: E501
        :rtype: int
        """
        return self._work_order_priority_id

    @work_order_priority_id.setter
    def work_order_priority_id(self, work_order_priority_id):
        """Sets the work_order_priority_id of this WorkRequest.


        :param work_order_priority_id: The work_order_priority_id of this WorkRequest.  # noqa: E501
        :type: int
        """

        self._work_order_priority_id = work_order_priority_id

    @property
    def reference_number(self):
        """Gets the reference_number of this WorkRequest.  # noqa: E501


        :return: The reference_number of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._reference_number

    @reference_number.setter
    def reference_number(self, reference_number):
        """Sets the reference_number of this WorkRequest.


        :param reference_number: The reference_number of this WorkRequest.  # noqa: E501
        :type: str
        """
        if reference_number is not None and len(reference_number) > 200:
            raise ValueError("Invalid value for `reference_number`, length must be less than or equal to `200`")  # noqa: E501
        if reference_number is not None and len(reference_number) < 0:
            raise ValueError("Invalid value for `reference_number`, length must be greater than or equal to `0`")  # noqa: E501

        self._reference_number = reference_number

    @property
    def last_modified(self):
        """Gets the last_modified of this WorkRequest.  # noqa: E501


        :return: The last_modified of this WorkRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this WorkRequest.


        :param last_modified: The last_modified of this WorkRequest.  # noqa: E501
        :type: datetime
        """

        self._last_modified = last_modified

    @property
    def requestor(self):
        """Gets the requestor of this WorkRequest.  # noqa: E501


        :return: The requestor of this WorkRequest.  # noqa: E501
        :rtype: RequestorRepresentation
        """
        return self._requestor

    @requestor.setter
    def requestor(self, requestor):
        """Sets the requestor of this WorkRequest.


        :param requestor: The requestor of this WorkRequest.  # noqa: E501
        :type: RequestorRepresentation
        """

        self._requestor = requestor

    @property
    def reactive_inspector_id(self):
        """Gets the reactive_inspector_id of this WorkRequest.  # noqa: E501


        :return: The reactive_inspector_id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._reactive_inspector_id

    @reactive_inspector_id.setter
    def reactive_inspector_id(self, reactive_inspector_id):
        """Sets the reactive_inspector_id of this WorkRequest.


        :param reactive_inspector_id: The reactive_inspector_id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._reactive_inspector_id = reactive_inspector_id

    @property
    def reactive_inspector(self):
        """Gets the reactive_inspector of this WorkRequest.  # noqa: E501


        :return: The reactive_inspector of this WorkRequest.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._reactive_inspector

    @reactive_inspector.setter
    def reactive_inspector(self, reactive_inspector):
        """Sets the reactive_inspector of this WorkRequest.


        :param reactive_inspector: The reactive_inspector of this WorkRequest.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._reactive_inspector = reactive_inspector

    @property
    def responsible_officer_id(self):
        """Gets the responsible_officer_id of this WorkRequest.  # noqa: E501


        :return: The responsible_officer_id of this WorkRequest.  # noqa: E501
        :rtype: str
        """
        return self._responsible_officer_id

    @responsible_officer_id.setter
    def responsible_officer_id(self, responsible_officer_id):
        """Sets the responsible_officer_id of this WorkRequest.


        :param responsible_officer_id: The responsible_officer_id of this WorkRequest.  # noqa: E501
        :type: str
        """

        self._responsible_officer_id = responsible_officer_id

    @property
    def responsible_officer(self):
        """Gets the responsible_officer of this WorkRequest.  # noqa: E501


        :return: The responsible_officer of this WorkRequest.  # noqa: E501
        :rtype: RsResourceRepresentation
        """
        return self._responsible_officer

    @responsible_officer.setter
    def responsible_officer(self, responsible_officer):
        """Sets the responsible_officer of this WorkRequest.


        :param responsible_officer: The responsible_officer of this WorkRequest.  # noqa: E501
        :type: RsResourceRepresentation
        """

        self._responsible_officer = responsible_officer

    @property
    def reactive_inspection_date(self):
        """Gets the reactive_inspection_date of this WorkRequest.  # noqa: E501


        :return: The reactive_inspection_date of this WorkRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._reactive_inspection_date

    @reactive_inspection_date.setter
    def reactive_inspection_date(self, reactive_inspection_date):
        """Sets the reactive_inspection_date of this WorkRequest.


        :param reactive_inspection_date: The reactive_inspection_date of this WorkRequest.  # noqa: E501
        :type: datetime
        """

        self._reactive_inspection_date = reactive_inspection_date

    @property
    def supporting_information_history(self):
        """Gets the supporting_information_history of this WorkRequest.  # noqa: E501


        :return: The supporting_information_history of this WorkRequest.  # noqa: E501
        :rtype: list[SupportingInformation]
        """
        return self._supporting_information_history

    @supporting_information_history.setter
    def supporting_information_history(self, supporting_information_history):
        """Sets the supporting_information_history of this WorkRequest.


        :param supporting_information_history: The supporting_information_history of this WorkRequest.  # noqa: E501
        :type: list[SupportingInformation]
        """

        self._supporting_information_history = supporting_information_history

    @property
    def attached_documents(self):
        """Gets the attached_documents of this WorkRequest.  # noqa: E501


        :return: The attached_documents of this WorkRequest.  # noqa: E501
        :rtype: list[DocumentRepresentation]
        """
        return self._attached_documents

    @attached_documents.setter
    def attached_documents(self, attached_documents):
        """Sets the attached_documents of this WorkRequest.


        :param attached_documents: The attached_documents of this WorkRequest.  # noqa: E501
        :type: list[DocumentRepresentation]
        """

        self._attached_documents = attached_documents

    @property
    def work_request_physical_location(self):
        """Gets the work_request_physical_location of this WorkRequest.  # noqa: E501


        :return: The work_request_physical_location of this WorkRequest.  # noqa: E501
        :rtype: WorkRequestPhysicalLocation
        """
        return self._work_request_physical_location

    @work_request_physical_location.setter
    def work_request_physical_location(self, work_request_physical_location):
        """Sets the work_request_physical_location of this WorkRequest.


        :param work_request_physical_location: The work_request_physical_location of this WorkRequest.  # noqa: E501
        :type: WorkRequestPhysicalLocation
        """

        self._work_request_physical_location = work_request_physical_location

    @property
    def work_request_spatial_location(self):
        """Gets the work_request_spatial_location of this WorkRequest.  # noqa: E501


        :return: The work_request_spatial_location of this WorkRequest.  # noqa: E501
        :rtype: WorkRequestSpatialLocation
        """
        return self._work_request_spatial_location

    @work_request_spatial_location.setter
    def work_request_spatial_location(self, work_request_spatial_location):
        """Sets the work_request_spatial_location of this WorkRequest.


        :param work_request_spatial_location: The work_request_spatial_location of this WorkRequest.  # noqa: E501
        :type: WorkRequestSpatialLocation
        """

        self._work_request_spatial_location = work_request_spatial_location

    @property
    def links(self):
        """Gets the links of this WorkRequest.  # noqa: E501


        :return: The links of this WorkRequest.  # noqa: E501
        :rtype: list[Link]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this WorkRequest.


        :param links: The links of this WorkRequest.  # noqa: E501
        :type: list[Link]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this WorkRequest.  # noqa: E501


        :return: The embedded of this WorkRequest.  # noqa: E501
        :rtype: list[EmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this WorkRequest.


        :param embedded: The embedded of this WorkRequest.  # noqa: E501
        :type: list[EmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
