# coding: utf-8

"""
    AssistedInstall

    Assisted installation  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Operator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'operator_type': 'OperatorType',
        'enabled': 'bool',
        'properties': 'str'
    }

    attribute_map = {
        'operator_type': 'operator_type',
        'enabled': 'enabled',
        'properties': 'properties'
    }

    def __init__(self, operator_type=None, enabled=False, properties=None):  # noqa: E501
        """Operator - a model defined in Swagger"""  # noqa: E501

        self._operator_type = None
        self._enabled = None
        self._properties = None
        self.discriminator = None

        if operator_type is not None:
            self.operator_type = operator_type
        if enabled is not None:
            self.enabled = enabled
        if properties is not None:
            self.properties = properties

    @property
    def operator_type(self):
        """Gets the operator_type of this Operator.  # noqa: E501


        :return: The operator_type of this Operator.  # noqa: E501
        :rtype: OperatorType
        """
        return self._operator_type

    @operator_type.setter
    def operator_type(self, operator_type):
        """Sets the operator_type of this Operator.


        :param operator_type: The operator_type of this Operator.  # noqa: E501
        :type: OperatorType
        """

        self._operator_type = operator_type

    @property
    def enabled(self):
        """Gets the enabled of this Operator.  # noqa: E501


        :return: The enabled of this Operator.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Operator.


        :param enabled: The enabled of this Operator.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def properties(self):
        """Gets the properties of this Operator.  # noqa: E501

        JSON-formatted string containing the properties for each operator  # noqa: E501

        :return: The properties of this Operator.  # noqa: E501
        :rtype: str
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Operator.

        JSON-formatted string containing the properties for each operator  # noqa: E501

        :param properties: The properties of this Operator.  # noqa: E501
        :type: str
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Operator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Operator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
