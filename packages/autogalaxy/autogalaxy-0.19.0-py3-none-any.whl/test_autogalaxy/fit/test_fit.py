import numpy as np
import pytest

import autogalaxy as ag
from autoarray.inversion import inversions
from autogalaxy.mock.mock import MockLightProfile


class MockFitImaging:
    def __init__(self, model_images_of_galaxies):

        self.model_images_of_galaxies = model_images_of_galaxies


class TestFitImaging:
    class TestLikelihood:
        def test__1x2_image__no_psf_blurring__plane_fits_data_with_chi_sq_5(self):
            # The image plane image generated by the galaxy is [1.0, 1.0]

            # Thus the chi squared is 4.0**2.0 + 3.0**2.0 = 25.0

            psf = ag.Kernel2D.manual_native(
                array=[[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]],
                pixel_scales=1.0,
            )

            imaging = ag.Imaging(
                image=5.0 * ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
                psf=psf,
                noise_map=ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
            )
            imaging.image[6] = 4.0

            mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_imaging_7x7 = ag.MaskedImaging(
                imaging=imaging,
                mask=mask,
                settings=ag.SettingsMaskedImaging(grid_class=ag.Grid2D, sub_size=1),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5, light_profile=MockLightProfile(value=1.0, size=2)
            )
            plane = ag.Plane(galaxies=[g0])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            assert (
                fit.mask
                == np.array(
                    [
                        [True, True, True, True],
                        [True, False, False, True],
                        [True, True, True, True],
                    ]
                )
            ).all()

            assert (
                fit.image.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 5.0, 4.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.noise_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.model_image.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.residual_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 4.0, 3.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.normalized_residual_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 4.0, 3.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.chi_squared_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 16.0, 9.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert fit.chi_squared == 25.0
            assert fit.reduced_chi_squared == 25.0 / 2.0
            assert fit.noise_normalization == pytest.approx(
                2.0 * np.log(2 * np.pi * 1.0 ** 2.0), 1.0e-4
            )
            assert fit.log_likelihood == pytest.approx(
                -0.5 * (25.0 + 2.0 * np.log(2 * np.pi * 1.0 ** 2.0)), 1.0e-4
            )

        def test__1x2_image__include_psf_blurring__plane_fits_data_with_chi_sq_4(self):
            # This PSF changes the blurred image plane image from [1.0, 1.0] to [1.0, 5.0]

            # Thus, the chi squared is 4.0**2.0 + 0.0**2.0 = 16.0

            psf = ag.Kernel2D.manual_native(
                array=[[0.0, 0.0, 0.0], [0.0, 1.0, 3.0], [0.0, 0.0, 0.0]],
                pixel_scales=1.0,
                renormalize=False,
            )

            imaging = ag.Imaging(
                image=5.0 * ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
                psf=psf,
                noise_map=ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
            )
            imaging.image[6] = 4.0

            mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_imaging_7x7 = ag.MaskedImaging(
                imaging=imaging,
                mask=mask,
                settings=ag.SettingsMaskedImaging(
                    grid_class=ag.Grid2D, renormalize_psf=False, sub_size=1
                ),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5, light_profile=MockLightProfile(value=1.0, size=2)
            )
            plane = ag.Plane(galaxies=[g0])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            assert (
                fit.mask
                == np.array(
                    [
                        [True, True, True, True],
                        [True, False, False, True],
                        [True, True, True, True],
                    ]
                )
            ).all()

            assert (
                fit.image.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 5.0, 4.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.noise_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 1.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.model_image.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 1.0, 4.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.residual_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 4.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.normalized_residual_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 4.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.chi_squared_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 16.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert fit.chi_squared == 16.0
            assert fit.reduced_chi_squared == 16.0 / 2.0
            assert fit.noise_normalization == pytest.approx(
                2.0 * np.log(2 * np.pi * 1.0 ** 2.0), 1.0e-4
            )
            assert fit.log_likelihood == pytest.approx(
                -0.5 * (16.0 + 2.0 * np.log(2 * np.pi * 1.0 ** 2.0)), 1.0e-4
            )

        def test__hyper_galaxy_changes_noise_above_from_1_to_2__reflected_in_likelihood(
            self,
        ):
            # This PSF changes the blurred image plane image from [1.0, 1.0] to [1.0, 5.0]

            # Thus, the chi squared is 4.0**2.0 + 0.0**2.0 = 16.0

            # The hyper_galaxies galaxy increases the noise in both pixels by 1.0, to 2.0.

            # This reduces the chi squared to 2.0 instead of 4.0

            psf = ag.Kernel2D.manual_native(
                array=[[0.0, 0.0, 0.0], [0.0, 1.0, 3.0], [0.0, 0.0, 0.0]],
                pixel_scales=1.0,
            )

            imaging = ag.Imaging(
                image=5.0 * ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
                psf=psf,
                noise_map=ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
            )
            imaging.image[6] = 4.0

            mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_imaging_7x7 = ag.MaskedImaging(
                imaging=imaging,
                mask=mask,
                settings=ag.SettingsMaskedImaging(
                    grid_class=ag.Grid2D, renormalize_psf=False, sub_size=1
                ),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=MockLightProfile(value=1.0, size=2),
                hyper_galaxy=ag.HyperGalaxy(
                    contribution_factor=1.0, noise_factor=1.0, noise_power=1.0
                ),
                hyper_model_image=ag.Array2D.ones(
                    shape_native=(1, 2), pixel_scales=1.0
                ),
                hyper_galaxy_image=ag.Array2D.ones(
                    shape_native=(1, 2), pixel_scales=1.0
                ),
                hyper_minimum_value=0.0,
            )

            plane = ag.Plane(galaxies=[g0])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            assert (
                fit.noise_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 2.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.chi_squared_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 4.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert fit.chi_squared == 4.0
            assert fit.reduced_chi_squared == 4.0 / 2.0
            assert fit.noise_normalization == pytest.approx(
                2.0 * np.log(2 * np.pi * 2.0 ** 2.0), 1.0e-4
            )
            assert fit.log_likelihood == pytest.approx(
                -0.5 * (4.0 + 2.0 * np.log(2 * np.pi * 2.0 ** 2.0)), 1.0e-4
            )

        def test__hyper_image_changes_background_sky__reflected_in_likelihood(self):
            psf = ag.Kernel2D.manual_native(
                array=[[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]],
                pixel_scales=1.0,
            )

            imaging = ag.Imaging(
                image=ag.Array2D.full(
                    fill_value=4.0, shape_native=(3, 4), pixel_scales=1.0
                ),
                psf=psf,
                noise_map=ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
            )
            imaging.image[5] = 5.0

            mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_imaging_7x7 = ag.MaskedImaging(
                imaging=imaging,
                mask=mask,
                settings=ag.SettingsMaskedImaging(grid_class=ag.Grid2D, sub_size=1),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5, light_profile=MockLightProfile(value=1.0, size=2)
            )
            plane = ag.Plane(galaxies=[g0])

            hyper_image_sky = ag.hyper_data.HyperImageSky(sky_scale=1.0)

            fit = ag.FitImaging(
                masked_imaging=masked_imaging_7x7,
                plane=plane,
                hyper_image_sky=hyper_image_sky,
            )

            assert (
                fit.mask
                == np.array(
                    [
                        [True, True, True, True],
                        [True, False, False, True],
                        [True, True, True, True],
                    ]
                )
            ).all()

            assert (
                fit.image.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 6.0, 5.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert (
                fit.chi_squared_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 25.0, 16.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert fit.chi_squared == 41.0
            assert fit.reduced_chi_squared == 41.0 / 2.0
            assert fit.noise_normalization == pytest.approx(
                2.0 * np.log(2 * np.pi * 1.0 ** 2.0), 1.0e-4
            )
            assert fit.log_likelihood == pytest.approx(
                -0.5 * (41.0 + 2.0 * np.log(2 * np.pi * 1.0 ** 2.0)), 1.0e-4
            )

        def test__hyper_background_changes_background_noise_map__reflected_in_likelihood(
            self,
        ):
            psf = ag.Kernel2D.manual_native(
                array=[[0.0, 0.0, 0.0], [0.0, 1.0, 0.0], [0.0, 0.0, 0.0]],
                pixel_scales=1.0,
            )

            imaging = ag.Imaging(
                image=5.0 * ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
                psf=psf,
                noise_map=ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
            )
            imaging.image[6] = 4.0

            mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_imaging_7x7 = ag.MaskedImaging(
                imaging=imaging,
                mask=mask,
                settings=ag.SettingsMaskedImaging(grid_class=ag.Grid2D, sub_size=1),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5, light_profile=MockLightProfile(value=1.0, size=2)
            )
            plane = ag.Plane(galaxies=[g0])

            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            fit = ag.FitImaging(
                masked_imaging=masked_imaging_7x7,
                plane=plane,
                hyper_background_noise=hyper_background_noise,
            )

            assert (
                fit.noise_map.native
                == np.array(
                    [[0.0, 0.0, 0.0, 0.0], [0.0, 2.0, 2.0, 0.0], [0.0, 0.0, 0.0, 0.0]]
                )
            ).all()

            assert fit.chi_squared == 6.25
            assert fit.reduced_chi_squared == 6.25 / 2.0
            assert fit.noise_normalization == pytest.approx(
                2.0 * np.log(2 * np.pi * 2.0 ** 2.0), 1.0e-4
            )
            assert fit.log_likelihood == pytest.approx(
                -0.5 * (6.25 + 2.0 * np.log(2 * np.pi * 2.0 ** 2.0)), 1.0e-4
            )

        def test__hyper_galaxy_changes_noise_above_hyper_noise_limit__rounded_down_to_limit(
            self,
        ):
            # This PSF changes the blurred image plane image from [1.0, 1.0] to [1.0, 5.0]

            # Thus, the chi squared is 4.0**2.0 + 0.0**2.0 = 16.0

            # The hyper_galaxies galaxy increases the noise in both pixels by 1.0, to 2.0.

            # This reduces the chi squared to 2.0 instead of 4.0

            psf = ag.Kernel2D.manual_native(
                array=[[0.0, 0.0, 0.0], [0.0, 1.0, 3.0], [0.0, 0.0, 0.0]],
                pixel_scales=1.0,
            )

            imaging = ag.Imaging(
                image=5.0 * ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
                psf=psf,
                noise_map=ag.Array2D.ones(shape_native=(3, 4), pixel_scales=1.0),
            )
            imaging.image[6] = 4.0

            mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_imaging_7x7 = ag.MaskedImaging(
                imaging=imaging,
                mask=mask,
                settings=ag.SettingsMaskedImaging(
                    grid_class=ag.Grid2D, renormalize_psf=False, sub_size=1
                ),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=MockLightProfile(value=1.0, size=2),
                hyper_galaxy=ag.HyperGalaxy(
                    contribution_factor=1.0, noise_factor=1.0e9, noise_power=1.0
                ),
                hyper_model_image=ag.Array2D.ones(
                    shape_native=(1, 2), pixel_scales=1.0
                ),
                hyper_galaxy_image=ag.Array2D.ones(
                    shape_native=(1, 2), pixel_scales=1.0
                ),
                hyper_minimum_value=0.0,
            )

            plane = ag.Plane(galaxies=[g0])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            assert (
                fit.noise_map.native
                == np.array(
                    [
                        [0.0, 0.0, 0.0, 0.0],
                        [0.0, 1.0e8, 1.0e8, 0.0],
                        [0.0, 0.0, 0.0, 0.0],
                    ]
                )
            ).all()

    class TestCompareToManualProfilesOnly:
        def test___all_fit_quantities__no_hyper_methods(self, masked_imaging_7x7):
            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )

            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            assert masked_imaging_7x7.noise_map.native == pytest.approx(
                fit.noise_map.native
            )

            model_image = plane.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            assert model_image.native == pytest.approx(fit.model_image.native)

            residual_map = ag.util.fit.residual_map_from(
                data=masked_imaging_7x7.image, model_data=model_image
            )

            assert residual_map.native == pytest.approx(fit.residual_map.native)

            normalized_residual_map = ag.util.fit.normalized_residual_map_from(
                residual_map=residual_map, noise_map=masked_imaging_7x7.noise_map
            )

            assert normalized_residual_map.native == pytest.approx(
                fit.normalized_residual_map.native
            )

            chi_squared_map = ag.util.fit.chi_squared_map_from(
                residual_map=residual_map, noise_map=masked_imaging_7x7.noise_map
            )

            assert chi_squared_map.native == pytest.approx(fit.chi_squared_map.native)

            chi_squared = ag.util.fit.chi_squared_from(chi_squared_map=chi_squared_map)

            noise_normalization = ag.util.fit.noise_normalization_from(
                noise_map=masked_imaging_7x7.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)
            assert log_likelihood == fit.figure_of_merit

        def test___fit_galaxy_model_image_dict__corresponds_to_blurred_galaxy_images(
            self, masked_imaging_7x7
        ):
            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )
            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )
            g2 = ag.Galaxy(redshift=1.0)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1, g2])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            g0_blurred_image = g0.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                blurring_grid=masked_imaging_7x7.blurring_grid,
                convolver=masked_imaging_7x7.convolver,
            )

            g1_blurred_image = g1.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                blurring_grid=masked_imaging_7x7.blurring_grid,
                convolver=masked_imaging_7x7.convolver,
            )

            assert fit.galaxy_model_image_dict[g0] == pytest.approx(
                g0_blurred_image, 1.0e-4
            )
            assert fit.galaxy_model_image_dict[g1] == pytest.approx(
                g1_blurred_image, 1.0e-4
            )
            assert (fit.galaxy_model_image_dict[g2].slim == np.zeros(9)).all()

            assert fit.model_image.native == pytest.approx(
                fit.galaxy_model_image_dict[g0].native
                + fit.galaxy_model_image_dict[g1].native,
                1.0e-4,
            )

        def test___all_fit_quantities__including_hyper_methods(
            self, masked_imaging_7x7
        ):
            hyper_image_sky = ag.hyper_data.HyperImageSky(sky_scale=1.0)

            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            image = hyper_image_sky.hyper_image_from_image(
                image=masked_imaging_7x7.image
            )

            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
                hyper_galaxy=ag.HyperGalaxy(
                    contribution_factor=1.0, noise_factor=1.0, noise_power=1.0
                ),
                hyper_model_image=np.ones(9),
                hyper_galaxy_image=np.ones(9),
                hyper_minimum_value=0.0,
            )
            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitImaging(
                masked_imaging=masked_imaging_7x7,
                plane=plane,
                hyper_image_sky=hyper_image_sky,
                hyper_background_noise=hyper_background_noise,
            )

            hyper_noise_map_background = hyper_background_noise.hyper_noise_map_from_noise_map(
                noise_map=masked_imaging_7x7.noise_map
            )

            hyper_noise = plane.hyper_noise_map_from_noise_map(
                noise_map=masked_imaging_7x7.noise_map
            )

            hyper_noise_map = hyper_noise_map_background + hyper_noise

            assert hyper_noise_map.native == pytest.approx(fit.noise_map.native)

            model_image = plane.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            assert model_image.native == pytest.approx(fit.model_image.native)

            residual_map = ag.util.fit.residual_map_from(
                data=image, model_data=model_image
            )

            assert residual_map.native == pytest.approx(fit.residual_map.native)

            normalized_residual_map = ag.util.fit.normalized_residual_map_from(
                residual_map=residual_map, noise_map=hyper_noise_map
            )

            assert normalized_residual_map.native == pytest.approx(
                fit.normalized_residual_map.native
            )

            chi_squared_map = ag.util.fit.chi_squared_map_from(
                residual_map=residual_map, noise_map=hyper_noise_map
            )

            assert chi_squared_map.native == pytest.approx(fit.chi_squared_map.native)

            chi_squared = ag.util.fit.chi_squared_from(chi_squared_map=chi_squared_map)

            noise_normalization = ag.util.fit.noise_normalization_from(
                noise_map=hyper_noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)
            assert log_likelihood == fit.figure_of_merit

            fit = ag.FitImaging(
                masked_imaging=masked_imaging_7x7,
                plane=plane,
                hyper_image_sky=hyper_image_sky,
                hyper_background_noise=hyper_background_noise,
                use_hyper_scalings=False,
            )

            assert fit.image == pytest.approx(masked_imaging_7x7.image, 1.0e-4)
            assert fit.noise_map == pytest.approx(masked_imaging_7x7.noise_map, 1.0e-4)

        def test___blurred_and_model_images_of_galaxies_and_unmasked_blurred_image_properties(
            self, masked_imaging_7x7
        ):
            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )

            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            blurred_images_of_galaxies = plane.blurred_images_of_galaxies_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            assert blurred_images_of_galaxies[0].native == pytest.approx(
                fit.model_images_of_galaxies[0].native, 1.0e-4
            )

            assert blurred_images_of_galaxies[1].native == pytest.approx(
                fit.model_images_of_galaxies[1].native, 1.0e-4
            )

            unmasked_blurred_image = plane.unmasked_blurred_image_from_grid_and_psf(
                grid=masked_imaging_7x7.grid, psf=masked_imaging_7x7.psf
            )

            assert (unmasked_blurred_image == fit.unmasked_blurred_image).all()

            unmasked_blurred_image_of_galaxies = plane.unmasked_blurred_image_of_galaxies_from_grid_and_psf(
                grid=masked_imaging_7x7.grid, psf=masked_imaging_7x7.psf
            )

            assert (
                unmasked_blurred_image_of_galaxies[0]
                == fit.unmasked_blurred_image_of_galaxies[0]
            ).all()
            assert (
                unmasked_blurred_image_of_galaxies[1]
                == fit.unmasked_blurred_image_of_galaxies[1]
            ).all()

    class TestCompareToManualInversionOnly:
        def test___all_quantities__no_hyper_methods(self, masked_imaging_7x7):
            # Ensures the inversion grid is used, as this would cause the test to fail.
            masked_imaging_7x7.grid[0, 0] = -100.0

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)

            g0 = ag.Galaxy(redshift=0.5, pixelization=pix, regularization=reg)

            plane = ag.Plane(galaxies=[ag.Galaxy(redshift=0.5), g0])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid_inversion, sparse_grid=None
            )
            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                image=masked_imaging_7x7.image,
                noise_map=masked_imaging_7x7.noise_map,
                convolver=masked_imaging_7x7.convolver,
            )

            assert inversion.mapped_reconstructed_image.native == pytest.approx(
                fit.model_image.native, 1.0e-4
            )

            residual_map = ag.util.fit.residual_map_from(
                data=masked_imaging_7x7.image,
                model_data=inversion.mapped_reconstructed_image,
            )

            assert residual_map.native == pytest.approx(fit.residual_map.native, 1.0e-4)

            normalized_residual_map = ag.util.fit.normalized_residual_map_from(
                residual_map=residual_map, noise_map=masked_imaging_7x7.noise_map
            )

            assert normalized_residual_map.native == pytest.approx(
                fit.normalized_residual_map.native, 1.0e-4
            )

            chi_squared_map = ag.util.fit.chi_squared_map_from(
                residual_map=residual_map, noise_map=masked_imaging_7x7.noise_map
            )

            assert chi_squared_map.native == pytest.approx(
                fit.chi_squared_map.native, 1.0e-4
            )

            chi_squared = ag.util.fit.chi_squared_from(chi_squared_map=chi_squared_map)

            noise_normalization = ag.util.fit.noise_normalization_from(
                noise_map=masked_imaging_7x7.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

        def test___fit_galaxy_model_image_dict__has_inversion_mapped_reconstructed_image(
            self, masked_imaging_7x7
        ):
            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)

            g0 = ag.Galaxy(redshift=0.5)
            g1 = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid, sparse_grid=None
            )

            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                image=masked_imaging_7x7.image,
                noise_map=masked_imaging_7x7.noise_map,
                convolver=masked_imaging_7x7.convolver,
            )

            assert (fit.galaxy_model_image_dict[g0] == np.zeros(9)).all()

            assert fit.galaxy_model_image_dict[g1].native == pytest.approx(
                inversion.mapped_reconstructed_image.native, 1.0e-4
            )

            assert fit.model_image.native == pytest.approx(
                fit.galaxy_model_image_dict[g1].native, 1.0e-4
            )

        def test___all_fit_quantities__include_hyper_methods(self, masked_imaging_7x7):
            hyper_image_sky = ag.hyper_data.HyperImageSky(sky_scale=1.0)

            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            image = hyper_image_sky.hyper_image_from_image(
                image=masked_imaging_7x7.image
            )

            hyper_noise_map_background = hyper_background_noise.hyper_noise_map_from_noise_map(
                noise_map=masked_imaging_7x7.noise_map
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)

            g0 = ag.Galaxy(
                redshift=0.5,
                pixelization=pix,
                regularization=reg,
                hyper_galaxy=ag.HyperGalaxy(
                    contribution_factor=1.0, noise_factor=1.0, noise_power=1.0
                ),
                hyper_model_image=np.ones(9),
                hyper_galaxy_image=np.ones(9),
                hyper_minimum_value=0.0,
            )

            plane = ag.Plane(galaxies=[ag.Galaxy(redshift=0.5), g0])

            fit = ag.FitImaging(
                masked_imaging=masked_imaging_7x7,
                plane=plane,
                hyper_image_sky=hyper_image_sky,
                hyper_background_noise=hyper_background_noise,
            )

            hyper_noise = plane.hyper_noise_map_from_noise_map(
                noise_map=masked_imaging_7x7.noise_map
            )
            hyper_noise_map = hyper_noise_map_background + hyper_noise

            assert hyper_noise_map.native == pytest.approx(fit.noise_map.native)

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )
            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                image=image,
                noise_map=hyper_noise_map,
                convolver=masked_imaging_7x7.convolver,
            )

            assert inversion.mapped_reconstructed_image.native == pytest.approx(
                fit.model_image.native, 1.0e-4
            )

            residual_map = ag.util.fit.residual_map_from(
                data=image, model_data=inversion.mapped_reconstructed_image
            )

            assert residual_map.native == pytest.approx(fit.residual_map.native)

            normalized_residual_map = ag.util.fit.normalized_residual_map_from(
                residual_map=residual_map, noise_map=hyper_noise_map
            )

            assert normalized_residual_map.native == pytest.approx(
                fit.normalized_residual_map.native
            )

            chi_squared_map = ag.util.fit.chi_squared_map_from(
                residual_map=residual_map, noise_map=hyper_noise_map
            )

            assert chi_squared_map.native == pytest.approx(fit.chi_squared_map.native)

            chi_squared = ag.util.fit.chi_squared_from(chi_squared_map=chi_squared_map)

            noise_normalization = ag.util.fit.noise_normalization_from(
                noise_map=hyper_noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

        def test___blurred_and_model_images_of_galaxies_and_unmasked_blurred_image_properties(
            self, masked_imaging_7x7
        ):
            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)

            g0 = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[ag.Galaxy(redshift=0.5), g0])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                image=masked_imaging_7x7.image,
                noise_map=masked_imaging_7x7.noise_map,
                convolver=masked_imaging_7x7.convolver,
            )

            assert (fit.model_images_of_galaxies[0].native == np.zeros((7, 7))).all()
            assert inversion.mapped_reconstructed_image.native == pytest.approx(
                fit.model_images_of_galaxies[1].native, 1.0e-4
            )

    class TestCompareToManualProfilesAndInversion:
        def test___all_fit_quantities__no_hyper_methods(self, masked_imaging_7x7):
            galaxy_light = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[galaxy_light, galaxy_pix])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            blurred_image = plane.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            assert blurred_image.native == pytest.approx(fit.blurred_image.native)

            profile_subtracted_image = masked_imaging_7x7.image - blurred_image

            assert profile_subtracted_image.native == pytest.approx(
                fit.profile_subtracted_image.native
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                image=profile_subtracted_image,
                noise_map=masked_imaging_7x7.noise_map,
                convolver=masked_imaging_7x7.convolver,
                mapper=mapper,
                regularization=reg,
            )

            model_image = blurred_image + inversion.mapped_reconstructed_image

            assert model_image.native == pytest.approx(fit.model_image.native)

            residual_map = ag.util.fit.residual_map_from(
                data=masked_imaging_7x7.image, model_data=model_image
            )

            assert residual_map.native == pytest.approx(fit.residual_map.native)

            normalized_residual_map = ag.util.fit.normalized_residual_map_from(
                residual_map=residual_map, noise_map=masked_imaging_7x7.noise_map
            )

            assert normalized_residual_map.native == pytest.approx(
                fit.normalized_residual_map.native
            )

            chi_squared_map = ag.util.fit.chi_squared_map_from(
                residual_map=residual_map, noise_map=masked_imaging_7x7.noise_map
            )

            assert chi_squared_map.native == pytest.approx(fit.chi_squared_map.native)

            chi_squared = ag.util.fit.chi_squared_from(chi_squared_map=chi_squared_map)

            noise_normalization = ag.util.fit.noise_normalization_from(
                noise_map=masked_imaging_7x7.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

        def test___fit_galaxy_model_image_dict__has_blurred_images_and_inversion_mapped_reconstructed_image(
            self, masked_imaging_7x7
        ):
            g0 = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )
            g1 = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=2.0)
            )
            g2 = ag.Galaxy(redshift=0.5)

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1, g2, galaxy_pix])

            masked_imaging_7x7.image[0] = 3.0

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            g0_blurred_image = g0.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            g1_blurred_image = g1.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            blurred_image = g0_blurred_image + g1_blurred_image

            profile_subtracted_image = masked_imaging_7x7.image - blurred_image
            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                image=profile_subtracted_image,
                noise_map=masked_imaging_7x7.noise_map,
                convolver=masked_imaging_7x7.convolver,
                mapper=mapper,
                regularization=reg,
            )

            assert (fit.galaxy_model_image_dict[g2] == np.zeros(9)).all()

            assert fit.galaxy_model_image_dict[g0].native == pytest.approx(
                g0_blurred_image.native, 1.0e-4
            )
            assert fit.galaxy_model_image_dict[g1].native == pytest.approx(
                g1_blurred_image.native, 1.0e-4
            )
            assert fit.galaxy_model_image_dict[galaxy_pix].native == pytest.approx(
                inversion.mapped_reconstructed_image.native, 1.0e-4
            )

            assert fit.model_image.native == pytest.approx(
                fit.galaxy_model_image_dict[g0].native
                + fit.galaxy_model_image_dict[g1].native
                + inversion.mapped_reconstructed_image.native,
                1.0e-4,
            )

        def test___all_fit_quantities__include_hyper_methods(self, masked_imaging_7x7):
            hyper_image_sky = ag.hyper_data.HyperImageSky(sky_scale=1.0)

            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            image = hyper_image_sky.hyper_image_from_image(
                image=masked_imaging_7x7.image
            )

            hyper_noise_map_background = hyper_background_noise.hyper_noise_map_from_noise_map(
                noise_map=masked_imaging_7x7.noise_map
            )

            galaxy_light = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                hyper_galaxy=ag.HyperGalaxy(
                    contribution_factor=1.0, noise_factor=1.0, noise_power=1.0
                ),
                hyper_model_image=ag.Array2D.ones(
                    shape_native=(3, 3), pixel_scales=1.0
                ),
                hyper_galaxy_image=ag.Array2D.ones(
                    shape_native=(3, 3), pixel_scales=1.0
                ),
                hyper_minimum_value=0.0,
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[galaxy_light, galaxy_pix])

            fit = ag.FitImaging(
                masked_imaging=masked_imaging_7x7,
                plane=plane,
                hyper_image_sky=hyper_image_sky,
                hyper_background_noise=hyper_background_noise,
            )

            hyper_noise = plane.hyper_noise_map_from_noise_map(
                noise_map=masked_imaging_7x7.noise_map
            )
            hyper_noise_map = hyper_noise_map_background + hyper_noise

            assert hyper_noise_map.native == pytest.approx(fit.noise_map.native, 1.0e-4)

            blurred_image = plane.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            assert blurred_image.native == pytest.approx(fit.blurred_image.native)

            profile_subtracted_image = image - blurred_image

            assert profile_subtracted_image.native == pytest.approx(
                fit.profile_subtracted_image.native
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                image=profile_subtracted_image,
                noise_map=hyper_noise_map,
                convolver=masked_imaging_7x7.convolver,
                mapper=mapper,
                regularization=reg,
            )

            model_image = blurred_image + inversion.mapped_reconstructed_image

            assert model_image.native == pytest.approx(fit.model_image.native, 1.0e-4)

            residual_map = ag.util.fit.residual_map_from(
                data=image, model_data=model_image
            )

            assert residual_map.native == pytest.approx(fit.residual_map.native, 1.0e-4)

            normalized_residual_map = ag.util.fit.normalized_residual_map_from(
                residual_map=residual_map, noise_map=hyper_noise_map
            )

            assert normalized_residual_map.native == pytest.approx(
                fit.normalized_residual_map.native, 1.0e-4
            )

            chi_squared_map = ag.util.fit.chi_squared_map_from(
                residual_map=residual_map, noise_map=hyper_noise_map
            )

            assert chi_squared_map.native == pytest.approx(
                fit.chi_squared_map.native, 1.0e-4
            )

            chi_squared = ag.util.fit.chi_squared_from(chi_squared_map=chi_squared_map)

            noise_normalization = ag.util.fit.noise_normalization_from(
                noise_map=hyper_noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

        def test___blurred_and_model_images_of_galaxies_and_unmasked_blurred_image_properties(
            self, masked_imaging_7x7
        ):
            galaxy_light = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[galaxy_light, galaxy_pix])

            fit = ag.FitImaging(masked_imaging=masked_imaging_7x7, plane=plane)

            blurred_image = plane.blurred_image_from_grid_and_convolver(
                grid=masked_imaging_7x7.grid,
                convolver=masked_imaging_7x7.convolver,
                blurring_grid=masked_imaging_7x7.blurring_grid,
            )

            profile_subtracted_image = masked_imaging_7x7.image - blurred_image

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_imaging_7x7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionImagingMatrix.from_data_mapper_and_regularization(
                image=profile_subtracted_image,
                noise_map=masked_imaging_7x7.noise_map,
                convolver=masked_imaging_7x7.convolver,
                mapper=mapper,
                regularization=reg,
            )

            assert blurred_image.native == pytest.approx(
                fit.model_images_of_galaxies[0].native, 1.0e-4
            )
            assert inversion.mapped_reconstructed_image.native == pytest.approx(
                fit.model_images_of_galaxies[1].native, 1.0e-4
            )

    class TestAttributes:
        def test__subtracted_images_of_galaxies(self, masked_imaging_no_blur_7x7):

            g0 = ag.Galaxy(redshift=0.5, light_profile=MockLightProfile(value=1.0))

            g1 = ag.Galaxy(redshift=1.0, light_profile=MockLightProfile(value=2.0))

            g2 = ag.Galaxy(redshift=1.0, light_profile=MockLightProfile(value=3.0))

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1, g2])

            fit = ag.FitImaging(masked_imaging=masked_imaging_no_blur_7x7, plane=plane)

            assert fit.subtracted_images_of_galaxies[0].slim[0] == -4.0
            assert fit.subtracted_images_of_galaxies[1].slim[0] == -3.0
            assert fit.subtracted_images_of_galaxies[2].slim[0] == -2.0

            g0 = ag.Galaxy(redshift=0.5, light_profile=MockLightProfile(value=1.0))

            g1 = ag.Galaxy(redshift=0.5)

            g2 = ag.Galaxy(redshift=1.0, light_profile=MockLightProfile(value=3.0))

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1, g2])

            fit = ag.FitImaging(masked_imaging=masked_imaging_no_blur_7x7, plane=plane)

            assert fit.subtracted_images_of_galaxies[0].slim[0] == -2.0
            assert fit.subtracted_images_of_galaxies[1].slim[0] == -3.0
            assert fit.subtracted_images_of_galaxies[2].slim[0] == 0.0


class TestFitInterferometer:
    class TestLikelihood:
        def test__1x2_image__1x2_visibilities__simple_fourier_transform(self):
            # The image plane image generated by the galaxy is [1.0, 1.0]

            # Thus the chi squared is 4.0**2.0 + 3.0**2.0 = 25.0

            interferometer = ag.Interferometer(
                visibilities=ag.Visibilities.full(fill_value=5.0, shape_slim=(1,)),
                noise_map=ag.Visibilities.ones(shape_slim=(1,)),
                uv_wavelengths=np.array([[0.0, 0.0]]),
            )

            interferometer.visibilities[0] = 5.0 + 4.0j

            visibilities_mask = np.full(fill_value=False, shape=(1,))

            real_space_mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True],
                    [True, False, False, True],
                    [True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_interferometer = ag.MaskedInterferometer(
                interferometer=interferometer,
                visibilities_mask=visibilities_mask,
                real_space_mask=real_space_mask,
                settings=ag.SettingsMaskedInterferometer(
                    grid_class=ag.Grid2D,
                    sub_size=1,
                    transformer_class=ag.TransformerDFT,
                ),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5, light_profile=MockLightProfile(value=1.0, size=2)
            )
            plane = ag.Plane(galaxies=[g0])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer, plane=plane
            )

            assert (fit.visibilities_mask == np.array([False])).all()

            assert (fit.visibilities.slim == np.array([5.0 + 4.0j])).all()
            assert (fit.noise_map.slim == np.array([1.0 + 1.0j])).all()
            assert (fit.model_visibilities.slim == np.array([2.0 + 0.0j])).all()
            assert (fit.residual_map.slim == np.array([3.0 + 4.0j])).all()
            assert (fit.normalized_residual_map.slim == np.array([3.0 + 4.0j])).all()
            assert (fit.chi_squared_map.slim == np.array([9.0 + 16.0j])).all()

            assert fit.chi_squared == 25.0
            assert fit.noise_normalization == pytest.approx(
                2.0 * np.log(2 * np.pi * 1.0 ** 2.0), 1.0e-4
            )
            assert fit.log_likelihood == pytest.approx(
                -0.5 * (25.0 + 2.0 * np.log(2 * np.pi * 1.0 ** 2.0)), 1.0e-4
            )

        def test__hyper_background_changes_background_sky__reflected_in_likelihood(
            self,
        ):
            uv_wavelengths = np.array([[1.0, 0.0], [1.0, 1.0], [2.0, 2.0]])

            interferometer = ag.Interferometer(
                visibilities=ag.Visibilities.full(fill_value=5.0, shape_slim=(3,)),
                noise_map=ag.Visibilities.full(fill_value=2.0, shape_slim=(3,)),
                uv_wavelengths=uv_wavelengths,
            )

            visibilities_mask = np.full(fill_value=False, shape=(1,))

            real_space_mask = ag.Mask2D.manual(
                mask=[
                    [True, True, True, True, True],
                    [True, False, False, False, True],
                    [True, True, True, True, True],
                ],
                pixel_scales=1.0,
            )

            masked_interferometer = ag.MaskedInterferometer(
                interferometer=interferometer,
                visibilities_mask=visibilities_mask,
                real_space_mask=real_space_mask,
                settings=ag.SettingsMaskedInterferometer(
                    grid_class=ag.Grid2D, sub_size=1
                ),
            )

            # Setup as a ray trace instance, using a light profile for the galaxy

            g0 = ag.Galaxy(
                redshift=0.5, light_profile=MockLightProfile(value=1.0, size=2)
            )
            plane = ag.Plane(galaxies=[g0])

            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer,
                plane=plane,
                hyper_background_noise=hyper_background_noise,
            )

            assert (
                fit.visibilities.slim == np.array([5.0 + 5.0j, 5.0 + 5.0j, 5.0 + 5.0j])
            ).all()

            assert (
                fit.noise_map.slim == np.array([3.0 + 3.0j, 3.0 + 3.0j, 3.0 + 3.0j])
            ).all()

    class TestCompareToManualProfilesOnly:
        def test___all_fit_quantities__no_hyper_methods(self, masked_interferometer_7):
            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )

            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            assert masked_interferometer_7.noise_map == pytest.approx(fit.noise_map)

            model_visibilities = plane.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            assert model_visibilities == pytest.approx(fit.model_visibilities, 1e-4)

            residual_map = ag.util.fit.residual_map_from(
                data=masked_interferometer_7.visibilities, model_data=model_visibilities
            )

            assert residual_map == pytest.approx(fit.residual_map, 1e-4)

            normalized_residual_map = ag.util.fit.normalized_residual_map_complex_from(
                residual_map=residual_map, noise_map=masked_interferometer_7.noise_map
            )

            assert normalized_residual_map == pytest.approx(
                fit.normalized_residual_map, 1e-4
            )

            chi_squared_map = ag.util.fit.chi_squared_map_complex_from(
                residual_map=residual_map, noise_map=masked_interferometer_7.noise_map
            )

            assert chi_squared_map == pytest.approx(fit.chi_squared_map, 1e-4)

            chi_squared = ag.util.fit.chi_squared_complex_from(
                chi_squared_map=fit.chi_squared_map
            )

            noise_normalization = ag.util.fit.noise_normalization_complex_from(
                noise_map=masked_interferometer_7.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)
            assert log_likelihood == fit.figure_of_merit

        def test___fit_galaxy_model_image_dict__corresponds_to_profile_galaxy_images(
            self, masked_interferometer_7
        ):
            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )
            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            g0_image = g0.image_from_grid(grid=masked_interferometer_7.grid)

            g1_image = g1.image_from_grid(grid=masked_interferometer_7.grid)

            assert fit.galaxy_model_image_dict[g0].slim == pytest.approx(
                g0_image, 1.0e-4
            )
            assert fit.galaxy_model_image_dict[g1].slim == pytest.approx(
                g1_image, 1.0e-4
            )

        def test___fit_galaxy_visibilities_dict__corresponds_to_galaxy_visibilities(
            self, masked_interferometer_7
        ):
            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )
            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            g0_profile_visibilities = g0.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            g1_profile_visibilities = g1.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            assert fit.galaxy_model_visibilities_dict[g0].slim == pytest.approx(
                g0_profile_visibilities, 1.0e-4
            )
            assert fit.galaxy_model_visibilities_dict[g1].slim == pytest.approx(
                g1_profile_visibilities, 1.0e-4
            )

            assert fit.model_visibilities.slim == pytest.approx(
                fit.galaxy_model_visibilities_dict[g0].slim
                + fit.galaxy_model_visibilities_dict[g1].slim,
                1.0e-4,
            )

        def test___all_fit_quantities__hyper_background_noise(
            self, masked_interferometer_7
        ):
            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            hyper_noise_map = hyper_background_noise.hyper_noise_map_from_complex_noise_map(
                noise_map=masked_interferometer_7.noise_map
            )

            g0 = ag.Galaxy(
                redshift=0.5,
                light_profile=ag.lp.EllipticalSersic(intensity=1.0),
                mass_profile=ag.mp.SphericalIsothermal(einstein_radius=1.0),
            )

            g1 = ag.Galaxy(
                redshift=1.0, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7,
                plane=plane,
                hyper_background_noise=hyper_background_noise,
            )

            assert hyper_noise_map.slim == pytest.approx(fit.noise_map.slim)

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7,
                plane=plane,
                hyper_background_noise=hyper_background_noise,
                use_hyper_scalings=False,
            )

            assert fit.noise_map == pytest.approx(
                masked_interferometer_7.noise_map, 1.0e-4
            )
            assert fit.noise_map != pytest.approx(hyper_noise_map.slim, 1.0e-4)

    class TestCompareToManualInversionOnly:
        def test___all_fit_quantities__no_hyper_methods(self, masked_interferometer_7):
            # Ensures the inversion grid is used, as this would cause the test to fail.
            masked_interferometer_7.grid[0, 0] = -100.0

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=0.01)

            g0 = ag.Galaxy(redshift=0.5, pixelization=pix, regularization=reg)

            plane = ag.Plane(galaxies=[ag.Galaxy(redshift=0.5), g0])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7.grid_inversion, sparse_grid=None
            )

            inversion = inversions.InversionInterferometerMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                visibilities=masked_interferometer_7.visibilities,
                noise_map=masked_interferometer_7.noise_map,
                transformer=masked_interferometer_7.transformer,
            )

            assert inversion.mapped_reconstructed_visibilities == pytest.approx(
                fit.model_visibilities, 1.0e-4
            )

            residual_map = ag.util.fit.residual_map_from(
                data=masked_interferometer_7.visibilities,
                model_data=inversion.mapped_reconstructed_visibilities,
            )

            assert residual_map.slim == pytest.approx(fit.residual_map.slim, 1.0e-4)

            normalized_residual_map = ag.util.fit.normalized_residual_map_complex_from(
                residual_map=residual_map, noise_map=masked_interferometer_7.noise_map
            )

            assert normalized_residual_map.slim == pytest.approx(
                fit.normalized_residual_map.slim, 1.0e-4
            )

            chi_squared_map = ag.util.fit.chi_squared_map_complex_from(
                residual_map=residual_map, noise_map=masked_interferometer_7.noise_map
            )

            assert chi_squared_map.slim == pytest.approx(
                fit.chi_squared_map.slim, 1.0e-4
            )

            chi_squared = ag.util.fit.chi_squared_complex_from(
                chi_squared_map=chi_squared_map
            )

            noise_normalization = ag.util.fit.noise_normalization_complex_from(
                noise_map=masked_interferometer_7.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

            mapped_reconstructed_image = ag.util.inversion.mapped_reconstructed_data_from(
                mapping_matrix=fit.inversion.mapper.mapping_matrix,
                reconstruction=fit.inversion.reconstruction,
            )

            assert (
                fit.inversion.mapped_reconstructed_image.slim
                == mapped_reconstructed_image
            ).all()

        def test___fit_galaxy_model_image_dict__images_and_inversion_mapped_reconstructed_image(
            self, masked_interferometer_7
        ):
            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)

            g0 = ag.Galaxy(redshift=0.5)
            g1 = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7.grid, sparse_grid=None
            )

            inversion = inversions.InversionInterferometerMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                visibilities=masked_interferometer_7.visibilities,
                noise_map=masked_interferometer_7.noise_map,
                transformer=masked_interferometer_7.transformer,
            )

            assert (fit.galaxy_model_image_dict[g0].native == np.zeros((7, 7))).all()

            assert fit.galaxy_model_image_dict[g1].slim == pytest.approx(
                inversion.mapped_reconstructed_image.slim, 1.0e-4
            )

        def test___fit_galaxy_model_visibilities_dict__has_inversion_mapped_reconstructed_visibilities(
            self, masked_interferometer_7
        ):
            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)

            g0 = ag.Galaxy(redshift=0.5)
            g1 = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7.grid, sparse_grid=None
            )

            inversion = inversions.InversionInterferometerMatrix.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                visibilities=masked_interferometer_7.visibilities,
                noise_map=masked_interferometer_7.noise_map,
                transformer=masked_interferometer_7.transformer,
            )

            assert (
                fit.galaxy_model_visibilities_dict[g0] == 0.0 + 0.0j * np.zeros((7,))
            ).all()

            assert fit.galaxy_model_visibilities_dict[g1].slim == pytest.approx(
                inversion.mapped_reconstructed_visibilities.slim, 1.0e-4
            )

            assert fit.model_visibilities.slim == pytest.approx(
                fit.galaxy_model_visibilities_dict[g1].slim, 1.0e-4
            )

        def test___all_fit_quantities__hyper_background_noise(
            self, masked_interferometer_7
        ):
            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            hyper_noise_map = hyper_background_noise.hyper_noise_map_from_complex_noise_map(
                noise_map=masked_interferometer_7.noise_map
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=0.01)

            g0 = ag.Galaxy(redshift=0.5, pixelization=pix, regularization=reg)

            plane = ag.Plane(galaxies=[ag.Galaxy(redshift=0.5), g0])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7,
                plane=plane,
                hyper_background_noise=hyper_background_noise,
            )

            assert hyper_noise_map.slim == pytest.approx(
                fit.inversion.noise_map, 1.0e-4
            )

            assert hyper_noise_map.slim == pytest.approx(fit.noise_map.slim)

        def test___all_fit_quantities__uses_linear_operator_inversion(
            self, masked_interferometer_7_lop
        ):
            # Ensures the inversion grid is used, as this would cause the test to fail.
            masked_interferometer_7_lop.grid[0, 0] = -100.0

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=0.01)

            g0 = ag.Galaxy(redshift=0.5, pixelization=pix, regularization=reg)

            plane = ag.Plane(galaxies=[ag.Galaxy(redshift=0.5), g0])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7_lop,
                plane=plane,
                settings_inversion=ag.SettingsInversion(use_linear_operators=True),
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7_lop.grid_inversion, sparse_grid=None
            )

            inversion = inversions.InversionInterferometerLinearOperator.from_data_mapper_and_regularization(
                mapper=mapper,
                regularization=reg,
                visibilities=masked_interferometer_7_lop.visibilities,
                noise_map=masked_interferometer_7_lop.noise_map,
                transformer=masked_interferometer_7_lop.transformer,
                settings=ag.SettingsInversion(use_linear_operators=True),
            )

            assert inversion.mapped_reconstructed_visibilities == pytest.approx(
                fit.model_visibilities, 1.0e-4
            )

            residual_map = ag.util.fit.residual_map_from(
                data=masked_interferometer_7_lop.visibilities,
                model_data=inversion.mapped_reconstructed_visibilities,
            )

            assert residual_map.slim == pytest.approx(fit.residual_map.slim, 1.0e-4)

            normalized_residual_map = ag.util.fit.normalized_residual_map_complex_from(
                residual_map=residual_map,
                noise_map=masked_interferometer_7_lop.noise_map,
            )

            assert normalized_residual_map.slim == pytest.approx(
                fit.normalized_residual_map.slim, 1.0e-4
            )

            chi_squared_map = ag.util.fit.chi_squared_map_complex_from(
                residual_map=residual_map,
                noise_map=masked_interferometer_7_lop.noise_map,
            )

            assert chi_squared_map.slim == pytest.approx(
                fit.chi_squared_map.slim, 1.0e-4
            )

            chi_squared = ag.util.fit.chi_squared_complex_from(
                chi_squared_map=chi_squared_map
            )

            noise_normalization = ag.util.fit.noise_normalization_complex_from(
                noise_map=masked_interferometer_7_lop.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

            mapped_reconstructed_image = ag.util.inversion.mapped_reconstructed_data_from(
                mapping_matrix=fit.inversion.mapper.mapping_matrix,
                reconstruction=fit.inversion.reconstruction,
            )

            assert (
                fit.inversion.mapped_reconstructed_image.slim
                == mapped_reconstructed_image
            ).all()

    class TestCompareToManualProfilesAndInversion:
        def test___all_fit_quantities__no_hyper_methods(self, masked_interferometer_7):
            galaxy_light = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[galaxy_light, galaxy_pix])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            profile_visibilities = plane.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            assert profile_visibilities.slim == pytest.approx(
                fit.profile_visibilities.slim
            )

            profile_subtracted_visibilities = (
                masked_interferometer_7.visibilities - profile_visibilities
            )

            assert profile_subtracted_visibilities.slim == pytest.approx(
                fit.profile_subtracted_visibilities.slim
            )

            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionInterferometerMatrix.from_data_mapper_and_regularization(
                visibilities=profile_subtracted_visibilities,
                noise_map=masked_interferometer_7.noise_map,
                transformer=masked_interferometer_7.transformer,
                mapper=mapper,
                regularization=reg,
            )

            model_visibilities = (
                profile_visibilities + inversion.mapped_reconstructed_visibilities
            )

            assert model_visibilities.slim == pytest.approx(fit.model_visibilities.slim)

            residual_map = ag.util.fit.residual_map_from(
                data=masked_interferometer_7.visibilities, model_data=model_visibilities
            )

            assert residual_map.slim == pytest.approx(fit.residual_map.slim)

            normalized_residual_map = ag.util.fit.normalized_residual_map_complex_from(
                residual_map=residual_map, noise_map=masked_interferometer_7.noise_map
            )

            assert normalized_residual_map.slim == pytest.approx(
                fit.normalized_residual_map.slim
            )

            chi_squared_map = ag.util.fit.chi_squared_map_complex_from(
                residual_map=residual_map, noise_map=masked_interferometer_7.noise_map
            )

            assert chi_squared_map.slim == pytest.approx(fit.chi_squared_map.slim)

            chi_squared = ag.util.fit.chi_squared_complex_from(
                chi_squared_map=chi_squared_map
            )

            noise_normalization = ag.util.fit.noise_normalization_complex_from(
                noise_map=masked_interferometer_7.noise_map
            )

            log_likelihood = ag.util.fit.log_likelihood_from(
                chi_squared=chi_squared, noise_normalization=noise_normalization
            )

            assert log_likelihood == pytest.approx(fit.log_likelihood, 1e-4)

            log_likelihood_with_regularization = ag.util.fit.log_likelihood_with_regularization_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                noise_normalization=noise_normalization,
            )

            assert log_likelihood_with_regularization == pytest.approx(
                fit.log_likelihood_with_regularization, 1e-4
            )

            log_evidence = ag.util.fit.log_evidence_from(
                chi_squared=chi_squared,
                regularization_term=inversion.regularization_term,
                log_curvature_regularization_term=inversion.log_det_curvature_reg_matrix_term,
                log_regularization_term=inversion.log_det_regularization_matrix_term,
                noise_normalization=noise_normalization,
            )

            assert log_evidence == fit.log_evidence
            assert log_evidence == fit.figure_of_merit

            mapped_reconstructed_image = ag.util.inversion.mapped_reconstructed_data_from(
                mapping_matrix=fit.inversion.mapper.mapping_matrix,
                reconstruction=fit.inversion.reconstruction,
            )

            assert (
                fit.inversion.mapped_reconstructed_image.slim
                == mapped_reconstructed_image
            ).all()

        def test___fit_galaxy_model_visibilities_dict__has_image_and_inversion_mapped_reconstructed_image(
            self, masked_interferometer_7
        ):
            g0 = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )
            g1 = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=2.0)
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1, galaxy_pix])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            g0_visibilities = g0.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            g1_visibilities = g1.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            profile_visibilities = g0_visibilities + g1_visibilities

            profile_subtracted_visibilities = (
                masked_interferometer_7.visibilities - profile_visibilities
            )
            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionInterferometerMatrix.from_data_mapper_and_regularization(
                visibilities=profile_subtracted_visibilities,
                noise_map=masked_interferometer_7.noise_map,
                transformer=masked_interferometer_7.transformer,
                mapper=mapper,
                regularization=reg,
            )

            g0_image = g0.image_from_grid(grid=masked_interferometer_7.grid)

            g1_image = g1.image_from_grid(grid=masked_interferometer_7.grid)

            assert fit.galaxy_model_image_dict[g0].slim == pytest.approx(
                g0_image.slim, 1.0e-4
            )
            assert fit.galaxy_model_image_dict[g1].slim == pytest.approx(
                g1_image.slim, 1.0e-4
            )
            assert fit.galaxy_model_image_dict[galaxy_pix].slim == pytest.approx(
                inversion.mapped_reconstructed_image.slim, 1.0e-4
            )

        def test___fit_galaxy_model_visibilities_dict__has_profile_visibilitiess_and_inversion_mapped_reconstructed_visibilities(
            self, masked_interferometer_7
        ):
            g0 = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )
            g1 = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=2.0)
            )
            g2 = ag.Galaxy(redshift=0.5)

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[g0, g1, g2, galaxy_pix])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7, plane=plane
            )

            g0_visibilities = g0.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            g1_visibilities = g1.profile_visibilities_from_grid_and_transformer(
                grid=masked_interferometer_7.grid,
                transformer=masked_interferometer_7.transformer,
            )

            profile_visibilities = g0_visibilities + g1_visibilities

            profile_subtracted_visibilities = (
                masked_interferometer_7.visibilities - profile_visibilities
            )
            mapper = pix.mapper_from_grid_and_sparse_grid(
                grid=masked_interferometer_7.grid,
                settings=ag.SettingsPixelization(use_border=False),
            )

            inversion = inversions.InversionInterferometerMatrix.from_data_mapper_and_regularization(
                visibilities=profile_subtracted_visibilities,
                noise_map=masked_interferometer_7.noise_map,
                transformer=masked_interferometer_7.transformer,
                mapper=mapper,
                regularization=reg,
            )

            assert (
                fit.galaxy_model_visibilities_dict[g2] == 0.0 + 0.0j * np.zeros((7,))
            ).all()

            assert fit.galaxy_model_visibilities_dict[g0].slim == pytest.approx(
                g0_visibilities.slim, 1.0e-4
            )
            assert fit.galaxy_model_visibilities_dict[g1].slim == pytest.approx(
                g1_visibilities.slim, 1.0e-4
            )
            assert fit.galaxy_model_visibilities_dict[galaxy_pix].slim == pytest.approx(
                inversion.mapped_reconstructed_visibilities.slim, 1.0e-4
            )

            assert fit.model_visibilities.slim == pytest.approx(
                fit.galaxy_model_visibilities_dict[g0].slim
                + fit.galaxy_model_visibilities_dict[g1].slim
                + inversion.mapped_reconstructed_visibilities.slim,
                1.0e-4,
            )

        def test___all_fit_quantities__hyper_background_noise(
            self, masked_interferometer_7
        ):
            hyper_background_noise = ag.hyper_data.HyperBackgroundNoise(noise_scale=1.0)

            hyper_noise_map = hyper_background_noise.hyper_noise_map_from_complex_noise_map(
                noise_map=masked_interferometer_7.noise_map
            )

            galaxy_light = ag.Galaxy(
                redshift=0.5, light_profile=ag.lp.EllipticalSersic(intensity=1.0)
            )

            pix = ag.pix.Rectangular(shape=(3, 3))
            reg = ag.reg.Constant(coefficient=1.0)
            galaxy_pix = ag.Galaxy(redshift=1.0, pixelization=pix, regularization=reg)

            plane = ag.Plane(redshift=0.75, galaxies=[galaxy_light, galaxy_pix])

            fit = ag.FitInterferometer(
                masked_interferometer=masked_interferometer_7,
                plane=plane,
                hyper_background_noise=hyper_background_noise,
            )

            assert hyper_noise_map.slim == pytest.approx(
                fit.inversion.noise_map, 1.0e-4
            )

            assert hyper_noise_map.slim == pytest.approx(fit.noise_map.slim)
