# --------------------( LICENSE                           )--------------------
# Copyright (c) 2014-2021 Beartype authors.
# See "LICENSE" for further details.
#
# --------------------( SYNOPSIS                          )--------------------
# Project-wide tox configuration, applied to all invocations of the tox test
# harness within this project.
#
# tox is a high-level Python-specific testing utility wrapping comparatively
# lower-level Python-specific testing frameworks (e.g., py.test, unittest2).
# Whereas the latter only exercise this project's codebase from the current
# working directory (CWD) without installing this project and hence exercising
# this project's installation, tox exercises both.
#
# Specifically, tox iteratively:
#
# 1. Creates a source-based tarball distribution of this project (e.g., via
#    "python setup.py sdist").
# 2. Installs this tarball *AND* a system-agnostic Python interpreter into one
#    isolated virtual environment for each testing configuration.
# 3. Tests this installation with the specified testing framework.
#
# --------------------( CAVEATS                           )--------------------
# *THIS CONFIGURATION IS INTENDED TO BE RUN FROM CONTINUOUS INTEGRATION (CI).*
# This configuration is *not* intended to be run directly from the command line
# (e.g., by running "tox" without arguments), as doing so will implicitly
# create duplicate testing environments and thus rerun testing environments.
# That's bad. Instead, run the top-level "tox" shell script in this repository:
#     $ ./tox
#
# --------------------( VARIABLES                         )--------------------
# tox dynamically substitutes "{"- and "}"-delimited variable names with the
# strings to which those variables expand. Supported variable names include:
#
# * "{envtmpdir}", the absolute dirname of a temporary directory specific to
#   the current virtual environment to which this project has been installed.
# * "{posargs}", the whitespace-delimited list of all command-line arguments
#   passed to the current invocation of the "tox" command.
# * "{toxinidir}", the absolute dirname of the directory containing this file
#   (e.g., the project root).

# ....................{ TOX                               }....................
# Metadata specific to tox itself.
[tox]

# Comma- and newline-delimited string listing the names and optional versions
# of all mandatory core dependencies required to merely create a new venv.
#
# Note that project dependencies should *NOT* be listed here.
#requires =
#    pip >= 20.0.0
#    setuptools < 50.0.0

# ....................{ TOX ~ py                          }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: Changes to this setting *MUST* be manually synchronized with:
# * The "tox-env" setting in ".github/workflows/python_test.yml".
# * (*OBSOLETE*) The "[gh-actions]" subsection below.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Test matrix defined as a bash-interpolated string, where tox implicitly
# expands "py" to "python" and delimits the subsequent two digits with a dot to
# associate each resulting test configuration with the basename of an external
# command running an externally installed Python interpreter.
#
# For example, setting "envlist = py27,py38" produces a test matrix exercising
# the externally installed "python2.7" and "python3.8" commands. See also:
#     https://tox.readthedocs.io/en/latest/config.html#generating-environments-conditional-settings
envlist = py3{6,7,8,9},pypy3{6,7}
#envlist = py3{6,7,8,9}-{linux,windows},pypy3{6,7}-{linux,windows}

#FIXME: Override this from within CI configurations by passing the
#"--skip-missing-interpreters=false" when running the "tox" command,
#preventing CI runs from erroneously returning success on missing interpreters.

# Ignore Python environments unavailable on the current system. By default,
# "tox" fails on the first unavailable Python environment. While sensible for
# continuous integration (CI), this default fails to generalize for local
# developers lacking one or more Python environments.
#
# Note that our CI configuration explicitly falsifies this setting back to its
# CI-friendly default via the "--skip-missing-interpreters=false" CLI option,
# forcing CI failures for unavailable Python environments. See also:
#     https://github.com/tox-dev/tox/issues/903
skip_missing_interpreters = true

# ....................{ LIB ~ tox-gh-actions              }....................
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# OBSOLETE: Our continuous integration (CI) workflow no longer leverages
# "tox-gh-actions", as doing so appears to be unnecessary and introduce undue
# code and time complexities. Nonetheless, we preserve this configuration as a
# fallback in the unlikely event that we ever want to reverse that decision.
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# Metadata specific to the third-party "tox-gh-actions" package automating
# integration of "tox" with GitHub Actions (i.e., GitHub-hosted continuous
# integration (CI) services).
[gh-actions]

#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# WARNING: Changes to this setting *MUST* be manually synchronized with:
# * The "[tox]" subsection above.
# * The ".github/workflows/pythonpackage.yml".
#!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# Map from the name of the current Python environment being run from the
# ".github/workflows/pythonpackage.yml" file to an arbitrary label available
# within the "envlist" string. See above.
python =
    3.6: py36
    3.7: py37
    3.8: py38
    3.9: py39
    pypy36: pypy36
    pypy37: pypy37

[gh-actions:env]
# Map from the name of the current Docker environment being run from the
# ".github/workflows/pythonpackage.yml" file to an arbitrary label available
# within the "envlist" string. See above.
PLATFORM =
    ubuntu-latest: linux
    windows-latest: windows

#FIXME: When adding macOS support, uncomment this and add ",macos" to the
#"envlist" string above.
#   macos-latest: macos

# ....................{ LIB ~ pytest                      }....................
# Metadata specific to the third-party "pytest" testing framework.
[testenv]

# Human-readable string synopsizing the current test configuration.
description = Exercise "{toxinidir}" with "{basepython} -m pytest".

# ....................{ LIB ~ pytest : dependencies       }....................
# Comma- and newline-delimited string listing the names of all "setup.py"-based 
# "extras" required as mandatory or optional dependencies when testing this
# project.
extras =
    #FIXME: Actually, let's *NOT* do this. Ideally, we would enable this when
    #manually testing locally and disable this when automatically testing
    #remotely under CI to reduce consumption of scarce CI minutes. Sadly, there
    #appears to be no sane means of achieving this without defining a
    #completely separate "tox.ini" file for remote testing -- which we are
    #currently *NOT* prepared to do, because violating DRY brings pain.
    # Install all optional runtime dependencies to maximize test coverage.
    #all

    # Install all mandatory test-specific dependencies. This is the official
    # solution supported by "tox" developers for eliminating redundancy between
    # testing dependencies listed within this file and the top-level "setup.py"
    # script. While non-intuitive, we have little recourse. See also:
    #     https://stackoverflow.com/questions/29870629/pip-install-test-dependencies-for-tox-from-setup-py
    #     https://stackoverflow.com/questions/39922650/tox-tests-use-setup-py-extra-require-as-tox-deps-source
    #     https://github.com/tox-dev/tox/issues/13#issuecomment-247788280
    # Note that this also requires ".[test-tox]" to be listed as a dependency.
    test-tox

# Comma- and newline-delimited string listing the names of all mandatory
# dependencies when testing this project.
#
# Note that this also requires "test-tox" to be listed as an extra above.
deps = .[test-tox]

# ....................{ LIB ~ pytest : environment        }....................
# Newline-delimited string listing all environment variables to be temporarily
# set in each shell subprocess running tests.
setenv =
    # Prevent Python from buffering and hence failing to log output in the
    # unlikely (but feasible) event of catastrophic failure from either the
    # active Python process or OS kernel.
    PYTHONUNBUFFERED = 1

# Absolute dirname of the directory to change to for the current test
# configuration, required to avoid accidental import collisions with
# uninstalled packages of the same name residing in "{toxinidir}". See also the
# following pertinent blog post, "Testing your python package as installed":
#     https://blog.ganssle.io/articles/2019/08/test-as-installed.html
changedir = {envtmpdir}

# ....................{ LIB ~ pytest : commands           }....................
# Command running the current test configuration. For disambiguity, avoid
# running any Python-based commands *EXCEPT* those explicitly prefixed by
# "{envpython}": the absolute filename of the venv-specific Python interpreter.
commands =
    # Print metadata on the current versions of Python and pytest (in order).
    {envpython} --version
    {envpython} -m pytest --version

    # Run the entire pytest-based test suite under the following options:
    # * "--maxfail=3", halting testing on the third failure.
    {envpython} -m pytest --maxfail=3 {posargs} {toxinidir}
