Metadata-Version: 2.1
Name: chromaterm
Version: 0.7.0
Summary: Color your output to terminal
Home-page: https://github.com/hSaria/ChromaTerm
Author: hSaria
Author-email: sariahajjar@gmail.com
License: MIT
Description: # ChromaTerm
        
        [![Build status](https://img.shields.io/github/workflow/status/hSaria/ChromaTerm/CI/master)](https://github.com/hSaria/ChromaTerm/actions?query=workflow%3ACI)
        [![Language grade: Python](https://img.shields.io/lgtm/grade/python/github/hSaria/ChromaTerm)](https://lgtm.com/projects/g/hSaria/ChromaTerm/context:python)
        [![Coverage status](https://coveralls.io/repos/github/hSaria/ChromaTerm/badge.svg)](https://coveralls.io/github/hSaria/ChromaTerm)
        [![PyPI version](https://badge.fury.io/py/chromaterm.svg)](https://badge.fury.io/py/chromaterm)
        
        ChromaTerm (`ct`) is a Python script that colors your output to terminal using
        regular expressions. It works with interactive programs, like SSH.
        
        ![alt text](https://github.com/hSaria/ChromaTerm/raw/master/.github/junos-show-interface.png "Example output")
        
        ## Installation
        
        ```shell
        pip3 install chromaterm
        ```
        
        ## Usage
        
        Think of `ct` like `grep`; just pipe data into it, like `ssh somewhere | ct`.
        
        ```shell
        echo "Jul 14 12:28:19  Message from 1.2.3.4: Completed successfully" | ct
        ```
        
        If you want to always highlight a program, you can set up a function in your
        `.bash_profile`. For instance, here's one for `ssh`:
        ```shell
        ssh() { /usr/bin/ssh "$@" | ct; }
        ```
        
        Some programs behave differently when piped, like `less`. In that case, `ct` can
        hide the pipe by spawning your program. You just have to prefix the command with
        `ct`, like `ct less file.txt`.
        
        ## Highlight Rules
        
        ChromaTerm reads highlight rules from a configuration file called `.chromaterm.yml`,
        located in your home directory. If the file is not there, a default one is created.
        
        > Check out the [`contrib/rules`](https://github.com/hSaria/ChromaTerm/tree/master/contrib/rules)
        > directory in the project; it some topic-specific rules.
        
        The rules are stored as YAML, like so:
        
        ```yaml
        rules:
        - description: My first rule colors the foreground
          regex: hello.+world
          color: f#ff0000
        
        - description: Make "there" bold and italic. Paint "buddy" red
          regex: Hey (there), (buddy)
          color:
            1: bold italic
            2: b#ff0000
        ```
        
        ### Description
        
        Optional. It's purely for your sake.
        
        ### RegEx
        
        The RegEx engine used is Python's [re](https://docs.python.org/3/library/re.html).
        
        ### Color
        
        #### Background and Foreground
        
        The color is a hex string prefixed by `b` for background (e.g. `b#123456`) and
        `f` for foreground (e.g. `f#abcdef`).
        
        #### Style
        
        In addition to the background and foreground, the following styles are supported,
        though some terminals ignore them:
        
         * Blink
         * Bold
         * Italic
         * Strike
         * Underline
        
        ### Group
        
        A color can be applied per RegEx group (see the 2nd example rule). Any group in
        the regular expression can be referenced.
        
        ## Help
        
        If you've got any questions or suggestions, please open up an
        [issue](https://github.com/hSaria/ChromaTerm/issues/new/choose) (always
        appreciated).
        
        ### Windows support
        
        To use ChromaTerm on Windows, you will need to run it with the
        [Windows Subsystem for Linux (`WSL`)](https://docs.microsoft.com/en-us/windows/wsl/about)
        
Platform: UNKNOWN
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: Intended Audience :: Telecommunications Industry
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Topic :: Terminals
Classifier: Topic :: Utilities
Requires-Python: >=3.5.0
Description-Content-Type: text/markdown
