# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ciak']

package_data = \
{'': ['*']}

entry_points = \
{'console_scripts': ['ciak = ciak.ciak:main', 'ciak36 = ciak.ciak36:main']}

setup_kwargs = {
    'name': 'ciak',
    'version': '0.1.0.dev0',
    'description': 'Run executables according to a configuration file',
    'long_description': '<p align="center">\n<img src="https://github.com/Sbozzolo/ciak/raw/main/logo.png" width="534" height="178">\n</p>\n\n*README/DOCUMENTATION IS WORK IN PROGRESS*\n\n`ciak` is a Python program that runs executables according to a configuration\nfile (a *ciakfile*) that optional contains user-declared variables which can be\nadjusted at runtime.\n\nA ciakfile is a simple text file that describes a nested tree using asterisks\nand that has placeholders for runtime-controllable variables, supporting\ndefaults. Thanks to the nested tree structure, the amount of typing required is\ndrastically reduced when the same commands have to be executed multiple times\nbut with different arguments. On the other hand, support for placeholders allows\nfor code reuse and the same ciakfile can be used for different situations. This\nis facilitated by the fact that if you define an environmental variable\n`CIAKFILE_DIR`, `ciak` will know where to look for your ciakfiles, so you can\ncall them from anywhere in your system. Finally, in ciakfiles, every line that\ndoes not start with an asterisk (up to leading spaces) is treated as a comment.\nWith this feature, one can write extensive commentaries that perfectly blend in\nwith the configuration itself.\n\nFor an example of use case, see the section "Complete explanation of a specific\nuse case" [TODO: Add link here]. See below for an example of what a\nconfiguration file looks like.\n\n# Installation\n\n`ciak` is available on PyPI. You can install it with `pip`:\n\n``` sh\npip3 install ciak\n```\n`ciak` requires Python3.9 and has no external dependency.\nSee ciak36 [TODO: ADD LINK HERE] for compatibility with previous versions of Python.\n\n## Why should I use ciak instead of a shell script?\n\nAt a first glance, `ciak` may seem just a convoluted way to write a shell\nscript. This is not the case: `ciak` enables workflows that are impractical with\nshell script. The main advantages of `ciak` are:\n\n- Simplify repeated arguments across multiple scripts\n- Use keyword arguments\n- Have parallelization with no effort\n- Strong emphasis on self-documentation\n\nHowever, by design, `ciak` does not support any shell feature (like input/output\nredirection, for loops, variable assignment, ...).\n\n## ciak36\n\n`ciak` uses features available only with Python3.9 or later versions. For\nconvenience, an executable `ciak36` is provided, compatible with Python3.6.\nThere is no difference in features available between `ciak` and `ciak36`.\n`ciak36` is automatically generated by `ciak` with the `generate_ciak36.sh`\nscript. `ciak36` will be dropped in the future.\n\n# The ciakfile configuration syntax\n\nValid ciakfiles are text files with the following characteristics:\n- Lines that do no start with asterisk (up to initial spaces) are considered\n  comments.\n- The number of asterisks defines the level in the three and the parent of an\n  item is the first item with fewer asterisk above it.\n- Executables have to be on the first level of the tree.\n- Placeholders can be defined with the syntax `{{key::default_value}}`. These\n  will be substituted at runtime with values specified via command-line or with\n  the default value.\n- Indentation, leading/trailing spaces, and file extension do not matter.\n\n## Examples\n\nA simple ciakfile is\n``` org\n* ls {{pwd::/tmp}}\n```\nAssuming we save the file to `ciak1.org`, we can then run\n``` sh\nciak -c ciak1.org --pwd $HOME\n```\nThis will execute the command `ls $HOME`. If we were to run\n``` sh\nciak -c ciak1.org\n```\nthen the default value for `pwd` is used and the command `ls /tmp` is run instead.\n\nIn a more slightly interesting example, we want to compress different\nfiles. This can be achieved with\n``` org\n* gzip\n** file1\n** file2\n** file3\n** file4\n```\nSaving this as `ciak2.org`, running\n``` sh\nciak -c ciak2.org --parallel\n```\nwill correspond to running `gzip file1`, `gzip file2`, ..., using as many processes\nas the number of cores available, as requested by the `--parallel` flag.\n\n## ciak and org-mode\n\n`ciak` borrows its syntax from [GNU Emacs](https://gnu.org/software/emacs/)\'s\n[org-mode](https://orgmode.org) . As such, if you save your ciakfiles with\nextension `.org` and you open them with Emacs, you gain access to a large number\nof additional features (e.g., automatic coloring and indentation, subtree\nfolding, tables, exporting to different formats, ...). This is what an example\nof a ciakfile will look like in (customized) Emacs\n\n![org-mode\nscreenshot](https://github.com/Sbozzolo/ciak/raw/main/ss-org-mode.png)\n\nUsing org-mode greatly enhances `ciak`\'s self-documenting capabilities.\n\n# Options\n\n`--fail-fast`, if enabled, `ciak` stops as soon as a non-zero return code is\nfound.\n\n`--parellel`, if enabled, the commands are executed in parallel with a number of\nworkers that is equal to the number of available cores on the machine.\n\n# Development\n\nWe use:\n* [Poetry](https://python-poetry.org) to manage dependencies, build, and publish\n  `motionpicture`.\n* [Black](https://github.com/psf/black) for formatting the code (with 89\n  columns).\n* [pytest](https://pytest.org) for unit tests (with `pytest-cov` for test\n  coverage).\n* [mypy](https://mypy.readthedocs.io/) for static type analysis.\n* GitHub actions for continuous integration.\n\nWe are happy to accept contributions.\n\n# What does ciak mean?\n\nIn Italian, the word *ciak* is an onomatopoeia that indicates the sound of the\nclapperboard used by movie directors to kick off the recording of a scene. Along\nthe same lines, when you use this program, you are the script-writer and the\ndirector: you define what needs to be run in the `ciakfile` and you start and\ncontrol its execution with `ciak`, your clapperboard.\n\n# Going over a specific use case\n\n`ciak` was developed to run analysis of [Einstein\nToolkit](http://einsteintoolkit.org) simulations using\n[kuibit](https://github.com/Sbozzolo/kuibit). `ciak` solves four problems:\n1. Simplification in writing the analysis\n2. Reuse of the code\n3. Reproducibility and self-documentation in the analysis\n4. Parallelization of analysis\n\nNormally, one runs several simulations of the same kind when only a few\nparameters are changed.\n\nDistributing the `ciakfile` along with the scripts that are called allows other\npeople to easily reproduce the analysis. The comments in the `ciakfile` are\nhelpful to explain what is going on and why certain values are set at the values\nthey are set.\n',
    'author': 'Gabriele Bozzola',
    'author_email': 'sbozzolator@gmail.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/sbozzolo/ciak',
    'packages': packages,
    'package_data': package_data,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
