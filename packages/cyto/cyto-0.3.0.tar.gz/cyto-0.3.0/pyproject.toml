[build-system]
# We can't use poetry-core, since there is a compatibility issue with
# the poetry-dynamic-versioning plug-in when run inside tox.
build-backend = "poetry.masonry.api"
# We use specific versions of dunamai and poetry-dynamic-versioning
# due to a bug in recent versions that raises "RuntimeError: Unable
# to detect version control system" when run through tox.
requires = [
  "poetry>=1.0.0",
  "dunamai==1.4.1",
  "poetry-dynamic-versioning==0.12.3",
]

[tool.poetry]
authors = ["Frederik Peter Aalund <fpa@sbtinstruments.com>"] 
description = "SBT Instruments' framework for Python-based applications" 
license = "MIT" 
name = "cyto" 
readme = "README.md" 
repository = "https://github.com/sbtinstruments/cyto" 
version = "0.3.0" # Placeholder (we use the poetry-dynamic-versioning plug-in)

[tool.poetry.dependencies]
anyio = {version = "^2.0.2", optional = true}
click = {version = "^7.1.2", optional = true}
pydantic = {version = "^1.8.1", optional = true}
python = "^3.8"
toml = {version = "^0.10.2", optional = true}

[tool.poetry.dev-dependencies]
black = "^20.8b1"
isort = "^5.6.4"
mypy = "^0.790"
pre-commit = "^2.8.2"
pyfakefs = "^4.2.1"
pylint = "^2.6.0"
pytest = "^6.1.2"
pytest-cov = "^2.10.1"
taskipy = "^1.4.0"
# We only use rope to give Visual Studio Code users a better
# out-of-the-box experience. For, e.g., refactoring.
# In other words, rope is not part of the QA tooling itself.
pydocstyle = "^5.1.1"
rope = "^0.18.0"

[tool.poetry.extras]
"all" = ["anyio", "pydantic", "click", "toml"]
"app" = ["anyio", "pydantic"]
"settings" = ["pydantic"]
"settings.sources.cli" = ["click"]
"settings.sources.toml" = ["toml"]

[tool.poetry-dynamic-versioning]
enable = true

[tool.taskipy.tasks]
black = "black cyto tests"
isort = "isort cyto tests"
mypy = "mypy cyto tests"
pre-commit = "pre-commit run --all-files"
pylint = "pylint cyto tests"

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = clean,py{38,39}-{app,app_cli,settings,settings_source_toml},coverage
requires =
    tox-poetry-installer[poetry] == 0.6.0

[testenv]
require_locked_deps = true
locked_deps =
    # All tests requires the following dev-dependencies:
    pytest
    pytest-cov
    # Furthermore. some tests depend on specific pytest plug-ins:
    settings: pyfakefs
    settings_source_toml: pyfakefs
# Everything in cyto is an extra. No dependencies install per default.
# Therefore, we must specify the extras that we need for each test.
extras =
    app: app
    app_cli: app
    app_cli: settings.sources.cli
    settings: settings
    settings_source_toml: settings
    settings_source_toml: settings.sources.toml
# We specify the test files that we run in each test environment.
setenv =
    app: PYTEST_TEST_PATHS = tests/app/test_basics.py
    app_cli: PYTEST_TEST_PATHS = tests/app/test_cli.py
    settings: PYTEST_TEST_PATHS = tests/settings/test_autofill.py tests/settings/test_precedence.py
    settings_source_toml: PYTEST_TEST_PATHS = tests/settings/test_source_toml.py
# For parallel mode, we ensure that tox runs the environments in the right order.
depends =
    # Run "clean" before all the actual tests
    {app,app_cli,settings,settings_source_toml}: clean
    # Run "coverage" after all the actual tests
    coverage: py{38,39}-{app,app_cli,settings,settings_source_toml}

# This is a dummy environment that clears the code coverage data
[testenv:clean]
basepython = python3.8
skip_install = true
commands = coverage erase

# These are the actual test environments
[testenv:py{38,39}-{app,app_cli,settings,settings_source_toml}]
commands =
    pytest --cov=cyto --cov-append --cov-report=term-missing \
      {env:PYTEST_ARGS:} {env:PYTEST_TEST_PATHS}

# This is a dummy environment that generates a code coverage report
[testenv:coverage]
basepython = python3.8
skip_install = true
commands =
    coverage html --precision=2
    coverage report --precision=2 --fail-under=90
"""

[tool.black]
target-version = ['py38']

[tool.isort]
profile = 'black'

[tool.pylint.master]
# i,j,k: You can use this for an integer index in a loop.
# fs: We use this in the tests to get a pyfakefs file system reference.
#     Since pytest's dependency injection is name based, we have to use
#     this exact argument name.
# tg: You can use this for an `anyio.TaskGroup`.
good-names = 'i,j,k,fs,tg' # Default is 'i,j,k,ex,Run,_'
# Increase the default values a bit. Yes, this may hurt maintainability
# ever so slightly but it increases the speed of development.
max-args = '7' # Default is 5
max-attributes = '12' # Default is 7
# Match black's default max line length
max-line-length = '88' # Default is 100

[tool.pylint.similarities]
# Imports are often duplicated. If two different files use a lot of
# the same imports, there is just no way around it. Therefore, we
# simply ignore import statements completely when we look for duplicate
# code.
ignore-imports = 'y'

[tool.pylint.'messages control']
# Note that there is an ongoing discussion about, the current
# pylint defaults:
#     https://github.com/PyCQA/pylint/issues/3512
#
# It's also interesting to note that the pylint authors disable
# some checks for the official pylint repo:
#     https://github.com/PyCQA/pylint/blob/master/pylintrc#L56

### IF YOU ENABLE A PYLINT CHECK THEN EXPLAIN WHY BELOW
enable = '''
'''

### IF YOU DISABLE A PYLINT CHECK THEN EXPLAIN WHY BELOW
#
# fixme: We use "TODO: " to note areas that we can improve.
#     It's nice to have this directly in the code in a way that
#     we can easily search for.
#     Related to: https://github.com/PyCQA/pylint/issues/2874
#
# missing-module-docstring,
# missing-class-docstring,
# missing-function-docstring: pydocstyle handles all this
#     See: https://pylint.readthedocs.io/en/latest/faq.html#i-am-using-another-popular-linter-alongside-pylint-which-messages-should-i-disable-to-avoid-duplicates
disable = '''
  fixme,
  missing-module-docstring,
  missing-class-docstring,
  missing-function-docstring,
'''
