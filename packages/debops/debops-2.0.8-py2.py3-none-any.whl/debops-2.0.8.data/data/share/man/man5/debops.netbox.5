.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.NETBOX" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.netbox \- Manage NetBox, an IPAM/DCIM database using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%NetBox\fP <\fBhttps://github.com/digitalocean/netbox/\fP> is an IP address management
(\fI\%IPAM\fP <\fBhttps://en.wikipedia.org/wiki/IP_address_management\fP>) and data center
infrastructure management (\fI\%DCIM\fP <\fBhttps://en.wikipedia.org/wiki/Data_center_infrastructure_management\fP>)
application developed by \fI\%DigitalOcean\fP <\fBhttps://digitalocean.com/\fP>\&.
.SH GETTING STARTED
.SS General deployment notes
.sp
The application will be by default deployed both on \fBipam.{{ ansible_domain
}}\fP as well ass \fBdcim.{{ ansible_domain }}\fP DNS domains, for convenience.
you should either point these domains to the deployment host via DNS, or change
the \fBnetbox__fqdn\fP to set a desired subdomain.
.sp
By default NetBox will allow connections only to the specified DNS domains and
deny any other domain that might point to the host it\(aqs deployed on.
.sp
After the database initialization, the role will create an initial superuser
account with random password stored in the DebOps \fBsecret/\fP directory. The
username will be the first admin user defined by the debops.core Ansible
role.
.sp
By default anonymous access to NetBox is disabled.
.SS Python virtualenv support
.sp
The NetBox application will be deployed in a Python \fI\%virtualenv\fP <\fBhttp://virtualenv.org/\fP>
environment to separate it from the system Python installation. By default the
environment will be created and maintained in the \fB/usr/local/lib/netbox/\fP
directory using an unprivileged \fBnetbox\fP account.
.sp
The NetBox Python requirements will be installed in the requested versions from
PyPI; this might take a while.
.sp
The role will install additional Python modules, \fBgunicorn\fP and
\fBsetproctitle\fP, to support internal application server and/or management by
the system\-wide \fBgunicorn\fP service.
.SS Internal application server
.sp
The \fBdebops.netbox\fP role can deploy NetBox with either a system\-wide
\fBgunicorn\fP service (default), or with an internal \fBgunicorn\fP application
sever using its own \fBnetbox\fP \fBsystemd\fP unit file. The role automatically
detects if the \fBdebops.gunicorn\fP role has been deployed on a host and
switches between these modes as needed.
.SS manage.py for NetBox power users
.sp
The NetBox goody \fBmanage.py\fP is conveniently accessible using a script
that the role installs called \fBnetbox\-manage\fP\&. It uses \fBsudo\fP to
switch to the NetBox user, activates the virtualenv and run \fBmanage.py\fP\&.
Call it without parameters to see the available subcommands. The user calling
the script must have privileges to run commands as the NetBox system user.
.SS Example inventory
.sp
The NetBox application uses PostgreSQL database as its backend, therefore you
need to setup a PostgreSQL server which the application can access. To
configure one on the same host as NetBox, add that host to the
\fB[debops_service_postgresql_server]\fP Ansible inventory group. See the
debops.postgresql_server role documentation to see how to use the database
server remotely.
.sp
The Redis service is used for caching and is now required by NetBox as well.
The \fBnetbox__redis_*\fP variables in the debops.netbox role can be used
to point NetBox to a remote Redis service; by default the role expects Redis to
be installed locally. You can deploy a Redis Server or cluster using the
debops.redis_server (and optionally debops.redis_sentinel)
Ansible roles. See their documentation for more details.
.sp
To deploy NetBox on a given host, you need to add that host to the
\fB[debops_service_netbox]\fP Ansible inventory group. Complete, example
inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_all_hosts]
hostname

[debops_service_redis_server]
hostname

[debops_service_postgresql_server]
hostname

[debops_service_netbox]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.netbox\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage NetBox IPAM/DCIM application
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_service_netbox\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: keyring
      tags: [ \(aqrole::keyring\(aq, \(aqskip::keyring\(aq,
              \(aqrole::postgresql\(aq, \(aqrole::nginx\(aq, \(aqrole::netbox\(aq ]
      keyring__dependent_apt_keys:
        \- \(aq{{ postgresql__keyring__dependent_apt_keys }}\(aq
        \- \(aq{{ nginx__keyring__dependent_apt_keys }}\(aq
      keyring__dependent_gpg_keys:
        \- \(aq{{ netbox__keyring__dependent_gpg_keys }}\(aq

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ gunicorn__apt_preferences__dependent_list }}\(aq
        \- \(aq{{ postgresql__apt_preferences__dependent_list }}\(aq
        \- \(aq{{ nginx__apt_preferences__dependent_list }}\(aq

    \- role: logrotate
      tags: [ \(aqrole::logrotate\(aq, \(aqskip::logrotate\(aq ]
      logrotate__dependent_config:
        \- \(aq{{ gunicorn__logrotate__dependent_config }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ nginx__ferm__dependent_rules }}\(aq

    \- role: python
      tags: [ \(aqrole::python\(aq, \(aqskip::python\(aq, \(aqrole::postgresql\(aq, \(aqrole::gunicorn\(aq, \(aqrole::netbox\(aq ]
      python__dependent_packages3:
        \- \(aq{{ gunicorn__python__dependent_packages3 }}\(aq
        \- \(aq{{ netbox__python__dependent_packages3 }}\(aq
        \- \(aq{{ nginx__python__dependent_packages3 }}\(aq
        \- \(aq{{ postgresql__python__dependent_packages3 }}\(aq
      python__dependent_packages2:
        \- \(aq{{ gunicorn__python__dependent_packages2 }}\(aq
        \- \(aq{{ netbox__python__dependent_packages2 }}\(aq
        \- \(aq{{ nginx__python__dependent_packages2 }}\(aq
        \- \(aq{{ postgresql__python__dependent_packages2 }}\(aq

    \- role: postgresql
      tags: [ \(aqrole::postgresql\(aq, \(aqskip::postgresql\(aq ]
      postgresql__dependent_roles:
        \- \(aq{{ netbox__postgresql__dependent_roles }}\(aq
      postgresql__dependent_groups:
        \- \(aq{{ netbox__postgresql__dependent_groups }}\(aq
      postgresql__dependent_databases:
        \- \(aq{{ netbox__postgresql__dependent_databases }}\(aq
      postgresql__dependent_pgpass:
        \- \(aq{{ netbox__postgresql__dependent_pgpass }}\(aq

    \- role: gunicorn
      tags: [ \(aqrole::gunicorn\(aq, \(aqskip::gunicorn\(aq ]
      gunicorn__dependent_applications:
        \- \(aq{{ netbox__gunicorn__dependent_applications }}\(aq

    \- role: nginx
      tags: [ \(aqrole::nginx\(aq, \(aqskip::nginx\(aq ]
      nginx__dependent_upstreams:
        \- \(aq{{ netbox__nginx__dependent_upstreams }}\(aq
      nginx__dependent_servers:
        \- \(aq{{ netbox__nginx__dependent_servers }}\(aq

    \- role: netbox
      tags: [ \(aqrole::netbox\(aq, \(aqskip::netbox\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after host is first
configured to speed up playbook execution, when you are sure that most of the
configuration has not been changed.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::netbox\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.TP
.B \fBrole::netbox:config\fP
Generate NetBox configuration file and restart the service if necessary.
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.netbox\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS netbox__virtualenv_pip_packages
.sp
This is a list of additional Python modules that will be installed in the
NetBox \fBvirtualenv\fP environment using \fBpip\fP\&. Each element is either
a string which specifies a Python module name, or a YAML dictionary with
specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Name of the Python module to install.
.TP
.B \fBversion\fP
Optional. Specific version of the module to install.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, the Python module will be
installed. If \fBignore\fP, the specified Python module will be ignored.
.UNINDENT
.sp
The Python modules will be installed or updated as needed when the NetBox
checked out code is updated.
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
