.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.ROOT_ACCOUNT" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.root_account \- Manage the host's root account
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
The \fBdebops.root_account\fP Ansible role can be used to manage the system root
account and generate SSH private keys for use on other hosts.
.SH GETTING STARTED
.SS Subordinate UID/GID range for root
.sp
\fI\%Linux user namespaces\fP <\fBhttps://en.wikipedia.org/wiki/Linux_namespaces#User_ID_(user)\fP>
can be used to create unprivileged LXC or Docker containers which don\(aqt use
normal UID/GID ranges of the host system. These "subordinate" UID/GID ranges
are configured in the \fB/etc/subuid\fP and \fB/etc/subgid\fP databases
respectively.
.sp
Unfortunately, Debian by default does not reserve a subordinate UID/GID range
for the \fBroot\fP account. In conjunction with the system automatically creating
subUID/subGID ranges for new user accounts created on a host this might cause
creation of the \fBroot\fP subUID/subGID ranges difficult. To avoid this issue,
the \fBdebops.root_account\fP Ansible role will reserve a defined set of UID/GID
ranges for the \fBroot\fP account which can then be used to, for example, create
unprivileged LXC containers.
.SS Example inventory
.sp
The \fBdebops.root_account\fP role is included by default in the
\fBcommon.yml\fP DebOps playbook; you don\(aqt need to do anything to have it
executed.
.sp
If you donâ€™t want to let \fBdebops.root_account\fP manage the root account, you
can do this with the following setting in your inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
root_account__enabled: False
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.root_account\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage root system account
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_all_hosts\(aq, \(aqdebops_service_root_account\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: root_account
      tags: [ \(aqrole::root_account\(aq, \(aqskip::root_account\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Fabio Bonelli
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
