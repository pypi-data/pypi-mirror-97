.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.RSYSLOG" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.rsyslog \- Manage syslog daemon using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
The \fI\%rsyslog\fP <\fBhttp://rsyslog.com/\fP> package is used to read, process, store
and forward system logs in different ways, on local or remote systems. The
\fBdebops.rsyslog\fP role can be used to easily configure log forwarding to
a central log server, as well as store logs on the filesystem or other storage
backends.
.SH GETTING STARTED
.SS Initial configuration
.sp
The \fBdebops.rsyslog\fP default configuration is designed to closely resemble
the Debian \fBrsyslog\fP package defaults. The same system logs will be
generated, although with slightly longer log rotation. If the operating system
is Debian, \fBrsyslog\fP will be run on a privileged \fBroot\fP account; if the
system is Ubuntu, an unprivileged \fBsyslog\fP account will be used by default.
.sp
The \fBrsyslog\fP configuration is stored in \fB/etc/rsyslog.d/\fP, most of the
configuration located in \fB/etc/rsyslog.conf\fP has been moved to the directory
and put in separate files (old configuration is preserved in a diverted file).
.SS Configuration filename extensions
.sp
The configuration order is important, and to aid support of configuration from
other roles, \fBdebops.rsyslog\fP includes configuration files with different
filename extensions at certain parts of the configuration:
.INDENT 0.0
.TP
.B \fB/etc/rsyslog.d/*.conf\fP
These files are included by default. They are meant to be used for
configuration of the local system logs, the extension is used to preserve
compatibility with Debian package conventions.
.TP
.B \fB/etc/rsyslog.d/*.template\fP
These configuration files can be used to create custom templates used by
\fBrsyslog\fP in different parts of the configuration.
.TP
.B \fB/etc/rsyslog.d/*.system\fP
These configuration files are meant to be used to define log matching rules
specific to a given system, to store logs in different files.
.TP
.B \fB/etc/rsyslog.d/*.remote\fP
These configuration files are meant to store configuration for logs coming
from other systems over the network. These rules will be defined in
a separate "ruleset" called \fBremote\fP which is used by the UDP and TCP input
modules. This way the local (system) logs and remote logs from other hosts
can be managed separately and shouldn\(aqt mix with each other.
.UNINDENT
.SS Quick start: log forwarding
.sp
To enable log forwarding, you will want to configure a few variables differently
in your Ansible inventory. The quick and dirty setup described here assumes
that you want to forward logs over UDP without any encryption, so it should
only be used for testing if remote logs work. For more advanced configuration
check the rsyslog__forward documentation.
.sp
First, on the host that should receive the remote logs, for example in
\fBansible/inventory/host_vars/logs.example.org/rsyslog.yml\fP, configure
variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Enable network input channels and storage of remote logs in filesystem
rsyslog__capabilities: [ \(aqnetwork\(aq, \(aqremote\-files\(aq ]

# Specify which subnets can send remote logs through the firewall
rsyslog__host_allow: [ \(aq192.0.2.0/24\(aq, \(aq2001:db8::/32\(aq ]

# Mask log forwarding configuration defined elsewhere
rsyslog__forward: []
rsyslog__group_forward: []
rsyslog__host_forward: []

# Or, alternatively, forward logs to a different host
rsyslog__host_forward: [ \(aq*.* @other.{{ ansible_domain }}\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will prepare a given central log storage host to receive logs from other
systems on specified subnets, and store them in \fB/var/log/remote/\fP directory.
.sp
Now, you can enable log forwarding for all hosts in your inventory (in
\fBansible/inventory/group_vars/all/rsyslog.yml\fP) or only for a specific group
(in \fBansible/inventory/group_vars/logged/rsyslog.yml\fP), using:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__forward: [ \(aq*.* @logs.{{ ansible_domain }}\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will forward logs on all hosts in the inventory over unencrypted UDP to
a specified host. Due to above "masking" of the variables on the host inventory
level, the log server should not create an infinite loop which forwards logs to
itself. The \fBdebops.rsyslog\fP role does not handle such case automatically, so
you need to make sure this doesn\(aqt happen by accident.
.sp
The role by default supports more advanced setups like forwarding logs over TCP
using encrypted TLS connections, but these require more extensive configuration
from different Ansible roles. You should read the rest of the
\fBdebops.rsyslog\fP documentation to see how you can enable these features.
.SS Example inventory
.sp
To enable the \fBdebops.rsyslog\fP role on a given host or group of hosts, you
need to add that host to the \fB[debops_service_rsyslog]\fP Ansible inventory
group:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_service_rsyslog]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
Here\(aqs an example playbook which uses \fBdebops.rsyslog\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage rsyslog service
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_all_hosts\(aq, \(aqdebops_service_rsyslog\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: etc_services
      tags: [ \(aqrole::etc_services\(aq, \(aqskip::etc_services\(aq ]
      etc_services__dependent_list:
        \- \(aq{{ rsyslog__etc_services__dependent_list }}\(aq

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ rsyslog__apt_preferences__dependent_list }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ rsyslog__ferm__dependent_rules }}\(aq

    \- role: logrotate
      tags: [ \(aqrole::logrotate\(aq, \(aqskip::logrotate\(aq ]
      logrotate__dependent_config:
        \- \(aq{{ rsyslog__logrotate__dependent_config }}\(aq

    \- role: rsyslog
      tags: [ \(aqrole::rsyslog\(aq, \(aqskip::rsyslog\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.rsyslog\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS rsyslog__capabilities
.sp
The default configuration provided in the \fBdebops.rsyslog\fP role supports
a few different usage scenarios. To make it easier to enable them as needed,
a separate list of "capabilities" is checked by Ansible to see if specific
keywords are present; this allows for easy selection of different operation
modes.
.sp
With the empty list of capabilities, the \fBdebops.rsyslog\fP role should
configure a local syslog server which stores the logs in a standard set of
files located in \fB/var/log/\fP directory.
.sp
The different capabilities that can be enabled in the list:
.INDENT 0.0
.TP
.B \fBnetwork\fP
Enable support for receiving the logs over the network, via UDP or TCP
connections. By default you also need to specify the CIDR subnets or IP
addresses which are allowed through the firewall using \fBrsyslog__allow\fP,
\fBrsyslog__group_allow\fP and/or \fBrsyslog__host_allow\fP variables.
.TP
.B \fBremote\-files\fP
Enable storage of remote logs as files in \fB/var/log/remote/\fP directory. If
this is not enabled, by default remote logs will be discarded due to being
directed to a separate \fBremote\fP ruleset.
.TP
.B \fBtls\fP
Enable support for TLS connections to the \fBrsyslog\fP server, both as
a forwarder and as a receiver. This option depends on availability of X.509
certificates managed by debops.pki role.
.TP
.B \fBxconsole\fP
Enable log output to \fB/dev/xconsole\fP\&. The \fBrsyslogd\fP daemon needs to run
in privileged mode, or additional steps need to be taken to allow access to
the \fB/dev/xconsole\fP by the \fBrsyslogd\fP unprivileged user.
.TP
.B \fB!mark\fP
Disable the periodic \fB\-\- MARK \-\-\fP messages in the logs, by default they
will be emitted every hour.
.TP
.B \fB!news\fP
Disable storage of the \fBnews.*\fP logs to separate log files.
.UNINDENT
.SS rsyslog__forward
.sp
The \fBrsyslog__forward\fP, \fBrsyslog__group_forward\fP and
\fBrsyslog__host_forward\fP variables are lists used to define forwarding rules
for \fBrsyslog\fP\&. Because the daemon configuration is ordered, the forward
statements should be set in a specific place in the configuration. You can of
course define your own forwarding rules instead of using these specific
variables, if you wish.
.sp
You can check \fI\%the rsyslog remote forward documentation\fP <\fBhttp://www.rsyslog.com/sending-messages-to-a-remote-syslog-server/\fP> to see
how to forward logs to other hosts. Each configuration entry should be
specified in a separate YAML list element. Some examples:
.sp
Forward all logs over UDP to remote log server:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__forward:
  \- \(aq*.* @logs.example.org\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Forward logs to different hosts over TCP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__forward:
  \- \(aqmail.* @@mail\-logs.example.org\(aq
  \- \(aq*.*;mail.none @@no\-mail\-logs.example.org\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Forward logs over TCP with TLS encryption using default configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Enable TLS encryption
rsyslog__capabilities: [ \(aqtls\(aq ]

# Forward logs over TLS
rsyslog__forward: [ \(aq*.* @@logs.example.org:6514\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS rsyslog__rules
.sp
The \fBrsyslog\fP configuration is defined in YAML dictionaries. The role uses
a simple set of keys and values to allow conditional activation or deactivation
of parts of the \fBrsyslogd\fP configuration. Each configuration section will be
defined in a separate file located in \fB/etc/rsyslog.d/\fP directory. List of
known parameters:
.INDENT 0.0
.TP
.B \fBdivert\fP
Optional, boolean. If specified and \fBTrue\fP, \fBdebops.rsyslog\fP will use the
\fBdpkg\-divert\fP command to move specified originaL configuration file out of
the way before generating the configuration from a template. This parameter
can be used to modify the \fBrsyslogd\fP configuration provided by the system
packages. It should only be used with the \fBfilename\fP parameter, otherwise
there might be unforeseen consequences.
.TP
.B \fBdivert_to\fP
Optional. If the \fBdivert\fP parameter is enabled, using this parameter you can
specify the filename to divert the file to. The diversion will be confined to
\fB/etc/rsyslog.d/\fP directory. This can be used to change the order of the
configuration files if needed.
.TP
.B \fBfilename\fP
Optional. Full name of the file in which to store the given configuration. If
not specified, \fBdebops.rsyslog\fP will generate a filename based on a set of
alternative parameters.
.TP
.B \fBtype\fP
Optional. Specify the type of the configuration a given entry defines. This
will be mapped to \fBrsyslog__weight_map\fP variable to a "weight" number
which will determine ordering of the configuration files in
\fB/etc/rsyslog.d/\fP\&.
.TP
.B \fBname\fP
Optional. Specify custom name of the configuration file, appended to the
"weight" number.
.TP
.B \fBsuffix\fP
A custom "extension" added after the dot to the generated filename; different
suffixes are included in different parts of the configuration. If not
specified, \fB\&.conf\fP will be used by default.
.TP
.B \fBsections\fP
Optional. This is a list of YAML dictionaries with configuration definition
which should be included in the given file. If this option is present, some
of the known parameters on the main level are ignored, and only configuration
in the \fBsections\fP list will be set in the configuration file.
.UNINDENT
.sp
The parameters below can be used in the main list or in the \fBsections\fP list:
.INDENT 0.0
.TP
.B \fBcomment\fP
Optional. A comment added at the beginning of the file.
.TP
.B \fBoptions\fP
Required. YAML text block which contains the \fBrsyslogd\fP configuration
.TP
.B \fBstate\fP
Optional. Either \fBpresent\fP or \fBabsent\fP\&. If undefined or \fBpresent\fP
a given configuration file or configuration section will be present, if
\fBabsent\fP, given configuration file or section will be removed. This
parameter can be used to conditionally enable or disable parts of the
configuration.
.UNINDENT
.sp
You can see many examples of the rules in \fBdefaults/main.yml\fP file of the
\fBdebops.rsyslog\fP role.
.SS rsyslog__conf_additional_templates
.sp
This list defines additional rsyslog templates.
.sp
Each additional template can have following parameters, some of them are
mandatory.
.INDENT 0.0
.TP
.B \fBname\(ga\fP
Name of the template. Required.
.TP
.B \fBcomment\fP
Comment to the template, which you want to see on the top of the
template file. Optional.
.TP
.B \fBoptions\fP
Text block with value mapping specified in the template format, check
rsyslog documentation or examples if not sure about syntax. Required.
.TP
.B \fBstate\fP
If this parameter is defined and \fBabsent\fP, template file will be removed
from the rsyslog configuration. Optional.
.UNINDENT
.sp
Example of a template definition:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__conf_additional_templates:
  \- name: "RemoteServiceNewsLog"
    comment: "Very interesting news!"
    options: |
      type="string"
      string="/var/log/remote/services/news/news.log"
.ft P
.fi
.UNINDENT
.UNINDENT
.SH UNPRIVILEGED SYSLOG AND ENCRYPTED CONNECTIONS
.sp
The \fBrsyslog\fP daemon can be used in a privileged or an unprivileged mode. In
a privileged mode the daemon is run on the \fBroot\fP account, has access to all
required files, sockets, etc. In the unprivileged mode, \fBrsyslog\fP daemon is
started in a privileged mode first, opens required sockets/ports and then drops
all of its privileges and supplementary UNIX groups.
.sp
The \fBdebops.rsyslog\fP role allows you to select which mode is used by
configuring the \fBrsyslog__unprivileged\fP boolean variable. By default, to
preserve original configuration, the role enables unprivileged mode on Ubuntu
hosts, leaving the configuration privileged on Debian hosts.
.sp
The unprivileged operation places certain restrictions on the system
configuration. In particular, the \fBrsyslog\fP process only uses its primary
system group, dropping any additional groups the user is in. This means, that
using TLS with the default configuration maintained by debops.pki role
becomes problematic \- unprivileged \fBrsyslog\fP process uses only its own
primary group, so it cannot access private keys to allow encrypted connections.
.sp
There are multiple solutions to this problem, which you can use. Each one has
pros and cons, and you should evaluate the selected method in a development
environment before implementing it in production to avoid issues.
.SS Run the daemon in privileged mode
.sp
This method is the default on Debian hosts. Ubuntu hosts use the unprivileged
mode by default, and reverting to the privileged mode should work, but that
hasn\(aqt been evaluated yet.
.sp
The daemon will be run with the \fBroot\fP permissions, and there shouldn\(aqt be
any issues with file access. Enabling TLS connections should work out of the
box. On the downside, an externally accessible service is running with \fBroot\fP
permissions, so you should be careful what hosts have access to it, this is
controlled using the firewall.
.sp
To enable this mode, set the following in the Ansible inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__unprivileged: False
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will enforce the privileged operation.
.SS Grant access to private keys by additional groups
.sp
The debops.pki role that maintains the DebOps X.509 infrastructure, allows
you to specify additional system groups, which should have access to the
private keys. This should be configured before the role creates the private
keys, because the permissions are not enforced afterwards \- this means that you
will need to recreate the private keys and certificates, or update the
permissions manually. Additional permissions are granted using the filesystem
ACL support.
.sp
To enable \fBrsyslog\fP to get access to the private keys in unprivileged mode by
the \fBsyslog\fP system groups, configure in the Ansible inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Ensure that needed system group is present
pki_private_groups_present:
  \- name: \(aqsyslog\(aq
    system: True

# Add custom ACL groups to private files and directories for all PKI realms
pki_private_dir_acl_groups:  [ \(aqsyslog\(aq ]
pki_private_file_acl_groups: [ \(aqsyslog\(aq ]

# Or, add custom ACL groups to private files only in default PKI realm
pki_default_realms:
  \- name: \(aqdomain\(aq
    acme: False
    private_dir_acl_groups:  [ \(aqsyslog\(aq ]
    private_file_acl_groups: [ \(aqsyslog\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After the PKI realm is recreated, you can check the result using command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
root@logs:~# getfacl /etc/pki/realms/domain/private
root@logs:~# getfacl /etc/pki/realms/domain/private/key.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should see the \fBsyslog\fP entry on the list of groups that can access the
respective files and directories. When the \fBrsyslog\fP process is restarted, it
should be able to access the private keys without issues. To enable the
unprivileged mode on Debian hosts, you might want to enforce it through the
Ansible inventory. Here it is, with example log forwarding to remote host with
TCP over TLS:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Enable unprivileged operation
rsyslog__unprivileged: True

# Enable TLS support
rsyslog__capabilities: [ \(aqtls\(aq ]

# Forward logs over encrypted TCP connection
rsyslog__forward: [ \(aq*.* @@logs.{{ ansible_domain }}:6514\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Create custom PKI realm for syslog
.sp
The debops.pki role allows you to create multiple PKI realms with different
purposes and configuration. If you don\(aqt want to modify and existing
infrastructure in place, creating a separate internal realm just for syslog
might be an easy alternative.
.sp
To create new PKI realm, add this to the Ansible inventory for all involved
hosts:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Ensure that needed system group is present
pki_private_groups_present:
  \- name: \(aqsyslog\(aq
    system: True

# Create custom realm for syslog
pki_realms:
  \- name: \(aqsyslog\(aq
    acme: False
    private_dir_group:  \(aqsyslog\(aq
    private_file_group: \(aqsyslog\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When the new PKI realm is created, the private directory and files inside
should be owned by the \fBsyslog\fP group. This should ensure that the
\fBrsyslog\fP daemon in the unprivileged mode, running as \fBsyslog\fP user, should
have access to them. The certificates should be signed by existing
debops.pki Certificate Authority, so they should be trusted by all hosts in
the cluster.
.sp
When the new PKI realm is ready, you can tell \fBdebops.rsyslog\fP role to use it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Enable unprivileged operation
rsyslog__unprivileged: True

# Enable TLS support
rsyslog__capabilities: [ \(aqtls\(aq ]

# Change the default PKI realm used by rsyslog
rsyslog__pki_realm: \(aqsyslog\(aq

# Forward logs over encrypted TCP connection
rsyslog__forward: [ \(aq*.* @@logs.{{ ansible_domain }}:6514\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When the new configuration is applied, you should see in the \fBrsyslog\fP
configuration files that the daemon is using the correct private key and
certificate.
.SS Testing encrypted connections
.sp
To make sure that the logs are sent over an encrypted connection, you can check
the traffic using the \fBtshark\fP command. On the receiving server, run the
command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
root@logs:~# tshark \-i eth0 \-f "dst port 514 or dst port 6514" \e
             \-d tcp.port==514,syslog \-d tcp.port==6514,syslog
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will output packets that are sent to TCP ports 514 (plaintext traffic) and
6514 (TLS traffic). Afterwards, on remote hosts try sending some test log
messages:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
user@host:~$ logger Test log message, please ignore
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the connection is not encrypted, you should see something similar to this
(notice the unencrypted contents of the packet):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
9 132.751792 192.0.2.2 \-> 192.0.2.1 Syslog 133 USER.NOTICE: May 16 14:06:05 host user: Test log message, please ignore\en
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the connection is encrypted, output should look similar to this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
9 132.751792 192.0.2.2 \-> 192.0.2.1 Syslog 164 \e027\e003\e003\e000]\e000\e000\e000\e000\e000\e000\e000\e037\e257\e301,\e030\e365\e311\e324\e023qR9\eb\e352\e203\e256\e306\e260T\e023\e022\e016g\e271\e220\e325\e031\e250\e326\e323\e0045\e3549\e270\e277>\e205\e301\e256\e325\e234\e246\etzt\e333\e255\e002\e006K"\e254\e334\e021wB1\e353\ef\e356,u\e344\e220\e207d\e024o\e305\e234\eb\e201\e003Js[\e2533\e261\e207\e231?k\e230J
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Of course, the contents of the logs should appear normally in the log files,
for example in \fB/var/log/remote/hosts/host/syslog\fP you should see:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
May 16 14:06:05 host user: Test log message, please ignore
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
