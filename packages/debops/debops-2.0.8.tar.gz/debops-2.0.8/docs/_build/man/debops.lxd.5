.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.LXD" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.lxd \- Configure and manage LXD service using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%Linux Containers\fP <\fBhttps://en.wikipedia.org/wiki/LXC\fP> or LXC provide a way to partition existing Linux hosts
into separate environments using Linux cgroups, namespace isolation, POSIX
capabilities and chrooted filesystems.
.sp
\fI\%LXD\fP <\fBhttps://linuxcontainers.org/lxd/introduction/\fP>, or a Linux Container Daemon, is a service written in Go which provides
a REST API and CLI interface for Linux Container management.
.sp
The \fBdebops.lxd\fP Ansible role can be used to install and configure the LXD
service on a Debian or Ubuntu hosts. The role will use the debops.golang
role to install the \fBlxd\fP and \fBlxc\fP binaries from upstream on
Debian hosts.
.SH GETTING STARTED
.SS LXD installation details
.sp
At the time of writing this role (December 2019) LXD was not available natively
in Debian. \fI\%Packaging efforts are ongoing\fP <\fBhttps://bugs.debian.org/cgi-bin/bugreport.cgi?bug=768073\fP>, however there\(aqs no telling if LXD
will be included in the next Debian release (Bullseye). The upstream developers
\fI\%suggest installation on Debian via Snap\fP <\fBhttps://stgraber.org/2017/01/18/lxd-on-debian/\fP>, however this brings its own set of
issues which are offtopic here.
.sp
Instead, on Debian hosts the debops.lxd role utilizes the
debops.golang role to install the \fBlxd\fP and \fBlxc\fP
binaries from upstream \fBgit\fP repository by compiling them from source.
The role will configure the rest of the needed infrastructure
(\fBsystemd\fP unit files, \fBlogrotate\fP and \fBsysctl\fP
configuration, POSIX groups, log directory, etc.) so that the LXD service
should work out of the box on Debian without the need of a Snap installation.
.sp
The debops.golang configuration for building and installing LXD is
defined in the \fBlxd__golang__dependent_packages\fP variable.
.sp
Due to the build dependency on the \fBlxc\-dev\fP APT package, which pulls the
\fBlxc\fP APT package automatically, the debops.lxc role and its
dependencies will be used to configure the LXC environment. The \fBlxcbr0\fP
network brige will be automatically disabled in this case.
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Merge commits in the \fI\%lxc/lxd\fP <\fBhttps://github.com/lxc/lxd\fP> GitHub repository might be signed
with the \fI\%GPG key issued by GitHub\fP <\fBhttps://help.github.com/articles/about-gpg/\fP>, used for \fI\%signing commits done in the web
interface\fP <\fBhttps://security.stackexchange.com/a/173494\fP>\&. It has to be done, because tagged LXD releases \fI\%have problems
with their dependency chains\fP <\fBhttps://github.com/lxc/lxd/issues/8293\fP> and due to that the debops.lxd role
relies on stable branches in the LXD repository. The trust is limited to the
\fB_golang\fP UNIX account and might have an impact for any Go applications
built in that specific environment.
.UNINDENT
.UNINDENT
.SS Example inventory
.sp
To enable LXD support on a host, it needs to be added to the
\fB[debops_service_lxd]\fP Ansible inventory group:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_all_hosts:children]
lxd_hosts
lxd_containers

[debops_service_lxd:children]
lxd_hosts

[lxd_hosts]
lxd\-host    ansible_host=lxd\-host.example.org

[lxd_containers]
webserver   ansible_host=webserver.example.org
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default, containers will use the \fBlxdbr0\fP bridge managed by the LXD
service, with their own internal \fBlxd\fP subdomain. You can use the
debops.ifupdown Ansible role to configure additional network bridges on
the LXD host, if you want to attach the containers to the public network.
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.lxd\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage LXD service
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_service_lxd\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: resolvconf
      tags: [ \(aqrole::resolvconf\(aq, \(aqskip::resolvconf\(aq ]
      resolvconf__enabled: True

    \- role: root_account
      tags: [ \(aqrole::root_account\(aq, \(aqskip::root_account\(aq ]

    \- role: keyring
      tags: [ \(aqrole::keyring\(aq, \(aqskip::keyring\(aq, \(aqrole::golang\(aq ]
      keyring__dependent_gpg_user: \(aq{{ golang__keyring__dependent_gpg_user }}\(aq
      keyring__dependent_gpg_keys:
        \- \(aq{{ golang__keyring__dependent_gpg_keys }}\(aq
      golang__dependent_packages:
        \- \(aq{{ lxd__golang__dependent_packages }}\(aq

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ golang__apt_preferences__dependent_list }}\(aq
        \- \(aq{{ lxc__apt_preferences__dependent_list }}\(aq

    \- role: golang
      tags: [ \(aqrole::golang\(aq, \(aqskip::golang\(aq ]
      golang__dependent_packages:
        \- \(aq{{ lxd__golang__dependent_packages }}\(aq

    \- role: logrotate
      tags: [ \(aqrole::logrotate\(aq, \(aqskip::logrotate\(aq ]
      logrotate__dependent_config:
        \- \(aq{{ lxd__logrotate__dependent_config }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ lxc__ferm__dependent_rules }}\(aq

    \- role: python
      tags: [ \(aqrole::python\(aq, \(aqskip::python\(aq, \(aqrole::lxc\(aq ]
      python__dependent_packages3:
        \- \(aq{{ lxc__python__dependent_packages3 }}\(aq
      python__dependent_packages2:
        \- \(aq{{ lxc__python__dependent_packages2 }}\(aq

    \- role: sysctl
      tags: [ \(aqrole::sysctl\(aq, \(aqskip::sysctl\(aq ]
      sysctl__dependent_parameters:
        \- \(aq{{ lxc__sysctl__dependent_parameters }}\(aq
        \- \(aq{{ lxd__sysctl__dependent_parameters }}\(aq

    \- role: lxc
      tags: [ \(aqrole::lxc\(aq, \(aqskip::lxc\(aq ]

    \- role: lxd
      tags: [ \(aqrole::lxd\(aq, \(aqskip::lxd\(aq ]

# If a host has \(aqdebops.dnsmasq\(aq or \(aqdebops.unbound\(aq roles configured, execute
# its playbook in case that configuration applied by the \(aqlxd\(aq role needs to be
# applied to \(aqdnsmasq\(aq or \(aqunbound\(aq services. This should ensure that the
# \(aq*.lxd\(aq subdomain for internal LXD containers is resolvable on the LXD host.
#
# If the host is not in the Ansible inventory groups required by the
# \(aqdnsmasq.yml\(aq or the \(aqunbound.yml\(aq playbooks, this should not impact
# anything.

\- import_playbook: \(aqdnsmasq.yml\(aq

\- import_playbook: \(aqunbound.yml\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after a host was first
configured to speed up playbook execution, when you are sure that most of the
configuration is already in the desired state.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::lxd\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.TP
.B \fBrole::lxd:init\fP
Re\-apply the LXD preseeding configuration. Requires the
\fBlxd__init_preseed\fP variable to be set to \fBTrue\fP to be effective.
.UNINDENT
.SS Other resources
.sp
List of other useful resources related to the \fBdebops.lxd\fP Ansible role:
.INDENT 0.0
.IP \(bu 2
Manual pages: \fI\%lxc(7)\fP <\fBhttps://manpages.debian.org/lxc(7)\fP>
.IP \(bu 2
\fI\%LXD\fP <\fBhttps://wiki.debian.org/LXD\fP> page in Debian Wiki, with packaging information and current progress
.IP \(bu 2
\fI\%LXD\fP <\fBhttps://wiki.archlinux.org/index.php/LXD\fP> page in Arch Linux Wiki
.IP \(bu 2
\fI\%LXD\fP <\fBhttps://help.ubuntu.com/lts/serverguide/lxd.html\fP> page in Ubuntu Wiki
.IP \(bu 2
\fI\%LXD 2.0 blog post series\fP <\fBhttps://stgraber.org/2016/03/11/lxd-2-0-blog-post-series-012/\fP> written by St√©phane Graber
.IP \(bu 2
\fI\%LXD documentation page\fP <\fBhttps://lxd.readthedocs.io/en/latest/\fP>
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of the \fBdebops.lxd\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS lxd__preseed
.sp
The \fBlxd__*_preseed\fP variables define a set of LXD "preseed" configuration
entries which are merged into one YAML document and passed to the \fBlxd
init \-\-preseed\fP command via stdin on first installation. These configuration
entries can be used to configure various aspects of the LXD environment, like
network interfaces, storage pools, clustered operation, profiles, and so on.
.sp
You can read the \fI\%Non\-interactive configuration via preseed YAML\fP <\fBhttps://lxd.readthedocs.io/en/latest/preseed/\fP> LXD
documentation page for more details about the preseeding process.
.SS Examples
.sp
See the \fBlxd__default_preseed\fP for the default configuration entries
used to initialize the LXD service.
.sp
To see the current LXD configuration on a host, you can run the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
lxd init \-\-dump
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will print out the configuration in a YAML format which can then be split
into separate configuration entires and put under the \fBseed\fP parameters.
.sp
To re\-apply the preseed configuration via Ansible you can execute the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
debops service/lxd \-l <host> \-t role::lxd:init \-e \(aqlxd__init_preseed=true\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will re\-run the command and apply the current preseed configuration again.
.SS Syntax
.sp
The preseed is defined using lists of YAML dictionaries, each dictionary
defines a configuration entry using specific paraneters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. A string that identifies a configuration entry, not used otherwise.
Multiple configuration entries with the same \fBname\fP parameter are merged
together, overriding the \fBseed\fP parameter each time \- this can be used to
replace specific configuration entry in the Ansible inventory.
.TP
.B \fBseed\fP
Required. YAML dictionary with the contents of the preseed configuration.
After the final list of configuration entries is generated, contents of the
\fBseed\fP parameters are combined recursively using the Ansible \fBcombine()\fP
filter. This can be used to override specific YAML keys in the preseed via
different configuration entries.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given configuration entry will
be included in the final preseed document. If \fBabsent\fP, a given
configuration entry will not be included in the YAML document. If \fBignore\fP,
a given configuration entry will not be evaluated by the role during
execution.
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
