.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.REDIS_SERVER" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.redis_server \- Manage Redis Server instances using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fI\%Redis\fP <\fBhttps://redis.io/\fP> is an in\-memory key/value store, usable as
a persistent database, cache or a message broker.
.sp
The \fBdebops.redis_server\fP Ansible role can be used to install and manage
Redis on Debian/Ubuntu hosts. Role supports management of multiple Redis
instances on a single host and is designed to cope with modifications done to
Redis configuration files at runtime.
.SH GETTING STARTED
.SS Default configuration
.sp
At the initial deployment, the role will disable the default Redis instance
configuration defined by the distribution packages. Next, a new,
\fBsystemd\fP\-based instance will be created with the configuration like
TCP ports and UNIX socket the same as the default Redis Server setup. This
should allow easy creation of additional Redis instances when necessary.
.SS Access control and autorization
.sp
The debops.redis_server role configures Redis Server instances with
a randomly generated password, the same for all instances in the same domain.
The password is stored in the \fBsecret/\fP directory on the Ansible
Controller (see debops.secret role for details).
.sp
The Redis password can be accessed on the Redis hosts using the
\fBredis\-password\fP script. Only the users that have read access to the
\fBredis.conf\fP configuration files will be able to use it; the role sets up
an auxiliary \fBredis\-auth\fP UNIX system group to allow members of this group
access to the configuration. The script accepts an instance name as an
argument; if not specified the \fBmain\fP instance will be checked and the
password will be retrieved from the configuration file.
.sp
To access the default Redis Server instance via the \fBredis\-cli\fP
interface, you can use the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
redis\-cli \-a $(redis\-password)
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Redis password is also exposed in the Ansible local facts, so that other
Ansible roles can use it to configure access to Redis by other applications.
Run the \fB/etc/ansible/facts.d/redis_server.fact\fP script on the remote
host to see the local fact structure and contents.
.SS Example inventory
.sp
To enable Redis Server configuration on a host, it needs to be added to
a specific Ansible inventory group:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_service_redis_server]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
By default Redis listens only for local connections on the \fBloopback\fP network
interface. If you want to set up a cluster of Redis instances on different
hosts that talk to each other, you should configure the default instance to
bind to all network interfaces, as well as open the TCP ports in the firewall:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Listen to TCP connections on all interfaces
redis_server__bind: [ \(aq0.0.0.0\(aq, \(aq::\(aq ]

# Allow connections to Redis from specific subnets
redis_server__allow: [ \(aq192.0.2.0/24\(aq, \(aq2001:db8::/32\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.redis_server\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage Redis server
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_service_redis_server\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  pre_tasks:

    \- import_role:
        name: \(aqsysfs\(aq
        tasks_from: \(aqmain_env\(aq
      tags: [ \(aqrole::sysfs\(aq, \(aqrole::secret\(aq ]

    \- import_role:
        name: \(aqredis_server\(aq
        tasks_from: \(aqmain_env\(aq
      tags: [ \(aqrole::redis_server\(aq, \(aqrole::ferm\(aq ]

  roles:

    \- role: secret
      tags: [ \(aqrole::secret\(aq, \(aqrole::sysfs\(aq ]
      secret__directories:
        \- \(aq{{ sysfs__secret__directories | d([]) }}\(aq

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ redis_server__apt_preferences__dependent_list }}\(aq

    \- role: etc_services
      tags: [ \(aqrole::etc_services\(aq, \(aqskip::etc_services\(aq ]
      etc_services__dependent_list:
        \- \(aq{{ redis_server__etc_services__dependent_list }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ redis_server__ferm__dependent_rules }}\(aq

    \- role: sysctl
      tags: [ \(aqrole::sysctl\(aq, \(aqskip::sysctl\(aq ]
      sysctl__dependent_parameters:
        \- \(aq{{ redis_server__sysctl__dependent_parameters }}\(aq

    \- role: sysfs
      tags: [ \(aqrole::sysfs\(aq, \(aqskip::sysfs\(aq ]
      sysfs__dependent_attributes:
        \- \(aq{{ redis_server__sysfs__dependent_attributes }}\(aq

    \- role: python
      tags: [ \(aqrole::python\(aq, \(aqskip::python\(aq, \(aqrole::redis_server\(aq ]
      python__dependent_packages3:
        \- \(aq{{ redis_server__python__dependent_packages3 }}\(aq
      python__dependent_packages2:
        \- \(aq{{ redis_server__python__dependent_packages2 }}\(aq

    \- role: redis_server
      tags: [ \(aqrole::redis_server\(aq, \(aqskip::redis_server\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after a host was first
configured to speed up playbook execution, when you are sure that most of the
configuration is already in the desired state.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::redis_server\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.UNINDENT
.SS Other resources
.sp
List of other useful resources related to the \fBdebops.redis_server\fP Ansible
role:
.INDENT 0.0
.IP \(bu 2
Official \fI\%Redis documentation\fP <\fBhttps://redis.io/documentation\fP>
.IP \(bu 2
\fI\%Redis configuration file format\fP <\fBhttps://redis.io/topics/config\fP>
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.redis_server\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS redis_server__instances
.sp
The role can manage multiple Redis Server instances on a single host via the
\fBredis_server__*_instances\fP default variables. Each variable is a list of
YAML dictionaries, each dictionary defines an instance of Redis managed by
\fBsystemd\fP unit template.
.sp
Configuration specified in the instance YAML dictionary is parsed by the role
and used to generate the final configuration which is then used to manage the
Redis instances (see redis_server__ref_config_pipeline).
.sp
Multiple dictionaries with the same \fBname\fP parameter will be merged together;
this can be used to override previously defined instance configuration without
copying everything to the Ansible inventory.
.SS Examples
.sp
Define multiple Redis Server instances:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Configure all Redis instances to listen for network connections
redis_server__bind: [ \(aq0.0.0.0\(aq, \(aq::\(aq ]

# Allow connections from specific subnets to all Redis instances
redis_server__allow: [ \(aq192.0.2.0/24\(aq, \(aq2001:db8::/32\(aq ]

# Define minimal parameters for additional Redis Server instances with
# autogenerated configuration
redis_server__instances:

  \- name: \(aqsecond\(aq
    port: \(aq6380\(aq

  \- name: \(aqthird\(aq
    port: \(aq6381\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Modify existing instance configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Change the default bind of the specific Redis Server instance \(aqmain\(aq to
# listen on all network interfaces and configure it as a slave to another Redis
# server
redis_server__instances:

  \- name: \(aqmain\(aq
    bind: [ \(aq0.0.0.0\(aq, \(aq::\(aq ]
    master_host: \(aqredis.example.org\(aq
    master_port: \(aq6379\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax
.sp
Each entry can contain specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. THe name of a given Redis instance. This parameter is used as an
anchor for merging of multiple YAML dictionaries that specify Redis instances
together.
.sp
The instance name \fBmain\fP is significant and used in Ansible local fact
script and the password script to denote the "default" Redis instance if none
is specified.
.TP
.B \fBport\fP
Required. The TCP port on which a given instance listens for network
connections. Only ports defined in the instance list will be included in the
automatically managed firewall configuration.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given Redis instance will be
created or managed by the role. If \fBabsent\fP, a given instance will be
removed by the role. If \fBignore\fP, a given instance entry will not be
included in the configuration.
.TP
.B \fBpidfile\fP
Optional. Absolute path to a PID file of a given Redis instance. If not
specified, the role will generate one based on the instance name.
.TP
.B \fBunixsocket\fP
Optional. Absolute path to an UNIX socket file of a given Redis instance. If
not specified, the role will generate one based on the instance name.
.TP
.B \fBbind\fP
Optional. A string or a YAML list of IP addresses to which a given Redis
instance should bind to to listen for network connections. If not specified,
the instance will bind on the IP addresses specified in the
\fBredis_server__bind\fP variable, by default \fBlocalhost\fP\&.
.TP
.B \fBdbfilename\fP
Optional. Name of the Redis database file which will contain the persisten
storage, stored in the \fB/var/lib/redis/\fP directory. If not specified,
the role will generate the name based on the instance name.
.TP
.B \fBlogfile\fP
Optional. Absolute path to a log file of a given Redis instance. If not
specified, the role will generate one based on the instance name.
.TP
.B \fBsyslog_ident\fP
Optional. A short string that identifies a given Redis instance in the syslog
stream. If not specified, the role will generate one based on the instance
name.
.TP
.B \fBrequirepass\fP
Optional. Plaintext password which will be required by Redis to allow certain
operations. If not specified, the value of the
\fBredis_server__auth_password\fP will be used automatically.
.TP
.B \fBsystemd_override\fP
Optional. An YAML text block that contains \fBsystemd\fP unit
configuration entries. This can be used to override the configuration of
a Redis instance managed by \fBsystemd\fP\&.
.TP
.B \fBmaster_host\fP and \fBmaster_port\fP
Optional. The FQDN address of the host with the Redis master instance, and
its TCP port. If these parameters are set, a given Redis instance will be
configured as a slave of the specified Redis master on the initial
configuration, but not subsequent ones.
.UNINDENT
.sp
Other configuration options for a given Redis instance should be specified in
the \fBredis_server__*_configuration\fP variables. Some of the instance
parameters like \fBport\fP are used in other parts of the role and should be
overridden only on the list of instances.
.SS redis_server__configuration
.sp
The \fBredis_server__*_configuration\fP variables define the configuration of the
Redis Server instances. A Redis Server instance consists of a set of
configuration files in \fB/etc/redis/<instance>/\fP subdirectory, as well as
\fBsystemd\fP service template configuration.
See redis_server__ref_config_pipeline for more details.
.SS Examples
.sp
Define additional instance configuration:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Disable certain Redis commands in a specific Redis Server instance. This
# cannot be done in the instance parameters and needs to be done on the
# configuration level.
redis_server__configuration:

  \- name: \(aqmain\(aq
    options:

      \- appendonly: False

      \- \(aqauto\-aof\-rewrite\-percentage\(aq: 100
      \- \(aqauto\-aof\-rewrite\-min\-size\(aq: \(aq64mb\(aq

      \- name: \(aqrename\-command\(aq
        value:
          \- \(aqFLUSHDB ""\(aq
          \- \(aqFLUSHALL ""\(aq
          \- \(aqKEYS ""\(aq
          \- \(aqCONFIG ""\(aq
          \- \(aqPEXPIRE ""\(aq
          \- \(aqDEL ""\(aq
          \- \(aqCONFIG ""\(aq
          \- \(aqSHUTDOWN ""\(aq
          \- \(aqBGREWRITEAOF ""\(aq
          \- \(aqBGSAVE ""\(aq
          \- \(aqSAVE ""\(aq
          \- \(aqSPOP ""\(aq
          \- \(aqSREM ""\(aq
          \- \(aqRENAME ""\(aq
          \- \(aqDEBUG ""\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To replace options which are lists you have to reset them first:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Overwrite default snapshoting configuration.
redis_server__configuration:

  \- name: \(aqmain\(aq
    options:

      \- name: \(aqsave\(aq
        value: \(aq\(aq
        dynamic: True

      \- name: \(aqsave\(aq
        value:
          \- \(aq1200 1\(aq
        dynamic: True

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also remove some items from the list:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Remove single save command and add another one.
redis_server__configuration:

  \- name: \(aqmain\(aq
    options:

      \- name: \(aqsave\(aq
        value:
          \- \(aq90 1000\(aq
          \- name: \(aq60 10000\(aq
            state: \(aqabsent\(aq
        dynamic: True

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax
.sp
Each variable contains a list of YAML dictionaries, each dictionary defines
a Redis Server instance using specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of a given Redis Server instance, should be a short
alphanumeric string. This parameter is used as an anchor to merge multiple
instance entries together.
.TP
.B \fBport\fP
Required. The TCP port on which a given instance listens for network
connections.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given Redis Server instance will
be created and/or managed on a given host. If \fBabsent\fP, a given Redis
Server instance will be stopped and its configuration will be removed. If
\fBignore\fP, a given configuration entry will be ignored by the role during
the Ansible run; this can be used to conditionally enable or disable instance
options if needed.
.TP
.B \fBrequirepass\fP
Optional. Plaintext password which will be required by Redis to allow certain
operations.
.TP
.B \fBsystemd_override\fP
Optional. An YAML text block that contains \fBsystemd\fP unit
configuration entries. This can be used to override the configuration of
a Redis instance managed by \fBsystemd\fP\&.
.TP
.B \fBmaster_host\fP and \fBmaster_port\fP
Optional. The FQDN address of the host with the Redis master instance, and
its TCP port. If these parameters are set, a given Redis instance will be
configured as a slave of the specified Redis master on the initial
configuration, but not subsequent ones.
.TP
.B \fBoptions\fP
A list of configuration options for the Redis Server instance. The
\fBoptions\fP lists from multiple instance configuration entries are merged
together. Each element of the \fBoptions\fP list is a YAML dictionary with
specific parameters:
.INDENT 7.0
.TP
.B \fBname\fP
Redis Server parameter name. Parameter names containing hypens should be
quoted to avoid any issues with YAML parsing.
.TP
.B \fBvalue\fP
Redis Server parameter value. It can be a number, a string or a list of
strings. If a list is used, by default the configuration file will contain
multiple parameters with the same name and values specified on separate
lines. you can also use the Python \fBTrue\fP and \fBFalse\fP values to
represent booleans.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given parameter will be
present in the generated configuration. If \fBabsent\fP, a given parameter
will be removed from the configuration.
.TP
.B \fBdynamic\fP
Optional, bollean. If \fBTrue\fP, a given parameter will be marked as
a "dynamic" Redis configuration and will not be included in the static
configuration file. Instead, it will be applied dynamically via
a configuration script during deployment.
.TP
.B \fBmultiple\fP
Optional, boolean. If \fBFalse\fP, and the parameter is not dynamic, and it\(aqs
a list, the values will be concatenated into one string, separated by
spaces. This is required by some of the Redis Server configuration options,
for example \fBbind\fP\&.
.UNINDENT
.sp
If the \fBname\fP and \fBvalue\fP parameters are not present, each key of the
YAML dictionary will be interpreted as a separate Redis Server parameter.
This can be used as a shorthand to define Redis Server parameters, but for
more complicated parameters (dynamic, with custom requirements), you should
use the expanded form explained above.
.UNINDENT
.SH REDIS SERVER CONFIGURATION PIPELINE
.sp
The default Redis Server installation in Debian Jessie and Debian Stretch
supports only 1 instance of Redis per host. The pacakges in Debian Buster and
the \fBstretch\-backports\fP repository support multiple instances by using
a single \fB/etc/redis/redis\-<instance>.conf\fP configuration file per
a \fBsystemd\fP instance. However, due to the Redis modifying its own
configuration file on the fly, using a single \fBredis.conf\fP configuration
file does not work well with an Ansible\-based approach to configuration.
.sp
The solution to this problem implemented in debops.redis_server role is
usage of a separate \fB/etc/redis/<instance>/\fP directory for each Redis
Server instance. This allows usage of multiple configuration files and even
scripts for each Redis Server instance, with configuration applied dynamically
at runtime. The \fBredis.conf\fP configuration file is not touched directly
by Ansible, apart from ensuring that additional configuration file with
Ansible\-generated parameters is included at the end. This ensures
idempotency and allows Ansible and Redis to work together.
.SS Configuration variables
.sp
The debops.redis_server Ansible role exposes a set of default variables
that can be used to define and modify Redis configuration per instance.
Configuration defined in each one is merged together in the
\fBredis_server__combined_configuration\fP using a special filter plugin.
Multiple configuration entries defined in the format of the
redis_server__ref_configuration parameters are merged together,
therefore there\(aqs no need to copy everything to the Ansible inventory.
.sp
The variables are merged in the following order:
.INDENT 0.0
.IP \(bu 2
the \fBredis_server__default_base_options\fP and the
\fBredis_server__base_options\fP hold the default parameters applied to
all of the Redis Server instances on a particular host. These variables can
be used to override options applied to all instances when needed.
.IP \(bu 2
the \fBredis_server__default_instances\fP and the all/group/host variant of
the same variable are used to generate configuration for each instance, which
is then put in the configuration pipeline via the
\fBredis_server__default_configuration\fP variable. Each instance will
include the base options defined for all instances, and per\-instance
configuration like port, UNIX socket path, optional \fBsystemd\fP
overrides, etc.
.IP \(bu 2
the \fBredis_server__default_configuration\fP and the all/group/host
variants include the actual configuration used by the role to generate the
Redis Server configuration files, \fBsystemd\fP service configuration.
The variables are joined together in the
\fBredis_server__combined_configuration\fP variable which is used in
varius role tasks and templates. These variables can be used to override
per\-instance configuration if needed.
.UNINDENT
.SS Configuration file structure
.sp
The generated configuration file structure contains the following files:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/etc/redis
├── main/
│\ \  ├── ansible\-redis\-dynamic.conf*
│\ \  ├── ansible\-redis\-static.conf
│\ \  └── redis.conf
├── second/
│\ \  ├── ansible\-redis\-dynamic.conf*
│\ \  ├── ansible\-redis\-static.conf
│\ \  └── redis.conf
├── third/
│\ \  ├── ansible\-redis\-dynamic.conf*
│\ \  ├── ansible\-redis\-static.conf
│\ \  └── redis.conf
└── redis.conf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The \fBansible\-redis\-static.conf\fP files contain static configuration
options for each Redis Server instance. If any options there change, a given
instance is restarted.
.sp
The \fBansible\-redis\-dynamic.conf\fP files are Bash scripts which apply Redis
Server configuration dynamically at runtime, using the \fBCONFIG SET\fP commands
via the \fBredis\-cli\fP interface. The \fBCONFIG REWRITE\fP command is then
executed so that Redis can update its own configuration file; this way the
dynamic configuration is preserved between restarts.
.sp
The \fBredis.conf\fP configuration files are copies of the original
\fB/etc/redis/redis.conf\fP configuration file created when each instance is
initialized. The role assumes that Redis modifies these files dynamically and
doesn\(aqt touch them directly, apart from ensuring that an \fBinclude\fP line for
the \fBansible\-redis\-static.conf\fP is present and near the end of the file.
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
