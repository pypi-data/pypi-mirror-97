.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.SECRET" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.secret \- Manage sensitive data in the filesystem
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
\fBdebops.secret\fP role enables you to have a separate directory on the Ansible
Controller (different than the playbook directory and inventory directory)
which can be used as a handy "workspace" for other roles.
.sp
Some usage examples of this role in \fI\%DebOps\fP <\fBhttps://debops.org/\fP> include:
.INDENT 0.0
.IP \(bu 2
password lookups, either from current role, or using known location of
passwords from other roles, usually dependencies (for example
\fBdebops.mariadb\fP role can manage an user account in the database with
random password and other role can lookup that password to include in
a generated configuration file);
.IP \(bu 2
secure file storage, for example for application keys generated on remote
hosts (\fBdebops.boxbackup\fP role retrieves client keys for backup
purposes), for that reason secret directory should be protected by an
external means, for example encrypted filesystem (currently there is no
encryption provided by default);
.IP \(bu 2
secure workspace (\fBdebops.boxbackup\fP role, again, uses the secret directory
to create and manage Root CA for backup servers â€“ client and server
certificates are automatically downloaded to Ansible Controller, signed and
uploaded to destination hosts);
.IP \(bu 2
simple centralized backup (specific roles like \fBdebops.sshd\fP,
\fBdebops.pki\fP and \fBdebops.monkeysphere\fP have separate task lists that
are invoked by custom playbooks to allow backup and restoration of ssh host
keys and SSL certificates. Generated .tar.gz files are kept on Ansible
Controller in secret directory).
.UNINDENT
.SH GETTING STARTED
.sp
By default all you need to do to use the \fBdebops.secret\fP role is to
include it in your common playbook at the beginning:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
\- name: Example playbook
  hosts: all
  become: True

  roles:
    \- role: secret
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
That will allow all your roles in this and subsequent plays to access
the \fBsecret\fP variable and use it consistently.
.sp
Unfortunately, it doesn\(aqt work well when you use Ansible with \fB\-\-tags\fP
parameter, which might omit your common play, thus not setting \fBsecret*\fP
variables at all and changing your passwords to empty values, modifying config
files incorrectly, basically not honoring the idempotency principle.
.sp
The solution to that problem is to either include \fBdebops.secret\fP role in all
your plays (similar to the one above), or include it as a dependency in roles
that require it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
dependencies:
  \- role: secret
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will ensure that roles utilizing \fBsecret\fP variable will be able to
access it correctly and you don\(aqt need to remember to include
\fBdebops.secret\fP role in all your playbooks.
.SS Usage examples
.sp
Example password lookup with password written to a variable. You can define
this variable anywhere Ansible variables can be defined, but if you want to
give playbook users the ability to overwrite it in inventory, you should define
it in \fBrole/defaults/main.yml\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
mariadb__root_password: \(aq{{ lookup("password", secret + "/credentials/" +
                            ansible_fqdn + "/mariadb/root/password length=20") }}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When this variable is set in \fBrole/defaults/main.yml\fP, you can easily
overwrite it in your inventory, like this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
mariadb__root_password: \(aqcorrect horse battery staple\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You can also change the password directly in the secret directory, in this case
in \fBsecret/credentials/hostname/mysql/root/password\fP and Ansible should
update the password on the remote server (if the role is written to support
this).
.sp
Example file download task from remote host to Ansible controller, stored in
secret directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
\- name: Download file to secret directory
  fetch:
    src: \(aq/etc/fstab\(aq
    flat: True
    dest: \(aq{{ secret + "/storage/" + ansible_fqdn + "/etc/fstab" }}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example file upload task from Ansible Controller to remote host with file from
secret directory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
\- name: Copy file from secret directory
  copy:
    dest: \(aq/etc/fstab\(aq
    owner: \(aqroot\(aq
    group: \(aqroot\(aq
    mode: \(aq0644\(aq
    src: \(aq{{ secret + "/storage/ + ansible_fqdn + "/etc/fstab" }}"
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DETAILED GUIDES
.SS How local secrets work
.sp
Here\(aqs a default project directory layout kept in a git repository:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
~/Projects/
\(ga\-\- data\-center/
    |\-\- .git/
    \(ga\-\- ansible/
        |\-\- inventory/
        |   |\-\- group_vars/
        |   |\-\- host_vars/
        |   \(ga\-\- hosts
        |
        \(ga\-\- secret/
            |\-\- credentials/
            \(ga\-\- storage/
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If you use the \fBdebops\-padlock\fP script to create encrypted EncFS
storage for your secrets, directory layout will be slightly different:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
~/Projects/
\(ga\-\- data\-center/
    |\-\- .git/
    \(ga\-\- ansible/
        |\-\- .encfs.secret/        <\- encrypted secrets
        |   |\-\- U8dfMgfgg48vj/
        |   |\-\- fk5fkg5NN/
        |   \(ga\-\- padlock*          <\- unlock/lock script
        |
        |\-\- inventory/
        |   |\-\- group_vars/
        |   |\-\- host_vars/
        |   \(ga\-\- hosts
        |
        \(ga\-\- secret/               <\- plaintext secrets
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
While the project is "at rest", secrets are encrypted inside EncFS directory,
and they don\(aqt show up in the \fBsecret/\fP directory. When you use the
\fBdebops\fP script to run the playbook, the \fBpadlock\fP script
unlocks the encrypted directory and secrets are available again in the
\fBsecret/\fP directory for \fBansible\-playbook\fP to use.
.SS How to use LDAP variables
.sp
DebOps relies on the \fBldap_attr\fP and \fBldap_entry\fP Ansible modules to
perform LDAP management on local or remote LDAP servers. In various DebOps
roles, they are used to perform certain tasks in a shared environment.
.sp
Some of the above tasks require admin privileges on the LDAP server. To provide
access to it in a secure manner, \fBdebops.secret\fP role keeps a set of
variables meant to be used with these tasks.
.sp
For security reasons, LDAP\-related tasks should be delegated to \fBlocalhost\fP
(Ansible Controller) or the LDAP server itself. The host that runs these tasks
requires \fBpython\-ldap\fP library. Modules will access LDAP directly, without
using SSH redirection, so TLS encryption is strongly recommended. You should
also take care to not log these tasks to avoid leaking the LDAP administrator
password in logs.
.sp
Example usage of LDAP secret variables:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\- name: Create an entry in LDAP database
  ldap_entry:
    dn:          \(aq{{ secret__ldap_ou_people_dn }}\(aq
    objectClass: [ \(aqorganizationalUnit\(aq, \(aqtop\(aq ]
    state:       \(aqpresent\(aq
    server_uri:  \(aq{{ secret__ldap_server_uri }}\(aq
    start_tls:   \(aq{{ secret__ldap_start_tls }}\(aq
    bind_dn:     \(aq{{ secret__ldap_bind_dn }}\(aq
    bind_pw:     \(aq{{ secret__ldap_bind_pw }}\(aq
  become:        \(aq{{ secret__ldap_become }}\(aq
  delegate_to:   \(aq{{ secret__ldap_delegate_to }}\(aq
  no_log: \(aq{{ secret__no_log | bool }}\(aq

\- name: Add attribute to an LDAP entry
  ldap_attr:
    dn:         \(aquid=user,{{ secret__ldap_ou_people_dn }}\(aq
    name:       \(aq{{ item.key }}\(aq
    values:     \(aq{{ item.value }}\(aq
    state:      \(aqexact\(aq
    server_uri: \(aq{{ secret__ldap_server_uri }}\(aq
    start_tls:  \(aq{{ secret__ldap_start_tls }}\(aq
    bind_dn:    \(aq{{ secret__ldap_bind_dn }}\(aq
    bind_pw:    \(aq{{ secret__ldap_bind_pw }}\(aq
  become:       \(aq{{ secret__ldap_become }}\(aq
  delegate_to:  \(aq{{ secret__ldap_delegate_to }}\(aq
  with_dict:
    uid:          \(aq{{ user_username }}\(aq
    userPassword: \(aq{{ user_password }}\(aq
  no_log: \(aq{{ secret__no_log | bool }}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Of course for this to work, \fBdebops.secret\fP needs to be included in the
playbook, either as a role, or a role dependency. You can change the values of
\fBsecret__ldap_*\fP variables in inventory as you need.
.sp
If you use \fBdebops.slapd\fP role to configure an LDAP server, it will
automatically copy the admin account password to a location defined in
\fBsecret__ldap_admin_password\fP variable to be accessed by the \fBdebops.secret\fP
role as needed.
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
