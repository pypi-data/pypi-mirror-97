.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.SYSTEM_USERS" "5" "Mar 03, 2021" "v2.0.8" "DebOps"
.SH NAME
debops.system_users \- Manage admin accounts using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
The \fBdebops.system_users\fP Ansible role can be used to manage local user
accounts and groups. The role allows for certain operations inside of the home
directories, like configuration of the mail forwarding, SSH public keys or
automatic deployment of user configuration files (dotfiles).
.sp
This role is designed to manage the local system administrator accounts, and
its behaviour will change if the support for LDAP is configured on a host. You
can also use the debops.users role which provides similar functionality,
but is designed to manage regular user accounts and application accounts,
without special modifications related to LDAP support.
.SH GETTING STARTED
.SS Support for \fBlibuser\fP library
.sp
The role uses the \fBlibuser\fP library, supported by the \fBgroup\fP and \fBuser\fP
Ansible modules, to manage the UNIX groups and accounts present on the hosts.
The library is used to ensure that the groups and accounts created locally on
the host that uses the LDAP directory as the user/group database have UID/GID
values in the correct ranges, thus avoiding collisions with the LDAP directory
UID/GID ranges. Without the \fBlibuser\fP these local groups and accounts would
be created in the LDAP UID/GID ranges, since the normal UNIX user management
tools pick the next UID/GID based on the contents of the \fBgetent\fP output, and
not from the local user and group databases.
.sp
This behaviour can be controlled using the \fBitem.local\fP parameter, which by
default is enabled and shouldn\(aqt be specified directly unless you want to
override the use of the \fBlibuser\fP library for some reason. Due to issues with
the Ansible modules, additional UNIX groups are managed using normal UNIX tools
instead of their \fBlibuser\fP equivalents.
.SS LDAP integration
.sp
The role checks if the LDAP support has been configured on a host, via the
debops.ldap\&. If LDAP support is enabled, local UNIX groups, local UNIX
accounts and their home directory names will have the \fB_\fP prefix prepended to
them, to avoid clashes with the LDAP\-based groups and accounts. This is
controlled by the \fBsystem_users__prefix\fP variable.
.sp
LDAP support also affects the default home directory paths. By default home
directories will be put in \fB/home\fP; with LDAP support enabled that will
change to \fB/var/local\fP, to avoid clashes with remote filesystems that
might be mounted at the \fB/home\fP path, for example via NFS.
.SS Example inventory
.sp
The \fBdebops.system_users\fP Ansible role is included by default in the
\fBcommon.yml\fP DebOps playbook; you don\(aqt need to do anything to have it
executed. It\(aqs also included in the \fBbootstrap.yml\fP and
\fBbootstrap\-ldap.yml\fP playbooks to create sysadmin accounts during host
bootstrapping.
.sp
If you donâ€™t want to let \fBdebops.system_users\fP manage user accounts, you can
disable it with the following setting in your inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
system_users__enabled: False
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.system_users\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage local users and groups
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_all_hosts\(aq, \(aqdebops_service_system_users\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: libuser
      tags: [ \(aqrole::libuser\(aq, \(aqskip::libuser\(aq ]

    \- role: system_users
      tags: [ \(aqrole::system_users\(aq, \(aqskip::system_users\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after host is first
configured to speed up playbook execution, when you are sure that most of the
configuration has not been changed.
.sp
Common role tags:
.INDENT 0.0
.TP
.B \fBrole::system_users\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.TP
.B \fBskip::system_users\fP
Main role tag, should be used in the playbook to skip all of the role tasks.
.TP
.B \fBskip::check\fP
Used in specific tasks that might break in the Ansible \fB\-\-check\fP mode on
first run of the role on a host, but not subsequent runs. It can be used to
skip these tasks in such case.
.UNINDENT
.sp
You can see full list of available role tags by executing the command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
debops service/system_users \-\-list\-tags
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.system_users\fP default variables have more extensive
configuration than simple strings or lists, here you can find documentation and
examples for them.
.SS system_users__accounts
.sp
The \fBsystem_users__*_groups\fP and \fBsystem_users__*_accounts\fP variables
define the UNIX group and UNIX user accounts which should be managed by
Ansible. The distinctive names can be used to order the UNIX group creation
before the account creation; otherwise both variable sets use the same content.
.SS Examples
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
# Manage different system UNIX groups
system_users__groups:

  # A normal group
  \- name: \(aqgroup1\(aq
    user: False

  # A system group
  \- name: \(aqgroup1_sys\(aq
    system: True
    user: False

  # This group will be removed
  \- name: \(aqgroup_removed\(aq
    user: False
    state: \(aqabsent\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
# Manage system UNIX user accounts
system_users__accounts:

  # A basic account
  \- name: \(aquser1\(aq
    group: \(aquser1\(aq

  # More elaborate account with system administrator access and dotfiles
  \- name: \(aquser2\(aq
    group: \(aquser2\(aq
    admin: True
    shell: \(aq/bin/zsh\(aq
    dotfiles_enabled: True
    dotfiles_repo: \(aqhttps://git.example.org/user2/dotfiles\(aq

  # An user account with a random password, stored in \(aqsecret/\(aq. This user
  # account will be added in the \(aqusers\(aq UNIX group instead of its own group.
  \- name: \(aquser3\(aq
    group: \(aqusers\(aq
    update_password: \(aqon_create\(aq
    password: \(aq{{ lookup("password", secret + "/credentials/" + ansible_fqdn
                  + "/users/user3/password encrypt=sha512_crypt length=30") }}\(aq

  # Remove an user account if it exists
  \- name: \(aquser_removed\(aq
    state: \(aqabsent\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-
# Manage user resources
system_users__accounts:

  \- name: \(aquser1\(aq
    group: \(aquser1\(aq
    resources:

      # Create a directory in user\(aqs $HOME
      \- \(aqDocuments\(aq

      # Create a symlink to /tmp directory in user\(aqs $HOME. Owner and group
      # need to be specified for symlinked resources owned by other accounts
      # (for example \(ga\(garoot\(ga\(ga), otherwise the role will change the owner/group
      # of the link source.
      \- dest: \(aqtmp\(aq
        state: \(aqlink\(aq
        src: \(aq/tmp\(aq
        owner: \(aqroot\(aq
        group: \(aqroot\(aq

      # Copy your custom public and private SSH keys to remote user
      \- path: \(aq.ssh/github_id_rsa\(aq
        src: \(aq~/.ssh/github_id_rsa\(aq
        state: \(aqfile\(aq
        mode: \(aq0600\(aq
        parent_mode: \(aq0700\(aq

      \- path: \(aq.ssh/github_id_rsa.pub\(aq
        src: \(aq~/.ssh/github_id_rsa.pub\(aq
        state: \(aqfile\(aq
        mode: \(aq0644\(aq
        parent_mode: \(aq0700\(aq

      # Add custom SSH configuration on an user account
      \- path: \(aq.ssh/config\(aq
        state: \(aqfile\(aq
        mode: \(aq0640\(aq
        parent_mode: \(aq0700\(aq
        content: |\-
          Host github.com
              User git
              IdentityFile ~/.ssh/github_id_rsa

      # Make sure a file in the user\(aqs $HOME directory does not exist
      \- path: \(aqremoved\(aq
        state: \(aqabsent\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax
.sp
The variables are lists of YAML dictionaries, each dictionary defines an UNIX
group or an UNIX account using specific parameters.
.SS General account parameters
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the UNIX user account to manage. If \fBgroup\fP parameter is
not specified, this value is also used to create a private UNIX group for
a given user. Configuration entries with the same \fBname\fP parameter are
merged in order of appearance, this can be used to modify existing
configuration entries conditionally.
.TP
.B \fBprefix\fP
Optional. An additional string prepended to the UNIX group name, UNIX account
name, and the home directory name. If not specified, the
\fBsystem_users__prefix\fP value is used instead. This functionality is
used to separate the local users (with the \fB_\fP) prefix from the LDAP users,
when the host is configured with the debops.ldap role. To override the
prefix when LDAP support is enabled, set the parameter to an empty string
(\fB\(aq\(aq\fP).
.TP
.B \fBuser\fP
Optional, boolean. If not specified or \fBTrue\fP, a configuration entry will
manage both an UNIX account and its primary UNIX group. If \fBFalse\fP, only
the UNIX group is managed; this can be used to define shared system groups.
You can also use the debops.system_groups Ansible role to define UNIX
groups with additional functionality like \fBsudo\fP configuration, etc.
.TP
.B \fBlocal\fP
Optional, boolean. If not specified or \fBTrue\fP, the role will use the
\fBlibuser\fP library to manage the UNIX groups and accounts in the local
account and group database. If \fBFalse\fP, the role will use standard UNIX
tools to manage accounts, which might have unintended effects. On normal
operation you shouldn\(aqt need to define this parameter, it\(aqs enabled or
disabled by the role as needed.
.sp
See system_users__ref_libuser for more details.
.TP
.B \fBsystem\fP
Optional, boolean. If \fBTrue\fP, a given user account and primary group will
be a "system" account and group, with it\(aqs UID and GID < 1000. If the value
is not specified or \fBFalse\fP, the user account and group will be a "normal"
account and group with UID and GID >= 1000.
.TP
.B \fBadmin\fP
Optional, boolean. If defined and \fBTrue\fP, a given user account is
configured as a "system administrator" account. This account will be
automatically added to the UNIX groups managed by the
debops.system_groups role, usually \fBadmins\fP\&. The UNIX group name may
change depending on the presence of the LDAP configuration to include a \fB_\fP
prefix do distinguish locally managed UNIX groups to those defined in LDAP.
.TP
.B \fBuid\fP
Optional. Specify the UID of the UNIX user account.
.TP
.B \fBgid\fP
Optional. Specify the GID of the primary group for a given user account.
.TP
.B \fBgroup\fP
Optional. Name of the UNIX group which will be set as the primary group of
a given account. If \fBgroup\fP is not specified, \fBname\fP will be used
automatically to create the corresponding UNIX group.
.TP
.B \fBprivate_group\fP
Optional, boolean. If specified and \fBFalse\fP, the role will not try to
directly manage the specified UNIX \fBgroup\fP used with a given UNIX account.
This is useful if you want to set a primary UNIX group that\(aqs used in other
places and which you might not want to remove with the UNIX account.
.TP
.B \fBgroups\fP
Optional. List of UNIX groups to which a given UNIX account should belong.
Only existing groups will be added to the account.
.TP
.B \fBappend\fP
Optional, boolean. If \fBTrue\fP (default), the specified groups will be added
to the list of existing groups the account belongs to. If \fBFalse\fP, all
other groups than those present on the group list will be removed stripped.
.TP
.B \fBcomment\fP
Optional. A comment, or GECOS field configured for a specified UNIX account.
.TP
.B \fBshell\fP
Optional. Specify the default shell to run when a given UNIX account logs in.
If not specified, the default system shell (usually \fB/bin/sh\fP will be
used instead).
.TP
.B \fBpassword\fP
Optional. Specify the encrypted hash of the user\(aqs password which will be set
for a given UNIX account. You can use the \fBlookup("password")\fP lookup to
generate the hash. See examples for more details.
.TP
.B \fBupdate_password\fP
Optional. If set to \fBon_create\fP, the password will be set only one on
initial user creation. If set to \fBalways\fP, the password will be updated on
each Ansible run if it\(aqs different.
.sp
The module default is to always update the password, the \fBdebops.users\fP
default is to only update the password on initial user creation.
.TP
.B \fBno_log\fP
Optional, boolean. If defined and \fBTrue\fP, a given entry will not be logged
during the Ansible run. If not specified, if the \fBpassword\fP parameter is
specified, the role will automatically disable logging as well.
.TP
.B \fBnon_unique\fP
Optional, boolean. If \fBTrue\fP, allows setting the UID to a non\-unique value.
.TP
.B \fBlinger\fP
Optional, boolean. If \fBTrue\fP, the UNIX account will be allowed to linger
when not logged in and manage private services via it\(aqs own
\fBsystemd\fP user instance. If \fBFalse\fP, the linger option will be
disabled.
.UNINDENT
.SS Parameters related to account state
.INDENT 0.0
.TP
.B \fBstate\fP
Optional. If \fBpresent\fP, the UNIX user account and primary group will be
created. If \fBabsent\fP, the specified account and group will be removed.
.TP
.B \fBforce\fP
Optional, boolean. If used with \fBstate\fP parameter being \fBabsent\fP, Ansible
will execute the \fBuserdel \-\-force\fP command.
.TP
.B \fBremove\fP
Optional, boolean. If used with \fBstate\fP parameter being \fBabsent\fP, Ansible
will execute the \fBuserdel \-\-remove\fP command.
.TP
.B \fBexpires\fP
Optional. Specify the time in the UNIX epoch format, at which a given UNIX
user account will be disabled.
.UNINDENT
.SS Parameters related to home directories
.INDENT 0.0
.TP
.B \fBhome\fP
Optional. Path to the home directory of a given user account. If not
specified, the role will check the home directory path of an existing account
defined on the host, and if the account is new, generate the home path based
on the \fBsystem_users__home_root\fP variable and the
\fBsystem_users__prefix\fP variable.
.TP
.B \fBhome_owner\fP
Optional. Specify the owner of the home directory of a given UNIX account.
.TP
.B \fBhome_group\fP
Optional. Specify the group of the home directory of a given UNIX account.
.TP
.B \fBhome_mode\fP
Optional. Specify the mode of the home directory of a given UNIX account. If
not specified, the value of the \fBsystem_users__default_home_mode\fP
will be used instead.
.TP
.B \fBcreate_home\fP
Optional, boolean. If \fBTrue\fP, the role will create the home directory for
a given user account if it doesn\(aqt exist already. If not specified, home
directory is created by default by the \fI\%Ansible user module\fP <\fBhttps://docs.ansible.com/ansible/user_module.html\fP>\&.
.TP
.B \fBmove_home\fP
Optional, boolean. If \fBTrue\fP and the managed user account already exists,
Ansible will try to move it\(aqs home directory to the location specified in the
\fBhome\fP parameter if it isn\(aqt there already.
.TP
.B \fBskeleton\fP
Optional. Specify path to the directory, contents of which will be copied to
the newly created home directory.
.TP
.B \fBhome_acl\fP
Optional. Configure filesystem ACL entries of the home directory of a given
UNIX user account. This parameter is a list of YAML dictionaries, each
element uses a specific set of parameters derived from the \fBacl\fP Ansible
module, see its documentation for details, as well as the \fI\%acl(5)\fP <\fBhttps://manpages.debian.org/acl(5)\fP>,
\fI\%setfacl(1)\fP <\fBhttps://manpages.debian.org/setfacl(1)\fP> and \fI\%getfacl\fP <\fBhttps://manpages.debian.org/getfacl\fP> manual pages. Some useful parameters:
.INDENT 7.0
.TP
.B \fBdefault\fP
Optional, boolean. If \fBTrue\fP, set a given ACL entry as the default for
new files and directories inside a given directory. Only works with
directories.
.TP
.B \fBentity\fP
Name of the UNIX user account or group that a given ACL entry applies to.
.TP
.B \fBetype\fP
Specify the ACL entry type to configure. Valid choices: \fBuser\fP,
\fBgroup\fP, \fBmask\fP, \fBother\fP\&.
.TP
.B \fBpermissions\fP
Specify the permission to apply for a given ACL entry. This parameter
cannot be specified when the state of an ACL entry is set to \fBabsent\fP\&.
.TP
.B \fBrecursive\fP
Apply a given ACL entry recursively to all entities in a given path.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, the ACL entry will be created.
If \fBabsent\fP, the ACL entry will be removed. The \fBquery\fP state doesn\(aqt
make sense in this context and shouldn\(aqt be used.
.UNINDENT
.UNINDENT
.SS Parameters related to the account\(aqs private SSH key
.INDENT 0.0
.TP
.B \fBgenerate_ssh_key\fP
Optional, boolean. If \fBTrue\fP, Ansible will generate a private SSH key for
the specified account.
.TP
.B \fBssh_key_bits\fP
Optional. Number of bits to use for the user\(aqs private SSH key. If not
specified, role will use the \fI\%Ansible user module\fP <\fBhttps://docs.ansible.com/ansible/user_module.html\fP> default value.
.TP
.B \fBssh_key_comment\fP
Optional. Add a custom comment to the generated SSH key.
.TP
.B \fBssh_key_file\fP
Optional. Path where the private SSH key will be stored.
.TP
.B \fBssh_key_passphrase\fP
Optional. Set a passphrase which will be required to decrypt the private SSH
key.
.TP
.B \fBssh_key_type\fP
Optional. Specify the SSH key type to generate. If not specified, RSA keys
will be generated automatically.
.UNINDENT
.SS Parameters related to public SSH keys
.INDENT 0.0
.TP
.B \fBsshkeys\fP
Optional. String or a YAML list of public SSH keys to configure for a given
user account. The keys will be stored in the \fB~/.ssh/authorized_keys\fP
file.
.TP
.B \fBsshkeys_exclusive\fP
Optional, boolean. If \fBTrue\fP, the role will remove all keys from the user\(aqs
\fB~/.ssh/authorized_keys\fP file that are not specified in the \fBsshkeys\fP
parameter.
.TP
.B \fBsshkeys_state\fP
Optional. If not specified or \fBpresent\fP, the SSH keys will be set on the
user\(aqs account. If \fBabsent\fP, the \fB~/.ssh/authorized_keys\fP file will be
removed entirely.
.UNINDENT
.SS Parameters related to mail forwarding
.INDENT 0.0
.TP
.B \fBforward\fP
Optional. String or YAML list of e\-mail addresses which will be used to
forward mail directed to a given UNIX account. They will be stored in the
\fB~/.forward\fP file. This is only valid for MTAs that support this mechanism,
for example Postfix MTA when local mail is enabled.
.TP
.B \fBforward_state\fP
Optional. If not specified or \fBpresent\fP, the e\-mail addresses specified in
the \fBforward\fP parameter will be added to the \fB~/.forward\fP configuration
file. If \fBabsent\fP, the entries will be removed from the configuration file.
.UNINDENT
.SS Parameters related to user configuration files
.INDENT 0.0
.TP
.B \fBdotfiles_enabled\fP / \fBdotfiles\fP
Optional, boolean. Enable or disable management of the user configuration
files.
.TP
.B \fBdotfiles_repo\fP
Optional. An URL or an absolute path on the host to the \fBgit\fP
repository with the user configuration files to deploy. If not specified, the
default dotfiles repository, defined in the
\fBsystem_users__dotfiles_repo\fP variable, will be used instead. The
repository will be deployed or updated using the \fByadm\fP script,
installed by the debops.yadm Ansible role.
.UNINDENT
.SS Parameters related to directory and file resources
.INDENT 0.0
.TP
.B \fBresources\fP
This parameter can be used to manage directories, files and symlinks for
specific UNIX accounts using Ansible inventory. This functionality is meant to
be used to manage small amounts of data, like custom configuration files,
private SSH keys and so on. For more advanced management, you should consider
using debops.resources Ansible role, or even writing a custom Ansible
role from scratch.
.sp
Tasks that manage the resources are executed as the \fBroot\fP account, but the
owner and group of the files is automatically set to those used by a given UNIX
account. Directory and file paths will be prepended with a path to the
\fB$HOME\fP directory of a given user, and should be defined as relative, without
\fB/\fP at the beginning.
.sp
The \fBresources\fP parameter should contain a list of entries, each entry should
be defined as either a path string which denotes a directory relative to the
user\(aqs \fB$HOME\fP directory, or a YAML dictionary that describes a given
resource using specific parameters:
.INDENT 7.0
.TP
.B \fBdest\fP or \fBpath\fP
Required. Path to the resource managed by this entry, relative to the user\(aqs
\fB$HOME\fP directory. All subdirectories specified in the path will be created
automatically.
.TP
.B \fBcontent\fP
If the resource type is a \fBfile\fP, this parameter can be used to specify the
contents of the file that is managed by this entry, usually in the form of
a YAML text block. It shouldn\(aqt be specified together with the \fBsrc\fP
parameter.
.TP
.B \fBsrc\fP
If the resource type is a \fBlink\fP, this parameter specifies the target of
the symlink. In case of symlinks to resources owned by other UNIX accounts
than the user, you need to specify the \fBowner\fP and \fBgroup\fP parameters to
that of the symlinked file (for example \fBroot\fP for files or directories
owned by the \fBroot\fP account), otherwise the role will change them to the
owner/group of a given user.
.sp
If the resource type is a \fBfile\fP, this parameter can be used to specify the
source file on the Ansible Controller to copy to the remote host. It
shouldn\(aqt be specified together with the \fBcontent\fP parameter.
.TP
.B \fBstate\fP
Optional. This variable defines the resource state and it\(aqs type:
.INDENT 7.0
.IP \(bu 2
\fBabsent\fP: the resource will be removed
.IP \(bu 2
\fBdirectory\fP: the resource is a directory
.IP \(bu 2
\fBfile\fP: the resource is a file
.IP \(bu 2
\fBlink\fP: the resource is a symlink
.IP \(bu 2
\fBtouch\fP: the resource will create an empty file, or "touch" an existing
file on each Ansible run
.UNINDENT
.sp
If this parameter is not specified, the resource will be treated as
a directory.
.TP
.B \fBforce\fP
Optional, boolean. If \fBTrue\fP, the files will be always overwritten, if
\fBFalse\fP, files will be copied only if they don\(aqt exist. This parameter can
also be used to force creation of symlinks.
.TP
.B \fBowner\fP
Optional. Specify the UNIX account which should be the owner of a given
file/directory. For symlinks, this defines the owner of the link source and
might be needed if the owner is different than the current user.
.TP
.B \fBgroup\fP
Optional. Specify the UNIX group which should be the primary group of
a given file/directory. For symlinks, this defines the group of the link
source and might be needed if the group is different than the primary group
of the current user.
.TP
.B \fBmode\fP
Optional. Set specific permissions for a given file/directory/symlink.
.TP
.B \fBrecurse\fP
Optional, boolean. Recursively set specified permission for all directories
in the directory tree that lead to a given directory/file, depending on user
privileges.
.TP
.B \fBparent_owner\fP
Optional. Specify the UNIX account that should be the owner of a parent
directory of a given resource.
.TP
.B \fBparent_group\fP
Optional. Specify the UNIX group that should be the main group of a parent
directory of a given resource.
.TP
.B \fBparent_mode\fP
Optional. Specify the permissions of the parent directory of a given
file resource.
.TP
.B \fBparent_recurse\fP
Optional, boolean. If \fBTrue\fP, parent permissions will be applied
recursively to all parent directories.
.UNINDENT
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
