.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.LIBVIRTD" "5" "Mar 03, 2021" "v2.1.4" "DebOps"
.SH NAME
debops.libvirtd \- Manage libvirt virtualization host
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBdebops service/libvirtd\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.SH DESCRIPTION
.sp
\fBdebops.libvirtd\fP Ansible role manages the \fI\%libvirtd\fP <\fBhttps://libvirt.org/\fP> daemon on
a virtualization host (server side). It will automatically install QEMU KVM
support on any host that is not a KVM guest, to allow for easy deployment of
KVM virtual machines.
.sp
Configuration of \fBlibvirtd\fP instance (local or remote) can be performed using
debops.libvirt role, which uses the \fBlibvirt\fP API to manage the server.
.SH GETTING STARTED
.sp
The management of the libvirt daemon is split into a few Ansible roles to allow
easier control over a lot of configuration options. The roles are meant to be
used together, with only the main role taking care of the environment itself.
See the example playbook provided with the main role to see how they are used
together.
.sp
The \fBdebops.libvirtd\fP role will install \fBlibvirtd\fP along with virtualization
components required on the server. It manages the configuration of the main
\fBlibvirtd\fP daemon process. The role detects if the OpenNebula
environment is enabled using the specific Ansible inventory groups and enables
support for OpenNebula in libvirt.
.sp
The debops.libvirtd_qemu role manages the configuration of the QEMU/KVM
virtualization environment. The role supports custom configuration required by
OpenNebula nodes, which is enabled automatically when OpenNebula environment is
detected by the main role.
.SS Example inventory
.sp
This role should be enabled on virtualization hosts, you can do this by adding
a host to the \fB[debops_service_libvirtd]\fP group:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_service_libvirtd]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.libvirtd\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Install and manage libvirtd
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_service_libvirtd\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ libvirtd__apt_preferences__dependent_list }}\(aq

    \- role: nsswitch
      tags: [ \(aqrole::nsswitch\(aq, \(aqskip::nsswitch\(aq ]
      nsswitch__dependent_services:
        \- \(aq{{ libvirtd__nsswitch__dependent_services }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ libvirtd__ferm__dependent_rules }}\(aq
        \- \(aq{{ libvirtd_qemu__ferm__dependent_rules }}\(aq

    \- role: python
      tags: [ \(aqrole::python\(aq, \(aqskip::python\(aq ]
      python__dependent_packages3:
        \- \(aq{{ libvirtd__python__dependent_packages3 }}\(aq
      python__dependent_packages2:
        \- \(aq{{ libvirtd__python__dependent_packages2 }}\(aq

    \- role: libvirtd
      tags: [ \(aqrole::libvirtd\(aq, \(aqskip::libvirtd\(aq ]

    \- role: libvirtd_qemu
      tags: [ \(aqrole::libvirtd_qemu\(aq, \(aqskip::libvirtd_qemu\(aq, \(aqrole::libvirtd\(aq, \(aqskip::libvirtd\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after a host was first
configured to speed up playbook execution, when you are sure that most of the
configuration is already in the desired state.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::libvirtd\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.libvirtd\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS libvirtd__configuration
.sp
The \fBlibvirtd__*_configuration\fP variables are YAML lists which define the
contents of the \fB/etc/libvirt/libvirtd.conf\fP configuration file. The
lists are parsed by the template in order defined by the
\fBlibvirtd__combined_configuration\fP variable, which allows modification
of the parameters defined in earlier lists by the latter ones.
.sp
Each element of the list is a YAML dictionary. The dictionary can specify
\fBlibvirtd\fP configuration parameters as dictionary keys and they values
as dictionary values:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
libvirtd__configuration:

  \- \(aqmin_workers\(aq: 5
    \(aqmax_workers\(aq: 20

  \- \(aqunix_sock_group\(aq:    \(aqlibvirt\(aq
    \(aqunix_sock_ro_perms\(aq: \(aq0770\(aq
    \(aqunix_sock_rw_perms\(aq: \(aq0770\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Parameters specified in this way will automatically be configured as "present"
in the configuration file to override any "comment" state (see below).
.sp
Alternatively, each YAML dictionary can contain a \fBname\fP key, which tells the
role to interpret a given dictionary using specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the parameter to manage. Parameter names can contain
alphanumeric characters and an underscore (\fB_\fP) character. See the
\fB/etc/libvirt/libvirtd.conf\fP configuration file for a list of known
parameters and their meaning.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, the parameter will be present in
the configuration file. If \fBabsent\fP, the parameter will not be included in
the generated configuration file. If \fBcomment\fP, the parameter will be
commented out in the configuration file. If \fBignore\fP, a given YAML
dictionary will not be evaluated.
.TP
.B \fBcomment\fP
Optional. String or a YAML dictionary with a comment for a particular
parameter.
.TP
.B \fBvalue\fP
Optional. Specify the value of a given parameter. Values can be booleans,
numbers, quoted strings or YAML lists of strings; empty variants work as
well. If value parameter is not specified, an empty string will be set and
the parameter will be automatically quoted.
.TP
.B \fBsection\fP
Optional. Specify the name of the section of the configuration file in which
the parameter should be placed. Section names and their order are defined in
the \fBlibvirtd__configuration_sections\fP variable. If a section is not
specified, an \fBunknown\fP section will be automatically selected.
.TP
.B \fBweight\fP
Optional. Positive or negative number that affects the placement of the
parameter within the configuration file section. The heavier the "weight",
the lower the parameter will be placed; negative numbers make the "weight"
parameter lighter therefore it will be placed higher. If weight is not
specified, it\(aqs set at \fB0\fP\&.
.UNINDENT
.SS Examples
.sp
Add custom parameters:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
libvirtd__configuration:

  \- name: \(aqcustom_param\(aq
    value: \(aqcustom\-value\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Change the section and order of existing parameters:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
libvirtd__configuration:

  \- name: \(aqlisten_tls\(aq
    section: \(aqauthn\(aq
    weight: 30
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Comment out a specific parameter conditionally:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
libvirtd__configuration:

  \- name: \(aqlisten_addr\(aq
    value: \(aq0.0.0.0\(aq
    state: \(aq{{ "present"
               if ansible_distribution == "Debian"
               else "comment" }}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS libvirtd__configuration_sections
.sp
This list defines the sections of the \fB/etc/libvirt/libvirtd.conf\fP
configuration file, as well as their order in the generated file. Each element
of the list is a YAML dictionary with specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the section, specified in the configuration entries as the
\fBsection\fP parameter. Should be short and recognizable.
.TP
.B \fBtitle\fP
Required. A short description of the given configuration file section which
will be added as a header.
.TP
.B \fBcomment\fP
Optional. a string or a YAML dictionary with additional comments about
a given section, added after the title.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, the section will be included in
the configuration file. If \fBabsent\fP, the entire section (including the
parameters that belong to it) will be omitted in the generated configuration
file. If \fBhidden\fP, the section will be present but the title and section
comment will not be included.
.UNINDENT
.SS Examples
.sp
Set a custom list of sections:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
libvirtd__configuration_sections:

  \- name: \(aqsection\-one\(aq
    title: \(aqFirst section\(aq

  \- name: \(aqsection\-two\(aq
    title: \(aqSection with hidden title\(aq
    state: \(aqhidden\(aq

  \- name: \(aqsection\-three\(aq
    title: \(aqThird section\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SH AUTHOR
Maciej Delmanowski, Robin Schneider
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
