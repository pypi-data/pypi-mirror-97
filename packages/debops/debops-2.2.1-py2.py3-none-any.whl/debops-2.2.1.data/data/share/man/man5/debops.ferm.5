.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.FERM" "5" "Mar 04, 2021" "v2.2.1" "DebOps"
.SH NAME
debops.ferm \- Manage iptables firewall using ferm
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBdebops service/ferm\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.sp
\fBdebops\fP \fB\-\-tags\fP \fBrole::ferm\fP [\fIplaybook\fP] ... [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.sp
\fBdebops\fP \fB\-\-skip\-tags\fP \fBskip::ferm\fP [\fIplaybook\fP] ... [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.SH DESCRIPTION
.sp
\fI\%ferm\fP <\fBhttp://ferm.foo-projects.org/\fP> is a wrapper around the \fBiptables\fP and the \fBip6tables\fP commands which lets
you manage host firewalls in an easy and Ansible\-friendly way. This role can
be used to setup firewall rules directly from the inventory, or it can be used
as a dependency by other roles to setup firewall rules for other services.
.SH GETTING STARTED
.SS Example inventory
.sp
The \fBdebops.ferm\fP role is part of the default DebOps playbook an run on
all hosts which are part of the \fB[debops_all_hosts]\fP group. To use this
role with DebOps it\(aqs therefore enough to add your host to the mentioned
host group (which most likely it is already):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_all_hosts]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
Here\(aqs an example playbook which uses the \fBdebops.ferm\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage firewall using ferm
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_all_hosts\(aq, \(aqdebops_service_ferm\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after a host was first
configured to speed up playbook execution, when you are sure that most of the
configuration is already in the desired state.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::ferm\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.TP
.B \fBrole::ferm:custom_files\fP
Copy custom ferm configuration files to remote hosts.
.TP
.B \fBrole::ferm:rules\fP
Run tasks to add or remove ferm rules and configure IP packet forwarding.
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.ferm\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS ferm__rules
.sp
The \fBferm__*_rules\fP variables are YAML lists which define what
firewall rules are configured on a host. The rules are combined together in the
\fBferm__combined_rules\fP variable which defines the order of the rule
variables and therefore how they will affect each other.
.sp
Each entry in the \fBferm__*_rules\fP lists is a YAML dictionary. The entry needs
to have the \fBname\fP parameter that specifies the rule name, otherwise it will
be skipped.
.sp
The result is stored as \fBferm__parsed_rules\fP variable. This order
allows modification of the default rules as well as rules defined by other
Ansible roles using Ansible inventory variables.
.sp
The rules are stored in the \fB/etc/ferm/rules.d/\fP directory and
the filename format is:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
/etc/ferm/rules.d/<weight>_rule_<name>.conf
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The rule "weight" is determined by a given rule type which can be overridden if
needed, see the \fBtype\fP, \fBweight\fP and \fBweight_class\fP parameters for more
details.
.sp
Each rule defined in a dictionary uses specific parameters. The parameters
described here are general ones, mostly usable on the main "level" and are
related to management of rule files. The parameters related to specific
\fBferm\fP rules are described in ferm__ref_firewall_rules
documentation.
.INDENT 0.0
.TP
.B \fBname\fP
Name of the firewall rule to configure. An example rule definition:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__rules:
  \- name: \(aqaccept_all_connections\(aq
    type: \(aqaccept\(aq
    accept_any: True
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fBrules\fP
Either a string or a YAML text block that contains raw \fBferm\fP
configuration options, or a list of YAML dictionaries which specify firewall
rules. If this parameter is not specified, role will try and generate rules
automatically based on other parameters specified on the "first level" of
a given rule definition. Most of the other parameters can be specified on the
"second level" rules and will apply to a given rule in the list.
.sp
Example custom rule definition that restarts \fBnginx\fP after firewall
is modified:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__rules:
  \- name: \(aqrestart_nginx\(aq:
    type: \(aqpost\-hook\(aq
    rules: \(aq@hook post "type nginx > /dev/null && systemctl restart nginx || true";\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Example list of rule definitions which will open access to different service
ports; rules will be present in the same file:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__rules:
  \- name: \(aqallow_http_https\(aq
    rules:

      \- dport: \(aqhttp\(aq
        accept_any: True

      \- dport: \(aqhttps\(aq
        accept_any: True
.ft P
.fi
.UNINDENT
.UNINDENT
.TP
.B \fBrule_state\fP
Optional. Specify the state of the firewall rule file, or one of the
rules included in that file. Supported states:
.INDENT 7.0
.IP \(bu 2
\fBpresent\fP: default. The rule file will be created if it doesn\(aqt exist,
a rule will be present in the file.
.IP \(bu 2
\fBabsent\fP: The rule file will be removed, a rule in the file will not be
generated.
.IP \(bu 2
\fBignore\fP: the role will not change the current state of the configuration
file. This value does not have an effect on the rules inside the file.
.UNINDENT
.TP
.B \fBcomment\fP
Optional. Add a comment in the rule configuration file, either as a string or
as a YAML text block.
.TP
.B \fBtemplate\fP
Optional. Name of the template to use to generate the firewall rule file.
Currently only one template is available, \fBrule\fP so this option is not
useful yet.
.TP
.B \fBtype\fP
Optional. Specify the rule type as a name, for example \fBaccept\fP or
\fBreject\fP\&. Different rule types can use different rule parameters, the rule
type also affects the "weight" used to order the configuration files. Weight
of the different rules is specified in the \fBferm__default_weight_map\fP
variable and can be overridden using the \fBferm__weight_map\fP variable.
.sp
List of known rule types can be found in the ferm__ref_firewall_rules
documentation.
.TP
.B \fBweight_class\fP
Optional. Override the rule type with another type, to change the sort order
of the configuration files. This parameter does not affect the
\fBferm\fP configuration template, only the resulting filename.
.TP
.B \fBweight\fP
Optional. Additional positive or negative number (for example \fB2\fP or
\fB\-2\fP) which will be added to the rule weight affecting the file sorting
order.
.UNINDENT
.SS ferm_input_list
.sp
This is a set of legacy \fBdebops.ferm\fP variables, kept to allow older roles to
be usable with new variables. You should use the \fBferm__*_rules\fP variables
instead in new configuration, the legacy variables will be removed at some
point.
.sp
List of ferm INPUT rules that should be present or absent in the firewall rule
set. The same format is also used for \fBferm_input_group_list\fP,
\fBferm_input_host_list\fP and \fBferm_input_dependent_list\fP\&. Each rule is
defined as a YAML dict with the following keys:
.INDENT 0.0
.TP
.B \fBtype\fP
Name of template file to use, required. Format: \fB<type>.conf.j2\fP
.TP
.B \fBdport\fP
List of destination ports to manage, required.
.TP
.B \fBname\fP
Optional. Custom name used in the generated rule filename
.TP
.B \fBweight\fP
Optional. Helps with file sorting in rule directory
.TP
.B \fBfilename\fP
Optional. Custom filename instead of a generated one
.TP
.B \fBrule_state\fP
Optional. State of the rule. Defaults to \fBpresent\fP\&. Possible values:
\fBpresent\fP or \fBabsent\fP
.UNINDENT
.sp
Depending on the chosen type, many additional variables are supported. Please
check the template files located in the \fBtemplates/etc/ferm/ferm.d\fP
directory.
.SH FIREWALL RULE DEFINITIONS
.sp
Firewall configuration in \fBdebops.ferm\fP is done through a flexible
definition of rules. There are a number of variables which are used to
reference a set of default rules and can be extended by user defined
rules. Here a description of the involved configurations should be given
so that everyone can customize the ruleset according to individual
requirements.
.SS Default rules
.sp
By default \fBdebops.ferm\fP configures a number of rules as soon as a
host is part of the \fB[debops_all_hosts]\fP Ansible host group. The rules
created by default are defined in \fBdefaults/main.yml\fP and activated by
being listed in \fBferm__default_rules\fP\&. They consist of basic rules for
setting the \fBiptables\fP default policies, restricting extensive connection
attempts, logging and more.
.sp
In case a firewall is not required or preferred this behaviour can be
disabled by setting \fBferm__enabled\fP to \fBFalse\fP in the inventory.
.SS Custom rules
.sp
A custom rule can be enabled by adding a rule definition to one of the
predefined rule lists (\fBferm__rules\fP, \fBferm__group_rules\fP,
\fBferm__host_rules\fP or \fBferm__dependent_rules\fP) in the Ansible
inventory. Each rule has to be defined as a YAML dict using some of
the following keys:
.INDENT 0.0
.TP
.B \fBdomain\fP
Optional. \fBiptables\fP domain used for the firewall rule. Possible values:
\fBip\fP, \fBip6\fP\&. Defaults to \fBferm__domains\fP\&.
.TP
.B \fBtable\fP
Optional. \fBiptables\fP table to which the rule is added or from which it
is removed. Defaults to \fBfilter\fP\&.
.TP
.B \fBchain\fP
Optional. \fBiptables\fP chain to which the rule is added or from which it
is removed. Defaults to \fBINPUT\fP\&.
.TP
.B \fBby_role\fP
Optional. Name of the Ansible role in the format \fBROLE_OWNER.ROLE_NAME\fP
which is responsable for the rule. This will be included as a comment in the
generated rule file.
.UNINDENT
.sp
Depending on the chosen type, many additional variables are supported.
Please check the individual rule type description below.
.SS Rule types
.sp
There exist a number of predefined rule types for generating firewall rules
through \fBferm\fP\&. Following a list of the available rule types which can
be used to create custom rules.
.SS The \(aqaccept\(aq type
.sp
This rule type can be used to create rules that match interfaces, ports, remote
IP addresses/subnets and can accept the packets, reject, or redirect to
a different chain. The following type\-specific YAML keys are supported:
.INDENT 0.0
.TP
.B \fBaccept_any\fP
Optional. Match all source addresses by default. Possible values: \fBTrue\fP
or \fBFalse\fP\&. Defaults to \fBTrue\fP\&. If this option is set to \fBFalse\fP and
\fBitem.target\fP is set to \fBREJECT\fP all traffic is blocked by default.
As soon as \fBitem.saddr\fP is not empty, this configuration doesn\(aqt matter
anymore.
.TP
.B \fBdaddr\fP
Optional. List of destination IP addresses or networks to which the
rule is applied.
.TP
.B \fBdport\fP
Optional. List of destination ports to which the rule is applied.
.TP
.B \fBinclude\fP
Optional. Custom \fBferm\fP configuration file to include.
See \fI\%ferm include\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#includes\fP> for more details.
.TP
.B \fBinterface\fP
Optional. List of network interfaces for incoming packets to which the
rule is applied.
.TP
.B \fBinterface_present\fP
Optional. Same as \fBitem.interface\fP but first check if specified network
interfaces exists before adding the firewall rules.
.TP
.B \fBmultiport\fP
Optional. Use \fBiptables multiport\fP extension. Possible values: \fBTrue\fP
or \fBFalse\fP\&. Defaults to \fBFalse\fP\&.
.TP
.B \fBouterface\fP
Optional. List of network interfaces for outgoing packets to which the
rule is applied.
.TP
.B \fBouterface_present\fP
Optional. Same as \fBitem.outerface\fP but first check if specified network
interface exists before adding the firewall rule.
.TP
.B \fBprotocol\fP
Optional. Network protocol to which the rule is applied.
.TP
.B \fBprotocol_syn\fP
Optional. Match TCP packet with only the SYN flag set. Possible values
\fBTrue\fP or \fBFalse\fP\&. If set to \fBFalse\fP it will match all other packets
except the ones with only the SYN flag set. Defaults to unset.
.TP
.B \fBrealgoto\fP
Optional. After packet match jump to custom chain. See \fI\%ferm realgoto\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#realgoto_custom_chain_name\fP> for
more details.
.TP
.B \fBreject_with\fP
Optional. Define reject message being sent when the rule \fBitem.target\fP is
set to \fBREJECT\fP\&. Defaults to \fBicmp\-admin\-prohibited\fP\&.
.TP
.B \fBsaddr\fP
Optional. List of source IP addresses or networks to which this rule is
applied.
.TP
.B \fBsport\fP
Optional. List of source ports to which the rule is applied.
.TP
.B \fBstate\fP
Optional. Connection state which should be matched. Possible values:
\fBINVALID\fP, \fBESTABLISHED\fP, \fBNEW\fP, \fBRELATED\fP, \fBUNTRACKED\fP or
comma\-separated combination thereof.
.TP
.B \fBsubchain\fP
Optional. Subchain name. If more than 3 addresses are listed in
\fBtarget.saddr\fP move resulting \fBiptables\fP rules into a separate subchain
with the given name. See \fI\%ferm subchain\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#_subchain\fP> for more details.
.TP
.B \fBtarget\fP
Optional. \fBiptables\fP jump target. Possible values: \fBACCEPT\fP, \fBDROP\fP,
\fBREJECT\fP, \fBRETURN\fP, \fBNOP\fP or a custom target. Defaults to \fBACCEPT\fP\&.
.UNINDENT
.SS The \(aqansible_controller\(aq type
.sp
Similar to the \fBaccept\fP type but defaults to the SSH target port and sets the
source address to the host running Ansible if not overwritten through the
\fBitem.ansible_controllers\fP key. The following type\-specific YAML keys are
supported:
.INDENT 0.0
.TP
.B \fBansible_controllers\fP
Optional. List of source IP address which are added to \fBitem.saddr\fP\&.
Overwrites auto\-detection of the Ansible controller address.
.TP
.B \fBdaddr\fP
Optional. List of destination IP addresses or networks to which the rule
is applied.
.TP
.B \fBdport\fP
Optional. List of destination ports to which the rule is applied. Defaults
to \fBssh\fP\&.
.TP
.B \fBinclude\fP
Optional. Custom ferm configuration file to include. See \fI\%ferm include\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#includes\fP>
for more details.
.TP
.B \fBinterface\fP
Optional. List of network interfaces for incoming packets to which the
rule is applied.
.TP
.B \fBmultiport\fP
Optional. Use \fI\%iptables multiport\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbBM\fP> extension. Possible values: \fBTrue\fP
or \fBFalse\fP\&. Defaults to \fBFalse\fP\&.
.TP
.B \fBouterface\fP
Optional. List of network interfaces for outgoing packets to which the
rule is applied.
.TP
.B \fBprotocol\fP
Optional. Network protocol to which the rule is applied. Defaults to \fBtcp\fP\&.
.TP
.B \fBprotocol_syn\fP
Optional. Match TCP packet with only the SYN flag set. Possible values
\fBTrue\fP or \fBFalse\fP\&. If set to \fBFalse\fP it will match all other packets
except the ones with only the SYN flag set. Defaults to unset.
.TP
.B \fBrealgoto\fP
Optional. After packet match jump to custom chain. See \fI\%ferm realgoto\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#realgoto_custom_chain_name\fP> for
more details.
.TP
.B \fBreject_with\fP
Optional. Define reject message being sent when the rule \fBitem.target\fP is
set to \fBREJECT\fP\&. Defaults to \fBicmp\-admin\-prohibited\fP\&.
.TP
.B \fBsaddr\fP
Optional. List of source IP addresses or networks to which this rule is
applied.
.TP
.B \fBsport\fP
Optional. List of source ports to which the rule is applied.
.TP
.B \fBstate\fP
Optional. Connection state which should be matched. Possible values:
\fBINVALID\fP, \fBESTABLISHED\fP, \fBNEW\fP, \fBRELATED\fP, \fBUNTRACKED\fP or
comma\-separated combination thereof.
.TP
.B \fBsubchain\fP
Optional. Subchain name. If more than 3 addresses are listed in
\fBtarget.saddr\fP move resulting \fBiptables\fP rules into a separate subchain
with the given name. See \fI\%ferm subchain\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#_subchain\fP> for more details.
.TP
.B \fBtarget\fP
Optional. \fBiptables\fP jump target. Possible values: \fBACCEPT\fP, \fBDROP\fP,
\fBREJECT\fP, \fBRETURN\fP, \fBNOP\fP or a custom target. Defaults to \fBACCEPT\fP\&.
.UNINDENT
.SS The \(aqconnection_tracking\(aq type
.sp
This type is used to enable connection tracking using the \fI\%iptables conntrack\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbAO\fP>
or \fI\%iptables state\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbCC\fP> extension. The following type\-specific YAML keys are
supported:
.INDENT 0.0
.TP
.B \fBtracking_active_target\fP
Optional. \fBiptables\fP jump target for valid connections. Defaults to
\fBACCEPT\fP\&.
.TP
.B \fBtracking_invalid_target\fP
Optional. \fBiptables\fP jump target for invalid connections. Defaults to
\fBDROP\fP\&.
.TP
.B \fBtracking_module\fP
Optional. \fBiptables\fP module used for connection tracking. Possible values:
\fBstate\fP or \fBconntrack\fP\&. Defaults to \fBconntrack\fP\&.
.TP
.B \fBinterface\fP
Optional. List of network interfaces for incoming packets to which the rule
is applied.
.TP
.B \fBouterface\fP
Optional. List of network interfaces for outgoing packets to which the rule
is applied.
.TP
.B \fBinterface_not\fP
Optional. List of network interfaces for incoming packets which are excluded
from the rule.
.TP
.B \fBouterface_not\fP
Optional. List of network interfaces for outgoing packets which are excluded
from the rule.
.UNINDENT
.SS The \(aqcustom\(aq type
.sp
The type used to define custom \fBferm\fP rules. The following additional
YAML keys are supported:
.INDENT 0.0
.TP
.B \fBrules\fP
ferm rule definition, required.
.TP
.B \fBby_role\fP
Optional. Add comment to generated ferm rule definition file that rule is
defined in the given Ansible role.
.UNINDENT
.sp
This template is used among others in a debops.libvirtd custom ferm rule.
.SS The \(aqdefault_policy\(aq type
.sp
This type is used to define \fBiptables\fP default policies. The following
type\-specific YAML keys are supported:
.INDENT 0.0
.TP
.B \fBpolicy\fP
\fBiptables\fP chain policy, required.
.UNINDENT
.SS The \(aqdmz\(aq type
.sp
This type can be used to enable connection forwarding to another host. If
\fBitem.port\fP is not specified, all traffic is forwarded. The following
type\-specific YAML keys are supported:
.INDENT 0.0
.TP
.B \fBmultiport\fP
Optional. Use \fI\%iptables multiport\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbBM\fP> extension. Possible values: \fBTrue\fP
or \fBFalse\fP\&. Defaults to \fBFalse\fP\&.
.TP
.B \fBinterface\fP
Optional. List of public network interfaces which accept connections.
At least one of \fBinterface\fP or \fBpublic_ip\fP is required.
.TP
.B \fBpublic_ip\fP
Optional. IPv4 address on the public network which accepts connections.
At least one of \fBinterface\fP or \fBpublic_ip\fP is required. Only 1 IP address
should be used at a time.
.TP
.B \fBprivate_ip\fP
IPv4 address of the host on the internal network, required. Only 1 IP address
should be used at a time.
.TP
.B \fBprotocol(s)\fP
Optional. List of protocols to forward. Defaults to \fBtcp\fP\&.
.TP
.B \fBport(s)\fP
Optional. List of ports to forward.
.TP
.B \fBdport\fP
Optional. Destination port to forward to. Only needs to be specified if
internal destination port is different from the original destination port.
.TP
.B \fBsnat_ip\fP
Optional. IP address for source address translation. If set the source IP is
rewritten to this address. This is typically the IP address of the firewall
host on the internal network. This is useful if traffic from the \fBprivate_ip\fP
would otherwise not be routed back to the firewall host.
.UNINDENT
.SS The \(aqhashlimit\(aq type
.sp
This type is used to define rate limit rules using the \fI\%iptables hashlimit\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbAY\fP>
extension. The following type\-specific YAML keys are supported:
.INDENT 0.0
.TP
.B \fBdaddr\fP
Optional. List of destination IP addresses or networks to which the
rule is applied.
.TP
.B \fBdport\fP
Optional. List of destination ports to which the rule is applied.
.TP
.B \fBhashlimit_burst\fP
Optional. Number of packets to match within the expiration time. Defaults
to \fB5\fP\&.
.TP
.B \fBhashlimit_expire\fP
Optional. Expiration time of hash entries in seconds. Defaults to \fB1.8\fP\&.
.TP
.B \fBhashlimit_target\fP
Optional. Jump target used when packet matches the \fBhashlimit\fP rule which
means that the rate limit is not reached yet. Defaults to \fBRETURN\fP\&.
.TP
.B \fBhashlimit_mode\fP
Optional. Options to take into consideration when associating packet
streams. Possible values: \fBsrcip\fP, \fBsrcport\fP, \fBdstip\fP, \fBdstport\fP
or a comma\-separated list thereof. Defaults to \fBsrcip\fP\&.
.TP
.B \fBinterface\fP
Optional. List of network interfaces for incoming packets to which the
rule is applied.
.TP
.B \fBinterface_present\fP
Optional. Same as \fBitem.interface\fP but first check if specified network
interfaces exists before adding the firewall rules.
.TP
.B \fBouterface\fP
Optional. List of network interfaces for outgoing packets to which the
rule is applied.
.TP
.B \fBouterface_present\fP
Optional. Same as \fBitem.outerface\fP but first check if specified network
interface exists before adding the firewall rule.
.TP
.B \fBinclude\fP
Optional. Custom ferm configuration file to include. See \fI\%ferm include\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#includes\fP> for
more details.
.TP
.B \fBlog\fP
Optional. Write rate limit hits to syslog. Possible values: \fBTrue\fP and
\fBFalse\fP\&. Defaults to \fBTrue\fP\&.
.TP
.B \fBprotocol\fP
Optional. Network protocol to which the rule is applied.
.TP
.B \fBprotocol_syn\fP
Optional. Match TCP packet with only the SYN flag set. Possible values
\fBTrue\fP or \fBFalse\fP\&. If set to \fBFalse\fP it will match all other packets
except the ones with only the SYN flag set. Defaults to unset.
.TP
.B \fBreject_with\fP
Optional. Define reject message being sent when the rule \fBitem.target\fP is
set to \fBREJECT\fP\&. Defaults to \fBicmp\-admin\-prohibited\fP\&.
.TP
.B \fBstate\fP
Optional. Connection state which should be matched. Possible values:
\fBINVALID\fP, \fBESTABLISHED\fP, \fBNEW\fP, \fBRELATED\fP, \fBUNTRACKED\fP or
comma\-separated combination thereof.
.TP
.B \fBsubchain\fP
Optional. Subchain name. Move resulting \fBiptables\fP rules into a
separate subchain with the given name. See \fI\%ferm subchain\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#_subchain\fP> for more
details.
.TP
.B \fBtarget\fP
Optional. \fBiptables\fP jump target in case the rate limit is reached.
Defaults to \fBREJECT\fP\&.
.UNINDENT
.SS The \(aqinclude\(aq type
.sp
This type can be used to include custom \fBferm\fP configuration files.
The following type\-specific YAML keys are supported:
.INDENT 0.0
.TP
.B \fBinclude\fP
Optional. Custom ferm configuration file to include. See
\fI\%ferm include\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#includes\fP> for more details.
.UNINDENT
.SS The \(aqlog\(aq type
.sp
This type can be used to specify logging rules using the \fI\%iptables log\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbDD\fP>
extension. The following type\-specific YAML keys are supported:
.INDENT 0.0
.TP
.B \fBinclude\fP
Optional. Custom \fBferm\fP configuration file to include. See
\fI\%ferm include\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#includes\fP> for more details.
.TP
.B \fBlog_burst\fP
Optional. Burst limit of packets being logged. Defaults to
\fBferm__log_burst\fP\&.
.TP
.B \fBlog_ip_options\fP
Optional. Log IP options of packet. Possible values: \fBTrue\fP or \fBFalse\fP\&.
Defaults to \fBTrue\fP\&.
.TP
.B \fBlog_level\fP
Optional. Log level for firewall messages. Possible values are: \fBemerg\fP,
\fBalert\fP, \fBcrit\fP, \fBerror\fP, \fBwarning\fP, \fBnotice\fP, \fBinfo\fP or
\fBdebug\fP\&. Defaults to \fBwarning\fP\&.
.TP
.B \fBlog_limit\fP
Optional. Rate limit of packets being logged. Defaults to
\fBferm__log_limit\fP\&.
.TP
.B \fBlog_prefix\fP
Optional. Prefix (up to 29 characters) for firewall log messages. Defaults
to \fBiptables\-log:\fP
.TP
.B \fBlog_target\fP
Optional. Select how \fBiptables\fP performs logging. Possible values:
\fBLOG\fP, \fBULOG\fP, \fBNFLOG\fP\&. Defaults to \fBLOG\fP\&.
.TP
.B \fBlog_tcp_options\fP
Optional. Log TCP options of packet. Possible values: \fBTrue\fP or \fBFalse\fP\&.
Defaults to \fBFalse\fP\&.
.TP
.B \fBlog_tcp_sequence\fP
Optional. Log TCP sequence of packet. Possible values: \fBTrue\fP or
\fBFalse\fP\&. Defaults to \fBFalse\fP\&.
.TP
.B \fBrealgoto\fP
Optional. After packet match jump to custom chain. See \fI\%ferm realgoto\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#realgoto_custom_chain_name\fP> for
more details.
.TP
.B \fBreject_with\fP
Optional. Define reject message being sent when the rule \fBitem.target\fP is
set to \fBREJECT\fP\&. Defaults to \fBicmp\-admin\-prohibited\fP\&.
.TP
.B \fBtarget\fP
Optional. \fBiptables\fP jump target for logged packets.
.UNINDENT
.SS The \(aqrecent\(aq type
.sp
This type can be used to track connections and respond accordingly by using the
\fI\%iptables recent\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbBW\fP> extension. The following type\-specific YAML keys are
supported:
.INDENT 0.0
.TP
.B \fBdport\fP
Optional. List of destination ports to which the rule is applied.
.TP
.B \fBinclude\fP
Optional. Custom ferm configuration file to include. See
\fI\%ferm include\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#includes\fP> for more details.
.TP
.B \fBmultiport\fP
Optional. Use \fI\%iptables multiport\fP <\fBhttp://ipset.netfilter.org/iptables-extensions.man.html#lbBM\fP> extension. Possible values: \fBTrue\fP
or \fBFalse\fP\&. Defaults to \fBFalse\fP\&.
.TP
.B \fBprotocol\fP
Optional. Network protocol to which the rule is applied.
.TP
.B \fBprotocol_syn\fP
Optional. Match TCP packet with only the SYN flag set. Possible values
\fBTrue\fP or \fBFalse\fP\&. If set to \fBFalse\fP it will match all other packets
except the ones with only the SYN flag set. Defaults to unset.
.TP
.B \fBrecent_hitcount\fP
Optional. Must be used in combination with \fBitem.recent_update\fP\&. Match
if address is in the list and at least the given number of packets were
received so far.
.TP
.B \fBrecent_log\fP
Optional. Log packets matching the rule. Possible values: \fBTrue\fP or
\fBFalse\fP\&. Defaults to \fBferm__log\fP\&. If this is set to \fBTrue\fP
\fBferm__log\fP must be enabled too for the packet to be logged.
.TP
.B \fBrecent_name\fP
Optional. Name of the list. Defaults to \fBDEFAULT\fP\&.
.TP
.B \fBrecent_remove\fP
Optional. Remove address from the list. Possible values: \fBTrue\fP or
\fBFalse\fP\&. Defaults to \fBFalse\fP\&. Mutually exclusive with
\fBitem.recent_update\fP\&.
.TP
.B \fBrecent_seconds\fP
Optional. Must be used in combination with \fBitem.recent_update\fP\&. Match
if address is in the list and was last seen within the given number of
seconds.
.TP
.B \fBrecent_set_name\fP
Optional. Add the source address of a matching packet to the given list. This
must correspond with \fBitem.recent_name\fP of a second rule which would
potentially act on the packet, e. g. reject it.
.TP
.B \fBrecent_target\fP
Optional. \fBiptables\fP jump target when packet has hit the recent list.
Possible values: \fBACCEPT\fP, \fBDROP\fP, \fBREJECT\fP, \fBRETURN\fP, \fBNOP\fP or
a custom target. Defaults to \fBNOP\fP\&.
.TP
.B \fBrecent_update\fP
Optional. Update "last\-seen" timestamp.  Possible values: \fBTrue\fP or
\fBFalse\fP\&. Defaults to \fBFalse\fP\&. Mutually exclusive with
\fBitem.recent_remove\fP\&.
.TP
.B \fBreject_with\fP
Optional. Define reject message being sent when the rule \fBitem.target\fP is
set to \fBREJECT\fP\&. Defaults to \fBicmp\-admin\-prohibited\fP\&.
.TP
.B \fBstate\fP
Optional. Connection state which should be matched. Possible values:
\fBINVALID\fP, \fBESTABLISHED\fP, \fBNEW\fP, \fBRELATED\fP, \fBUNTRACKED\fP or
comma\-separated combination thereof.
.TP
.B \fBsubchain\fP
Optional. Subchain name. Move resulting \fBiptables\fP rules into a
separate subchain with the name given. See \fI\%ferm subchain\fP <\fBhttp://ferm.foo-projects.org/download/2.1/ferm.html#_subchain\fP> for more
details.
.UNINDENT
.sp
When using the \fBrecent\fP type make sure to always define two
rules:
.INDENT 0.0
.IP \(bu 2
One for matching the packet against the address list using the
\fBitem.recent_update\fP feature. If this filter matches you likely want
to set the \fBitem.recent_target\fP to \fBDROP\fP or \fBREJECT\fP\&.
.IP \(bu 2
To clear the source address from the list again in case the connection
restrictions are not met, add a second role using \fBitem.recent_remove\fP\&.
.UNINDENT
.SS The \(aqreject\(aq type
.sp
This type is used to reject all traffic. It can be added for example as a final
rule in a custom chain.
.SS Legacy rules
.sp
Legacy rules are the (old) deprecated way to configure firewall rules
using a simpler less flexible syntax than described above. As support
for these is likely going to be removed in the future, they shouldn\(aqt be
used anymore.
.sp
Support for legacy rules is still enabled by default. However, they are
stored in a separate \fBiptables\fP INPUT chain called
\fBdebops\-legacy\-input\-rules\fP\&. In case you haven\(aqt defined any legacy
rules and none of the DebOps roles you are using are still depending
on it, disable support completely by setting \fBferm__include_legacy\fP
to \fBFalse\fP which will avoid the additional chain from being created.
.sp
If you\(aqre not sure if you still have legacy rules defined, look for
variable names with only on \(aq_\(aq after the \fBferm\fP prefix (e. g.
\fBferm_input_list\fP and \fBferm_input_dependent_list\fP).
.SH GUIDES AND EXAMPLES
.SS Configuring an Internet Gateway
.sp
An Internet gateway is a host which is managing the access of a private
(internal) network to the (external) Internet. When running Linux as a gateway
host the correct setup of the required iptables rules is crucial. While there
exist dedicated Linux distributions for this task such as OpenWRT or IPFire,
it\(aqs also possible to use a regular Debian GNU/Linux system and configure it
through DebOps. Here a short overview about the basic steps for a simple
gateway configuration is given.
.sp
The gateway host should have at least two network interfaces connected to the
respective networks. In this guide the interface named \fBeth0\fP will be used
as external untrusted interface and \fBeth1\fP will be used as internal trusted
interface.
.sp
To follow this guide you should be familiar with DebOps and the way to configure
related Ansible variables. If you\(aqre not, you may first want to read the
Getting Started guide\&.
.SS Packet Forwarding
.sp
The configuration of packet forwarding is done on a per\-interface basis. You
can use the debops.ferm and debops.ifupdown Ansible roles to
configure the respective firewall rules and kernel parameters, or use the
debops.ifupdown role to configure network interfaces, which will include
packet forwarding rules when necessary, for example for all bridge interfaces.
.sp
In case every connection traversing the network boundaries should be
explicitly defined, set an empty rule list here:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__rules_forward: []
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
On the other hand it might be useful to start with a less restrictive
forwarding rule list which allows all outgoing traffic:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__rules_forward:
  \- chain: \(aqFORWARD\(aq
    type: \(aqaccept\(aq
    outerface_present: \(aq{{ ferm__external_interfaces }}\(aq
    weight: \(aq10\(aq
    role: \(aqforward\(aq
    role_weight: \(aq20\(aq
    name: \(aqexternal_out\(aq
    comment: \(aqForward outgoing traffic to other hosts\(aq
    rule_state: \(aq{{ "present" if (
                      (ferm__forward|d(ferm_forward) | bool) or
                      (ansible_local|d() and ansible_local.ferm|d() and
                       ansible_local.ferm.forward | bool))
                     else "absent" }}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Once a packet was accepted by the firewall all related packets belonging to
the same connection are accepted too. This is defined in the
\fBconnection_tracking\fP rule which is loaded as part of the
\fBferm__default_rules\fP rule list.
.SS Port Forwarding
.sp
If the forward rules above are properly implemented, all external access to a
host connected to the internal network is blocked. Still it might be necessary
to allow external access to a specific internally hosted service such as a Web
server. This can be done by forwarding a port or port range from the gateway\(aqs
external interface to an internal host. Technically this is called DNAT
(Destination Network Address Translation), where the original destination
address of a network packet is rewritten to the internal host address.
.INDENT 0.0
.IP \(bu 2
To forward the HTTP port from the gateway to the internal host, a rule such as
the following is required:
.UNINDENT
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__host_rules:
  \- type: \(aqdmz\(aq
    name: \(aqhttp\-forward\(aq
    domain: [ \(aqip\(aq ]
    public_ip: \(aq{{ ansible_eth0.ipv4.address }}\(aq
    private_ip: \(aq{{ lookup("dig", "web.internal.example.com") }}\(aq
    protocol: \(aqtcp\(aq
    ports: [ 80 ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Note
.sp
ferm__ref_type_dmz rule template won\(aqt modify the source address of a
forwarded packet by default. This means that the original source address can
still be identified at the internal receiver, however the route leading back to
the source address must traverse the gateway again in order to successfully
initiate connection tracking.
.sp
The optional \fBsnat_ip\fP parameter can be used to configure source address
translation (SNAT).
.SS INPUT Rules for Services running on the Gateway Host
.sp
As an Internet gateway is usually a device which is running 24/7 and being a
core part of the network infrastructure, people might want to run additional
services on this host. In case these services are also managed by DebOps
the respective Ansible roles will ensure that the required firewall rules are
added to the \fBferm__dependent_rules\fP rule list. By default access from
all networks is allowed which is not always desired. Below it will be shown how
this can be restricted to the internal network attached to \fBeth1\fP\&.
.sp
\fBExample: dnsmasq\fP
.sp
The \fI\%debops.dnsmasq\fP <\fBhttps://github.com/debops/ansible-dnsmasq\fP> role is providing DNS and DHCP services. Obviously access
to these services should only be allowed from the internal network.
.INDENT 0.0
.IP \(bu 2
Define the upstream (external) interface where access should be blocked:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
dnsmasq_upstream_interfaces: [ \(aqeth0\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.IP \(bu 2
Define the internal interface where the DNS and DHCP services will be
provided. This setting would automatically define the necessary \fBiptables\fP
\fBINPUT\fP rules for those services to be accessible from the internal
network:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
dnsmasq_interfaces:
  \- interface: \(aqeth1\(aq
    name: \(aqgateway\(aq
    dhcp_range_start: \(aq10\(aq
    dhcp_range_end: \(aq\-10\(aq
    dhcp_lease: \(aq24h\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.sp
Refer to the \fI\%debops.dnsmasq\fP <\fBhttps://github.com/debops/ansible-dnsmasq\fP> role for details.
.sp
\fBExample: nginx\fP
.sp
Most other DebOps roles which manage applications are able to restrict access
through the firewall based on source IP addresses and network ranges. This is
typically done by defining a corresponding \fBservice_allow\fP variable. In case
of \fI\%debops.nginx\fP <\fBhttps://github.com/debops/ansible-nginx\fP> this configuration would look as following:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
nginx_allow: [ \(aq{{ ansible_eth1.ipv4.network }}/{{ ("0.0.0.0/" + ansible_eth1.ipv4.netmask) | ipaddr("prefix") }}\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will restrict access to the HTTP service running on the gateway host to
the internal IPv4 network which is automatically defined using the \fBansible_eth1\fP
host fact.
.SS Restrict Outgoing Traffic
.sp
Many \fBiptables\fP setups are rather lax when it\(aqs about restricting outgoing
traffic. By default DebOps will set the iptables \fBOUTPUT\fP policy to \fBACCEPT\fP
which will permit every outgoing connection attempt. However, it is always a
good idea to also limit the connections which can be made from within a host,
especially if the host is directly connected to the Internet.
.sp
Unfortunately \fBdebops.ferm\fP doesn\(aqt provide any predefined rule lists to
restrict outgoing traffic, therefore they need to be custom defined entirely.
On the other hand this will be a good example for defining rule lists also for
any other purpose.
.INDENT 0.0
.IP \(bu 2
First create an Ansible list with an individually chosen name which will
hold the custom output rules. For every outgoing connection which should be
allowed to the internal or external network a rule needs to be added. Every
template described in the ferm__ref_rule_types chapter can be used for the
custom rules. The definition below is just a minimal example to show the
procedure:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__custom_rules_filter_output:

  \- type: \(aqaccept\(aq
    chain: \(aqOUTPUT\(aq
    weight: \(aq00\(aq
    weight_class: \(aqloopback\(aq
    comment: \(aqAllow connections to loopback\(aq
    name: \(aqloopback_out\(aq
    outerface: \(aqlo\(aq
    target: \(aqACCEPT\(aq

  \- type: \(aqaccept\(aq
    chain: \(aqOUTPUT\(aq
    weight: \(aq50\(aq
    weight_class: \(aqany\-service\(aq
    comment: \(aqAllow connections to internal network\(aq
    name: \(aqinternal_out\(aq
    outerface: \(aqeth1\(aq
    target: \(aqACCEPT\(aq

  \- type: \(aqaccept\(aq
    chain: \(aqOUTPUT\(aq
    weight: \(aq03\(aq
    weight_class: \(aqfilter\-icmp\(aq
    comment: \(aqAllow outgoing ICMP requests\(aq
    name: \(aqicmp_out\(aq
    protocol: \(aqicmp\(aq
    outerface: \(aqeth0\(aq
    target: \(aqACCEPT\(aq

  \- type: \(aqaccept\(aq
    chain: \(aqOUTPUT\(aq
    weight: \(aq32\(aq
    comment: \(aqAllow outgoing DNS traffic\(aq
    name: \(aqdns_out\(aq
    protocol: \(aqudp\(aq
    dport: 53
    outerface: \(aqeth0\(aq
    target: \(aqACCEPT\(aq

  \- type: \(aqreject\(aq
    chain: \(aqOUTPUT\(aq
    weight_class: \(aqany\-reject\(aq
    name: \(aqreject_out\(aq
    comment: \(aqReject remaining outgoing traffic\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The last rule is using ferm__ref_type_reject which will reject
every packet not explicitly allowed. This will make it easier to figure out
missing rules than if the packets would simply be dropped.
.IP \(bu 2
Reference the custom rule list in one of the main rule list variables
\fBferm__rules\fP, \fBferm__group_rules\fP or
\fBferm__host_rules\fP\&. E.g.:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__host_rules: \(aq{{ ferm__custom_rules_filter_output }}\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If there are multiple custom rule lists, they can be concatenated with \fB+\fP\&.
.IP \(bu 2
Finally set the iptables \fBOUTPUT\fP policy to \fBDROP\fP:
.INDENT 2.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__default_policy_output: \(aqDROP\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.UNINDENT
.SS Block Port Scans
.sp
To block port scans there is a predefined rule \fBblock_portscans\fP which is not
enabled by default.
It will remember source addresses which try to reach closed ports and
completely blocks access from those addresses for a while. This behaviour can
be enabled by setting \fBferm__mark_portscan\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__mark_portscan: True
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
To make sure management access to the gateway is not suddenly blocked by the
mentioned rule list, trusted addresses must be whitelisted. For example when
trying out DebOps in a Vagrant environment the host running \fBvagrant\(ga\fP
should be added to the \fBferm__ansible_controllers\fP variable. Otherwise
\fBvagrant ssh\fP might suddenly be blocked by the portscan rule in case
a machine port was mistakenly accessed where no service was running:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
ferm__ansible_controllers: [ \(aq192.168.121.1\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
The host running DebOps doesn\(aqt explicitly need to be added here as it is
automatically being whitelisted.
.SH AUTHOR
Maciej Delmanowski, Robin Schneider, Reto Gantenbein
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
