.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.RSYSLOG" "5" "Mar 04, 2021" "v2.2.1" "DebOps"
.SH NAME
debops.rsyslog \- Manage syslog daemon using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBdebops service/rsyslog\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.SH DESCRIPTION
.sp
The \fI\%rsyslog\fP <\fBhttps://www.rsyslog.com/\fP> package is used to read, process, store
and forward system logs in different ways, on local or remote systems. The
\fBdebops.rsyslog\fP role can be used to easily configure log forwarding to
a central log server, as well as store logs on the filesystem or other storage
backends.
.SH GETTING STARTED
.SS Initial configuration
.sp
The \fBdebops.rsyslog\fP default configuration is designed to closely resemble
the Debian \fBrsyslog\fP package defaults. The same system logs will be
generated, although with slightly longer log rotation. If the operating system
is Debian, \fBrsyslog\fP will be run on a privileged \fBroot\fP account; if the
system is Ubuntu, an unprivileged \fBsyslog\fP account will be used by default.
.SS Configuration filename extensions
.sp
The configuration order is important, and to aid support of configuration from
other roles, the \fB/etc/rsyslog.conf\fP configuration file includes other
configuration files with different filename extensions at certain points of the
configuration:
.INDENT 0.0
.TP
.B \fB/etc/rsyslog.d/*.input\fP
These files define configuration of the \fI\%rsyslog input modules\fP <\fBhttps://www.rsyslog.com/doc/v8-stable/configuration/modules/idx_input.html\fP> which can
be used as data sources.
.TP
.B \fB/etc/rsyslog.d/*.template\fP
These configuration files can be used to create custom templates used by
\fBrsyslog\fP in different parts of the configuration.
.TP
.B \fB/etc/rsyslog.d/*.conf\fP
These files are included by default. They are meant to be used for
configuration of the local system logs, the extension is used to preserve
compatibility with Debian package conventions.
.TP
.B \fB/etc/rsyslog.d/*.output\fP
These files define configuration of the \fI\%rsyslog output modules\fP <\fBhttps://www.rsyslog.com/doc/v8-stable/configuration/modules/idx_output.html\fP> which can
be used as targets by various local and remote rulesets defined later on.
.TP
.B \fB/etc/rsyslog.d/*.ruleset\fP
These configuration files are meant to be used to define log matching rules
specific to a given system, to store logs in different files.
.TP
.B \fB/etc/rsyslog.d/*.remote\fP
These configuration files are meant to store configuration for logs coming
from other systems over the network. These rules will be defined in
a separate "ruleset" called \fBremote\fP which is used by the UDP and TCP input
modules. This way the local (system) logs and remote logs from other hosts
can be managed separately and shouldn\(aqt mix with each other.
.UNINDENT
.SS Quick start: log forwarding
.sp
\fI\%Log forwarding\fP <\fBhttps://www.rsyslog.com/sending-messages-to-a-remote-syslog-server/\fP> tells \fBrsyslogd\fP server to send all or specific syslog
messages to another syslog server(s). The debops.rsyslog role is
tailored for configuring log forwarding over TLS to a central syslog server
using \fI\%DNS SRV resource records\fP <\fBhttps://tools.ietf.org/html/draft-schoenw-opsawg-nm-srv-03\fP>\&.
.sp
The role checks if the \fB_syslog._tcp.{{ rsyslog__domain }}\fP DNS SRV resource
record exists. If it\(aqs found, the host is not configured to receive logs via
\fBrsyslog__remote_enabled\fP variable and the debops.pki role has
been configured on the host, the debops.rsyslog will generate
configuration for each target server that will send syslog messages over TLS to
port 6514 by default. This configuration can be found and changed in the
\fBrsyslog__default_forward\fP and the \fBrsyslog__default_rules\fP
variables.
.SS Quick start: receiving remote logs
.sp
The role does not configure \fBrsyslogd\fP service to receive log messages
from the network by default. To enable this, you can specify a list of allowed
IP addresses and/or CIDR subnets which are allowed to send syslog messages
using the \fBrsyslog__allow\fP, \fBrsyslog__group_allow\fP and/or
\fBrsyslog__host_allow\fP variables. Defining these in the inventory will
tell the role to configure \fBrsyslog\fP to accept remote logs and store
them in subdirectories under the \fB/var/log/remote/\fP directory. The
debops.ferm and the debops.logrotate roles will be used to
configure the IPTables firewall and log rotation respectively.
.sp
This behaviour is controlled by the \fBrsyslog__remote_enabled\fP variable.
.SS Example inventory
.sp
The debops.rsyslog role is included by default in the DebOps
\fBcommon.yml\fP playbook and does not need to be specifically enabled.
.sp
To enable the \fBdebops.rsyslog\fP role on a given host or group of hosts not
managed by DebOps, you need to add that host to the
\fB[debops_service_rsyslog]\fP Ansible inventory group:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_service_rsyslog]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
Here\(aqs an example playbook which uses \fBdebops.rsyslog\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage rsyslog service
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_all_hosts\(aq, \(aqdebops_service_rsyslog\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: etc_services
      tags: [ \(aqrole::etc_services\(aq, \(aqskip::etc_services\(aq ]
      etc_services__dependent_list:
        \- \(aq{{ rsyslog__etc_services__dependent_list }}\(aq

    \- role: apt_preferences
      tags: [ \(aqrole::apt_preferences\(aq, \(aqskip::apt_preferences\(aq ]
      apt_preferences__dependent_list:
        \- \(aq{{ rsyslog__apt_preferences__dependent_list }}\(aq

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ rsyslog__ferm__dependent_rules }}\(aq

    \- role: logrotate
      tags: [ \(aqrole::logrotate\(aq, \(aqskip::logrotate\(aq ]
      logrotate__dependent_config:
        \- \(aq{{ rsyslog__logrotate__dependent_config }}\(aq

    \- role: rsyslog
      tags: [ \(aqrole::rsyslog\(aq, \(aqskip::rsyslog\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SH UNPRIVILEGED SYSLOG AND ENCRYPTED CONNECTIONS
.sp
The \fBrsyslog\fP daemon can be used in a privileged or an unprivileged mode. In
a privileged mode the daemon is run on the \fBroot\fP account, has access to all
required files, sockets, etc. In the unprivileged mode, \fBrsyslog\fP daemon is
started in a privileged mode first, opens required sockets/ports and then drops
all of its privileges and supplementary UNIX groups.
.sp
The \fBdebops.rsyslog\fP role allows you to select which mode is used by
configuring the \fBrsyslog__unprivileged\fP boolean variable. By default, to
preserve original configuration, the role enables unprivileged mode on Ubuntu
hosts, leaving the configuration privileged on Debian hosts.
.sp
The unprivileged operation places certain restrictions on the system
configuration. In particular, the \fBrsyslog\fP process only uses its primary
system group, dropping any additional groups the user is in. This means, that
using TLS with the default configuration maintained by debops.pki role
becomes problematic \- unprivileged \fBrsyslog\fP process uses only its own
primary group, so it cannot access private keys to allow encrypted connections.
.sp
There are multiple solutions to this problem, which you can use. Each one has
pros and cons, and you should evaluate the selected method in a development
environment before implementing it in production to avoid issues.
.SS Run the daemon in privileged mode
.sp
This method is the default on Debian hosts. Ubuntu hosts use the unprivileged
mode by default, and reverting to the privileged mode should work, but that
hasn\(aqt been evaluated yet.
.sp
The daemon will be run with the \fBroot\fP permissions, and there shouldn\(aqt be
any issues with file access. Enabling TLS connections should work out of the
box. On the downside, an externally accessible service is running with \fBroot\fP
permissions, so you should be careful what hosts have access to it, this is
controlled using the firewall.
.sp
To enable this mode, set the following in the Ansible inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__unprivileged: False
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will enforce the privileged operation.
.SS Grant access to private keys by additional groups
.sp
The debops.pki role that maintains the DebOps X.509 infrastructure, allows
you to specify additional system groups, which should have access to the
private keys. This should be configured before the role creates the private
keys, because the permissions are not enforced afterwards \- this means that you
will need to recreate the private keys and certificates, or update the
permissions manually. Additional permissions are granted using the filesystem
ACL support.
.sp
To enable \fBrsyslog\fP to get access to the private keys in unprivileged mode by
the \fBsyslog\fP system groups, configure in the Ansible inventory:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Ensure that needed system group is present
pki_private_groups_present:
  \- name: \(aqsyslog\(aq
    system: True

# Add custom ACL groups to private files and directories for all PKI realms
pki_private_dir_acl_groups:  [ \(aqsyslog\(aq ]
pki_private_file_acl_groups: [ \(aqsyslog\(aq ]

# Or, add custom ACL groups to private files only in default PKI realm
pki_default_realms:
  \- name: \(aqdomain\(aq
    acme: False
    private_dir_acl_groups:  [ \(aqsyslog\(aq ]
    private_file_acl_groups: [ \(aqsyslog\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
After the PKI realm is recreated, you can check the result using command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
root@logs:~# getfacl /etc/pki/realms/domain/private
root@logs:~# getfacl /etc/pki/realms/domain/private/key.pem
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
You should see the \fBsyslog\fP entry on the list of groups that can access the
respective files and directories. When the \fBrsyslog\fP process is restarted, it
should be able to access the private keys without issues. To enable the
unprivileged mode on Debian hosts, you might want to enforce it through the
Ansible inventory. Here it is, with example log forwarding to remote host with
TCP over TLS:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Enable unprivileged operation
rsyslog__unprivileged: True

# Enable TLS support
rsyslog__capabilities: [ \(aqtls\(aq ]

# Forward logs over encrypted TCP connection
rsyslog__forward: [ \(aq*.* @@logs.{{ ansible_domain }}:6514\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Create custom PKI realm for syslog
.sp
The debops.pki role allows you to create multiple PKI realms with different
purposes and configuration. If you don\(aqt want to modify and existing
infrastructure in place, creating a separate internal realm just for syslog
might be an easy alternative.
.sp
To create new PKI realm, add this to the Ansible inventory for all involved
hosts:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Ensure that needed system group is present
pki_private_groups_present:
  \- name: \(aqsyslog\(aq
    system: True

# Create custom realm for syslog
pki_realms:
  \- name: \(aqsyslog\(aq
    acme: False
    private_dir_group:  \(aqsyslog\(aq
    private_file_group: \(aqsyslog\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When the new PKI realm is created, the private directory and files inside
should be owned by the \fBsyslog\fP group. This should ensure that the
\fBrsyslog\fP daemon in the unprivileged mode, running as \fBsyslog\fP user, should
have access to them. The certificates should be signed by existing
debops.pki Certificate Authority, so they should be trusted by all hosts in
the cluster.
.sp
When the new PKI realm is ready, you can tell \fBdebops.rsyslog\fP role to use it:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
# Enable unprivileged operation
rsyslog__unprivileged: True

# Enable TLS support
rsyslog__capabilities: [ \(aqtls\(aq ]

# Change the default PKI realm used by rsyslog
rsyslog__pki_realm: \(aqsyslog\(aq

# Forward logs over encrypted TCP connection
rsyslog__forward: [ \(aq*.* @@logs.{{ ansible_domain }}:6514\(aq ]
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
When the new configuration is applied, you should see in the \fBrsyslog\fP
configuration files that the daemon is using the correct private key and
certificate.
.SS Testing encrypted connections
.sp
To make sure that the logs are sent over an encrypted connection, you can check
the traffic using the \fBtshark\fP command. On the receiving server, run the
command:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
root@logs:~# tshark \-i eth0 \-f "dst port 514 or dst port 6514" \e
             \-d tcp.port==514,syslog \-d tcp.port==6514,syslog
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This will output packets that are sent to TCP ports 514 (plaintext traffic) and
6514 (TLS traffic). Afterwards, on remote hosts try sending some test log
messages:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
user@host:~$ logger Test log message, please ignore
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the connection is not encrypted, you should see something similar to this
(notice the unencrypted contents of the packet):
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
9 132.751792 192.0.2.2 \-> 192.0.2.1 Syslog 133 USER.NOTICE: May 16 14:06:05 host user: Test log message, please ignore\en
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the connection is encrypted, output should look similar to this:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
9 132.751792 192.0.2.2 \-> 192.0.2.1 Syslog 164 \e027\e003\e003\e000]\e000\e000\e000\e000\e000\e000\e000\e037\e257\e301,\e030\e365\e311\e324\e023qR9\eb\e352\e203\e256\e306\e260T\e023\e022\e016g\e271\e220\e325\e031\e250\e326\e323\e0045\e3549\e270\e277>\e205\e301\e256\e325\e234\e246\etzt\e333\e255\e002\e006K"\e254\e334\e021wB1\e353\ef\e356,u\e344\e220\e207d\e024o\e305\e234\eb\e201\e003Js[\e2533\e261\e207\e231?k\e230J
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Of course, the contents of the logs should appear normally in the log files,
for example in \fB/var/log/remote/hosts/host/syslog\fP you should see:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
May 16 14:06:05 host user: Test log message, please ignore
.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.rsyslog\fP default variables have more extensive configuration
than simple strings or lists, here you can find documentation and examples for
them.
.SS rsyslog__forward
.sp
The \fBrsyslog__default_forward\fP, \fBrsyslog__forward\fP,
\fBrsyslog__group_forward\fP and \fBrsyslog__host_forward\fP variables
are lists used to define forwarding rules for \fBrsyslog\fP\&. Because the
daemon configuration is ordered, the forward statements should be set in
a specific place in the configuration. You can of course define your own
forwarding rules instead of using these specific variables, if you wish.
.sp
You can check \fI\%the rsyslog remote forward documentation\fP <\fBhttps://www.rsyslog.com/sending-messages-to-a-remote-syslog-server/\fP> to see
how to forward logs to other hosts. Each configuration entry should be
specified in a separate YAML list element. The entries can be simple FQDN
hostnames which will be configured to use TCP connections over TLS and port
\fB6514\fP; alternatively you can define more detailed configuration using
specific parameters:
.INDENT 0.0
.TP
.B \fBselector\fP
What type of logs to forward to another server, by default \fB*.*\fP (all
facilities, all priorities).
.TP
.B \fBtarget\fP
The FQDN of the syslog server where logs will be forwarded.
.TP
.B \fBport\fP
The port to which \fBrsyslog\fP will connect, by default \fB6514\fP\&.
.TP
.B \fBprotocol\fP
The protocol which should be used for connections, by default \fBtcp\fP\&.
.TP
.B \fBresume_retry_count\fP
Number of times \fBrsyslog\fP should try to reconnect to the syslog server when
connection is lost, by default \fB100\fP\&.
.TP
.B \fBqueue_type\fP
The type of the internal queue to use for this server, by default \fBlinkedList\fP\&.
.TP
.B \fBqueue_size\fP
The size of the message queue, by default \fB10000\fP\&.
.UNINDENT
.SS rsyslog__configuration
.sp
The \fBrsyslog__*_configuration\fP variables define the contents of the
\fB/etc/rsyslog.conf\fP configuration file. This is the main
\fBrsyslog\fP configuration, additional config snippets can be found in
the \fB/etc/rsyslog.d/\fP directory, which can be managed using the
\fI\%rsyslog__rules\fP variables.
.SS Examples
.sp
Enable kernel log input module in \fBrsyslog\fP service:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__configuration:

  \- name: \(aqmodule_imklog\(aq
    raw: |
      module(load="imklog")
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Other examples can be found in the \fBrsyslog__original_configuration\fP
default variable. The \fBrsyslog__default_configuration\fP contains changes
to the original options applied by the role.
.SS Syntax
.sp
The variables are lists of YAML dictionaries with specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. An identification of the configuration entry, not used otherwise.
Multiple configuration entries with the same \fBname\fP parameter are merged
together; this can be used to modify already defined entries.
.TP
.B \fBstate\fP
Optional. If not defined or \fBpresent\fP, a given configuration entry will be
present in the generated config file. If \fBabsent\fP, the entry will not be
included in the configuration file. If \fBcomment\fP, the entry will be
present, but commented out. If \fBignore\fP, a given configuration entry will
not be evaluated during role execution.
.TP
.B \fBcomment\fP
Optional. String or a YAML text block with additional comments about a given
configuration entry, included in the generated file.
.TP
.B \fBraw\fP
Optional. String or YAML text block with the \fBrsyslog.conf(5)\fP
configuration options or \fI\%RainerScript definitions\fP <\fBhttps://www.rsyslog.com/doc/v8-stable/rainerscript/index.html\fP>, included in the
generated file as\-is.
.TP
.B \fBsection\fP
Optional. Specify the configuration section in which a given entry should be
included. The sections are defined using the
\fI\%rsyslog__configuration_sections\fP variables; the default sections
available are: \fBmodules\fP, \fBglobal\fP, \fBtemplates\fP, \fBoutput\fP, \fBrules\fP
and \fBunknown\fP\&. If the section is not defined, the entry will be added to
the \fBunknown\fP section.
.UNINDENT
.SS rsyslog__configuration_sections
.sp
The \fBrsyslog__*_configuration_sections\fP variables define what sections are
present in the \fB/etc/rsyslog.conf\fP configuration file. Sections will be
included in the file in the order they appear in the configuration variables.
.sp
The default set of configuration sections, defined in the
\fBrsyslog__default_configuration_sections\fP variable, is based on the
recommendations from the \fBrsyslog.conf(5)\fP manual page.
.SS Examples
.sp
Define a section with a custom title:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
rsyslog__configuration_sections:

  \- name: \(aqcustom_section\(aq
    title: \(aqExample configuration\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax
.sp
Each configuration entry is a YAML dictionary with specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. The name of the section, used in the \fBsection\fP parameter of the
\fB/etc/rsyslog.conf\fP configuration. Multiple entries with the same
\fBname\fP parameter are merged together.
.TP
.B \fBtitle\fP
Optional. This parameter can be used to override the section name which is
used in the generated configuration file.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given section will be included
in the generated configuration file. If \fBabsent\fP, the section will not be
included in the file. If \fBignore\fP, a given configuration entry will not be
evaluated during role execution. If \fBhidden\fP, the section\(aqs title comment
will be hidden in the generated configuration file.
.TP
.B \fBweight\fP
Optional. A positive or negative number which can be used to affect the order
of sections in the generated configuration file. Positive numbers add more
"weight" to the section making it appear "lower" in the file; negative
numbers substract the "weight" and therefore move the section upper in the
file.
.UNINDENT
.SS rsyslog__rules
.sp
The \fBrsyslog__*_rules\fP variables define the configuration stored in the
\fB/etc/rsyslog.d/\fP directory. Configuration files in the directory can be
named with different "extensions", each one imported at different point in the
\fB/etc/rsyslog.conf\fP configuration file. The supported extensions are:
\fB\&.module\fP, \fB\&.template\fP, \fB\&.conf\fP, \fB\&.output\fP, \fB\&.ruleset\fP, \fB\&.remote\fP\&.
.SS Examples
.sp
See the \fBrsyslog__default_rules\fP variable for example configurations.
.SS Syntax
.sp
Each configuration file is described using YAML dictionaries with specific parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the configuration file in the \fB/etc/rsyslog.d/\fP
directory. Multiple configuration entries with the same \fBname\fP parameter
will be merged together.
.TP
.B \fBdivert\fP
Optional, boolean. If specified and \fBTrue\fP, the debops.rsyslog role
will use the \fBdpkg\-divert\fP command to move specified originaL
configuration file out of the way before generating the configuration from
a template. This parameter can be used to modify the \fBrsyslogd\fP
configuration provided by the system packages.
.TP
.B \fBdivert_to\fP
Optional. If the \fBdivert\fP parameter is enabled, using this parameter you can
specify the filename to divert the file to. The diversion will be confined to
\fB/etc/rsyslog.d/\fP directory. This can be used to change the order of the
packaged configuration files if needed.
.TP
.B \fBcomment\fP
Optional. A comment added at the beginning of the file.
.TP
.B \fBraw\fP
A string or YAML text block with the \fI\%rsyslog.conf(5)\fP <\fBhttps://manpages.debian.org/rsyslog.conf(5)\fP> configuration,
included in the generated config files as\-is.
.TP
.B \fBstate\fP
Optional. Either \fBpresent\fP or \fBabsent\fP\&. If undefined or \fBpresent\fP
a given configuration file present, if \fBabsent\fP, given configuration file
will be removed. If \fBignore\fP, a given configuration entry will not be
evaluated during execution. This parameter can be used to conditionally
enable or disable parts of the configuration.
.TP
.B \fBoptions\fP
Optional. This is a list of YAML dictionaries with configuration definition
which should be included in the given file. If the \fBraw\fP parameter is
present on the file level, the \fBoptions\fP list is ignored.
.sp
Each configuration entry in the \fBoptions\fP list needs to be defined as
a YAML dictionary with parameters:
.INDENT 7.0
.TP
.B \fBname\fP
Required. An identifier for a particular section of the configuration file,
not used otherwise. The options with the same \fBname\fP parameter from
different configuration file entries are merged together.
.TP
.B \fBcomment\fP
Optional. A comment added at the beginning of a given section.
.TP
.B \fBraw\fP
A string or YAML text block with the \fI\%rsyslog.conf(5)\fP <\fBhttps://manpages.debian.org/rsyslog.conf(5)\fP> configuration,
included in the generated config file section as\-is.
.TP
.B \fBstate\fP
Optional. Either \fBpresent\fP or \fBabsent\fP\&. If undefined or \fBpresent\fP
a given configuration file or configuration section will be present, if
\fBabsent\fP, given configuration file or section will be removed. This
parameter can be used to conditionally enable or disable parts of the
configuration.
.UNINDENT
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
