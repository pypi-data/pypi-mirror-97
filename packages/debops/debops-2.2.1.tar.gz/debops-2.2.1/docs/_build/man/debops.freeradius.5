.\" Man page generated from reStructuredText.
.
.TH "DEBOPS.FREERADIUS" "5" "Mar 04, 2021" "v2.2.1" "DebOps"
.SH NAME
debops.freeradius \- Manage FreeRADIUS service using Ansible
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.SH SYNOPSIS
.sp
\fBdebops service/freeradius\fP [\fB\-\-limit\fP \fIgroup,host,\fP\&...] [\fB\-\-diff\fP] [\fB\-\-check\fP] [\fB\-\-tags\fP \fItag1,tag2,\fP\&...] [\fB\-\-skip\-tags\fP \fItag1,tag2,\fP\&...] [<\fBansible\-playbook\fP options>] ...
.SH DESCRIPTION
.sp
\fI\%FreeRADIUS\fP <\fBhttps://freeradius.org/\fP> is a RADIUS (Remote Authentication
Dial\-In User Service) server. It can be used to set up Authorization,
Authentication and Accounting (AAA) services on a wired or wireless network.
.sp
The \fBdebops.freeradius\fP Ansible role can be used to install and configure
FreeRADIUS server on a Debian/Ubuntu hosts.
.SH GETTING STARTED
.SS Example inventory
.sp
To install and manage FreeRADIUS on a host, it needs to be included in the
\fB[debops_service_freeradius]\fP Ansible inventory group:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
[debops_service_freeradius]
hostname
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Example playbook
.sp
If you are using this role without DebOps, here\(aqs an example Ansible playbook
that uses the \fBdebops.freeradius\fP role:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

\- name: Manage FreeRADIUS service
  collections: [ \(aqdebops.debops\(aq, \(aqdebops.roles01\(aq,
                 \(aqdebops.roles02\(aq, \(aqdebops.roles03\(aq ]
  hosts: [ \(aqdebops_service_freeradius\(aq ]
  become: True

  environment: \(aq{{ inventory__environment | d({})
                   | combine(inventory__group_environment | d({}))
                   | combine(inventory__host_environment  | d({})) }}\(aq

  roles:

    \- role: ferm
      tags: [ \(aqrole::ferm\(aq, \(aqskip::ferm\(aq ]
      ferm__dependent_rules:
        \- \(aq{{ freeradius__ferm__dependent_rules }}\(aq

    \- role: logrotate
      tags: [ \(aqrole::logrotate\(aq, \(aqskip::logrotate\(aq ]
      logrotate__dependent_config:
        \- \(aq{{ freeradius__logrotate__dependent_config }}\(aq

    \- role: freeradius
      tags: [ \(aqrole::freeradius\(aq, \(aqskip::freeradius\(aq ]

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Ansible tags
.sp
You can use Ansible \fB\-\-tags\fP or \fB\-\-skip\-tags\fP parameters to limit what
tasks are performed during Ansible run. This can be used after host is first
configured to speed up playbook execution, when you are sure that most of the
configuration has not been changed.
.sp
Available role tags:
.INDENT 0.0
.TP
.B \fBrole::freeradius\fP
Main role tag, should be used in the playbook to execute all of the role
tasks as well as role dependencies.
.UNINDENT
.SS Other resources
.sp
List of other useful resources related to the \fBdebops.freeradius\fP Ansible
role:
.INDENT 0.0
.IP \(bu 2
Manual pages: \fI\%radiusd.conf(5)\fP <\fBhttps://manpages.debian.org/radiusd.conf(5)\fP>, \fI\%unlang(5)\fP <\fBhttps://manpages.debian.org/unlang(5)\fP>
.IP \(bu 2
\fI\%FreeRADIUS Getting Started Guide\fP <\fBhttps://wiki.freeradius.org/guide/Getting-Started\fP>
.IP \(bu 2
\fI\%FreeRADIUS Technical Guide (PDF)\fP <\fBhttp://networkradius.com/doc/FreeRADIUS%20Technical%20Guide.pdf\fP>
.UNINDENT
.SH EXAMPLE EDUROAM SETUP
.sp
This is an example basic \fI\%eduroam\fP <\fBhttps://en.wikipedia.org/wiki/Eduroam\fP> configuration for the
debops.freeradius Ansible role.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
The files are available in the DebOps monorepo, as separate YAML
files in the \fBdocs/ansible/roles/debops.freeradius/examples/eduroam/\fP
directory.
.UNINDENT
.UNINDENT
.sp
You can put these files in the Ansible inventory, in
\fBansible/inventory/host_vars/<hostname>/\fP directory. After doing this and
tweaking the configuration you should run the debops.freeradius and
debops.resources Ansible roles against the host.
.sp
This configuration is based on the example \fI\%eduroam configuration guide\fP <\fBhttps://wiki.freeradius.org/guide/eduroam\fP> on
the FreeRADIUS Wiki. You should check this page for detailed guide about this
setup.
.SS FreeRADIUS configuration
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Configuration based on: https://wiki.freeradius.org/guide/eduroam

# DNS domain user by RADIUS
radius_domain: \(aq{{ ansible_domain }}\(aq

# Separate VLAN for external eduroam users, from other organizations
radius_guest_vlan: \(aq101\(aq

# Separate VLAN for internal eduroam users, from our organization
radius_local_vlan: \(aq102\(aq

# X.509 certificate configuration, based on DebOps PKI
radius_pki_realm: \(aqdomain\(aq
radius_cert_file: \(aq/etc/pki/realms/{{ radius_pki_realm }}/default.crt\(aq
radius_key_file: \(aq/etc/pki/realms/{{ radius_pki_realm }}/default.key\(aq
radius_ca_file: \(aq/etc/pki/realms/{{ radius_pki_realm }}/CA.crt\(aq

# Subnet on which WiFi Access Points can talk with RADIUS server
radius_access_point_subnet: \(aq192.168.2.0/24\(aq

# Shared passphrase for the Access Points to authenticate with the RADIUS
# Server
radius_access_point_password: \(aq{{ lookup("password", secret
                                  + "/radius/known\-secret\-password") }}\(aq

# Password of the client endpoint to authorized access to the network
radius_test_user_password: \(aq{{ lookup("password", secret
                               + "/radius/default\-test\-password") }}\(aq

# Allow access to FreeRADIUS service by WiFi Access Points
freeradius__host_allow: [ \(aq{{ radius_access_point_subnet }}\(aq ]

# Configuration for the \(aqdebops.freeradius\(aq Ansible role
freeradius__host_configuration:

  \- name: \(aqsites\-available/default\(aq
    raw: |
      # The domain users will add to their username to have their credentials
      # routed to your institution.  You will also need to register this
      # and your RADIUS server addresses with your NRO.
      operator_name = "{{ radius_domain }}"

      # The VLAN to assign eduroam visitors
      eduroam_guest_vlan = "{{ radius_guest_vlan }}"

      # The VLAN to assign your students/staff
      eduroam_local_vlan = "{{ radius_local_vlan }}"

      server eduroam {
        listen {
          type = auth
          ipaddr = *
          port = 1812
        }

        authorize {
          # Log requests before we change them
          linelog_recv_request

          # split_username_nai is a policy in the default distribution to
          # split a username into username and domain.  We reject user\-name
          # strings without domains, as they\(aqre not routable.
          split_username_nai
          if (noop || !&Stripped\-User\-Domain) {
            reject
          }

          # Send the request to the NRO for your region.
          # The details of the FLRs (Federation Level RADIUS servers)
          # are in proxy.conf.
          # You can make this condition as complex as you like, to
          # include additional subdomains just concatenate the conditions
          # with &&.
          if (&Stripped\-User\-Domain != "${operator_name}") {
            update {
              control:Load\-Balance\-Key := &Calling\-Station\-ID
              control:Proxy\-To\-Realm := \(aqeduroam_flr\(aq

              # Operator name (RFC 5580) identifies the network the
              # request originated from. It\(aqs not absolutely necessary
              # but it helps with debugging.
              request:Operator\-Name := "1${operator_name}"
            }
            return
          }

          # If the EAP module returns \(aqok\(aq or \(aqupdated\(aq, it means it has handled
          # the request and we don\(aqt need to call any other modules in this
          # section.
          eap {
            ok = return
            updated = return
          }
        }

        pre\-proxy {
          attr_filter.pre\-proxy
          linelog_send_proxy_request
        }

        post\-proxy {
          attr_filter.post\-proxy
          linelog_recv_proxy_response
        }

        authenticate {
          eap
        }

        post\-auth {
          # To implement eduroam you must:
          # \- Use wireless access points or a controller which supports
          #   dynamic VLAN assignments.
          # \- Have that feature enabled.
          # \- Have the guest_vlan/local_vlan available to the controller,
          #   or to all your access points.
          # eduroam user traffic *MUST* be segregated, this is *NOT* optional.
          update reply {
            Tunnel\-Type := VLAN
            Tunnel\-Medium\-Type := IEEE\-802
          }
          if (&control:Proxy\-To\-Realm) {
            update reply {
              Tunnel\-Private\-Group\-ID := ${eduroam_guest_vlan}
            }
          }
          else {
            update reply {
              Tunnel\-Private\-Group\-ID := ${eduroam_local_vlan}
            }
          }

          # We\(aqre sending a response to one of OUR network devices for one of
          # OUR users so provide it with the real user\-identity.
          if (&session\-state:Stripped\-User\-Name) {
            update reply {
              User\-Name := "%{session\-state:Stripped\-User\-Name}@%{Stripped\-User\-Domain}"
            }
          }

          linelog_send_accept

          Post\-Auth\-Type REJECT {
            attr_filter.access_reject
            linelog_send_reject
          }
        }
      }
    state: \(aqpresent\(aq

  \- name: \(aqmods\-available/eap\(aq
    raw: |
      eap {
        # The initial EAP type requested.  Change this to peap if you\(aqre
        # using peap, or tls if you\(aqre using EAP\-TLS.
        default_eap_type = ttls

        # The maximum time an EAP\-Session can continue for
        timer_expire = 60

        # The maximum number of ongoing EAP sessions
        max_sessions = ${max_requests}

        tls\-config tls\-common {
          # The public certificate that your server will present
          certificate_file = {{ radius_cert_file }}

          # The private key for the public certificate
          private_key_file = {{ radius_key_file }}

          # The password to decrypt \(aqprivate_key_file\(aq
          #private_key_password = whatever
          private_key_password = \(aq\(aq

          # The certificate of the authority that issued \(aqcertificate_file\(aq
          #ca_file = ${cadir}/ca.pem
          ca_file = {{ radius_ca_file }}

          # If your AP drops packets towards the client, try reducing this.
          fragment_size = 1024

          # When issuing client certificates embed the OCSP URL in the
          # certificate if you want to be able to revoke them later.
          ocsp {
            enable = yes
            override_cert_url = no
            use_nonce = yes
          }
        }

        tls {
          tls = tls\-common
        }

        ttls {
          tls = tls\-common
          default_eap_type = mschapv2
          virtual_server = "eduroam\-inner"
        }

        peap {
          tls = tls\-common
          default_eap_type = mschapv2
          virtual_server = "eduroam\-inner"
        }
      }
    state: \(aqpresent\(aq

  \- name: \(aqmods\-available/linelog\(aq
    raw: |
      linelog linelog_recv_request {
        filename = syslog
        syslog_facility = local0
        syslog_severity = debug
        format = "action = Recv\-Request, %{pairs:request:}"
      }

      linelog linelog_send_accept {
        filename = syslog
        syslog_facility = local0
        syslog_severity = debug
        format = "action = Send\-Accept, %{pairs:request:}"
      }

      linelog linelog_send_reject {
        filename = syslog
        syslog_facility = local0
        syslog_severity = debug
        format = "action = Send\-Reject, %{pairs:request:}"
      }

      linelog linelog_send_proxy_request {
        filename = syslog
        syslog_facility = local0
        syslog_severity = debug
        format = "action = Send\-Proxy\-Request, %{pairs:proxy\-request:}"
      }

      linelog linelog_recv_proxy_response {
        filename = syslog
        syslog_facility = local0
        syslog_severity = debug
        format = "action = Recv\-Proxy\-Response, %{pairs:proxy\-reply:}"
      }
    state: \(aqpresent\(aq

  \- name: \(aqproxy.conf\(aq
    raw: |
      home_server eduroam_flr_server_1 {
              ipaddr = 127.0.0.1
              secret = secret
        status_check = status\-server
      }

      # Only uncomment if there are two FLRS
      #home_server eduroam_flr_server_2 {
      #       ipaddr = <ip\-address>
      #       secret = <secret>
      #       status_check = status\-server
      #}
      home_server_pool eduroam_flr_pool {
              type = keyed\-balance
              home_server = eduroam_flr_server_1

      # Only uncomment if there are two FLRS
      #       home_server = eduroam_flr_server_2
      }
      realm eduroam_flr {
              auth_pool = eduroam_flr_pool
              nostrip
      }
    state: \(aqabsent\(aq
    no_log: True

  \- name: \(aqclients.conf\(aq
    raw: |
      client localhost {
        ipaddr = 127.0.0.1
        secret = testing123
      }

      #client eduroam_flr_server_1 {
      #        ipaddr = <ip\-address>
      #        secret = <secret>
      #        nastype = \(aqeduroam_flr\(aq
      #}

      # As above, only uncomment if there are two federation level servers
      #client eduroam_flr_server_2 {
      #       ipaddr = <ip\-address>
      #       secret = <secret>
      #       nastype = \(aqeduroam_flr\(aq
      #}

      client wireless_access_points_mgmt {
        ipaddr = {{ radius_access_point_subnet }}

        # This should be long and random
        secret = {{ radius_access_point_password }}
      }
    state: \(aqpresent\(aq
    no_log: True

  \- name: \(aqsites\-available/inner\-tunnel\(aq
    raw: |
      server eduroam\-inner {
        listen {
          type = auth
          ipaddr = *
          port = 18120 # Used for testing only.  Requests proxied internally.
        }

        authorize {
          # The outer username is considered garabage for autz purposes, but
          # the domain portion of the outer and inner identities must match.
          split_username_nai
          if (noop || (&Stripped\-User\-Domain && \e
              (&outer.Stripped\-User\-Domain != &Stripped\-User\-Domain))) {
            reject
          }

          # Make the user\(aqs real identity available to anything that needs
          # it in the outer server.
          update {
            &outer.session\-state:Stripped\-User\-Name := &Stripped\-User\-Name
          }

          # EAP for PEAPv0 (EAP\-MSCHAPv2)
          inner\-eap {
            ok = return
          }

          # THIS IS SITE SPECIFIC
          #
          # The files module is *ONLY* used for testing.  It lets you define
          # credentials in a flat file, IT WILL NOT SCALE.
          #
          # \- If you use OpenLDAP with salted password hashes you should
          #   call the \(aqldap\(aq module here and use EAP\-TTLS\-PAP as your EAP method.
          # \- If you use OpenLDAP with cleartext passwords you should
          #   call the \(aqldap\(aq module here and use EAP\-TTLS or PEAPv0.
          # \- If you use an SQL DB with salted password hashes you should call
          #   the \(aqsql\(aq module here and use EAP\-TTLS\-PAP as your EAP method.
          # \- If you use an SQL DB with cleartext passwords you should call
          #   the \(aqsql\(aq module here and use EAP\-TTLS or PEAPv0.
          # \- If you use Novell you should call the \(aqldap\(aq module here and
          #   set \(ga\(gaedir = yes\(ga\(ga in \(ga\(gamods\-available/ldap\(ga\(ga and use EAP\-TTLS or
          #   PEAPv0.
          # \- If you use Active Directory, you don\(aqt need anything here (remove
          #   the call to files) but you\(aqll need to follow this
          #   [guide](freeradius\-active\-directory\-integration\-howto) and use
          #   EAP\-TTLS\-PAP or PEAPv0.
          # \- If you\(aqre using EAP\-TLS (i\(aqm impressed!) remove the call to files.
          #
          # EAP\-TTLS\-PAP and PEAPv0 are equally secure/insecure depending on how the
          # supplicant is configured. PEAPv0 has a slight edge in that you need to
          # crack MSCHAPv2 to get the user\(aqs password (but this is not hard).
          files

          pap
          mschap
        }

        authenticate {
          inner\-eap
          mschap
          pap

          # Comment pap, and uncomment the stanza below if you\(aqre using
          # Active Directory this will allow it to work with EAP\-TTLS\-PAP.
          #pap {
          #   ntlm_auth
          #}
        }
      }
    state: \(aqpresent\(aq

  \- name: \(aqmods\-enabled/inner\-eap\(aq
    link_src: \(aq../mods\-available/inner\-eap\(aq

  \- name: \(aqmods\-available/inner\-eap\(aq
    raw: |
      eap inner\-eap {
        default_eap_type = mschapv2
        timer_expire = 60
        max_sessions = ${max_requests}

        mschapv2 {
          send_error = yes
        }
      }
    state: \(aqpresent\(aq

  \- name: \(aqmods\-config/files/authorize\(aq
    comment: |
      This sets the same password for any user that tries to authenticate, do
      not use in production environment
    raw: |
      DEFAULT Cleartext\-Password := \(aq{{ radius_test_user_password }}\(aq
    state: \(aqpresent\(aq
    no_log: True

.ft P
.fi
.UNINDENT
.UNINDENT
.SS Additional resources
.sp
The \fBinstall\-eapol_test\fP script created by this configuration can be used
to install the \fBeapol_test\fP command on either the same host as the
FreeRADIUS server, or on a different, remote host, to test the connectivity
over the network.
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-\-

# Configuration based on: https://wiki.freeradius.org/guide/eduroam

# X.509 certificate configuration, based on DebOps PKI
radius_pki_realm: \(aqdomain\(aq
radius_cert_file: \(aq/etc/pki/realms/{{ radius_pki_realm }}/default.crt\(aq
radius_key_file: \(aq/etc/pki/realms/{{ radius_pki_realm }}/default.key\(aq
radius_ca_file: \(aq/etc/pki/realms/{{ radius_pki_realm }}/CA.crt\(aq

# Directory where test configuration files are stored
config_dir: \(aq/srv/eapol\-test\(aq

# Secret passphrase for the Access Points to authenticate with the RADIUS
# Server
radius_access_point_password: \(aq{{ lookup("password", secret
                                  + "/radius/known\-secret\-password") }}\(aq

# Example user to test authentication to RADIUS
radius_test_user_identity: \(aqa_user@{{ ansible_domain }}\(aq

# Password of the client endpoint to authorized access to the network
radius_test_user_password: \(aq{{ lookup("password", secret
                               + "/radius/default\-test\-password") }}\(aq

# Configuration for the \(aqdebops.resources\(aq Ansible role
resources__host_files:

  \- content: |
      #!/bin/bash

      # Install eapol_test for testing RADIUS EAP connections

      sudo apt\-get update
      sudo apt\-get \-yq install git build\-essential \e
                               libssl\-dev devscripts \e
                               pkg\-config libnl\-3\-dev \e
                               libnl\-genl\-3\-dev

      git clone \-\-depth 1 \-\-no\-single\-branch https://github.com/FreeRADIUS/freeradius\-server.git

      cd freeradius\-server/scripts/travis/

      ./eapol_test\-build.sh

      sudo cp ./eapol_test/eapol_test /usr/local/bin/
    dest: \(aq/usr/local/bin/install\-eapol_test\(aq
    mode: \(aq0755\(aq

  \- content: |
      #
      #   eapol_test \-c eap\-tls.conf \-s "{{ radius_access_point_password }}" \e
      #              \-a <radius\-ip\-server>
      #
      network={
          key_mgmt=WPA\-EAP
          eap=TTLS
          identity="{{ radius_test_user_identity }}"
          anonymous_identity="anonymous@{{ ansible_domain }}"

          # Uncomment to validate the server\(aqs certificate by checking
          # it was signed by this CA.
          ca_cert="{{ radius_ca_file }}"
          password="{{ radius_test_user_password }}"
          phase2="auth=PAP"
      }
    dest: \(aq{{ config_dir }}/eap\-tls.conf\(aq
    mode: \(aq0644\(aq

  \- content: |
      #
      #   eapol_test \-c peap\-mschapv2.conf \-s "{{ radius_access_point_password }}" \e
      #              \-a <radius\-ip\-address>
      #
      network={
          key_mgmt=WPA\-EAP
          eap=PEAP
          identity="{{ radius_test_user_identity }}"
          anonymous_identity="anonymous@{{ ansible_domain }}"

          # Uncomment to validate the server\(aqs certificate by checking
          # it was signed by this CA.
          ca_cert="{{ radius_ca_file }}"
          password="{{ radius_test_user_password }}"
          phase2="auth=MSCHAPV2 mschapv2_retry=0"
          phase1="peapver=0"
      }
    dest: \(aq{{ config_dir }}/peap\-mschapv2.conf\(aq
    mode: \(aq0644\(aq

  \- content: |
      #
      #   eapol_test \-c tls.conf \-s "{{ radius_access_point_password }}" \e
      #              \-a <radius\-ip\-address>
      #
      network={
          key_mgmt=WPA\-EAP
          eap=TLS
          anonymous_identity="anonymous@{{ ansible_domain }}"

          # Uncomment to validate the server\(aqs certificate by checking
          # it was signed by this CA.
          ca_cert="{{ radius_ca_file }}"

          # supplicant\(aqs public cert
          client_cert="{{ radius_cert_file }}"

          # supplicant\(aqs private key
          private_key="{{ radius_key_file }}"

          # password to decrypt private key
          private_key_passwd=""
      }
    dest: \(aq{{ config_dir }}/tls.conf\(aq
    mode: \(aq0644\(aq

.ft P
.fi
.UNINDENT
.UNINDENT
.SH DEFAULT VARIABLE DETAILS
.sp
Some of \fBdebops.freeradius\fP default variables have more extensive
configuration than simple strings or lists, here you can find documentation and
examples for them.
.SS freeradius__configuration
.sp
The \fBfreeradius__*_configuration\fP variables define the contents of the
FreeRADIUS configuration files located in the \fB/etc/freeradius/\fP
directory. The variables contain a list of YAML dictionaries, each dictionary
describes one "object" (file or symlink). The dictionaries with the same
\fBname\fP parameter are merged together; it is possible to override existing
entries by later ones. This can be used to modify the configuration
conditionally.
.SS Examples
.sp
Define a custom \fBradiusd.conf\fP configuration file with contents specified
in a YAML text block:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
freeradius__configuration:

  \- name: \(aqradiusd.conf\(aq
    raw: |
      # Contents of the configuration file
      # ...
      # Contents of the configuration file
    state: \(aqpresent\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Enable the LDAP support via a symlink:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
freeradius__configuration:

  \- name: \(aqmods\-enabled/ldap\(aq
    link_src: \(aq../mods\-available/ldap\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Define custom client list with passwords in the configuration file; each
section can be modified separately in other configuration entries:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
freeradius__configuration:

  \- name: \(aqclients.conf\(aq
    no_log: True
    options:

      \- name: \(aqclient_localhost\(aq
        comment: |
          Local client, used for testing
        raw: |
          client localhost {
              ipaddr = 127.0.0.1
              secret = testing123
          }
        state: \(aqpresent\(aq

      \- name: \(aqclient_ap_mgmt\(aq
        raw: |
          client ap_mgmt {
              ipaddr = 192.0.2.0/24
              secret = pa$$word
          }
        state: \(aqpresent\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
Include a directory from a config file:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
freeradius__configuration:

  \- name: \(aqcustom.conf\(aq
    comment: |
      Include custom configuration from a directory
    raw: |
      $INCLUDE custom\-dir/
    state: \(aqpresent\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.SS Syntax
.sp
Each YAML dictionary entry can use specific set of parameters:
.INDENT 0.0
.TP
.B \fBname\fP
Required. Name of the configuration file or symlink to manage. This parameter
is used as an anchor to merge multiple configuration entries together.
.sp
The specified configuration files are relative to the path defined in the
\fBfreeradius__conf_base_path\fP variable. You need to specify the full
filenames with extensions, you can specify files in subdirectories as normal.
.TP
.B \fBfilename\fP
Optional. An alternative filename to use instead of the one in \fBname\fP\&.
.TP
.B \fBowner\fP
Optional. Specify UNIX account which will be other owner of the generated
file. If not specified, \fBfreeradius__user\fP will be the owner.
.TP
.B \fBgroup\fP
Optional. Specify UNIX group of the generated file. If not specified,
\fBfreeradius__group\fP will be set as the group.
.TP
.B \fBmode\fP
Optional. Specify the file mode/attributes of the generated file. If not
specified, \fB0640\fP will be used by default.
.TP
.B \fBdivert\fP
Optional, boolean. If \fBTrue\fP, the role will use the \fBdpkg\-divert\fP
command to move the original configuration file packaged in the
\fBfreeradius\-config\fP APT package out of the way to preserve it for reference
and to not create issues during package upgrades. The file will be reverted
back when the \fBstate\fP parameter is set to \fBabsent\fP\&.
.sp
The role checks what files in the FreeRADIUS configuration directory are
marked as Debian Conffiles and automatically diverts/reverts them as
necessary. This parameter can be used to override this behaviour.
.sp
The diverted files have a dot (\fB\&.\fP) prepended to them, this will ensure
that \fI\%the files will be ignored\fP <\fBhttps://networkradius.com/doc/3.0.10/raddb/syntax/config_include.html\fP> by the FreeRADIUS \fB$INCLUDE dir/\fP
directive.
.TP
.B \fBdivert_filename\fP
Optional. An alternative name of the diverted file. This parameter can be
used to override the name automatically generated by the role.
.TP
.B \fBlink_src\fP
If specified, the file defined in the \fBname\fP parameter will be a symlink to
the file defined by this parameter. You can use relative paths, for example:
.INDENT 7.0
.INDENT 3.5
.sp
.nf
.ft C
freeradius__configuration:
  \- name: \(aqsites\-enabled/default\(aq
    link_src: \(aq../sites\-available/default\(aq
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
If the \fBstate\fP parameter is set to \fBabsent\fP, the symlink will be removed.
.TP
.B \fBraw\fP
A string or YAML text block with FreeRADIUS configuration. It will be put in
the generated configuration file as\-is.
.TP
.B \fBoptions\fP
An alternative way to specify the contents of the configuration file. This is
a list of YAML dictionaries, each dictionary can use parameters:
.INDENT 7.0
.TP
.B \fBname\fP
The name of the configuration section. If \fBvalue\fP parameter is present,
it will be used as the variable name on the left side of the equal
expression. If the \fBraw\fP parameter is present, the value of the \fBname\fP
parameter is not used in the configuration file. This parameter is used as
an anchor to merge options from multiple configuration entries.
.TP
.B \fBvalue\fP
If specified, it will be used as the value on the right site of the equal
expression.
.TP
.B \fBraw\fP
String or YAML text block with FireeRADIUS configuration. It will be put in
the generated configuration file as\-is.
.TP
.B \fBcomment\fP
String or YAML text block with comments about a given configuration
section.
.TP
.B \fBstate\fP
If not specified or \fBpresent\fP, a given configuration section will be
included in the generated file. If \fBabsent\fP, a given configuration
section will not be included in the configuration file. If \fBignore\fP,
a given configuration entry will not be evaluated by the role.
.UNINDENT
.sp
The \fBoptions\fP lists from multiple configuration entries are merged
together. You can use this to create a FreeRADIUS configuration files from
multiple parts that can be conditionally activated.
.TP
.B \fBstate\fP
Optional. If not specified or \fBpresent\fP, a given configuration file or
symlink will be created. If \fBabsent\fP, a given configuration file or symlink
will be removed (original file will be reverted, if it was diverted). If
\fBignore\fP, a given configuration entry will not be evaluated by the role.
.TP
.B \fBno_log\fP
Optional, boolean. If \fBTrue\fP, Ansible will not log the task for a given
file. This is useful to enable when files contain passwords, so that they
will not be leaked in the logs.
.TP
.B \fBcomment\fP
Optional. String or YAML text block with comments included at the beginning
of the generated file.
.UNINDENT
.SH AUTHOR
Maciej Delmanowski
.SH COPYRIGHT
2014-2021, Maciej Delmanowski, Nick Janetakis, Robin Schneider and others
.\" Generated by docutils manpage writer.
.
