Metadata-Version: 2.1
Name: djangofile
Version: 2.2.0
Summary: Djangofile: Django Reusable app to Publish files.
Home-page: https://github.com/bhojrampawar/djangofile
Author: Bhojram pawar
Author-email: bhojrampawar@hotmail.com
License: MIT
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 2.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Description-Content-Type: text/markdown
Requires-Dist: django
Requires-Dist: djangorestframework
Requires-Dist: pillow
Requires-Dist: djangorestframework-simplejwt
Requires-Dist: django-crispy-forms
Requires-Dist: django-filter
Requires-Dist: djangotools
Requires-Dist: django-taggit

## Djangofile : Django Reusable app to Publish Files.

**Djangofile** is a **Reusable Django app** which provides a full featured File Model. The Djangoarticle's File Model is rich features and powerful enough to start a **Blog** and **News website**, without installation of any 3rd party packages.
___


## Installation :
You can install **Djangofile** from PyPI using **pip**.

``` pip install djangofile ```
___


## Configuration :
***1. Open the ```settings.py``` module of your project, And put djangoarticle into ```INSTALLED_APPS```.***
```python
INSTALLED_APPS = (
    ...
    'djangofile',
    ...
)
```

***2. Open the ```urls.py``` module of your project, And include djangoarticle URLs.***
```python
urlpatterns = [
    ...
    re_path(r'^file/', include('djangofile.urls')),
    ...
]
```

***3. Setup the Templates for djangoadmin.***
>> ***Important Note***: Djangofile App is a part of Djangoengine project. And if you want to access UI part of Djangofile App, You need to configure some Reusable/global templates to your django project or you can create your own templates, It's very easy.
```python
TEMPLATES = [
    ...
    ...
    'DIRS': [os.path.join(BASE_DIR, 'templates'),],
    ...
    ...
]
```

Create the ```templates``` folder inside ```BASE_DIR``` and Then create ```djangoadmin``` folders inside the templates folder.
Then [download](https://www.dropbox.com/sh/na4tzfewub5mhe5/AABmyPHZ3KFZSpC7lH9Uvl5Ya?dl=0) the djangoadmin templates and put them inside the ```djangoadmin``` folder.

***4. Static files configuration.***
Open your ```settings.py``` module and Configure Static files and media files or you can can use your own configuration.
```python
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static-local'),)
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static-root', 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static-root', 'media')
```

Create the ```static-local``` folder inside ```BASE_DIR```, Then create ```djangoadmin``` folders inside that ```static-local``` folder.
And also [download](https://www.dropbox.com/sh/1jjul5c7kauas3o/AACeEf_OqpnzTe_iqK-r3SNMa?dl=0) the djangoadmin static files and put them inside the ```djangoadmin``` folder.
___


## Complete the Djangoarticle setup by running the following command one by one in the sequence.
```python
python manage.py makemigrations djangofile
python manage.py migrate djangofile
python manage.py collectstatic
python manage.py runserver
```

