{"vi_templatejevjreof":"{\"nodes\":[{\"x\":111,\"y\":98,\"weight\":1,\"fixed\":true,\"text\":\"init\",\"initial\":true,\"px\":111,\"py\":98},{\"x\":194,\"y\":181,\"weight\":1,\"fixed\":true,\"text\":\"coinci\",\"px\":194,\"py\":181,\"marked\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"2,3\"},{\"source\":0,\"target\":1,\"text\":\"4\"},{\"source\":1,\"target\":0,\"text\":\"2,3\"}],\"usercode\":\"HISTOGRAM(h1,[(64,`binsize`,\\\"time-11700\\\"),(64,`binsize`,\\\"time-11300\\\")])\\nCOINCIDENCE(cc,2,4)#(name, slots, emit on ch x when filled)\\nCLOCK(c2)\\nCLOCK(c3)\\n--2-->init:\\n    c2.stop()\\n    cc.fill(0)\\n--3-->init:\\n    c3.stop()\\n    cc.fill(1)\\n    \\ncoinci:\\n    (c2,c3).infer_start_from_stop(SYNC)\\n    cc.clear()\\n    #sort(\\\"stop\\\",c2,c3)\\n    h1.record(c2,c3)\"}","vi_templatejfcc5rlm":"{\"nodes\":[{\"x\":103,\"y\":91,\"fixed\":true,\"text\":\"a\",\"initial\":true,\"px\":103,\"py\":91}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"1\"}],\"usercode\":\"a:\\n    emit(3,0)# here, ch1 is duplicated to ch3 with a delay of 0ps\"}","dpp_template_code":"#------IMPORTS-----\r\nimport numpy as np\r\nimport dash\r\nimport dash_core_components as dcc\r\nimport dash_html_components as html\r\nimport plotly.graph_objs as go\r\nfrom os import path\r\n#------ETA PROCESSING-----\r\n\r\ncutfile = eta.clips(file)\r\nresult = eta.run(cutfile, group='compile')\r\nh1=result[\"h1\"]\r\nprint(np.max(h1))\r\n#h1=np.loadtxt(\"h1.tensor\")\r\n#np.savetxt(\"h1.tensor\",h1)\r\n\r\n\r\n#------PLOTTING-----\r\napp = dash.Dash()\r\napp.layout = html.Div(children=[\r\n    html.H1(children=expname),\r\n    dcc.Graph(\r\n        id='example-graph',\r\n        figure={\r\n            'data': [go.Heatmap(z=h1,\r\n            colorscale= [\r\n                [0, 'rgb(250, 250, 250)'],        #0\r\n                [1./10000, 'rgb(200, 200, 200)'], #10\r\n                [1./1000, 'rgb(150, 150, 150)'],  #100\r\n                [1./100, 'rgb(100, 100, 100)'],   #1000\r\n                [1./10, 'rgb(50, 50, 50)'],       #10000\r\n                [1., 'rgb(0, 0, 0)'],             #100000\r\n            ],\r\n            colorbar= {\r\n                'tick0': 0,\r\n                'tickmode': 'array',\r\n                #'tickvals': [0, 1, 10, 80]\r\n            }) ],\r\n            'layout': {\r\n                'width':600,\r\n                'height':600,\r\n                'xaxis' : {'title' : 'Delay sync -> D1 (ps)'},\r\n                'yaxis' : {'title' : 'Delay sync -> D2 (ps)'}\r\n            }\r\n        }\r\n    )\r\n])\r\neta.display(app)","eta_index_table":"[{\"id\":\"var_templatejkilyqop\",\"name\":\"file\",\"group\":\"compile\",\"info\":\"\",\"config\":\"C:/YourFolder/YourFile.timetag\"},{\"id\":\"var_templatejkilyhqk\",\"name\":\"binsize\",\"group\":\"compile\",\"info\":\"\",\"config\":\"300\"},{\"id\":\"var_templatejkilym3w\",\"name\":\"expname\",\"group\":\"compile\",\"info\":\"\",\"config\":\"two-time correlation\"},{\"id\":\"dpp_template_code\",\"name\":\"plotly\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejgmgxm2o\",\"name\":\"bokeh\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"dpp_templatejhj7imob\",\"name\":\"txt and graph saver\",\"group\":\"compile\",\"info\":\"\",\"config\":\"\"},{\"id\":\"vi_templatejevjreof\",\"name\":\"startstop\",\"group\":\"compile\",\"info\":\"ðŸ“¥[2, 3, 4] ðŸ“¤[4] \",\"config\":\"\"},{\"id\":\"vi_templatejfcc5rlm\",\"name\":\"DL1-3\",\"group\":\"compile\",\"info\":\"ðŸ“¥[1] ðŸ“¤[3] \",\"config\":\"\"},{\"id\":\"vi_templatejoptfzq1\",\"name\":\"DL0-2\",\"group\":\"compile\",\"info\":\"ðŸ“¥[0] ðŸ“¤[2] \",\"config\":\"\"},{\"id\":\"vi_templatek707alwa\",\"name\":\"Time Tagger\",\"group\":\"compile\",\"info\":\"ðŸ“œ[0, 1] \",\"config\":\"\"}]","dpp_templatejgmgxm2o":"#------IMPORTS-----\r\nfrom os import path\r\n#------ETA PROCESSING-----\r\n\r\ncutfile = eta.clips(file)\r\nh1 = eta.run(cutfile, group='compile')\r\n#h1=np.loadtxt(\"h1.tensor\")\r\n#np.savetxt(\"h1.tensor\",h1)\r\n\r\n\r\n\r\ndef app(doc):\r\n    global h1\r\n    from bokeh.layouts import column\r\n    from bokeh.models import  Slider\r\n    import bokeh.palettes\r\n    from bokeh.plotting import figure\r\n    import numpy as np\r\n    p1 = figure(x_range=(0, 10), y_range=(0, 10))\r\n    # must give a vector of image data for image parameter\r\n    p1.image(image=[h1], x=0, y=0, dw=10, dh=10,palette =bokeh.palettes.inferno(100))\r\n    def callback(attr, old, new):\r\n        print(\"callback called\")\r\n    slider = Slider(start=0, end=30, value=0, step=1, title=\"Smoothing by N Days\")\r\n    slider.on_change('value', callback)\r\n    doc.add_root(column(slider, p1))\r\n\r\n\r\n#------PLOTTING-----\r\n\r\neta.display(app)\r\n\r\n","dpp_templatejhj7imob":"#------IMPORTS-----\r\nimport numpy as np\r\nimport matplotlib.pyplot as plt\r\nfrom pylab import figure, cm\r\nfrom matplotlib.colors import LogNorm\r\nfrom pathlib import Path\r\n\r\ndef get_files(extensions):\r\n    global path\r\n    all_files = []\r\n    for ext in extensions:\r\n        all_files.extend(path.glob(ext))\r\n    return all_files\r\n\r\n#------ETA PROCESSING-----\r\nbinsize=int(binsize)\r\npath = Path(file)\r\ngraphsfolder='graphs'\r\ndatafolder='analyzed data'\r\n\r\nselector = (f for f in get_files(('*.ptu','*.timeres'))) if path.is_dir() else [path]\r\n\r\nfor f in selector:\r\n    eta.send('Analyzing ' + str(f.stem) + '.')\r\n    cutfile = eta.clips(f)\r\n    result = eta.run(cutfile, group='compile')\r\n    h1=result[\"h1\"]\r\n    #h1=np.loadtxt(\"h1.tensor\")\r\n    \r\n    #------PLOTTING-----\r\n    extent=[0,len(h1[0])*binsize, 0, len(h1[1])*binsize]\r\n    \r\n    \r\n    plot1 = plt.imshow(h1, interpolation='none', origin='lower', extent=extent, cmap=cm.gray_r, norm=LogNorm(vmin=0.5, vmax=np.max(h1)))\r\n    cbar = plt.colorbar(plot1)\r\n    plt.ylabel('Sync ==> D1 (ps)')\r\n    plt.xlabel('Sync ==> D2 (ps)')\r\n    \r\n    \r\n    f.parent.joinpath(datafolder).mkdir(parents=True, exist_ok=True)\r\n    f.parent.joinpath(graphsfolder).mkdir(parents=True, exist_ok=True)\r\n    \r\n    np.savetxt(f.parent.joinpath(datafolder, path.stem + '_two-time' + \".txt\"), h1)\r\n    plt.savefig(f.parent.joinpath(graphsfolder, path.stem + '_two-time' + '.png'), format = 'png')\r\n    plt.savefig(f.parent.joinpath(graphsfolder, path.stem + '_two-time' + '.eps'), format = 'eps')\r\n    plt.clf()\r\n    eta.send('Done with ' + str(f) + '.')","var_templatejkilyhqk":null,"var_templatejkilym3w":null,"var_templatejkilyqop":null,"ri_templatejkin4wh8":null,"vi_templatejoptfzq1":"{\"nodes\":[{\"x\":142,\"y\":83,\"fixed\":true,\"text\":\"b\",\"initial\":true}],\"edges\":[{\"source\":0,\"target\":0,\"text\":\"0\"}],\"usercode\":\"b:\\n    emit(2,0)# here, ch0 is duplicated to ch2 with a delay of 0ps\"}","vi_templatek707alwa":"{\"nodes\":[{\"x\":82,\"y\":52,\"fixed\":true,\"initial\":true}],\"edges\":[],\"usercode\":\"\\n########## click Help on the menu to get started! ##########\\nRFILE(timetagger1,[0,1])\"}"}