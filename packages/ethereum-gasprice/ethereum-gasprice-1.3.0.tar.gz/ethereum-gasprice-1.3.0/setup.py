# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['ethereum_gasprice',
 'ethereum_gasprice.controller',
 'ethereum_gasprice.providers']

package_data = \
{'': ['*']}

install_requires = \
['eth-utils>=1.0.0', 'httpx>=0.10.0,<=1.0.0']

extras_require = \
{'web3': ['web3>=5.0.0']}

setup_kwargs = {
    'name': 'ethereum-gasprice',
    'version': '1.3.0',
    'description': 'Tool for fetching actual gasprice in ethereum blockchain',
    'long_description': '<p align="center">\n  <a href="https://github.com/elastoo-team/ethereum-gasprice-py">\n    <img src="https://raw.githubusercontent.com/elastoo-team/ethereum-gasprice-py/master/docs/_static/readme-logo.jpg">\n  </a>\n</p>\n\n\nEthereum gasprice: Actual gasprice for ethereum blockchain\n=======================================\n\n[![PyPI](https://img.shields.io/pypi/v/ethereum-gasprice)](https://pypi.org/project/ethereum-gasprice/)\n[![Build Status](https://img.shields.io/endpoint.svg?url=https%3A%2F%2Factions-badge.atrox.dev%2FElastoo-Team%2Fethereum-gasprice-py%2Fbadge&style=flat)](https://actions-badge.atrox.dev/Elastoo-Team/ethereum-gasprice-py/goto)\n[![Documentation Status](https://readthedocs.org/projects/ethereum-gasprice/badge/?version=latest)](https://ethereum-gasprice.readthedocs.io/en/latest/?badge=latest)\n\nLibrary for fetching actual ethereum blockchain gasprice from different sources:\n[Etherscan Gas Tracker](https://etherscan.io/gastracker), [Eth Gas Station](https://ethgasstation.info/),\n[Etherchain Gasprice Oracle](https://www.etherchain.org/tools/gasPriceOracle),\n[Web3 RPC Method](https://web3py.readthedocs.io/en/stable/web3.eth.html#web3.eth.Eth.gasPrice).\n\nRead more about gas and fee from [this article](https://ethereum.org/en/developers/docs/gas/)\n\n# Installation\n\n```bash\npoetry add ethereum-gasprice\n```\n\nor\n\n```bash\npip3 install ethereum-gasprice\n```\n\n# Quickstart\n\n```python\nfrom ethereum_gasprice import GaspriceController, GaspriceStrategy, EthereumUnit\nfrom ethereum_gasprice.providers import EtherscanProvider\n\nETHERSCAN_API_KEY = "..."\n\n# Pass api key to GaspriceController to initialize provider\ncontroller = GaspriceController(\n    settings={EtherscanProvider.title: ETHERSCAN_API_KEY},\n)\n\n# Get gasprice by one of these strategies:\ngasprice = controller.get_gasprice_by_strategy(GaspriceStrategy.FAST)\nprint(gasprice)  # output: 69\n```\n\n# Docs\n\nRead base API references and other part documentation\non [ethereum-gasprice.readthedocs.io](https://ethereum-gasprice.readthedocs.io/en/latest/)\n\n# Usage\n\n### Gasprice controller\n\nMain entrypoint to fetching gasprice from providers. Has sync and async implementations.\n\nIt is recommended to initialize controller with `with ... as controller:` method\n\n```python\nfrom ethereum_gasprice import GaspriceController, AsyncGaspriceController\n```\n\nParameters:\n\n* `return_unit` - return gasprice in given ethereum unit. It is recommended to use `EthereumUnit` class\n  from `ethereum_gasprice.consts` to choose unit\n* `providers` - tuple of providers what will be used in fetching gasprice. Order of providers is important\n\n- gasprice will be fetch in given priority. Providers must be a subclass of `BaseGaspriceProvider`\n\n* `settings` - dict containing secrets for providers. Key is provider title slug, value is a secret for provider.\n\n```python\nfrom ethereum_gasprice.consts import EthereumUnit\nfrom ethereum_gasprice.providers import (\n    EtherscanProvider, EthGasStationProvider, AsyncEtherscanProvider, AsyncEthGasStationProvider\n)\n\nsettings = {\n    EtherscanProvider.title: "API_KEY",\n    EthGasStationProvider.title: "API_KEY"\n}\n\nsync_providers = (EtherscanProvider, EthGasStationProvider)\nasync_providers = (AsyncEtherscanProvider, AsyncEthGasStationProvider)\n\nwith GaspriceStrategy(\n        return_unit=EthereumUnit.GWEI,\n        providers=sync_providers,\n        settings=settings\n) as controller:\n    # Do something\n    pass\n\nasync with AsyncGaspriceController(\n        return_unit=EthereumUnit.WEI,\n        providers=async_providers,\n        settings=settings\n) as async_controller:\n    # Do something\n    pass\n\n\n\n```\n\nMethods:\n\n* `.get_gasprice_by_strategy()` - get gasprices from first available provider and return only one gasprice strategy.\n\navailable strategies: slow (`GaspriceStrategy.SLOW`), regular (`GaspriceStrategy.REGULAR`),\nfast (`GaspriceStrategy.FAST`), fastest (`GaspriceStrategy.FASTEST`).\n\nSome providers does not have info for some strategies. For example, Etherscan does not provide gasprice for slow\nstrategy.\n\nIn any case method will return dict with these for strategies. If fail case strategy (when all provides is unavailable)\ndict with `None` values will be returned.\n\n```python\nfrom ethereum_gasprice.consts import GaspriceStrategy\n\ngasprice = controller.get_gasprice_by_strategy(GaspriceStrategy.FAST)  # type: int, example: 69\n```\n\n* `.get_gasprices()` - gets gasprices for all strategies from first available provider. Returns a dict.\n\n```python\ngasprices = await async_controller.get_gasprices()  # type: dict\nprint(gasprices)\n\n# {\'slow\': None, \'regular\': 17, \'fast\': 19, \'fastest\': 20}\n```\n\n* `.get_gasprice_from_all_sources()` - get gasprices for all strategies from all available provider.\n\nIt can be useful to calculate an average gasprice value from all providers to get the most objective gasprice value.\n\n```python\n\ngasprices = controller.get_gasprice_from_all_sources()  # type: dict\nprint(gasprices)\n# {\n#   \'etherscan\': {\'slow\': None, \'regular\': 17, \'fast\': 19, \'fastest\': 29},\n#   \'ethgasstation\': {\'slow\': 16, \'regular\': 17, \'fast\': 19, \'fastest\': 20}\n# }\n\n```\n\n### Providers\n\nProvider wrapper\n\n```python\nfrom ethereum_gasprice.providers import EtherscanProvider, AsyncEtherscanProvider\n```\n\nParameters:\n\n* `secret` - any secret or api key which will be used in request.\n* `client` - sync or async [httpx Client instance](https://www.python-httpx.org/advanced/#client-instances). For async\n  provider [httpx AsyncClient](https://www.python-httpx.org/async/) should be used.\n\nMethods:\n\n* `.request()` - make request to api, returns status and response data.\n* `.get_gasprice()` - get gasprices from provider, returns gasprices in GWEI.\n\n```python\n\nfrom httpx import Client\n\nprovider = EtherscanProvider(\n    secret="API-KEY",\n    client=Client()\n)\nprint(provider.get_gasprice())\n# {\'slow\': None, \'regular\': 17, \'fast\': 19, \'fastest\': 20}\n```\n\n# TODO\n\n- [x] Initital release\n- [x] Async implementation of controller, providers\n- [x] Write documentation\n- [ ] Write unit tests with pytest\n- [ ] Integrate tests, docs and auto publishing to pypi in github pipeline\n\n# Changelog\n\nsee CHANGELOG.md file\n\n# License\n\nEthereum gasprice is licensed under the terms of the MIT License (see the file LICENSE).\n\n# Special thanks\n\n* [Artem Filippov](https://www.behance.net/filippowarfce4)\n',
    'author': 'Nikita Yugov',
    'author_email': 'nikitosnikn@yandex.ru',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/Elastoo-Team/ethereum-gasprice-py',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
