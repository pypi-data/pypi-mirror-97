#!/usr/bin/env python3
import unittest,sys,tempfile
sys.path.insert(1,"..")
import gpgmailencrypt
import gmeutils.helpers
import gmeutils.archivemanagers
import gmeutils.virusscanners
import gmeutils.spamscanners
import gmeutils.gpgmailserver
import email
import filecmp
import glob
import os
import os.path
import shutil
import time
from   gmeutils.dkim	import mydkim
from multiprocessing import Process


############################################
#utilites
############################################
def is_networkfilesystem(dir):
	return gmeutils.helpers.is_networkfs(dir)

def has_app(appname):
	return shutil.which(appname)!=None

def has_pdf():
	with gpgmailencrypt.gme() as gme:
		gme.set_configfile("./gmetest.conf")
		pdf=gme.pdf_factory()
		return pdf.is_available()

############################################
htmlbodycontent="test"
htmlbody="<body>%s</body>"%htmlbodycontent
htmlheader="<header>meta charset=\"utf-8\""

email_header="""Message-ID: <55D748F3.4020400@from.com>
Date: Fri, 21 Aug 2015 17:51:15 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
MIME-Version: 1.0
To: testaddress@gpgmailencry.pt
Subject: testmail""".replace("\r\n","\n").replace("\n","\r\n")
email_unencrypted="""Message-ID: <55D748F3.4020400@from.com>
Date: Fri, 21 Aug 2015 17:51:15 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
MIME-Version: 1.0
To: testaddress@gpgmailencry.pt
Subject: testmail
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

test

"""
email_wrongencoding="""Message-ID: <55D748F3.4020400@from.com>
Date: Fri, 21 Aug 2015 17:51:15 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
MIME-Version: 1.0
To: testaddress@gpgmailencry.pt
Subject: testmail
Content-Type: text/plain; charset=ascii
Content-Transfer-Encoding: 7bit

täöüst

"""
email_unencryptedencryptsubject="""Message-ID: <55D748F3.4020400@from.com>
Date: Fri, 21 Aug 2015 17:51:15 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
MIME-Version: 1.0
To: testaddress@gpgmailencry.pt
Subject: #encrypt testmail
Content-Type: text/plain; charset=utf-8
Content-Transfer-Encoding: 7bit

test

"""
email_gpgmimeencrypted="""Message-ID: <55D7543F.5070908@knorrnet.de>
Date: Fri, 21 Aug 2015 18:39:27 +0200
From: test@knorrnet.de
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
To: testaddress@gpgmailencry.pt
Subject: test
MIME-Version: 1.0
cOnTeNt-Type: multipart/encrypted; charset="utf-8"; boundary="===============6271318822587357114=="; protocol="application/pgp-encrypted"

This is an OpenPGP/MIME encrypted message (RFC 4880 and 3156)
--===============6271318822587357114==
Content-Type: application/pgp-encrypted
Content-Description: PGP/MIME version identification

Version: 1

--===============6271318822587357114==
Content-Type: application/octet-stream; name="encrypted.asc"
Content-Description: OpenPGP encrypted message
Content-Disposition: inline; filename="encrypted.asc"

-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)
Comment: Encrypted by gpgmailencrypt version 2.0phi

hQEMA0frgA6jyJ37AQf/SV3wAjhhr+AqZKdCEs/kXCHRCySL0MCheH8ijtbtpK+E
pGmZ3fSJB+t7iHy6ZgpKLFFYy+ecPmjffdUvoZM/VhuGIPwVGqolq88LeAgj1lJ8
lP3nJp6ZFsBlIlXb11eBmrxaDt/XXMt+d0BRWw3LqjsO01n/9sCByjXLMPXka9hd
Vi249ftG7nPK4zHCfVe6X2N6cftmdInBwHmdMbLb9d4pKVqX4FS0Px+ofTqwbuG2
ilV6zw3Y7m0nd3a8HIW+zenkxR3/QnElGWQ2wJx8CFPXq/rorCax2zHw04HCWr4b
KJO5fyUhbz5GsbcezohhY8sH1/e7ffmPg7YjgWN7i9KKAbSksJJO7nbMmVWwbOHS
vExX0KisYdN842dmCDGWv5txHfgnSqLR6VFP3W4Af3Z2tzq1zveMOFqXNpC3Pmum
zMISo6KQs+FmbC7eRLA8vdx18CEyS78GAHcW40sU1J56vyfjqHq88m8uUikbh1QV
eBJxKkkjpiCCRrPSbubBX8yd3tsEh+i7oSkz
=NEIK
-----END PGP MESSAGE-----

--===============6271318822587357114==--"""

email_gpginlineencrypted="""Message-ID: <55D74DA5.4040503@from.com>
Date: Fri, 21 Aug 2015 18:11:17 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
MIME-Version: 1.0
To: testaddress@gpgmailencry.pt
Subject: test
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: 7bit

-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)
Comment: Encrypted by gpgmailencrypt version 2.0phi

hQEMA0frgA6jyJ37AQgAw8Cnj702WZWnIJLsNkrFVmGyW0TY/NgvyG2ABnaV+12N
ReimRZWr1CRUUDHe9YsuLxw4zIpUt1saPFNjyUb1MIZFXeqpGDLpYvUZyu4Q6U2o
eY6ue7f3tp5gvK0KWK/KnzCLzDeIsA0mF4xp1wrngIDepW4qQ5NBl+lNTTwV7wfL
IF4Oxyygx+33E3EdUw801w6WaplBvJ+ZU/gzvskIkTXBz3BGI88GOUqPEw3uCED2
VovHWpxxxIWCS7bTsm/CxN6fIbwxXxRhbtaf2MKmm+kbJi4SV9aE5zA06b759fUT
ZgIXwDVJR71GkQsMI5ZDj8coMSFfziFRA0r8OQyYndJGASixF1h+aD+eT2NbDRS9
sjwSrAHipJlzgboDaKj7aZj1qsuHInFR5b67GiKjHNdihYCRoT487HY32NXdElkA
OO3rAIhyOg==
=qggM
-----END PGP MESSAGE-----
"""
email_smimeencrypted="""Message-ID: <55D76AE0.2010301@from.com>
Date: Fri, 21 Aug 2015 20:16:00 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
To: testaddress@gpgmailencry.pt
Subject: test
MIME-Version: 1.0
Content-Disposition: attachment; filename="smime.p7m"
content-type: application/pkcs7-mime; smime-type="enveloped-data"; name="smime.p7m"
Content-Transfer-Encoding: base64

MIIDTwYJKoZIhvcNAQcDoIIDQDCCAzwCAQAxggK4MIICtAIBADCBmzCBjTELMAkG
A1UEBhMCUFQxEzARBgNVBAgMClNvbWUtU3RhdGUxFzAVBgNVBAoMDmdwZ21haWxl
bmNyeXB0MSQwIgYDVQQDDBt0ZXN0YWRkcmVzc0BncGdtYWlsZW5jcnkucHQxKjAo
BgkqhkiG9w0BCQEWG3Rlc3RhZGRyZXNzQGdwZ21haWxlbmNyeS5wdAIJAJ82sqhr
oEI1MA0GCSqGSIb3DQEBAQUABIICAB3HuQmErwfMYrOhkZoaGChW5OfQ1aC+YZl4
1PIyRfCfYW0Uoaz9A9PC0UjlBYgCmGb22BmqXNIeaAZtgnpGStlphCF+WWlADI5G
Qndn43TGIaT2dNdx8xWsU2ttZ7jRqrbwAuhzFZMnx9HRGfwZDh1wv6lQS5sK5QO3
BrUtPpuNFU0gqF0NOgn069Z01l+o+UL+V3tGyQnc7F4C8BeeY05l4EQ7+eScET0W
Ri5YQmWEyWwsp5XxAUTmJpP3XUtO49j1SiGlQJ3ImBTt8XnFIbWL8Drk2ZD/jmMm
3NKkMhx1U+nkOah+0yAZJ2s3j//1jHoAKD3+qgsm9hT+e/O7BDHQ2a8oOsJDKOa/
Gf9Exeb+clW3H+Rdl3CkzQUtUDr0HkzDg/tQxWbxCjaDD/izSUN9vd4a75ex6ve8
fmqPTK/L7iKBPutawMHJBq0PYUKkc4jWUOzOtcOIPlXcNH6AyfCqB3Yfj0cw14MR
6WORbnqw4B1sH6ccfFfuHYexx8P8jeCh9pGuF/T0ZRZEeojocjVZgvpRtco4O51a
BjpSaG/khGTzkTTkWiJeM264VYDSSK+QA3DzQPICKD0CbPdAQcQs9gydm0vpTyRm
ok3ZAmQAxCF8KxpfM3HjxzITxu9hrWxG15XUB9WPs3l5E/NJtVV78DlWG2bLkyJa
abIAjL+VMHsGCSqGSIb3DQEHATAUBggqhkiG9w0DBwQISE4s3HFO/SmAWPMC3Of2
UoN4b6pIvQfmCF6171czNKU17Gug6nyAe4s6IAXLK2ChBSyok3fsKzE7bQ6H1FvL
XYe0R/JAbmXBKBQb2iffNL/Sru4kR3a0xjxmvKjGws3vaT8=
"""

smimeheader="""MIME-Version: 1.0
Content-Disposition: attachment; filename="smime.p7m"
Content-Type: application/x-pkcs7-mime; smime-type=enveloped-data; name="smime.p7m"
Content-Transfer-Encoding: base64

"""
email_pdfencrypted="""Content-Type: multipart/mixed; boundary="===============3660322619382959396=="
MIME-Version: 1.0
Message-ID: <55D748F3.4020400@from.com>
Date: Fri, 21 Aug 2015 17:51:15 +0200
From: test@from.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:31.0) Gecko/20100101 Thunderbird/31.8.0
MIME-Version: 1.0
To: testaddress@gpgmailencry.pt
Content-Type: multipart/mixed; boundary="===============3660322619382959396=="
Content-Transfer-Encoding: 7bit
Subject: testmail
X-PDFEncrypted: Encrypted by gpgmailencrypt version 2.1.0lamda

--===============3660322619382959396==
MIME-Version: 1.0
Content-Type: multipart/alternative; boundary="===============4717255930108978620=="

--===============4717255930108978620==
Content-Type: text/plain; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: base64

DQpUaGlzIGUtbWFpbCBpcyBlbmNyeXB0ZWQgdG8gcHJvdGVjdCB5b3VyIHByaXZhY3kuDQoNVGhl
IG1lc3NhZ2UgaXMgaW4gdGhlIGF0dGFjaGVkIGVuY3J5cHRlZCBwZGYgZmlsZS4gRS1NYWlsIGF0
dGFjaG1lbnRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgWklQLWZpbGUsIHdoaWNoIGlzdCBlbmNyeXB0
ZWQgd2l0aCB0aGUgc2FtZSBwYXNzd29yZC4NCg0KIA1QbGVhc2UgY29udGFjdCB0aGUgc2VuZGVy
IG9mIHRoaXMgZS1tYWlsIGZvciB0aGUgcGFzc3dvcmQuCQ0KDQoJDVBvd2VyZWQgYnkgZ3BnbWFp
bGVuY3J5cHQgMDUuMTAuMjAxNQnCqSAyMDE1IEhvcnN0IEtub3JyPGdwZ21haWxlbmNyeXB0QGdt
eC5kZT4NDQo=

--===============4717255930108978620==
Content-Type: text/html; charset="utf-8"
MIME-Version: 1.0
Content-Transfer-Encoding: base64

PGh0bWw+DQo8aGVhZD4NCjxtZXRhIGNoYXJzZXQ9InV0Zi04Ii8+DQo8c3R5bGU+DQojbWFpbnRh
YmxlIHsNCiAgICBib3JkZXItdG9wLXN0eWxlOiBzb2xpZDsgYm9yZGVyLXdpZHRoOiA1cHg7DQp9
DQo8L3N0eWxlPg0KPC9oZWFkPg0KPGJvZHk+DQo8dGFibGUgd2lkdGg9MTAwJT4NCjx0cj48dGQ+
VGhpcyBlLW1haWwgaXMgZW5jcnlwdGVkIHRvIHByb3RlY3QgeW91ciBwcml2YWN5Ljxicj4NClRo
ZSBtZXNzYWdlIGlzIGluIHRoZSBhdHRhY2hlZCBlbmNyeXB0ZWQgcGRmIGZpbGUuIEUtTWFpbCBh
dHRhY2htZW50cyBjYW4gYmUgZm91bmQgaW4gdGhlIFpJUC1maWxlLCB3aGljaCBpc3QgZW5jcnlw
dGVkIHdpdGggdGhlIHNhbWUgcGFzc3dvcmQuPGJyPjxicj4gDQpQbGVhc2UgY29udGFjdCB0aGUg
c2VuZGVyIG9mIHRoaXMgZS1tYWlsIGZvciB0aGUgcGFzc3dvcmQuPHRkPjwvdGQ+DQo8L3RhYmxl
Pg0KDQoNCjxicj48YnI+DQo8dGFibGUgd2lkdGg9MTAwJSA7IGlkPSJtYWludGFibGUiPg0KPHRk
IHN0eWxlPSJmb250LXNpemU6MC44ZW0iPg0KUG93ZXJlZCBieSA8c3BhbiBzdHlsZT0iZm9udC1z
aXplOjEuMGVtIDtiYWNrZ3JvdW5kLWNvbG9yOiAjYjBjNGRlO2ZvbnQtc3R5bGU6aXRhbGljIj5n
cGdtYWlsZW5jcnlwdCAwNS4xMC4yMDE1PC9zcGFuPg0KPC90ZD4NCjx0ZCBzdHlsZT0idGV4dC1h
bGlnbjogcmlnaHQ7Zm9udC1zaXplOjAuOGVtIDsiPsKpIDIwMTUgSG9yc3QgS25vcnImbHQ7Z3Bn
bWFpbGVuY3J5cHRAZ214LmRlPg0KPC90ZD4NCjwvdHI+DQo8L3RhYmxlPg0KPC9ib2R5Pg0KPC9o
dG1sPg0K

--===============4717255930108978620==--

--===============3660322619382959396==
Content-Type: application/pdf
MIME-Version: 1.0
Content-Disposition: attachment; filename="content.pdf"
Content-Transfer-Encoding: base64

JVBERi0xLjMKJeLjz9MKMSAwIG9iaiAKPDwKL0tpZHMgWzIgMCBSXQovVHlwZSAvUGFnZXMKL0Nv
dW50IDEKPj4KZW5kb2JqIAoyIDAgb2JqIAo8PAovQW5ub3RzIDMgMCBSCi9SZXNvdXJjZXMgNCAw
IFIKL1R5cGUgL1BhZ2UKL0NvbnRlbnRzIDUgMCBSCi9QYXJlbnQgMSAwIFIKL01lZGlhQm94IFsw
IDAgNTk1IDg0Ml0KPj4KZW5kb2JqIAo2IDAgb2JqIAo8PAovVHlwZSAvQ2F0YWxvZwovUGFnZXMg
MSAwIFIKPj4KZW5kb2JqIAozIDAgb2JqIFtdCmVuZG9iaiAKNCAwIG9iaiAKPDwKL0ZvbnQgCjw8
Ci9GNiA3IDAgUgovRjggOCAwIFIKL0Y3IDkgMCBSCj4+Ci9YT2JqZWN0IAo8PAo+PgovRXh0R1N0
YXRlIAo8PAovR1NhIDEwIDAgUgo+PgovQ29sb3JTcGFjZSAKPDwKL1BDU3AgMTEgMCBSCi9DU3Bn
IC9EZXZpY2VHcmF5Ci9DU3AgL0RldmljZVJHQgo+PgovUGF0dGVybiAKPDwKPj4KPj4KZW5kb2Jq
IAoxMCAwIG9iaiAKPDwKL1NBIHRydWUKL0NBIDEKL2NhIDEKL0FJUyBmYWxzZQovVHlwZSAvRXh0
R1N0YXRlCi9TTSAwLjAyMDAwCi9TTWFzayAvTm9uZQo+PgplbmRvYmogCjExIDAgb2JqIFsvUGF0
dGVybiAvRGV2aWNlUkdCXQplbmRvYmogCjcgMCBvYmogCjw8Ci9FbmNvZGluZyAvSWRlbnRpdHkt
SAovVG9Vbmljb2RlIDEyIDAgUgovU3VidHlwZSAvVHlwZTAKL1R5cGUgL0ZvbnQKL0Rlc2NlbmRh
bnRGb250cyBbMTMgMCBSXQovQmFzZUZvbnQgL1RpbWVzTmV3Um9tYW5QUy1Cb2xkTVQKPj4KZW5k
b2JqIAoxMyAwIG9iaiAKPDwKL0NJRFRvR0lETWFwIC9JZGVudGl0eQovQ0lEU3lzdGVtSW5mbyAK
PDwKL09yZGVyaW5nICixp14bc4TojykKL1JlZ2lzdHJ5ICi5p1QXYikKL1N1cHBsZW1lbnQgMAo+
PgovU3VidHlwZSAvQ0lERm9udFR5cGUyCi9UeXBlIC9Gb250Ci9XIFswIFs3NzIgNTUyIDU1MiA1
NTIgMzMwIDQ0MCA0NDAgMzMwIDY2MiA0OTYgNjA2IDQ0MCA4MjYgNzE2IDQ5Nl1dCi9Gb250RGVz
Y3JpcHRvciAxNCAwIFIKL0Jhc2VGb250IC9UaW1lc05ld1JvbWFuUFMtQm9sZE1UCj4+CmVuZG9i
aiAKMTQgMCBvYmogCjw8Ci9TdGVtViA5NS4yMTQ4NAovSXRhbGljQW5nbGUgMAovVHlwZSAvRm9u
dERlc2NyaXB0b3IKL0FzY2VudCA4OTEuMTEzMjgKL0ZvbnROYW1lIC9RVEFBQUErVGltZXNOZXdS
b21hblBTLUJvbGRNVAovRmxhZ3MgNAovRm9udEZpbGUyIDE1IDAgUgovRm9udEJCb3ggWy01NTgu
MTA1NDcgLTMwNi42NDA2MiAyMDMzLjY5MTQwIDEwMjUuODc4OTBdCi9DYXBIZWlnaHQgODkxLjEx
MzI4Ci9EZXNjZW50IC0yMTYuMzA4NTkKPj4KZW5kb2JqIAoxNSAwIG9iaiAKPDwKL0xlbmd0aDEg
MTA5MzYKL0ZpbHRlciAvRmxhdGVEZWNvZGUKL0xlbmd0aCA1MzAzCj4+CnN0cmVhbQrxR5rEGnBe
8pMVK5SUrZOKKgluAs/On2Ix9b55pNPQQzRB5aexdp8Az5HucqYveOTvRo4MvdHf2l8yVs5jDsIz
k3qNTjiUPC0kBUnLOPppyosAKFtwRgc2bkcVXzF9mwv9nBNepm9vtW8FwaS7mMgSQUTWK5NXoFXt
wO5sD7u3vt5LGwsoML3Y0yPf6EkAolLb0Y65jc/ibXVhCAn+8gl3TkwGqbofXud0HQ0R/lCzT3Q0
gFF6keGfSJwu5Tc4Zc5QlEKLZvUcZEKl31CrQPllW8rXtpsuYdZMkP1DCJCQ9w0YwKJ8WM4neI+S
jUV0/m4yD3TvA/UeljvGlG5nmEGRKU3K0rqT728k3iUfjaj3lc5yoy3Xh/BmUVJcByGGz1MBAmku
HhinxL9W1ypmfDifetHxcP1AV0s7VyRnSHghC7lXniTYvE6+0rey2BSujI/lHJ3GxrnNToKk4Aii
xSZiUgmEpyZOL/F4ZJxLHIPCWhkiEyfutJl4O65yUkOblpoA+B+MfZd7V251SoiHFv++edpoYejx
u7c9bCIey0q03IZ4HK4jLxDmia6q1yHZEhujydXqXOwTmkO4nIQF+eg/lZYsneV/9N7RyyAIOdDt
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
cyBbMTcgMCBSXQovQmFzZUZvbnQgL1RpbWVzTmV3Um9tYW5QU01UCj4+CmVuZG9iaiAKMTcgMCBv
YmogCjw8Ci9DSURUb0dJRE1hcCAvSWRlbnRpdHkKL0NJRFN5c3RlbUluZm8gCjw8Ci9PcmRlcmlu
ZyAof48Q+vVccu3GKQovUmVnaXN0cnkgKHePGvbkKQovU3VwcGxlbWVudCAwCj4+Ci9TdWJ0eXBl
IC9DSURGb250VHlwZTIKL1R5cGUgL0ZvbnQKL1cgWzAgWzc3MiAyNzYgMjQ4IDI3NiA0NDAgMzg2
IDc3MiA0NDAgMjc2IDI3NiA0OTYgMzMwIDkxNCA0OTYgNDk2IDQ5NiA0NDAgNDk2IDI0OCAzMzAg
NDk2IDU1MiAyNDggNDk2IDQ5NiA3MTYgNDk2IDQ5NiA0OTYgNDk2IDU1OV1dCi9Gb250RGVzY3Jp
cHRvciAxOCAwIFIKL0Jhc2VGb250IC9UaW1lc05ld1JvbWFuUFNNVAo+PgplbmRvYmogCjE4IDAg
b2JqIAo8PAovU3RlbVYgNDguODI4MTIKL0l0YWxpY0FuZ2xlIDAKL1R5cGUgL0ZvbnREZXNjcmlw
dG9yCi9Bc2NlbnQgODkxLjExMzI4Ci9Gb250TmFtZSAvUU9BQUFBK1RpbWVzTmV3Um9tYW5QU01U
Ci9GbGFncyA0Ci9Gb250RmlsZTIgMTkgMCBSCi9Gb250QkJveCBbLTU2OC4zNTkzOCAtMzA2LjY0
MDYyIDIwMjguMzIwMzEgMTAwNi44MzU5M10KL0NhcEhlaWdodCA4OTEuMTEzMjgKL0Rlc2NlbnQg
LTIxNi4zMDg1OQo+PgplbmRvYmogCjE5IDAgb2JqIAo8PAovTGVuZ3RoMSAxMjMyNAovRmlsdGVy
IC9GbGF0ZURlY29kZQovTGVuZ3RoIDY4MDAKPj4Kc3RyZWFtCi83NItItbQl4MXf5XxwMv7VW0d2
PnClGJdzwacGkJ0gkpk+9hrZw3o32U8GT7vRhScdGEDSIH6keI3F1+7SdNQqT7KBG6TOwG9p9RED
Jt/mdgB8IgOG8bPSMDhyxdf21KNuOrBrWJLIapXwDvQEdSkNUjFWeZZ3TUmEh6oiTO7M5sZVkJ+q
gYrMSzwL/D5z9058rZ8KBTqOTNYFjK72oyw8+QoFuZqPt8mUavK2Tp2Q7Z0TaNACx4siDIvuZVEP
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
bmljb2RlIDIwIDAgUgovU3VidHlwZSAvVHlwZTAKL1R5cGUgL0ZvbnQKL0Rlc2NlbmRhbnRGb250
cyBbMjEgMCBSXQovQmFzZUZvbnQgL0NvdXJpZXJOZXdQU01UCj4+CmVuZG9iaiAKMjEgMCBvYmog
Cjw8Ci9DSURTeXN0ZW1JbmZvIAo8PAovT3JkZXJpbmcgKLPyKzkxN7fAKQovUmVnaXN0cnkgKLvy
ITUgKQovU3VwcGxlbWVudCAwCj4+Ci9DSURUb0dJRE1hcCAvSWRlbnRpdHkKL1N1YnR5cGUgL0NJ
REZvbnRUeXBlMgovVHlwZSAvRm9udAovRm9udERlc2NyaXB0b3IgMjIgMCBSCi9EVyA1OTUKL0Jh
c2VGb250IC9Db3VyaWVyTmV3UFNNVAo+PgplbmRvYmogCjIyIDAgb2JqIAo8PAovU3RlbVYgNDEu
MDE1NjIKL0l0YWxpY0FuZ2xlIDAKL1R5cGUgL0ZvbnREZXNjcmlwdG9yCi9Bc2NlbnQgODMyLjUx
OTUzCi9Gb250TmFtZSAvUVlBQUFBK0NvdXJpZXJOZXdQU01UCi9GbGFncyA0Ci9Gb250RmlsZTIg
MjMgMCBSCi9Gb250QkJveCBbLTIxLjQ4NDM4IC02NzkuNjg3NTAgNjM3LjY5NTMxIDEwMjAuOTk2
MDldCi9DYXBIZWlnaHQgODMyLjUxOTUzCi9EZXNjZW50IC0zMDAuMjkyOTcKPj4KZW5kb2JqIAoy
MyAwIG9iaiAKPDwKL0xlbmd0aDEgNjc1NgovRmlsdGVyIC9GbGF0ZURlY29kZQovTGVuZ3RoIDMw
NzEKPj4Kc3RyZWFtCrhDdahWwxnUNJ7TfshYTCwIi9yQRZ5sF4cWi7Rv+yzKvO5PYLCh8dunvPzp
FmNJvZAJ0JvG8G2MkG3AlBPRiXJcuocmolvfkaZonjZ2lvnIMUxx7t+Rhy09wN+5plE+UGCYuiEw
GWaTKXiS1THoN8Pbk8ejcEo3XG8M6CJtRS6MFEuhFC6QJsRH5SOPYSsGGtVPiB5lLU1vHsJh5Y1T
Kzwwm9UiOJE2/QZL71/A1D7yuP1KI7E12nTBZmoLO9yhrHFMWvJMVtlkpNzYzG+PHXPq0Magava0
uAN9cpqUEI6MiDzlbr9ZZY+zmr30zC3stNEB6FdpI1egPhdML1nu5S2PZ/Vda8YN0Dpib3oUie9z
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
4BsXEpJpAH7HuO0c2AISvBRJh7BrsJbXbAb9xupguLciDikOLRrt8D4UmQ3N3hhtgIHdh8IJc8R3
CVA+MbAuAam2K7qkSXLQP9/1FTAa9wjNXDaJNxXoACt7dU/SH8DTEGIOp7YXKy2wEEtrcu73IJL+
xiOCwTgYDqXjCVdtXx9qS0+cn6+6l0MA8CkgbkPc7+yxqqrIZBzxVGLamIzfdxVMeGVCemE59u+z
U4J+2XiJGBoV9ah24I4llwJnAXmQknZxchIOxQVkYkIifIWjVATIoujc985zRM5i9q8iScvBbmxg
fmvqN4dbvdPs0VbGM8opNCOfgdqkJ9/rCmVuZHN0cmVhbSAKZW5kb2JqIAoyNCAwIG9iaiAKPDwK
L1YgMgovRmlsdGVyIC9TdGFuZGFyZAovVSAowyFcKFdaECSFOLFQ53aONa0AAAAAAAAAAAAAAAAA
AAAAKQovTGVuZ3RoIDEyOAovUiAzCi9QIC0zOTA0Ci9PICgOUlwpJaPk6HTDz6y+9RGnOsTsK9hl
3NPUYnYUkXq/1+QpCj4+CmVuZG9iaiAKMjUgMCBvYmogCjw8Ci9DcmVhdGlvbkRhdGUgKFMAdWS7
jGSHR3T1VqaZMJu+JLRbnVeFKQovQXV0aG9yIChjXzQgyt8n2Bpvpw/+KQovVGl0bGUgKGNfNCDn
2DzbVykKL0NyZWF0b3IgKGBRLyDn1SHYByWiQKOOMJy7JSkKL1Byb2R1Y2VyIChyVyY95osl0xEp
Ci9YLWVtYWlsMnBkZi1UbyAoY180IOvdMcUSMrcg9NBmw/R96hnDBNDoUUOSKQo+PgplbmRvYmog
eHJlZgowIDI2CjAwMDAwMDAwMDAgNjU1MzUgZiAKMDAwMDAwMDAxNSAwMDAwMCBuIAowMDAwMDAw
MDc0IDAwMDAwIG4gCjAwMDAwMDAyNDUgMDAwMDAgbiAKMDAwMDAwMDI2NCAwMDAwMCBuIAowMDAw
MDE5Njc1IDAwMDAwIG4gCjAwMDAwMDAxOTQgMDAwMDAgbiAKMDAwMDAwMDU5NSAwMDAwMCBuIAow
MDAwMDE1NDY2IDAwMDAwIG4gCjAwMDAwMDcyMDEgMDAwMDAgbiAKMDAwMDAwMDQ1OCAwMDAwMCBu
IAowMDAwMDAwNTU2IDAwMDAwIG4gCjAwMDAwMDY2ODQgMDAwMDAgbiAKMDAwMDAwMDc0NiAwMDAw
MCBuIAowMDAwMDAxMDI5IDAwMDAwIG4gCjAwMDAwMDEyODkgMDAwMDAgbiAKMDAwMDAxNDgzNyAw
MDAwMCBuIAowMDAwMDA3MzQ3IDAwMDAwIG4gCjAwMDAwMDc2OTAgMDAwMDAgbiAKMDAwMDAwNzk0
NSAwMDAwMCBuIAowMDAwMDE5MjM1IDAwMDAwIG4gCjAwMDAwMTU2MDkgMDAwMDAgbiAKMDAwMDAx
NTgyMyAwMDAwMCBuIAowMDAwMDE2MDczIDAwMDAwIG4gCjAwMDAwMjAzMzYgMDAwMDAgbiAKMDAw
MDAyMDQ4NyAwMDAwMCBuIAp0cmFpbGVyCgo8PAovSW5mbyAyNSAwIFIKL0lEIFs8NDI0ZjFjNTg2
N2FhZTdjOTFiMjQyMTNiNTE0MWY4NjA+PDBlNmU4YTdkZjE3OWRmYzhiOGExNmE0ZGNkN2ZkMGYz
Pl0KL0VuY3J5cHQgMjQgMCBSCi9Sb290IDYgMCBSCi9TaXplIDI2Cj4+CnN0YXJ0eHJlZgoyMDY5
MQolJUVPRgo=

--===============3660322619382959396==--
"""
smimecertfingerprint=("acb39e30d68b60fb5e2ddd96dd2577e3146d2f5b3ba9b05ecb703"
"f606f39a4defa486b92bff705a35ebbac7e59cf705b9723824d0eacb5e816579a700dd95e39")
spamgtube="""Subject: Test spam mail (GTUBE)
Message-ID: <GTUBE1.1010101@example.net>
Date: Wed, 23 Jul 2003 23:30:00 +0200
From: Sender <sender@example.net>
To: Recipient <recipient@example.net>
Precedence: junk
MIME-Version: 1.0
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit

This is the GTUBE, the
	Generic
	Test for
	Unsolicited
	Bulk
	Email

If your spam filter supports it, the GTUBE provides a test by which you
can verify that the filter is installed correctly and is detecting incoming
spam. You can send yourself a test mail containing the following string of
characters (in upper case and with no white spaces and line breaks):

XJS*C4JDBQADN1.NSBN3*2IDNEN*GTUBE-STANDARD-ANTI-UBE-TEST-EMAIL*C.34X

You should send this test mail from an account outside of your network.

"""
#########
#gmetests
#########
class gmetests(unittest.TestCase):

	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")

	def tearDown(self):
		self.gme.close()

		try:
			os.remove("./scriptresult.txt")
		except:
			pass

		try:

			for f in glob.glob("./result*.eml"):
				os.remove(f)

		except:
			pass

	#General tests

	def test_securitylevelscript(self):
		self.gme._SECURITYLEVEL=self.gme.s_script
		self.gme._BOUNCESCRIPT="./testscript.sh"
		self.gme.send_mails(email_unencrypted,"dunno@dunno.pt")
		f=open("./scriptresult.txt")
		txt=f.read()
		f.close()
		res=txt.split()
		print(res)
		self.assertEqual(res[0],"1:test@from.com")
		self.assertEqual(res[1],"2:dunno@dunno.pt")
		self.assertIn("3:/tmp/mail-",res[2])
		self.assertEqual(res[3],"4:")
		self.assertEqual(res[4],"5:")

	def test_securitylevelscript_msg(self):
		self.gme._SECURITYLEVEL=self.gme.s_script
		self.gme._BOUNCESCRIPT="./testscript.sh"
		self.gme.send_mails(email.message_from_string(email_unencrypted),"dunno@dunno.pt")
		f=open("./scriptresult.txt")
		txt=f.read()
		f.close()
		res=txt.split()
		print(res)
		self.assertEqual(res[0],"1:test@from.com")
		self.assertEqual(res[1],"2:dunno@dunno.pt")
		self.assertIn("3:/tmp/mail-",res[2])
		self.assertEqual(res[3],"4:")
		self.assertEqual(res[4],"5:")

	def test_configcomment(self):
		x=self.gme._SMIMECIPHER
		self.assertTrue(x=="DES3")

	def test_helper_splitstring(self):
			#123456789012345678901234567890123456789
		txt="this is a testtext that should be split"
		res=gmeutils.helpers.splitstring(txt,10)
		res2=gmeutils.helpers.splitstring(txt,35)
		self.assertEqual(res,["this is a ","testtext t","hat should"," be split"])
		self.assertEqual(res2,["this is a testtext that should be s","plit"])

	def test_helper_replace_variables(self):
		txt="this is a %REPLACEME% testtext"
		mydict={"REPLACEME":"small"}
		res=gmeutils.helpers.replace_variables(txt,mydict)
		self.assertEqual(res,"this is a small testtext")

	def test_helper_decode_html(self):
		txt="this is <li>a testtext</li>"
		res=gmeutils.helpers.decode_html(None,txt)
		self.assertEqual(res,"this is \r\n * a testtext")

	def test_helper_maildomain(self):
		txt="The address <testaddress@gpgmailencrY.pt>"
		res=gmeutils.helpers.maildomain(txt)
		self.assertEqual(res,"gpgmailencry.pt")

	def test_helper_clean_filename(self):
		txt="A [not] correct <testaddress|@gpgmailencrY.pt>"
		res=gmeutils.helpers.clean_filename(txt)
		self.assertEqual(res,"A__not__correct__testaddress_@gpgmailencrY.pt_")

	def test_parsecommandline(self):
		sys.argv=[  '/home/test/gpgmailencrypt.py',
					'-o', 'file',
					'-m', 'res.eml',
					'-e', 'smime',
					'-v',
					'testaddress@gpgmailencry.pt']
		self.gme._parse_commandline()
		self.assertEqual(self.gme.get_output(),self.gme.o_file)
		self.assertEqual(self.gme.get_default_preferredencryption(),"SMIME")
		self.assertEqual(self.gme.get_debug(),True)
		sys.argv=[  '/home/test/gpgmailencrypt.py',
					'-f', 'myfile.eml',
					'--output', 'stdout',
					'testaddress@gpgmailencry.pt']
		self.gme._parse_commandline()
		self.assertEqual(self.gme._INFILE,"myfile.eml")
		self.assertEqual(self.gme.get_output(),self.gme.o_stdout)

	def test_load_mailmaster(self):
		template=self.gme._load_mailmaster("03-virusinformation","")
		self.assertTrue("The following e-mail was stopped" in template)

	def test_preferredmethod(self):
		self.assertTrue(
			self.gme.get_preferredencryptionmethod(
				"testaddress@gpgmailencry.pt")=="PGPMIME")

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zipattachment(self):
		f=open("./attachment.eml","r")
		mail=f.read()
		f.close()
		res=self.gme.zip_attachments(mail)
		self.assertTrue("test.pdf.zip" in res.as_string())

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zipattachment_msg(self):
		f=open("./attachment.eml","r")
		mail=f.read()
		f.close()
		res=self.gme.zip_attachments(email.message_from_string(mail))
		self.assertTrue("test.pdf.zip" in res.as_string())

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zip_attachments_one_container(self):
		f=open("./attachment.eml","r")
		mail=f.read()
		f.close()
		result=self.gme.zip_attachments_one_container(
											mail,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zip_attachments_one_container_msg(self):
		f=open("./attachment.eml","r")
		mail=f.read()
		f.close()
		result=self.gme.zip_attachments_one_container(
											email.message_from_string(mail),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zip_attachments_one_container_noattachment(self):
		result=self.gme.zip_attachments_one_container(
											email_unencrypted,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertEqual(result.as_string(),email_unencrypted)

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zip_attachments_one_container_noattachment_msg(self):
		result=self.gme.zip_attachments_one_container(
											email.message_from_string(email_unencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertEqual(result.as_string(),email_unencrypted)

	@unittest.skipIf(not has_pdf(),
		"pdf support not available")
	def test_zip_attachments_one_container_noattachment_withpdfcontent_msg(self):
		result=self.gme.zip_attachments_one_container(
											email.message_from_string(email_unencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											include_contentpdf=True)
		print(result)
		self.assertTrue(".zip" in result.as_string())

	def test_getcharset(self):
		self.assertEqual(self.gme._find_charset(email_unencrypted),"utf-8")

	def test_getcharset_msg(self):
		self.assertEqual(self.gme._find_charset(email.message_from_string(email_unencrypted)),"utf-8")

	def test_check_encodefilename(self):
		origname="файл.jpg"
		f1,f2=gmeutils.helpers.encode_filename(origname)
		self.assertEqual(f1,"UTF-8''%D1%84%D0%B0%D0%B9%D0%BB.jpg")
		self.assertEqual(f2,"?UTF-8?B?0YTQsNC50LsuanBn")
		self.assertEqual("UTF-8''%s"%origname,gmeutils.helpers.decode_filename(f1))

	def test_check_encryptsubject(self):
		success=self.gme.check_encryptsubject(email_unencryptedencryptsubject)
		self.assertTrue(success)

	def test_check_encryptsubject(self):
		success=self.gme.check_encryptsubject(email_unencrypted)
		self.assertFalse(success)

	def test_check_encryptsubject_msg(self):
		success=self.gme.check_encryptsubject(email.message_from_string(email_unencrypted))
		self.assertFalse(success)

	def test_splithtml(self):
		result,header,body,footer=self.gme._split_html(htmlheader+htmlbody)
		self.assertTrue(result==True and body==htmlbodycontent)

	def test_guessfileextension(self):
		ext={"image/jpeg":"jpg",
				"APPLICATIOn/x-pKCs7-signature":"p7a",
				"application/PDF ":"pdf",
				"image/svg+xml":"svg",
				"application/powerPoint":"ppt",
				"audio/mp3":"mp3",
				"text/javascript":"js",
				"text/directory":"vcf",
				"text/unbekannt":"txt",
				"application/unbekannt":"bin"
			}

		for a in ext:
			with self.subTest(a=a):
				self.assertEqual(gmeutils.helpers.guess_fileextension(a),ext[a])

	def test_getheader(self):
		res=self.gme._get_header(email_unencrypted)
		self.assertEqual(res,email_header)

	def test_getheader_msg(self):
		res=self.gme._get_header(email.message_from_string(email_unencrypted))
		self.assertEqual(res,email_header)

	def test_iscompressable(self):
		self.assertTrue(self.gme.is_compressable("plain/text","file.txt"))

	def test_isnotcompressable(self):
		self.assertFalse(self.gme.is_compressable("image/png","file.png"))

	def test_check_bounce_mail(self):
		h="testaddress@gpgmailencry.pt"
		u="unknown@gpgmailencry.pt"
		x="unknown@unkno.wn"
		self.gme._SECURITYLEVEL=self.gme.s_bounce
		self.gme._BOUNCEHOMEDOMAIN=True
		self.assertTrue(self.gme._check_bounce_mail(h,x))
		self.assertTrue(self.gme._check_bounce_mail(h,u))
		self.assertTrue(self.gme._check_bounce_mail(h,h))
		self.assertFalse(self.gme._check_bounce_mail(x,x))
		self.assertFalse(self.gme._check_bounce_mail(x,h))
		self.assertFalse(self.gme._check_bounce_mail(x,u))

		self.gme._BOUNCEHOMEDOMAIN=False
		self.assertTrue(self.gme._check_bounce_mail(h,x))
		self.assertFalse(self.gme._check_bounce_mail(h,u))
		self.assertFalse(self.gme._check_bounce_mail(h,h))
		self.assertFalse(self.gme._check_bounce_mail(x,x))
		self.assertFalse(self.gme._check_bounce_mail(x,h))
		self.assertFalse(self.gme._check_bounce_mail(x,u))

	def test_check_nobounce_mail(self):
		h="testaddress@gpgmailencry.pt"
		u="unknown@gpgmailencry.pt"
		x="unknown@unkno.wn"
		self.gme._SECURITYLEVEL=self.gme.s_may
		self.gme._BOUNCEHOMEDOMAIN=True
		self.assertFalse(self.gme._check_bounce_mail(h,x))
		self.assertFalse(self.gme._check_bounce_mail(h,u))
		self.assertFalse(self.gme._check_bounce_mail(h,h))
		self.assertFalse(self.gme._check_bounce_mail(x,x))
		self.assertFalse(self.gme._check_bounce_mail(x,h))
		self.assertFalse(self.gme._check_bounce_mail(x,u))

		self.gme._BOUNCEHOMEDOMAIN=False
		self.assertFalse(self.gme._check_bounce_mail(h,x))
		self.assertFalse(self.gme._check_bounce_mail(h,u))
		self.assertFalse(self.gme._check_bounce_mail(h,h))
		self.assertFalse(self.gme._check_bounce_mail(x,x))
		self.assertFalse(self.gme._check_bounce_mail(x,h))
		self.assertFalse(self.gme._check_bounce_mail(x,u))

		self.gme._SECURITYLEVEL=self.gme.s_redirect
		self.gme._BOUNCEHOMEDOMAIN=True
		self.assertFalse(self.gme._check_bounce_mail(h,x))
		self.assertFalse(self.gme._check_bounce_mail(h,u))
		self.assertFalse(self.gme._check_bounce_mail(h,h))
		self.assertFalse(self.gme._check_bounce_mail(x,x))
		self.assertFalse(self.gme._check_bounce_mail(x,h))
		self.assertFalse(self.gme._check_bounce_mail(x,u))

		self.gme._BOUNCEHOMEDOMAIN=False
		self.assertFalse(self.gme._check_bounce_mail(h,x))
		self.assertFalse(self.gme._check_bounce_mail(h,u))
		self.assertFalse(self.gme._check_bounce_mail(h,h))
		self.assertFalse(self.gme._check_bounce_mail(x,x))
		self.assertFalse(self.gme._check_bounce_mail(x,h))
		self.assertFalse(self.gme._check_bounce_mail(x,u))

	def test_sendmail(self):
		self.gme.set_output2file("result.eml")
		self.gme.send_mails(email_unencrypted,"Test <testaddress@gpgmailencry.pt")
		res=None
		try:
			with open("result.eml") as f:
				res=f.read()
		except:
			raise

		self.assertTrue(res!=None)
		

	def test_sendmail_msg(self):
		self.gme.set_output2file("result.eml")
		self.gme.send_mails(email.message_from_string(email_unencrypted),"Test <testaddress@gpgmailencry.pt")
		res=None
		try:
			with open("result.eml") as f:
				res=f.read()
		except:
			raise

		self.assertTrue(res!=None)
		
	def test_sendmail_use_sent(self):
		self.gme.set_output2file("result.eml")
		self.gme._USE_SENTADDRESS=True
		self.gme._DECRYPT=True
		mail=email.message_from_string(email_unencrypted)
		del mail["From"]
		mail["From"]="testaddress@gpgmailencry.pt"
		self.gme.send_mails(mail.as_string(),"Test <testaddress@gpgmailencry.pt")
		res=None
		try:
			with open("result1.eml") as f:
				res=f.read()
		except:
			raise

		self.assertTrue(res!=None)
		
	def test_sendmail_use_sent_msg(self):
		self.gme.set_output2file("result.eml")
		self.gme._USE_SENTADDRESS=True
		self.gme._DECRYPT=True
		mail=email.message_from_string(email_unencrypted)
		del mail["From"]
		mail["From"]="testaddress@gpgmailencry.pt"
		self.gme.send_mails(mail,"Test <testaddress@gpgmailencry.pt")
		res=None
		try:
			with open("result1.eml") as f:
				res=f.read()
		except:
			raise

		self.assertTrue(res!=None)
		
	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_sendmail_dont_decrypt(self):
		self.gme.set_output2file("result.eml")
		self.gme._USE_SENTADDRESS=True
		self.gme._DECRYPT=True
		self.gme.send_mails(email_gpgmimeencrypted,
							"Test <testaddress@gpgmailencry.pt",
							decrypt=False
							)
		res=None
		try:
			with open("result.eml") as f:
				res=f.read()

			mail=email.message_from_string(res)
			self.assertNotEqual(mail["X-GPGMailencrypt"],"decrypted")
		except:
			raise

		
	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_sendmail_dont_decrypt_msg(self):
		self.gme.set_output2file("result.eml")
		self.gme._USE_SENTADDRESS=True
		self.gme._DECRYPT=True
		self.gme.send_mails(email.message_from_string(email_gpgmimeencrypted),
							"Test <testaddress@gpgmailencry.pt",
							decrypt=False
							)
		res=None
		try:
			with open("result.eml") as f:
				res=f.read()

			mail=email.message_from_string(res)
			self.assertNotEqual(mail["X-GPGMailencrypt"],"decrypted")
		except:
			raise

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_sendmail_decrypt(self):
		self.gme.set_output2file("result.eml")
		self.gme._USE_SENTADDRESS=True
		self.gme._DECRYPT=True
		self.gme.send_mails(email_gpgmimeencrypted,
							"Test <testaddress@gpgmailencry.pt",
							decrypt=True
							)
		res=None
		try:
			with open("result.eml") as f:
				res=f.read()

			mail=email.message_from_string(res)
			self.assertEqual(mail["X-GPGMailencrypt"],"decrypted")
		except:
			raise


	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_sendmail_decrypt_msg(self):
		self.gme.set_output2file("result.eml")
		self.gme._USE_SENTADDRESS=True
		self.gme._DECRYPT=True
		self.gme.send_mails(email.message_from_string(email_gpgmimeencrypted),
							"Test <testaddress@gpgmailencry.pt",
							decrypt=True
							)
		res=None
		try:
			with open("result.eml") as f:
				res=f.read()

			mail=email.message_from_string(res)
			self.assertEqual(mail["X-GPGMailencrypt"],"decrypted")
		except:
			raise

	
	def test_send_unencrypted_mail(self):
		self.gme.set_output2file("result.eml")
		self.assertTrue(self.gme._send_unencrypted_mail(-1,
											email_unencrypted,
											"successfull",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt"))
		
	def test_send_unencrypted_mailfail(self):
		self.gme._OUTPUT=self.gme.o_mail
		self.gme._SMTP_HOST="127.0.0.2"
		self.gme._SMTP_PORT=999
		self.gme.set_debug(True)
		self.gme.set_logging("stderr")
		self.assertFalse(self.gme._send_unencrypted_mail(-1,
											email_unencrypted,
											"successfull",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt"))
	
	def test_send_unencrypted_mailfail_msg(self):
		self.gme._OUTPUT=self.gme.o_mail
		self.gme._SMTP_HOST="127.0.0.2"
		self.gme._SMTP_PORT=999
		self.assertFalse(self.gme._send_unencrypted_mail(-1,
											email.message_from_string(email_unencrypted),
											"successfull",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt"))
	
	def test_send_unencrypted_mail_msg(self):
		self.gme.set_output2file("result.eml")
		self.assertTrue(self.gme._send_unencrypted_mail(-1,
											email.message_from_string(email_unencrypted),
											"successfull",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt"))

	def test_send_unencrypted_mailbounce(self):
		self.gme.set_output2file("result.eml")
		self.assertTrue(self.gme._send_unencrypted_mail(-1,
											email_unencrypted,
											"successfull",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											in_bounce_process=True))
		
	def test_send_unencrypted_mailbounce_msg(self):
		self.gme.set_output2file("result.eml")
		self.assertTrue(self.gme._send_unencrypted_mail(-1,
											email.message_from_string(email_unencrypted),
											"successfull",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											in_bounce_process=True))
		
########################
#textstoragebackendtests
########################
class textstoragebackendtests(unittest.TestCase):

	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")
		shutil.copyfile("./gpgmailencrypt.pw.orig","./gpgmailencrypt.pw")
		self.gmeserver=gmeutils.gpgmailserver._gpgmailencryptserver(
															self.gme,
															("localhost",0))
		self.user="testuser"
		self.password="secret"
		self.pdfpassword="textsecret"

	def tearDown(self):
		self.gme.close()
		del self.gmeserver

		try:
			os.remove("./gpgmailencrypt.pw")
		except:
			pass

	def test_usermap(self):
		mapped=""

		try:
			mapped=self.gme._backend.usermap("nk <NOKEY@gpgmailencry.pt>")
		except:
			pass

		self.assertEqual(mapped,"testaddress@gpgmailencry.pt")

	def test_usermap2(self):
		mapped=""

		try:
			mapped=self.gme._backend.usermap(" no key <NOKEY@gpgmailencry.pt>")
		except:
			pass

		self.assertEqual(mapped,"testaddress@gpgmailencry.pt")

	def test_nousermap(self):
		mapped=""

		try:
			mapped=self.gme._backend.usermap("dunno@gpgmailencry.pt")
		except:
			pass

		self.assertEqual(mapped,"")

	def test_encryptionmap(self):
		mapped=[]

		try:
			mapped=self.gme._backend.encryptionmap("test <maPPed@gpgmailencry.pt>")
		except:
			pass

		self.assertEqual(mapped,["pgpmime"])

	def test_encryptionmappdf(self):
		mapped=[]

		try:
			mapped=self.gme._backend.encryptionmap("pdf@gPgmailencry.pt")
		except:
			pass

		self.assertEqual(mapped,["pdf","AES256"])

	def test_noencryptionmap(self):
		mapped=[]

		try:
			mapped=self.gme._backend.encryptionmap("xyz@gpgmailencRy.pt")
		except:
			pass

		self.assertEqual(mapped,[])

	def test_adm_verify_password(self):
		self.assertTrue(self.gmeserver.authenticate(self.user,self.password))

	def test_adm_verify_wrong_password(self):
		self.assertFalse(self.gmeserver.authenticate(self.user,"wrong"))

	def test_admsetpassword(self):
		self.gme.adm_set_user(self.user,self.password)
		self.assertTrue(gmeutils.password.pw_verify(self.password,
											self.gme.adm_get_pwhash(self.user)))

	def test_admdeluser(self):
		self.gme.adm_set_user(self.user,self.password)
		result=False
		result=(self.gme.adm_get_pwhash(self.user)!=None)

		if result==True:
			self.gme.adm_del_user(self.user)
			result=(self.gme.adm_get_pwhash(self.user)==None)

		self.assertTrue(result)

	def test_admgetusers(self):
		self.gme.adm_set_user("normal1","test")
		self.gme.adm_set_user("testadmin","test")
		self.gme.adm_set_user("testadmin2","test")
		self.gme.adm_set_user("normal2","test")
		users=self.gme.adm_get_users()
		print (users)

		for u in users:
			print("user",u)

			if u["user"]in ["normal1","normal2"]:
				print("in Normal")
				self.assertEqual(u["admin"],False)

			if u["user"]in ["testadmin","testadmin2"]:
				print("in admin")
				self.assertEqual(u["admin"],True)
###PDF
	def test_setpdfpassword(self):
		#self.gme.set_configfile("./gmetest.conf")
		pw="test"
		user="Test <test@gpgmailencry.pT>"
		self.gme.set_pdfpassword(user,pw)
		self.assertEqual(self.gme.get_pdfpassword(user),pw)

	def test_additionalpdfencryptionkey(self):
		user="test <pdf@gpgmailencry.pt>"
		self.assertEqual(self.gme.pdf_additionalencryptionkey(user),
						self.pdfpassword)

###SMIME
	def test_SMIMEpublickeys(self):
		pk=self.gme._backend.smimepublic_keys()
		controllist=list()
		controllist.append("testaddress2@gpgmailencry.pt")
		controllist.append("testaddress@gpgmailencry.pt")
		self.assertTrue(pk.sort()==controllist.sort())

	def test_hassmimekey(self):
		success,user=self.gme.check_smimerecipient("test <smime@gpgmaiLEncry.pt>")
		self.assertTrue(success)

	def test_individualsmimecipher(self):
			self.assertTrue(
			self.gme._backend.smimeuser(
			"Test <testaddRess@gpgmailencry.pt>")[1]=="AES256")

	def test_getprivatekey(self):
		user=self.gme._backend.smimeuser("test <testadDress3@gpgmailencry.pt>")
		controllist=['./smime/cert.crt', 'DES3', './smime/newkey.key']
		self.assertEqual(user,controllist)

	def test_hasnotsmimekey(self):
		success,user=self.gme.check_smimerecipient("test <second.User@gpgmailencry.pt>")
		self.assertFalse(success)

	def test_SMIMEprivatekeys(self):
		pk=self.gme._backend.smimeprivate_keys()
		controllist=list()
		controllist.append("testaddress2@gpgmailencry.pt")
		controllist.append("testaddress3@gpgmailencry.pt")
		self.assertEqual(pk.sort(),controllist.sort())

#######################
#sqlstoragebackendtests
#######################

def has_sqlite():
	try:
		import sqlite3
	except:
		return False

	return True
########################
@unittest.skipIf(not has_sqlite(),"sqlite3 not installed")
class sqlstoragebackendtests(textstoragebackendtests):
	def setUp(self):
		import sqlite3
		shutil.copyfile("./gmetest.sqlite.orig","./gmetest.sqlite")
		shutil.copyfile("./gpgmailencrypt.pw.orig","./gpgmailencrypt.pw")
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.sqlite.conf")
		self.gmeserver=gmeutils.gpgmailserver._gpgmailencryptserver(
															self.gme,
															("localhost",0))
		self.user="testuser"
		self.password="secret"
		self.pdfpassword="sqlsecret"

	def tearDown(self):
		self.gme.close()
		del self.gmeserver

		try:
			os.remove("./gpgmailencrypt.pw")
		except:
			pass

		try:
			os.remove("./gmetest.sqlite")
		except:
			pass


		try:
			os.remove("./new.sqlite")
		except:
			pass

	def test_additionalgpgencryptionkeys(self):
		user="test <tEst1@gpgmailencry.pt>"
		result=["centralgpgkey@gpgmailencry.pt",
				"key1@gpgmailencry.pt",
				"key2@gpgmailencry.pt",
				"key3@gpgmailencry.pt",]
		self.assertEqual(self.gme.gpg_additionalencryptionkeys(user),result)

	def test_additionalsmimeencryptionkeys(self):
		user="test <test2@gpgmailencrY.pt>"
		result=["centralsmimekey@gpgmailencry.pt",
				"key3@gpgmailencry.pt",
				"key4@gpgmailencry.pt",
				"key5@gpgmailencry.pt",
				"key6@gpgmailencry.pt",]
		self.assertEqual(self.gme.smime_additionalencryptionkeys(user),result)

	def test_additionalpdfencryptionkeyforunknown(self):
		user="unknown@gpgmailencry.pt"
		self.pdfpassword="textsecret"
		self.assertEqual(self.gme.pdf_additionalencryptionkey(user),
						self.pdfpassword)

	def test_create_all_tables(self):
		self.gme.set_configfile("./gmetest.sqlitecreatetables.conf")
		r,t=self.gme._backend.create_all_tables()
		print(r,t)
		self.assertEqual([],t)
				
########################

#########
#GPGTESTS
#########
class gpgtests(unittest.TestCase):
	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")
		self.gpg=self.gme.gpg_factory()

	def tearDown(self):
		self.gme.close()

	def test_GPGpublickeys(self):
		pk=self.gpg.public_keys()
		controllist=list()
		controllist.append("testaddress@gpgmailencry.pt")
		controllist.append("second.user@gpgmailencry.pt")
		controllist.append("a@test.de")
		self.assertEqual(pk.sort(),controllist.sort())

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_GPGprivatekeys(self):
		#test fails if the test/gpg directory is on network file system
		#due to gpg restrictions
		pk=self.gpg.private_keys()
		controllist=list()
		controllist.append("testaddress@gpgmailencry.pt")
		controllist.append("second.user@gpgmailencry.pt")
		self.assertEqual(pk.sort(),controllist.sort())

	def test_hasgpgkey(self):
		success,user=self.gme.check_gpgrecipient("second.user@gpgmailencry.pt")
		self.assertTrue(success)

	def test_hasgpgkeycapitalizedusername(self):
		success,user=self.gme.check_gpgrecipient("Second.user@gpGmailencry.pt")
		self.assertTrue(success)

	def test_hasnotsgpgkey(self):
		success,user=self.gme.check_gpgrecipient("third.user@gpgmailencry.pt")
		self.assertFalse(success)

	def test_isencrypted(self):
		self.assertTrue(self.gme.is_encrypted(email_gpgmimeencrypted))

	def test_isencrypted_msg(self):
		self.assertTrue(self.gme.is_encrypted(email.message_from_string(email_gpgmimeencrypted)))

	def test_ispgpmimeencrypted(self):
		self.assertTrue(self.gme.is_pgpmimeencrypted(email_gpgmimeencrypted))

	def test_ispgpmimeencrypted_msg(self):
		self.assertTrue(self.gme.is_pgpmimeencrypted(email.message_from_string(email_gpgmimeencrypted)))

	def test_ispgpinlineencrypted(self):
		self.assertTrue(self.gme.is_pgpinlineencrypted(email_gpginlineencrypted))

	def test_ispgpinlineencrypted_msg(self):
		self.assertTrue(self.gme.is_pgpinlineencrypted(email.message_from_string(email_gpginlineencrypted)))

	def test_isnotpgpinlineencrypted(self):
		self.assertFalse(self.gme.is_pgpinlineencrypted(email_gpgmimeencrypted))

	def test_isunencrypted(self):
		self.assertFalse(self.gme.is_encrypted(email_unencrypted))

	def test_encryptgpginlinemail(self):
		result=self.gme.encrypt_pgp_mail(  email_unencrypted,
											False,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpginlinemail_msg(self):
		result=self.gme.encrypt_pgp_mail(  email.message_from_string(email_unencrypted),
											False,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)


	def test_encryptgpginlinemail_msg(self):
		result=self.gme.encrypt_pgp_mail(  email.message_from_string(email_unencrypted),
											False,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpginlinemail2(self):
		result=self.gme.encrypt_pgp_mail(  email_unencrypted,
											False,
											"xtestaddress@gpgmailencry.pt",
											"xtestaddress@gpgmailencry.pt",
											"xtestaddress@gpgmailencry.pt")
		self.assertIsNone(result)

	def test_encryptgpginlinemail_with_attachment(self):
		f=open("./attachment.eml","r")
		mail=f.read()
		f.close()
		result=self.gme.encrypt_pgp_mail(  mail,
											False,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpginlinemail_with_attachment_msg(self):
		f=open("./attachment.eml","r")
		mail=f.read()
		f.close()
		result=self.gme.encrypt_pgp_mail(  email.message_from_string(mail),
											False,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpginline_wrongencoding(self):
		result=self.gme.encrypt_pgp_mail(  email_wrongencoding,
											False,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(not has_pdf(),
		"pdf support not available")	
	def test_encryptgpginline_withpdfcontent_msg(self):
		result=self.gme.encrypt_pgpinline_mail(
								email.message_from_string(email_unencrypted),
								"testaddress@gpgmailencry.pt",
								"testaddress@gpgmailencry.pt",
								"testaddress@gpgmailencry.pt",
								include_contentpdf=True)
		print(result)
		self.assertTrue(".pdf" in result.as_string())

	def test_encryptgpgmime_wrongencoding(self):
		result=self.gme.encrypt_pgp_mail(  email_wrongencoding,
											True,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpgmimemail(self):
		result=self.gme.encrypt_pgp_mail(  email_unencrypted,
											True,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpgmimemail_msg(self):
		result=self.gme.encrypt_pgp_mail(  email.message_from_string(email_unencrypted),
											True,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgpgmimemail2(self):
		result=self.gme.encrypt_pgp_mail(  email_unencrypted,
											True,
											"xtestaddress@gpgmailencry.pt",
											"xtestaddress@gpgmailencry.pt",
											"xtestaddress@gpgmailencry.pt")
		self.assertIsNone(result)

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_decryptgpgmimemail(self):
		result=self.gme.decrypt_pgpmime_mail(  email_gpgmimeencrypted,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_decryptgpgmimemail_msg(self):
		result=self.gme.decrypt_pgpmime_mail(  email.message_from_string(email_gpgmimeencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_decryptgpginlinemail(self):
		result=self.gme.decrypt_pgpinline_mail(  email_gpginlineencrypted,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_decryptgpginlinemail_msg(self):
		result=self.gme.decrypt_pgpinline_mail(  email.message_from_string(email_gpginlineencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	@unittest.skipIf(is_networkfilesystem("./gpg"),
									"gpg directory on network file system")
	def test_encryptdecryptgpg(self):
		#test fails if the test/gpg directory is on network file system
		#due to gpg restrictions

		teststring="dies ist ein Täst"
		f=tempfile.NamedTemporaryFile(  mode='w',
										delete=False,
										prefix='unittest-')
		f.write(teststring)
		f.close()
		success=False
		_result,encdata=self.gpg.encrypt_file(
									filename=f.name,
									recipient="test <testaddress@gpgmailencry.pT>")

		if _result==True:
			f=tempfile.NamedTemporaryFile(  mode='w',
											delete=False,
											prefix='unittest-')
			f.write(encdata)
			f.close()
			_result,encdata=self.gpg.decrypt_file(
							filename=f.name,
							recipient="test <Testaddress@gpgmailencry.pt>")

			if _result==True:
				success=(encdata==teststring)

		self.assertTrue(success)

	def test_additionalgpgencryptionkeys(self):
		user=["testaddress@gpgmailencry.pt","another@key.pt"]
		self.gme.set_configfile("./gmetest2.conf")
		self.assertEqual(self.gme.gpg_additionalencryptionkeys(""),user)
		
		
###########
#SMIMETESTS
###########
class smimetests(unittest.TestCase):
	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")
		self.smime=self.gme.smime_factory()

	def tearDown(self):
		self.gme.close()

	def test_issmimeencrypted(self):
		self.assertTrue(self.gme.is_smimeencrypted(email_smimeencrypted))

	def test_issmimeencrypted_msg(self):
		self.assertTrue(self.gme.is_smimeencrypted(email.message_from_string(email_smimeencrypted)))

	def test_isnotsmimeencrypted(self):
		self.assertFalse(self.gme.is_smimeencrypted(email_gpgmimeencrypted))

	def test_encryptdecryptsmime(self):
		teststring="dies ist ein Täst"
		f=tempfile.NamedTemporaryFile(  mode='w',
										delete=False,
										prefix='unittest-')
		f.write(teststring)
		f.close()
		success=False
		_result,encdata=self.smime.encrypt_file(
								filename=f.name,
								recipient="testaddress@gpgmaiLENcry.pt")

		if _result==True:
			f=tempfile.NamedTemporaryFile(  mode='w',
											delete=False,
											prefix='unittest-')
			f.write(smimeheader)
			f.write(encdata)
			f.close()
			_result,encdata=self.smime.decrypt_file(
							filename=f.name,
							recipient="tESTaddress2@gpgmailencry.pt")

			if _result==True:
				success=(encdata==teststring)

		self.assertTrue(success)

	def test_encryptgsmimemail(self):
		result=self.gme.encrypt_smime_mail(  email_unencrypted,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_decryptgsmimemail(self):
		result=self.gme.decrypt_smime_mail(  email_smimeencrypted,
											"testaddress2@gpgmailencry.pt",
											"testaddress2@gpgmailencry.pt")
		self.assertIsNotNone(result)


	def test_decryptgsmimemail_msg(self):
		result=self.gme.decrypt_smime_mail(  email.message_from_string(email_smimeencrypted),
											"testaddress2@gpgmailencry.pt",
											"testaddress2@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_decryptgsmimemail_nokey(self):
		result=self.gme.decrypt_smime_mail(  email.message_from_string(email_smimeencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNone(result)


	def test_encryptgsmimemail_msg(self):
		result=self.gme.encrypt_smime_mail(  email.message_from_string(email_unencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_encryptgsmimemail2(self):
		result=self.gme.encrypt_smime_mail(  email_unencrypted,
											"xtestaddress@gpgmailencry.pt",
											"xtestaddress@gpgmailencry.pt",
											"xtestaddress@gpgmailencry.pt")
		self.assertIsNone(result)


	def test_encryptsmime_wrongencoding(self):
		result=self.gme.encrypt_smime_mail(  email_wrongencoding,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt")
		self.assertIsNotNone(result)

	def test_smime_getcertfingerprint(self):
		cert=""

		with open("./smime/cert.crt","r") as rf:
			cert=rf.read()

		fingerprint=gmeutils.helpers.get_certfingerprint(cert)
		self.assertEqual(fingerprint,smimecertfingerprint)

	def test_additionalsmimeencryptionkeys(self):
		user=["centralsmime@gpgmailencry.pt","u2@somebody.pt"]
		self.gme.set_configfile("./gmetest2.conf")
		self.assertEqual(self.gme.smime_additionalencryptionkeys(""),user)

#########
#PDFTESTS
#########
###################################

@unittest.skipIf(not has_pdf(),
		"pdf support not available")
class pdftests(unittest.TestCase):
	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")

	def tearDown(self):
		self.gme.close()

		try:
			os.remove("./scriptresult.txt")
		except:
			pass

	def test_ispdfeencrypted(self):
		self.gme.set_configfile("./gmetest.conf")
		self.assertTrue(self.gme.is_pdfencrypted(email_pdfencrypted))

	def test_ispdfeencrypted_msg(self):
		self.gme.set_configfile("./gmetest.conf")
		self.assertTrue(self.gme.is_pdfencrypted(email.message_from_string(email_pdfencrypted)))

	def test_encryptpdfmail(self):
		result=self.gme.encrypt_pdf_mail(  email_unencrypted,
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											send_password=False)
		self.assertIsNotNone(result)

	def test_encryptpdfmail_msg(self):
		result=self.gme.encrypt_pdf_mail(  email.message_from_string(email_unencrypted),
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											"testaddress@gpgmailencry.pt",
											send_password=False)
		self.assertIsNotNone(result)

	def test_pdfpasswordmodescript(self):
		self.gme._PDFPASSWORDMODE=self.gme.pdf_script
		self.gme._PDFPASSWORDSCRIPT="./testscript.sh"

		result=self.gme.encrypt_pdf_mail(  email_unencrypted,
											"dunno@dunno.pt",
											"test@from.com",
											"testaddress@gpgmailencry.pt",
											send_password=True)
		self.assertIsNotNone(result)
		f=open("./scriptresult.txt")
		txt=f.read()
		f.close()
		res=txt.split()
		print(res)
		self.assertEqual(res[0],"1:test@from.com")
		self.assertEqual(res[1],"2:testaddress@gpgmailencry.pt")
		self.assertRegex(res[2],"3:\S*")
		self.assertIn("4:/tmp/mail-",res[3])
		self.assertEqual(res[4],"5:")

	def test_decryptpdf(self):
		pdf=self.gme.pdf_factory()
		f=tempfile.NamedTemporaryFile(  mode='wb',
											delete=False,
											prefix='unittest-')
		f.close()
		result=pdf.decrypt_pdffile( "./archives/encrypted.pdf",
									f.name,
									"secret")
		self.assertTrue(result)
		res=filecmp.cmp(f.name,"./archives/unencrypted.pdf",shallow=False)
		self.assertTrue(res)


#############
#ARCHIVETESTS
#############
def try_uncompress(	armanager,expectedfilename,
					alternateextension=None,password=None):
		with gpgmailencrypt.gme() as gme:
			originaltxt=""

			with open("./archives/source.txt","r") as rf:
				originaltxt=rf.read()

			gme.set_configfile("./gmetest.conf")
			xz=gmeutils.archivemanagers.get_archivemanager(armanager,gme)

			if xz==None:
				print("kein Archivmanager %s gefunden"%armanager)
				return False

			filename=os.path.abspath("./archives/test.%s"%
							(alternateextension if alternateextension else
								armanager.lower()))
			result,rfile=xz.uncompress_file(filename,password=password)
			contentresult=False
			data=None

			if result:
				with open(os.path.join(rfile,expectedfilename),"r") as rf:
					data=rf.read()

			return (result and data==originaltxt)

#######################
class archivetests(unittest.TestCase):
	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")
		self.password="secret"
		self.teststring="dies ist ein Täst"
		self.containerfile="container"

	def tearDown(self):
		self.gme.close()

	def test_archivetype_ace(self):
		r=gmeutils.archivemanagers.get_archivetype("archives/test.ace","test/unknown")
		self.assertEqual(r,"ACE")

	def test_archivetype_noarchive(self):
		r=gmeutils.archivemanagers.get_archivetype("archives/source.txt","test/unknown")
		self.assertEqual(r,None)

	def test_archivetype_nofile(self):
		r=gmeutils.archivemanagers.get_archivetype("test.pdf","application/zip")
		self.assertEqual(r,"ZIP")

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zipcipher(self):
		self.gme.set_zipcipher("aes128")
		self.assertEqual(self.gme.get_zipcipher(),"AES128")

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zipcipher2(self):
		self.gme.set_zipcipher("ZipCrypto")
		self.assertNotEqual(self.gme.get_zipcipher(),"AES128")

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zipcipher3(self):
		wrongcipher="aes1281"
		self.gme.set_zipcipher(wrongcipher)
		self.assertNotEqual(self.gme.get_zipcipher(),wrongcipher)

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_zipunzip(self):
		ZIP=self.gme.zip_factory()
		directory = tempfile.mkdtemp()
		f=open("%s/testfile.txt"%directory,mode='w')
		f.write(self.teststring)
		f.close()
		success=False
		_result,encdata=ZIP.create_zipfile( directory,
											password=self.password,
											containerfile=self.containerfile)
		data=None

		if _result==True:
			f=tempfile.NamedTemporaryFile(  mode='wb',
											delete=False,
											prefix='unittest-')
			f.write(encdata)
			f.close()
			_result,encdata=ZIP.get_zipcontent( zipfile=f.name,
											password=self.password,
											containerfile=self.containerfile)

			try:
				self.assertTrue(encdata[0][0]=="testfile.txt")
				data=encdata[0][1].decode("UTF-8")
			except:
				raise

		self.assertEqual(data,self.teststring)

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_7zun7z(self):
		ZIP=self.gme.a7z_factory()
		directory = tempfile.mkdtemp()
		f=open("%s/testfile.txt"%directory,mode='w')
		f.write(self.teststring)
		f.close()
		success=False
		_result,encdata=ZIP.create_zipfile( directory,
											password=self.password,
											containerfile=self.containerfile)
		data=None

		if _result==True:
			f=tempfile.NamedTemporaryFile(  mode='wb',
											delete=False,
											prefix='unittest-')
			f.write(encdata)
			f.close()
			_result,encdata=ZIP.get_zipcontent( zipfile=f.name,
											password=self.password,
											containerfile=self.containerfile)

			try:
				self.assertTrue(encdata[0][0]=="testfile.txt")
				data=encdata[0][1].decode("UTF-8")
			except:
				raise

		self.assertEqual(data,self.teststring)

	@unittest.skipIf(not has_app("7za"),
		"archive programm 7z not installed")
	def test_7zuncompress(self):
		self.assertTrue(try_uncompress("7z","source.txt",password="secret"))

	@unittest.skipIf(not has_app("xz"),
		"archive programm xz not installed")
	def test_xzuncompress(self):
		self.assertTrue(try_uncompress("xz","test"))

	@unittest.skipIf(not has_app("cpio"),
		"archive programm cpio not installed")
	def test_cpiouncompress(self):
		self.assertTrue(try_uncompress("cpio","source.txt"))

	@unittest.skipIf(not has_app("unshar"),
		"archive programm unshar not installed")
	def test_sharuncompress(self):
		self.assertTrue(try_uncompress("shar","source.txt"))

	@unittest.skipIf(not has_app("zpaq"),
		"archive programm zpaq not installed")
	def test_zpaquncompress(self):
		self.assertTrue(try_uncompress("zpaq","source.txt"))

	@unittest.skipIf(not has_app("unfreeze"),
		"archive programm freeze not installed")
	def test_freezeuncompress(self):
		self.assertTrue(try_uncompress("freeze","test.txt",alternateextension="txt.F"))

	@unittest.skipIf(not has_app("ar"),
		"archive programm ar not installed")
	def test_aruncompress(self):
		self.assertTrue(try_uncompress("ar","source.txt"))

	@unittest.skipIf(not has_app("unace"),
		"archive programm unace not installed")
	def test_aceuncompress(self):
		self.assertTrue(try_uncompress("ace","source.txt"))

	@unittest.skipIf(not has_app("lha"),
		"archive programm lha not installed")
	def test_lhauncompress(self):
		self.assertTrue(try_uncompress("lha","source.txt"))

	@unittest.skipIf(not has_app("arc"),
		"archive programm arc not installed")
	def test_arcuncompress(self):
		self.assertTrue(try_uncompress("arc","source.txt"))

	@unittest.skipIf(not has_app("arj"),
		"archive programm arj not installed")
	def test_arjuncompress(self):
		self.assertTrue(try_uncompress("arj","source.txt"))

	@unittest.skipIf(not has_app("bzip2"),
		"archive programm bzip2 not installed")
	def test_bzip2uncompress(self):
		self.assertTrue(try_uncompress("bzip2","test.out"))

	@unittest.skipIf(not has_app("cabextract"),
		"archive programm cabextract not installed")
	def test_cabuncompress(self):
		self.assertTrue(try_uncompress("cab","source.txt"))

	@unittest.skipIf(not has_app("gzip"),
		"archive programm gzip not installed")
	def test_gzipuncompress(self):
		self.assertTrue(try_uncompress("gzip","test.out"))

	@unittest.skipIf(not has_app("kgb"),
		"archive programm kgb not installed")
	def test_kgbuncompress(self):
		self.assertTrue(try_uncompress("kgb","source.txt"))

	@unittest.skipIf(not has_app("lrunzip"),
		"archive programm lrunzip not installed")
	def test_lrunzipuncompress(self):
		self.assertTrue(try_uncompress("lrzip","test.lrzip"))

	@unittest.skipIf(not has_app("lzip"),
		"archive programm lzip not installed")
	def test_lzipuncompress(self):
		shutil.copyfile("./archives/test.lzip.orig","./archives/test.lzip")
		self.assertTrue(try_uncompress("lzip","test.lzip.out"))

	@unittest.skipIf(not has_app("lzop"),
		"archive programm lzop not installed")
	def test_lzopuncompress(self):
		self.assertTrue(try_uncompress("lzo","source.txt"))

	@unittest.skipIf(not (has_app("unrar") or has_app("rar") ),
		"archive programm rar/unrar not installed")
	def test_raruncompress(self):
		rarmsg="unrar-free can't uncompress modern rar file formats. This "+\
		"might be the reason for a failure of this test. Install "+\
		"unrar-nonfree to solve this problem."
		self.assertTrue(try_uncompress("rar","source.txt"),msg=rarmsg)

	@unittest.skipIf(not has_app("rzip"),
		"archive programm rzip not installed")
	def test_rzipuncompress(self):
		shutil.copyfile("./archives/test.rzip","./archives/test.rz")
		self.assertTrue(try_uncompress("rzip","test",alternateextension="rz"))

	@unittest.skipIf(not has_app("tar"),
		"archive programm tar not installed")
	def test_taruncompress(self):
		self.assertTrue(try_uncompress("tar","source.txt",alternateextension="tar.bz2"))

###########
#VIRUSTESTS
###########
def has_scanner(scanner):
	with gpgmailencrypt.gme() as gme:
		gme.set_configfile("./gmetest.conf")
		return gmeutils.virusscanners.get_virusscanner(scanner,gme)!=None

def check_virus(scanner,virusdir):
	with gpgmailencrypt.gme() as gme:
		gme.set_configfile("./gmetest.conf")
		scanner=gmeutils.virusscanners.get_virusscanner(scanner,gme)
		result=False

		if scanner:
			result=scanner.has_virus(os.path.abspath(virusdir))

		return (result[0] and scanner!=None)

############################################
class virustests(unittest.TestCase):

	@unittest.skipIf((not has_scanner("clamav")),
		"virusscanner clamav not found")
	def test_clamav(self):
		virusdir="./virus"
		msg="Test uses clamdscan. Usually this scan fails, because clamdscan"+\
		" has no read access to the '%s' directory"%virusdir
		self.assertTrue(check_virus("clamav",virusdir),msg)

	@unittest.skipIf(not (has_scanner("clamav")),
		"virusscanner clamav not found")
	def test_clamavnovirus(self):
		virusdir="./smime"
		msg="Test uses clamdscan. Usually this scan fails, because clamdscan"+\
		" has no read access to the '%s' directory"%virusdir
		self.assertFalse(check_virus("clamav",virusdir),msg)

	@unittest.skipIf(not has_scanner("avg"),
		"virusscanner avg not found")
	def test_avgvirus(self):
		virusdir="./virus"
		self.assertTrue(check_virus("avg",virusdir))

	@unittest.skipIf(not has_scanner("avg"),
		"virusscanner avg not found")
	def test_avgnovirus(self):
		virusdir="./smime"
		self.assertFalse(check_virus("avg",virusdir))

	@unittest.skipIf(not has_scanner("bitdefender"),
		"virusscanner bitdefender not found")
	def test_bitdefendervirus(self):
		virusdir="./virus"
		self.assertTrue(check_virus("bitdefender",virusdir))

	@unittest.skipIf(not has_scanner("bitdefender"),
		"virusscanner bitdefender not found")
	def test_bitdefendernovirus(self):
		virusdir="./smime"
		self.assertFalse(check_virus("bitdefender",virusdir))

	@unittest.skipIf(not has_scanner("drweb"),
		"virusscanner drweb not found")
	def test_drwebvirus(self):
		virusdir="./virus"
		self.assertTrue(check_virus("drweb",virusdir))

	@unittest.skipIf(not has_scanner("drweb"),
		"virusscanner drweb not found")
	def test_drwebnovirus(self):
		virusdir="./smime"
		self.assertFalse(check_virus("drweb",virusdir))

	@unittest.skipIf(not has_scanner("fprot"),
		"virusscanner fprot not found")
	def test_fprotvirus(self):
		virusdir="./virus"
		self.assertTrue(check_virus("fprot",virusdir))

	@unittest.skipIf(not has_scanner("fprot"),
		"virusscanner fprot not found")
	def test_fprotnovirus(self):
		virusdir="./smime"
		self.assertFalse(check_virus("fprot",virusdir))

	@unittest.skipIf(not has_scanner("sophos"),
		"virusscanner sophos not found")
	def test_sophosvirus(self):
		virusdir="./virus"
		self.assertTrue(check_virus("sophos",virusdir))

	@unittest.skipIf(not has_scanner("sophos"),
		"virusscanner sophos not found")
	def test_sophosnovirus(self):
		virusdir="./smime"
		self.assertFalse(check_virus("sophos",virusdir))

#########
#DKIMTEST
#########
class dkimtests(unittest.TestCase):

	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")

	def tearDown(self):
		self.gme.close()

	def test_dkimsign(self):
		dk=mydkim(	parent=self.gme,
				selector="test",
				domain="gpgmailencry.pt",
				privkey="./dkim/test.private")

		msg=dk.sign_mail(email_unencrypted.replace("\n","\r\n"))
		self.assertTrue("DKIM-Signature" in msg)

################
#SPAMSCANNERTEST
################
class spamscannertests(unittest.TestCase):

	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")
		self.spam_leveldict={}

	def tearDown(self):
		self.gme.close()

	@unittest.skipIf(not has_app("spamc"),
		"spamassassin not installed")
	def test_spamassassin_spam(self):
		self.spam_leveldict["SPAMASSASSIN"]=[6.2,
											3.0,
											"localhost",
											783,
											500000]
		sc=gmeutils.spamscanners.get_spamscanner("SPAMASSASSIN",
												parent=self.gme,
												leveldict=self.spam_leveldict)
		spamlevel,score=sc.is_spam(spamgtube)
		print("spamlevel",spamlevel,"score",score,self.spam_leveldict["SPAMASSASSIN"])
		self.assertEqual(spamlevel,gmeutils.spamscanners.S_SPAM)

	@unittest.skipIf(not has_app("spamc"),
		"spamassassin not installed")
	def test_spamassassin_nospam(self):
		self.spam_leveldict["SPAMASSASSIN"]=[6.2,
											3.0,
											"localhost",
											783,
											500000]
		sc=gmeutils.spamscanners.get_spamscanner("SPAMASSASSIN",
												parent=self.gme,
												leveldict=self.spam_leveldict)
		spamlevel,score=sc.is_spam(email_unencrypted)
		print("spamlevel",spamlevel,"score",score,self.spam_leveldict["SPAMASSASSIN"])
		self.assertEqual(spamlevel,gmeutils.spamscanners.S_NOSPAM)

	@unittest.skipIf(not has_app("bogofilter"),
		"bogofilter not installed")
	def test_bogofilter_spam(self):
		sc=gmeutils.spamscanners.get_spamscanner("BOGOFILTER",
												parent=self.gme,
												leveldict=self.spam_leveldict)
		spamlevel,score=sc.is_spam(spamgtube)
		print("spamlevel",spamlevel,"score",score)
		self.assertTrue(spamlevel==gmeutils.spamscanners.S_SPAM)

	@unittest.skipIf(not has_app("bogofilter"),
		"bogofilter not installed")
	#@unittest.skip
	def test_bogofilter_nospam(self):
		sc=gmeutils.spamscanners.get_spamscanner("BOGOFILTER",
												parent=self.gme,
												leveldict=self.spam_leveldict)
		spamlevel,score=sc.is_spam(email_unencrypted)
		print("spamlevel",spamlevel,"score",score)
		self.assertTrue(spamlevel==gmeutils.spamscanners.S_NOSPAM)


###########
#SERVERTEST
###########

class servertests(unittest.TestCase):

	def setUp(self):
		self.gme=gpgmailencrypt.gme()
		self.gme.set_configfile("./gmetest.conf")

	def tearDown(self):
		self.gme.close()

	def test_start_server(self):
		def startserver():
			print("STARTSERVER")
			self.gme.daemonmode()
		
		p=Process(target=startserver)
		p.start()
		time.sleep(3)
		self.assertTrue(p.is_alive())
		p.terminate()
	

if __name__ == '__main__':
	unittest.main()
