# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
from . import averaging_pb2 as averaging__pb2


class DecentralizedAveragingStub(object):
    """Runs alongside each trainer to perform gating function averaging every now and then. Read more: client/averaging.py
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.rpc_join_group = channel.unary_stream(
                '/DecentralizedAveraging/rpc_join_group',
                request_serializer=averaging__pb2.JoinRequest.SerializeToString,
                response_deserializer=averaging__pb2.MessageFromLeader.FromString,
                )
        self.rpc_aggregate_part = channel.stream_stream(
                '/DecentralizedAveraging/rpc_aggregate_part',
                request_serializer=averaging__pb2.AveragingData.SerializeToString,
                response_deserializer=averaging__pb2.AveragingData.FromString,
                )
        self.rpc_download_state = channel.unary_stream(
                '/DecentralizedAveraging/rpc_download_state',
                request_serializer=averaging__pb2.DownloadRequest.SerializeToString,
                response_deserializer=averaging__pb2.DownloadData.FromString,
                )


class DecentralizedAveragingServicer(object):
    """Runs alongside each trainer to perform gating function averaging every now and then. Read more: client/averaging.py
    """

    def rpc_join_group(self, request, context):
        """assemble a group for allreduce
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rpc_aggregate_part(self, request_iterator, context):
        """send local part => get average part
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def rpc_download_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DecentralizedAveragingServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'rpc_join_group': grpc.unary_stream_rpc_method_handler(
                    servicer.rpc_join_group,
                    request_deserializer=averaging__pb2.JoinRequest.FromString,
                    response_serializer=averaging__pb2.MessageFromLeader.SerializeToString,
            ),
            'rpc_aggregate_part': grpc.stream_stream_rpc_method_handler(
                    servicer.rpc_aggregate_part,
                    request_deserializer=averaging__pb2.AveragingData.FromString,
                    response_serializer=averaging__pb2.AveragingData.SerializeToString,
            ),
            'rpc_download_state': grpc.unary_stream_rpc_method_handler(
                    servicer.rpc_download_state,
                    request_deserializer=averaging__pb2.DownloadRequest.FromString,
                    response_serializer=averaging__pb2.DownloadData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'DecentralizedAveraging', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DecentralizedAveraging(object):
    """Runs alongside each trainer to perform gating function averaging every now and then. Read more: client/averaging.py
    """

    @staticmethod
    def rpc_join_group(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DecentralizedAveraging/rpc_join_group',
            averaging__pb2.JoinRequest.SerializeToString,
            averaging__pb2.MessageFromLeader.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rpc_aggregate_part(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/DecentralizedAveraging/rpc_aggregate_part',
            averaging__pb2.AveragingData.SerializeToString,
            averaging__pb2.AveragingData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def rpc_download_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/DecentralizedAveraging/rpc_download_state',
            averaging__pb2.DownloadRequest.SerializeToString,
            averaging__pb2.DownloadData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
