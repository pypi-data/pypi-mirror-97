# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKIOHDF5Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkHDF5ImageIOPython
else:
    import _itkHDF5ImageIOPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkHDF5ImageIOPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkHDF5ImageIOPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.ITKIOImageBaseBasePython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython

def itkHDF5ImageIO_New():
    return itkHDF5ImageIO.New()

class itkHDF5ImageIO(itk.ITKIOImageBaseBasePython.itkStreamingImageIOBase):
    r"""


    Class that defines how to read HDF5 file format. HDF5 IMAGE FILE
    FORMAT - As much information as I can determine from
    sourceforge.net/projects/HDF5lib.

    Kent Williams  HDF5 paths for elements in file N is dimension of image

    \\/ITKVersion ITK Library Version string

    \\/HDFVersion HDF Version String

    \\/ITKImage Root Image Group

    \\/ITKImage\\/<name> name is arbitrary, but to parallel Transform
    I/O keep an image in a subgroup. The idea is to parallel transform
    file structure.

    \\/ITKImage\\/<name>\\/Origin N-D point double

    \\/ITKImage\\/<name>\\/Directions N N-vectors double

    \\/ITKImage\\/<name>\\/Spacing N-vector double

    \\/ITKImage\\/<name>\\/Dimensions N-vector ::itk::SizeValueType

    \\/ITKImage\\/<name>\\/VoxelType String representing voxel type.
    This can be inferred from the VoxelData type info, but it makes the
    file more user friendly with respect to HDF5 viewers.

    \\/ITKImage\\/<name>\\/VoxelData multi-dim array of voxel data
    in the case of non-scalar voxel type, keep voxel components together,
    to make loading possible without

    \\/ITKImage\\/<name>\\/MetaData Group for storing metadata from
    MetaDataDictionary

    \\/ITKImage\\/<name>\\/MetaData\\/<item-name> Dataset
    containing data for item-name in the MetaDataDictionary re-
    arrangement. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5ImageIOPython.itkHDF5ImageIO___New_orig__)
    Clone = _swig_new_instance_method(_itkHDF5ImageIOPython.itkHDF5ImageIO_Clone)
    __swig_destroy__ = _itkHDF5ImageIOPython.delete_itkHDF5ImageIO
    cast = _swig_new_static_method(_itkHDF5ImageIOPython.itkHDF5ImageIO_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5ImageIO

        Create a new object of the class itkHDF5ImageIO and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5ImageIO.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5ImageIO.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5ImageIO.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5ImageIO in _itkHDF5ImageIOPython:
_itkHDF5ImageIOPython.itkHDF5ImageIO_swigregister(itkHDF5ImageIO)
itkHDF5ImageIO___New_orig__ = _itkHDF5ImageIOPython.itkHDF5ImageIO___New_orig__
itkHDF5ImageIO_cast = _itkHDF5ImageIOPython.itkHDF5ImageIO_cast


def itkHDF5ImageIOFactory_New():
    return itkHDF5ImageIOFactory.New()

class itkHDF5ImageIOFactory(itk.ITKCommonBasePython.itkObjectFactoryBase):
    r"""


    Create instances of HDF5ImageIO objects using an object factory.

    KEnt Williams 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkHDF5ImageIOPython.itkHDF5ImageIOFactory___New_orig__)
    RegisterOneFactory = _swig_new_static_method(_itkHDF5ImageIOPython.itkHDF5ImageIOFactory_RegisterOneFactory)
    __swig_destroy__ = _itkHDF5ImageIOPython.delete_itkHDF5ImageIOFactory
    cast = _swig_new_static_method(_itkHDF5ImageIOPython.itkHDF5ImageIOFactory_cast)

    def New(*args, **kargs):
        """New() -> itkHDF5ImageIOFactory

        Create a new object of the class itkHDF5ImageIOFactory and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkHDF5ImageIOFactory.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkHDF5ImageIOFactory.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkHDF5ImageIOFactory.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkHDF5ImageIOFactory in _itkHDF5ImageIOPython:
_itkHDF5ImageIOPython.itkHDF5ImageIOFactory_swigregister(itkHDF5ImageIOFactory)
itkHDF5ImageIOFactory___New_orig__ = _itkHDF5ImageIOPython.itkHDF5ImageIOFactory___New_orig__
itkHDF5ImageIOFactory_RegisterOneFactory = _itkHDF5ImageIOPython.itkHDF5ImageIOFactory_RegisterOneFactory
itkHDF5ImageIOFactory_cast = _itkHDF5ImageIOPython.itkHDF5ImageIOFactory_cast



