# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLevelSetMotionRegistrationFilterPython
else:
    import _itkLevelSetMotionRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLevelSetMotionRegistrationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLevelSetMotionRegistrationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_matrix_fixedPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkPointPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBAPixelPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterBPython

def itkLevelSetMotionRegistrationFilterID2ID2IVF22_New():
    return itkLevelSetMotionRegistrationFilterID2ID2IVF22.New()

class itkLevelSetMotionRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterID2ID2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterID2ID2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_swigregister(itkLevelSetMotionRegistrationFilterID2ID2IVF22)
itkLevelSetMotionRegistrationFilterID2ID2IVF22___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22___New_orig__
itkLevelSetMotionRegistrationFilterID2ID2IVF22_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID2ID2IVF22_cast


def itkLevelSetMotionRegistrationFilterID3ID3IVF33_New():
    return itkLevelSetMotionRegistrationFilterID3ID3IVF33.New()

class itkLevelSetMotionRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterID3ID3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterID3ID3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_swigregister(itkLevelSetMotionRegistrationFilterID3ID3IVF33)
itkLevelSetMotionRegistrationFilterID3ID3IVF33___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33___New_orig__
itkLevelSetMotionRegistrationFilterID3ID3IVF33_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID3ID3IVF33_cast


def itkLevelSetMotionRegistrationFilterID4ID4IVF44_New():
    return itkLevelSetMotionRegistrationFilterID4ID4IVF44.New()

class itkLevelSetMotionRegistrationFilterID4ID4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterID4ID4IVF44
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterID4ID4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterID4ID4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_swigregister(itkLevelSetMotionRegistrationFilterID4ID4IVF44)
itkLevelSetMotionRegistrationFilterID4ID4IVF44___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44___New_orig__
itkLevelSetMotionRegistrationFilterID4ID4IVF44_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterID4ID4IVF44_cast


def itkLevelSetMotionRegistrationFilterIF2IF2IVF22_New():
    return itkLevelSetMotionRegistrationFilterIF2IF2IVF22.New()

class itkLevelSetMotionRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIF2IF2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_swigregister(itkLevelSetMotionRegistrationFilterIF2IF2IVF22)
itkLevelSetMotionRegistrationFilterIF2IF2IVF22___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22___New_orig__
itkLevelSetMotionRegistrationFilterIF2IF2IVF22_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF2IF2IVF22_cast


def itkLevelSetMotionRegistrationFilterIF3IF3IVF33_New():
    return itkLevelSetMotionRegistrationFilterIF3IF3IVF33.New()

class itkLevelSetMotionRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIF3IF3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_swigregister(itkLevelSetMotionRegistrationFilterIF3IF3IVF33)
itkLevelSetMotionRegistrationFilterIF3IF3IVF33___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33___New_orig__
itkLevelSetMotionRegistrationFilterIF3IF3IVF33_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF3IF3IVF33_cast


def itkLevelSetMotionRegistrationFilterIF4IF4IVF44_New():
    return itkLevelSetMotionRegistrationFilterIF4IF4IVF44.New()

class itkLevelSetMotionRegistrationFilterIF4IF4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIF4IF4IVF44
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIF4IF4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_swigregister(itkLevelSetMotionRegistrationFilterIF4IF4IVF44)
itkLevelSetMotionRegistrationFilterIF4IF4IVF44___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44___New_orig__
itkLevelSetMotionRegistrationFilterIF4IF4IVF44_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIF4IF4IVF44_cast


def itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_New():
    return itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.New()

class itkLevelSetMotionRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterISS2ISS2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_swigregister(itkLevelSetMotionRegistrationFilterISS2ISS2IVF22)
itkLevelSetMotionRegistrationFilterISS2ISS2IVF22___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22___New_orig__
itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS2ISS2IVF22_cast


def itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_New():
    return itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.New()

class itkLevelSetMotionRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterISS3ISS3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_swigregister(itkLevelSetMotionRegistrationFilterISS3ISS3IVF33)
itkLevelSetMotionRegistrationFilterISS3ISS3IVF33___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33___New_orig__
itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS3ISS3IVF33_cast


def itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_New():
    return itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.New()

class itkLevelSetMotionRegistrationFilterISS4ISS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterISS4ISS4IVF44
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterISS4ISS4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_swigregister(itkLevelSetMotionRegistrationFilterISS4ISS4IVF44)
itkLevelSetMotionRegistrationFilterISS4ISS4IVF44___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44___New_orig__
itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterISS4ISS4IVF44_cast


def itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_New():
    return itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.New()

class itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_swigregister(itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22)
itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22___New_orig__
itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC2IUC2IVF22_cast


def itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_New():
    return itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.New()

class itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_swigregister(itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33)
itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33___New_orig__
itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC3IUC3IVF33_cast


def itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_New():
    return itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.New()

class itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_swigregister(itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44)
itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44___New_orig__
itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUC4IUC4IVF44_cast


def itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_New():
    return itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.New()

class itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_swigregister(itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22)
itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22___New_orig__
itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS2IUS2IVF22_cast


def itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_New():
    return itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.New()

class itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_swigregister(itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33)
itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33___New_orig__
itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS3IUS3IVF33_cast


def itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_New():
    return itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.New()

class itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44):
    r"""


    Deformably register two images using level set motion.

    LevelSetMotionFilter implements a deformable registration algorithm
    that aligns a fixed and a moving image under level set motion. The
    equations of motion are similar to those of the
    DemonsRegistrationFilter. The main differences are: (1) Gradients of
    the moving image are calculated on a smoothed image while intensity
    difference are measured on the original images (2) Magnitude of the
    motion vector is a function of the differences in intensity between
    the fixed and moving pixel. An adaptive timestep is calculated based
    on the maximum motion vector over the entire field to ensure
    stability. The timestep also implicitly converts the motion vector
    measured in units of intensity to a vector measured in physical units.
    Demons, on the other hand, defines its motion vectors as function of
    both the intensity differences and gradient magnitude at each
    respective pixel. Consider two separate pixels with the same intensity
    differences between the corresponding fixed and moving pixel pairs. In
    demons, the motion vector of the pixel over a low gradient region will
    be larger than the motion vector of the pixel over a large gradient
    region. This leads to an unstable vector field. In the levelset
    approach, the motion vectors will be proportional to the gradients,
    scaled by the maximum gradient over the entire field. The pixel with
    at the lower gradient position will more less than the pixel at the
    higher gradient position. (3) Gradients are calculated using minmod
    finite difference instead of using central differences.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in LevelSetMotionFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  Ref: B.C. Vemuri, J. Ye, Y. Chen, C.M. Leonard. "Image
    registration via level-set motion: applications to atlas-based
    segmentation". Medical Image Analysis. Vol. 7. pp. 1-20. 2003.

    See:  LevelSetMotionRegistrationFunction

    See:   DemonsRegistrationFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetMetric)
    SetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetAlpha)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetIntensityDifferenceThreshold)
    SetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetGradientMagnitudeThreshold)
    GetGradientMagnitudeThreshold = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetGradientMagnitudeThreshold)
    SetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_SetGradientSmoothingStandardDeviations)
    GetGradientSmoothingStandardDeviations = _swig_new_instance_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_GetGradientSmoothingStandardDeviations)
    __swig_destroy__ = _itkLevelSetMotionRegistrationFilterPython.delete_itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44
    cast = _swig_new_static_method(_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44 in _itkLevelSetMotionRegistrationFilterPython:
_itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_swigregister(itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44)
itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44___New_orig__ = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44___New_orig__
itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_cast = _itkLevelSetMotionRegistrationFilterPython.itkLevelSetMotionRegistrationFilterIUS4IUS4IVF44_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def level_set_motion_registration_filter(*args, **kwargs):
    """Procedural interface for LevelSetMotionRegistrationFilter"""
    import itk

    instance = itk.LevelSetMotionRegistrationFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def level_set_motion_registration_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKPDEDeformableRegistration.LevelSetMotionRegistrationFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    level_set_motion_registration_filter.__doc__ = filter_object.__doc__
    level_set_motion_registration_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    level_set_motion_registration_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        level_set_motion_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        level_set_motion_registration_filter.__doc__ += "\n"
        level_set_motion_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        level_set_motion_registration_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




