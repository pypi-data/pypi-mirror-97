# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiResolutionPDEDeformableRegistrationPython
else:
    import _itkMultiResolutionPDEDeformableRegistrationPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMultiResolutionPDEDeformableRegistrationPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMultiResolutionPDEDeformableRegistrationPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkResampleImageFilterPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkRGBPixelPython
import itk.itkExtrapolateImageFunctionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkContinuousIndexPython
import itk.itkPointPython
import itk.itkImageFunctionBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkFunctionBasePython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkOptimizerParametersPython
import itk.itkDiffusionTensor3DPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkImageToImageFilterCommonPython
import itk.itkMultiResolutionPyramidImageFilterPython
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython

def itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_New():
    return itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.New()

class itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    r"""


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_Clone)
    SetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetInitialDisplacementField)
    SetArbitraryInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetArbitraryInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetDisplacementField)
    SetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetRegistrationFilter)
    GetModifiableRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableRegistrationFilter)
    GetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetRegistrationFilter)
    SetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFixedImagePyramid)
    GetModifiableFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableFixedImagePyramid)
    GetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFixedImagePyramid)
    SetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetMovingImagePyramid)
    GetModifiableMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableMovingImagePyramid)
    GetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetMovingImagePyramid)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetNumberOfLevels)
    GetCurrentLevel = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetCurrentLevel)
    SetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetFieldExpander)
    GetModifiableFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetModifiableFieldExpander)
    GetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetFieldExpander)
    SetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_GetNumberOfIterations)
    StopRegistration = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_StopRegistration)
    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D
    cast = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D in _itkMultiResolutionPDEDeformableRegistrationPython:
_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_swigregister(itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D)
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__ = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D___New_orig__
itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID2ID2IVF22D_cast


def itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_New():
    return itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.New()

class itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_Clone)
    SetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetInitialDisplacementField)
    SetArbitraryInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetArbitraryInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetDisplacementField)
    SetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetRegistrationFilter)
    GetModifiableRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableRegistrationFilter)
    GetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetRegistrationFilter)
    SetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFixedImagePyramid)
    GetModifiableFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableFixedImagePyramid)
    GetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFixedImagePyramid)
    SetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetMovingImagePyramid)
    GetModifiableMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableMovingImagePyramid)
    GetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetMovingImagePyramid)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetNumberOfLevels)
    GetCurrentLevel = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetCurrentLevel)
    SetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetFieldExpander)
    GetModifiableFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetModifiableFieldExpander)
    GetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetFieldExpander)
    SetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_GetNumberOfIterations)
    StopRegistration = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_StopRegistration)
    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D
    cast = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D in _itkMultiResolutionPDEDeformableRegistrationPython:
_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_swigregister(itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D)
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__ = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D___New_orig__
itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID3ID3IVF33D_cast


def itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_New():
    return itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D.New()

class itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44):
    r"""


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_Clone)
    SetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetInitialDisplacementField)
    SetArbitraryInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetArbitraryInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetDisplacementField)
    SetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetRegistrationFilter)
    GetModifiableRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetModifiableRegistrationFilter)
    GetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetRegistrationFilter)
    SetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetFixedImagePyramid)
    GetModifiableFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetModifiableFixedImagePyramid)
    GetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetFixedImagePyramid)
    SetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetMovingImagePyramid)
    GetModifiableMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetModifiableMovingImagePyramid)
    GetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetMovingImagePyramid)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetNumberOfLevels)
    GetCurrentLevel = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetCurrentLevel)
    SetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetFieldExpander)
    GetModifiableFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetModifiableFieldExpander)
    GetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetFieldExpander)
    SetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_GetNumberOfIterations)
    StopRegistration = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_StopRegistration)
    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D
    cast = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D in _itkMultiResolutionPDEDeformableRegistrationPython:
_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_swigregister(itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D)
itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D___New_orig__ = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D___New_orig__
itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_cast = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationID4ID4IVF44D_cast


def itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_New():
    return itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.New()

class itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF22IVF22):
    r"""


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_Clone)
    SetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetInitialDisplacementField)
    SetArbitraryInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetArbitraryInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetDisplacementField)
    SetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetRegistrationFilter)
    GetModifiableRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableRegistrationFilter)
    GetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetRegistrationFilter)
    SetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFixedImagePyramid)
    GetModifiableFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableFixedImagePyramid)
    GetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFixedImagePyramid)
    SetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetMovingImagePyramid)
    GetModifiableMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableMovingImagePyramid)
    GetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetMovingImagePyramid)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetNumberOfLevels)
    GetCurrentLevel = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetCurrentLevel)
    SetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetFieldExpander)
    GetModifiableFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetModifiableFieldExpander)
    GetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetFieldExpander)
    SetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_GetNumberOfIterations)
    StopRegistration = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_StopRegistration)
    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F
    cast = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F in _itkMultiResolutionPDEDeformableRegistrationPython:
_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_swigregister(itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F)
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__ = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F___New_orig__
itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF2IF2IVF22F_cast


def itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_New():
    return itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.New()

class itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF33IVF33):
    r"""


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_Clone)
    SetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetInitialDisplacementField)
    SetArbitraryInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetArbitraryInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetDisplacementField)
    SetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetRegistrationFilter)
    GetModifiableRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableRegistrationFilter)
    GetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetRegistrationFilter)
    SetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFixedImagePyramid)
    GetModifiableFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableFixedImagePyramid)
    GetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFixedImagePyramid)
    SetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetMovingImagePyramid)
    GetModifiableMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableMovingImagePyramid)
    GetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetMovingImagePyramid)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetNumberOfLevels)
    GetCurrentLevel = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetCurrentLevel)
    SetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetFieldExpander)
    GetModifiableFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetModifiableFieldExpander)
    GetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetFieldExpander)
    SetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_GetNumberOfIterations)
    StopRegistration = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_StopRegistration)
    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F
    cast = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F in _itkMultiResolutionPDEDeformableRegistrationPython:
_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_swigregister(itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F)
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__ = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F___New_orig__
itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF3IF3IVF33F_cast


def itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_New():
    return itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F.New()

class itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F(itk.itkImageToImageFilterAPython.itkImageToImageFilterIVF44IVF44):
    r"""


    Framework for performing multi-resolution PDE deformable registration.

    MultiResolutionPDEDeformableRegistration provides a generic framework
    to perform multi-resolution deformable registration.

    At each resolution level a PDEDeformableRegistrationFilter is used to
    register two images by computing the deformation field which will map
    a moving image onto a fixed image.

    A deformation field is represented as an image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    The internal PDEDeformationRegistrationFilter can be set using
    SetRegistrationFilter. By default a DemonsRegistrationFilter is used.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField if is matches the characteristics
    of the coarsest pyramid level. If no such assumption can be made (e.g.
    the deformation field has the same characteristics as the input
    images), an initial deformation field can still be set via
    SetArbitraryInitialDisplacementField or SetInput. The filter will then
    take care of matching the coarsest level characteristics. If no
    initial field is set a zero field is used as the initial condition.

    MultiResolutionPyramidImageFilters are used to downsample the fixed
    and moving images. A ResampleImageFilter is used to upsample the
    deformation as we move from a coarse to fine solution.

    This class is templated over the fixed image type, the moving image
    type, and the Deformation Field type.

    WARNING:  This class assumes that the fixed, moving and deformation
    field image types all have the same number of dimensions.

    See:   PDEDeformableRegistrationFilter

    See:   DemonsRegistrationFilter

    See:  MultiResolutionPyramidImageFilter

    See:  ResampleImageFilter  The current implementation of this class
    does not support streaming. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_Clone)
    SetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetInitialDisplacementField)
    SetArbitraryInitialDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetArbitraryInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetDisplacementField)
    SetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetRegistrationFilter)
    GetModifiableRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetModifiableRegistrationFilter)
    GetRegistrationFilter = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetRegistrationFilter)
    SetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetFixedImagePyramid)
    GetModifiableFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetModifiableFixedImagePyramid)
    GetFixedImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetFixedImagePyramid)
    SetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetMovingImagePyramid)
    GetModifiableMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetModifiableMovingImagePyramid)
    GetMovingImagePyramid = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetMovingImagePyramid)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetNumberOfLevels)
    GetCurrentLevel = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetCurrentLevel)
    SetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetFieldExpander)
    GetModifiableFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetModifiableFieldExpander)
    GetFieldExpander = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetFieldExpander)
    SetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_GetNumberOfIterations)
    StopRegistration = _swig_new_instance_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_StopRegistration)
    __swig_destroy__ = _itkMultiResolutionPDEDeformableRegistrationPython.delete_itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F
    cast = _swig_new_static_method(_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F

        Create a new object of the class itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F in _itkMultiResolutionPDEDeformableRegistrationPython:
_itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_swigregister(itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F)
itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F___New_orig__ = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F___New_orig__
itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_cast = _itkMultiResolutionPDEDeformableRegistrationPython.itkMultiResolutionPDEDeformableRegistrationIF4IF4IVF44F_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def multi_resolution_pde_deformable_registration(*args, **kwargs):
    """Procedural interface for MultiResolutionPDEDeformableRegistration"""
    import itk

    instance = itk.MultiResolutionPDEDeformableRegistration.New(*args, **kwargs)
    return instance.__internal_call__()


def multi_resolution_pde_deformable_registration_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKPDEDeformableRegistration.MultiResolutionPDEDeformableRegistration
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    multi_resolution_pde_deformable_registration.__doc__ = filter_object.__doc__
    multi_resolution_pde_deformable_registration.__doc__ += "\n args are input(s) to the filter.\n\n"
    multi_resolution_pde_deformable_registration.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        multi_resolution_pde_deformable_registration.__doc__ += itkHelpers.filter_args(filter_object)[0]
        multi_resolution_pde_deformable_registration.__doc__ += "\n"
        multi_resolution_pde_deformable_registration.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        multi_resolution_pde_deformable_registration.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




