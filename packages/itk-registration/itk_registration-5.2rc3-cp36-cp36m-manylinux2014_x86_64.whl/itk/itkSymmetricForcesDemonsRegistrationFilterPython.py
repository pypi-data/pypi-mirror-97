# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSymmetricForcesDemonsRegistrationFilterPython
else:
    import _itkSymmetricForcesDemonsRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSymmetricForcesDemonsRegistrationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSymmetricForcesDemonsRegistrationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkFixedArrayPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython
import itk.itkFiniteDifferenceFunctionPython

def itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_New():
    return itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22.New()

class itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_swigregister(itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22)
itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22___New_orig__
itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID2ID2IVF22_cast


def itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_New():
    return itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33.New()

class itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_swigregister(itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33)
itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33___New_orig__
itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID3ID3IVF33_cast


def itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_New():
    return itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44.New()

class itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_swigregister(itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44)
itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44___New_orig__
itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterID4ID4IVF44_cast


def itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_New():
    return itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22.New()

class itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_swigregister(itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22)
itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF2IF2IVF22_cast


def itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_New():
    return itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33.New()

class itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_swigregister(itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33)
itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF3IF3IVF33_cast


def itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_New():
    return itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44.New()

class itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_swigregister(itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44)
itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIF4IF4IVF44_cast


def itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_New():
    return itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22.New()

class itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_swigregister(itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22)
itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22___New_orig__
itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS2ISS2IVF22_cast


def itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_New():
    return itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33.New()

class itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_swigregister(itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33)
itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33___New_orig__
itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS3ISS3IVF33_cast


def itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_New():
    return itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44.New()

class itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_swigregister(itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44)
itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44___New_orig__
itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterISS4ISS4IVF44_cast


def itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_New():
    return itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22.New()

class itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_swigregister(itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22)
itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC2IUC2IVF22_cast


def itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_New():
    return itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33.New()

class itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_swigregister(itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33)
itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC3IUC3IVF33_cast


def itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_New():
    return itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44.New()

class itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_swigregister(itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44)
itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUC4IUC4IVF44_cast


def itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_New():
    return itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22.New()

class itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_swigregister(itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22)
itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS2IUS2IVF22_cast


def itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_New():
    return itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33.New()

class itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_swigregister(itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33)
itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS3IUS3IVF33_cast


def itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_New():
    return itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44.New()

class itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    This class was contributed by Corinne Mattmann, ETH Zurich,
    Switzerland. based on a variation of the DemonsRegistrationFilter. The
    basic modification is to use equation (5) from Thirion's paper along
    with the modification for avoiding large deformations when gradients
    have small values.

    SymmetricForcesDemonsRegistrationFilter implements the demons
    deformable algorithm that register two images by computing the
    deformation field which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.

    See:  SymmetricForcesDemonsRegistrationFunction

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_GetMetric)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkSymmetricForcesDemonsRegistrationFilterPython.delete_itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44
    cast = _swig_new_static_method(_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44 in _itkSymmetricForcesDemonsRegistrationFilterPython:
_itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_swigregister(itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44)
itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__ = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__
itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_cast = _itkSymmetricForcesDemonsRegistrationFilterPython.itkSymmetricForcesDemonsRegistrationFilterIUS4IUS4IVF44_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def symmetric_forces_demons_registration_filter(*args, **kwargs):
    """Procedural interface for SymmetricForcesDemonsRegistrationFilter"""
    import itk

    instance = itk.SymmetricForcesDemonsRegistrationFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def symmetric_forces_demons_registration_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKPDEDeformableRegistration.SymmetricForcesDemonsRegistrationFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    symmetric_forces_demons_registration_filter.__doc__ = filter_object.__doc__
    symmetric_forces_demons_registration_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    symmetric_forces_demons_registration_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        symmetric_forces_demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        symmetric_forces_demons_registration_filter.__doc__ += "\n"
        symmetric_forces_demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        symmetric_forces_demons_registration_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




