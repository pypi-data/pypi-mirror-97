# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkNormalizedCorrelationImageToImageMetricPython
else:
    import _itkNormalizedCorrelationImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkNormalizedCorrelationImageToImageMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkNormalizedCorrelationImageToImageMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageMetricPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSpatialObjectBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkSpatialObjectPropertyPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.ITKCostFunctionsPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython

def itkNormalizedCorrelationImageToImageMetricID2ID2_New():
    return itkNormalizedCorrelationImageToImageMetricID2ID2.New()

class itkNormalizedCorrelationImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricID2ID2
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricID2ID2

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricID2ID2 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_swigregister(itkNormalizedCorrelationImageToImageMetricID2ID2)
itkNormalizedCorrelationImageToImageMetricID2ID2___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2___New_orig__
itkNormalizedCorrelationImageToImageMetricID2ID2_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID2ID2_cast


def itkNormalizedCorrelationImageToImageMetricID3ID3_New():
    return itkNormalizedCorrelationImageToImageMetricID3ID3.New()

class itkNormalizedCorrelationImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricID3ID3
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricID3ID3

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricID3ID3 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_swigregister(itkNormalizedCorrelationImageToImageMetricID3ID3)
itkNormalizedCorrelationImageToImageMetricID3ID3___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3___New_orig__
itkNormalizedCorrelationImageToImageMetricID3ID3_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID3ID3_cast


def itkNormalizedCorrelationImageToImageMetricID4ID4_New():
    return itkNormalizedCorrelationImageToImageMetricID4ID4.New()

class itkNormalizedCorrelationImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricID4ID4
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricID4ID4

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricID4ID4 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_swigregister(itkNormalizedCorrelationImageToImageMetricID4ID4)
itkNormalizedCorrelationImageToImageMetricID4ID4___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4___New_orig__
itkNormalizedCorrelationImageToImageMetricID4ID4_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricID4ID4_cast


def itkNormalizedCorrelationImageToImageMetricIF2IF2_New():
    return itkNormalizedCorrelationImageToImageMetricIF2IF2.New()

class itkNormalizedCorrelationImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIF2IF2
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIF2IF2

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIF2IF2 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_swigregister(itkNormalizedCorrelationImageToImageMetricIF2IF2)
itkNormalizedCorrelationImageToImageMetricIF2IF2___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2___New_orig__
itkNormalizedCorrelationImageToImageMetricIF2IF2_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF2IF2_cast


def itkNormalizedCorrelationImageToImageMetricIF3IF3_New():
    return itkNormalizedCorrelationImageToImageMetricIF3IF3.New()

class itkNormalizedCorrelationImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIF3IF3
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIF3IF3

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIF3IF3 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_swigregister(itkNormalizedCorrelationImageToImageMetricIF3IF3)
itkNormalizedCorrelationImageToImageMetricIF3IF3___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3___New_orig__
itkNormalizedCorrelationImageToImageMetricIF3IF3_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF3IF3_cast


def itkNormalizedCorrelationImageToImageMetricIF4IF4_New():
    return itkNormalizedCorrelationImageToImageMetricIF4IF4.New()

class itkNormalizedCorrelationImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIF4IF4
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIF4IF4

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIF4IF4 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_swigregister(itkNormalizedCorrelationImageToImageMetricIF4IF4)
itkNormalizedCorrelationImageToImageMetricIF4IF4___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4___New_orig__
itkNormalizedCorrelationImageToImageMetricIF4IF4_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIF4IF4_cast


def itkNormalizedCorrelationImageToImageMetricISS2ISS2_New():
    return itkNormalizedCorrelationImageToImageMetricISS2ISS2.New()

class itkNormalizedCorrelationImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricISS2ISS2
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricISS2ISS2

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricISS2ISS2 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_swigregister(itkNormalizedCorrelationImageToImageMetricISS2ISS2)
itkNormalizedCorrelationImageToImageMetricISS2ISS2___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2___New_orig__
itkNormalizedCorrelationImageToImageMetricISS2ISS2_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS2ISS2_cast


def itkNormalizedCorrelationImageToImageMetricISS3ISS3_New():
    return itkNormalizedCorrelationImageToImageMetricISS3ISS3.New()

class itkNormalizedCorrelationImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricISS3ISS3
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricISS3ISS3

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricISS3ISS3 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_swigregister(itkNormalizedCorrelationImageToImageMetricISS3ISS3)
itkNormalizedCorrelationImageToImageMetricISS3ISS3___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3___New_orig__
itkNormalizedCorrelationImageToImageMetricISS3ISS3_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS3ISS3_cast


def itkNormalizedCorrelationImageToImageMetricISS4ISS4_New():
    return itkNormalizedCorrelationImageToImageMetricISS4ISS4.New()

class itkNormalizedCorrelationImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricISS4ISS4
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricISS4ISS4

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricISS4ISS4 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_swigregister(itkNormalizedCorrelationImageToImageMetricISS4ISS4)
itkNormalizedCorrelationImageToImageMetricISS4ISS4___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4___New_orig__
itkNormalizedCorrelationImageToImageMetricISS4ISS4_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricISS4ISS4_cast


def itkNormalizedCorrelationImageToImageMetricIUC2IUC2_New():
    return itkNormalizedCorrelationImageToImageMetricIUC2IUC2.New()

class itkNormalizedCorrelationImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIUC2IUC2
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIUC2IUC2

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIUC2IUC2 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_swigregister(itkNormalizedCorrelationImageToImageMetricIUC2IUC2)
itkNormalizedCorrelationImageToImageMetricIUC2IUC2___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2___New_orig__
itkNormalizedCorrelationImageToImageMetricIUC2IUC2_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC2IUC2_cast


def itkNormalizedCorrelationImageToImageMetricIUC3IUC3_New():
    return itkNormalizedCorrelationImageToImageMetricIUC3IUC3.New()

class itkNormalizedCorrelationImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIUC3IUC3
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIUC3IUC3

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIUC3IUC3 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_swigregister(itkNormalizedCorrelationImageToImageMetricIUC3IUC3)
itkNormalizedCorrelationImageToImageMetricIUC3IUC3___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3___New_orig__
itkNormalizedCorrelationImageToImageMetricIUC3IUC3_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC3IUC3_cast


def itkNormalizedCorrelationImageToImageMetricIUC4IUC4_New():
    return itkNormalizedCorrelationImageToImageMetricIUC4IUC4.New()

class itkNormalizedCorrelationImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIUC4IUC4
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIUC4IUC4

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIUC4IUC4 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_swigregister(itkNormalizedCorrelationImageToImageMetricIUC4IUC4)
itkNormalizedCorrelationImageToImageMetricIUC4IUC4___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4___New_orig__
itkNormalizedCorrelationImageToImageMetricIUC4IUC4_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUC4IUC4_cast


def itkNormalizedCorrelationImageToImageMetricIUS2IUS2_New():
    return itkNormalizedCorrelationImageToImageMetricIUS2IUS2.New()

class itkNormalizedCorrelationImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIUS2IUS2
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIUS2IUS2

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIUS2IUS2 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_swigregister(itkNormalizedCorrelationImageToImageMetricIUS2IUS2)
itkNormalizedCorrelationImageToImageMetricIUS2IUS2___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2___New_orig__
itkNormalizedCorrelationImageToImageMetricIUS2IUS2_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS2IUS2_cast


def itkNormalizedCorrelationImageToImageMetricIUS3IUS3_New():
    return itkNormalizedCorrelationImageToImageMetricIUS3IUS3.New()

class itkNormalizedCorrelationImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIUS3IUS3
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIUS3IUS3

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIUS3IUS3 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_swigregister(itkNormalizedCorrelationImageToImageMetricIUS3IUS3)
itkNormalizedCorrelationImageToImageMetricIUS3IUS3___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3___New_orig__
itkNormalizedCorrelationImageToImageMetricIUS3IUS3_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS3IUS3_cast


def itkNormalizedCorrelationImageToImageMetricIUS4IUS4_New():
    return itkNormalizedCorrelationImageToImageMetricIUS4IUS4.New()

class itkNormalizedCorrelationImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""


    Computes similarity between two images to be registered.

    This metric computes the correlation between pixels in the fixed image
    and pixels in the moving image. The spatial correspondence between
    fixed and moving image is established through a Transform. Pixel
    values are taken from the fixed image, their positions are mapped to
    the moving image and result in general in non-grid position on it.
    Values at these non-grid position of the moving image are interpolated
    using a user-selected Interpolator. The correlation is normalized by
    the autocorrelations of both the fixed and moving images.

    A more negative metric value indicates a greater degree of correlation
    between the fixed and moving image. This makes the metric simpler to
    use with optimizers that strive to minimize their cost function by
    default. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_Clone)
    SetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_SetSubtractMean)
    GetSubtractMean = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_GetSubtractMean)
    SubtractMeanOn = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_SubtractMeanOn)
    SubtractMeanOff = _swig_new_instance_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_SubtractMeanOff)
    __swig_destroy__ = _itkNormalizedCorrelationImageToImageMetricPython.delete_itkNormalizedCorrelationImageToImageMetricIUS4IUS4
    cast = _swig_new_static_method(_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkNormalizedCorrelationImageToImageMetricIUS4IUS4

        Create a new object of the class itkNormalizedCorrelationImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkNormalizedCorrelationImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkNormalizedCorrelationImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkNormalizedCorrelationImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkNormalizedCorrelationImageToImageMetricIUS4IUS4 in _itkNormalizedCorrelationImageToImageMetricPython:
_itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_swigregister(itkNormalizedCorrelationImageToImageMetricIUS4IUS4)
itkNormalizedCorrelationImageToImageMetricIUS4IUS4___New_orig__ = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4___New_orig__
itkNormalizedCorrelationImageToImageMetricIUS4IUS4_cast = _itkNormalizedCorrelationImageToImageMetricPython.itkNormalizedCorrelationImageToImageMetricIUS4IUS4_cast



