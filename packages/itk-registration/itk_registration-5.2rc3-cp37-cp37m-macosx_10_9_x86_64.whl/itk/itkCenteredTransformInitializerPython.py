# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkCenteredTransformInitializerPython
else:
    import _itkCenteredTransformInitializerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkCenteredTransformInitializerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkCenteredTransformInitializerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageMomentsCalculatorPython
import itk.itkAffineTransformPython
import itk.itkVectorPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkCovariantVectorPython
import itk.itkPointPython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkArray2DPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSpatialObjectBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMapContainerPython
import itk.itkVersorRigid3DTransformPython
import itk.itkVersorTransformPython
import itk.itkVersorPython
import itk.itkRigid3DTransformPython

def itkCenteredTransformInitializerMOTBD22ID2ID2_New():
    return itkCenteredTransformInitializerMOTBD22ID2ID2.New()

class itkCenteredTransformInitializerMOTBD22ID2ID2(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerMOTBD22ID2ID2
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerMOTBD22ID2ID2

        Create a new object of the class itkCenteredTransformInitializerMOTBD22ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerMOTBD22ID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerMOTBD22ID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerMOTBD22ID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerMOTBD22ID2ID2 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_swigregister(itkCenteredTransformInitializerMOTBD22ID2ID2)
itkCenteredTransformInitializerMOTBD22ID2ID2___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2___New_orig__
itkCenteredTransformInitializerMOTBD22ID2ID2_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ID2ID2_cast


def itkCenteredTransformInitializerMOTBD22IF2IF2_New():
    return itkCenteredTransformInitializerMOTBD22IF2IF2.New()

class itkCenteredTransformInitializerMOTBD22IF2IF2(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerMOTBD22IF2IF2
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerMOTBD22IF2IF2

        Create a new object of the class itkCenteredTransformInitializerMOTBD22IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerMOTBD22IF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerMOTBD22IF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerMOTBD22IF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerMOTBD22IF2IF2 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_swigregister(itkCenteredTransformInitializerMOTBD22IF2IF2)
itkCenteredTransformInitializerMOTBD22IF2IF2___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2___New_orig__
itkCenteredTransformInitializerMOTBD22IF2IF2_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IF2IF2_cast


def itkCenteredTransformInitializerMOTBD22ISS2ISS2_New():
    return itkCenteredTransformInitializerMOTBD22ISS2ISS2.New()

class itkCenteredTransformInitializerMOTBD22ISS2ISS2(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerMOTBD22ISS2ISS2
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerMOTBD22ISS2ISS2

        Create a new object of the class itkCenteredTransformInitializerMOTBD22ISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerMOTBD22ISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerMOTBD22ISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerMOTBD22ISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerMOTBD22ISS2ISS2 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_swigregister(itkCenteredTransformInitializerMOTBD22ISS2ISS2)
itkCenteredTransformInitializerMOTBD22ISS2ISS2___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2___New_orig__
itkCenteredTransformInitializerMOTBD22ISS2ISS2_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22ISS2ISS2_cast


def itkCenteredTransformInitializerMOTBD22IUC2IUC2_New():
    return itkCenteredTransformInitializerMOTBD22IUC2IUC2.New()

class itkCenteredTransformInitializerMOTBD22IUC2IUC2(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerMOTBD22IUC2IUC2
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerMOTBD22IUC2IUC2

        Create a new object of the class itkCenteredTransformInitializerMOTBD22IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerMOTBD22IUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerMOTBD22IUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerMOTBD22IUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerMOTBD22IUC2IUC2 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_swigregister(itkCenteredTransformInitializerMOTBD22IUC2IUC2)
itkCenteredTransformInitializerMOTBD22IUC2IUC2___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2___New_orig__
itkCenteredTransformInitializerMOTBD22IUC2IUC2_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUC2IUC2_cast


def itkCenteredTransformInitializerMOTBD22IUS2IUS2_New():
    return itkCenteredTransformInitializerMOTBD22IUS2IUS2.New()

class itkCenteredTransformInitializerMOTBD22IUS2IUS2(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerMOTBD22IUS2IUS2
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerMOTBD22IUS2IUS2

        Create a new object of the class itkCenteredTransformInitializerMOTBD22IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerMOTBD22IUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerMOTBD22IUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerMOTBD22IUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerMOTBD22IUS2IUS2 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_swigregister(itkCenteredTransformInitializerMOTBD22IUS2IUS2)
itkCenteredTransformInitializerMOTBD22IUS2IUS2___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2___New_orig__
itkCenteredTransformInitializerMOTBD22IUS2IUS2_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerMOTBD22IUS2IUS2_cast


def itkCenteredTransformInitializerVR3DTDID3ID3_New():
    return itkCenteredTransformInitializerVR3DTDID3ID3.New()

class itkCenteredTransformInitializerVR3DTDID3ID3(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerVR3DTDID3ID3
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerVR3DTDID3ID3

        Create a new object of the class itkCenteredTransformInitializerVR3DTDID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerVR3DTDID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerVR3DTDID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerVR3DTDID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerVR3DTDID3ID3 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_swigregister(itkCenteredTransformInitializerVR3DTDID3ID3)
itkCenteredTransformInitializerVR3DTDID3ID3___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3___New_orig__
itkCenteredTransformInitializerVR3DTDID3ID3_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDID3ID3_cast


def itkCenteredTransformInitializerVR3DTDIF3IF3_New():
    return itkCenteredTransformInitializerVR3DTDIF3IF3.New()

class itkCenteredTransformInitializerVR3DTDIF3IF3(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerVR3DTDIF3IF3
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerVR3DTDIF3IF3

        Create a new object of the class itkCenteredTransformInitializerVR3DTDIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerVR3DTDIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerVR3DTDIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerVR3DTDIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerVR3DTDIF3IF3 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_swigregister(itkCenteredTransformInitializerVR3DTDIF3IF3)
itkCenteredTransformInitializerVR3DTDIF3IF3___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3___New_orig__
itkCenteredTransformInitializerVR3DTDIF3IF3_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIF3IF3_cast


def itkCenteredTransformInitializerVR3DTDISS3ISS3_New():
    return itkCenteredTransformInitializerVR3DTDISS3ISS3.New()

class itkCenteredTransformInitializerVR3DTDISS3ISS3(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerVR3DTDISS3ISS3
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerVR3DTDISS3ISS3

        Create a new object of the class itkCenteredTransformInitializerVR3DTDISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerVR3DTDISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerVR3DTDISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerVR3DTDISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerVR3DTDISS3ISS3 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_swigregister(itkCenteredTransformInitializerVR3DTDISS3ISS3)
itkCenteredTransformInitializerVR3DTDISS3ISS3___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3___New_orig__
itkCenteredTransformInitializerVR3DTDISS3ISS3_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDISS3ISS3_cast


def itkCenteredTransformInitializerVR3DTDIUC3IUC3_New():
    return itkCenteredTransformInitializerVR3DTDIUC3IUC3.New()

class itkCenteredTransformInitializerVR3DTDIUC3IUC3(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerVR3DTDIUC3IUC3
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerVR3DTDIUC3IUC3

        Create a new object of the class itkCenteredTransformInitializerVR3DTDIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerVR3DTDIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerVR3DTDIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerVR3DTDIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerVR3DTDIUC3IUC3 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_swigregister(itkCenteredTransformInitializerVR3DTDIUC3IUC3)
itkCenteredTransformInitializerVR3DTDIUC3IUC3___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3___New_orig__
itkCenteredTransformInitializerVR3DTDIUC3IUC3_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUC3IUC3_cast


def itkCenteredTransformInitializerVR3DTDIUS3IUS3_New():
    return itkCenteredTransformInitializerVR3DTDIUS3IUS3.New()

class itkCenteredTransformInitializerVR3DTDIUS3IUS3(itk.ITKCommonBasePython.itkObject):
    r"""


    CenteredTransformInitializer is a helper class intended to initialize
    the center of rotation and the translation of Transforms having the
    center of rotation among their parameters.

    This class is connected to the fixed image, moving image and transform
    involved in the registration. Two modes of operation are possible:

    Geometrical,

    Center of mass

    In the first mode, the geometrical center of the moving image is
    passed as initial center of rotation to the transform and the vector
    from the center of the fixed image to the center of the moving image
    is passed as the initial translation. This mode basically assumes that
    the anatomical objects to be registered are centered in their
    respective images. Hence the best initial guess for the registration
    is the one that superimposes those two centers.

    In the second mode, the moments of gray level values are computed for
    both images. The center of mass of the moving image is then used as
    center of rotation. The vector between the two centers of mass is
    passes as the initial translation to the transform. This second
    approach assumes that the moments of the anatomical objects are
    similar for both images and hence the best initial guess for
    registration is to superimpose both mass centers. Note that this
    assumption will probably not hold in multi-modality registration. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_Clone)
    SetTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_SetTransform)
    SetFixedImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_SetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_SetMovingImage)
    InitializeTransform = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_InitializeTransform)
    GeometryOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_GeometryOn)
    MomentsOn = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_MomentsOn)
    GetModifiableFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_GetModifiableFixedCalculator)
    GetFixedCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_GetFixedCalculator)
    GetModifiableMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_GetModifiableMovingCalculator)
    GetMovingCalculator = _swig_new_instance_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_GetMovingCalculator)
    __swig_destroy__ = _itkCenteredTransformInitializerPython.delete_itkCenteredTransformInitializerVR3DTDIUS3IUS3
    cast = _swig_new_static_method(_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkCenteredTransformInitializerVR3DTDIUS3IUS3

        Create a new object of the class itkCenteredTransformInitializerVR3DTDIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkCenteredTransformInitializerVR3DTDIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkCenteredTransformInitializerVR3DTDIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkCenteredTransformInitializerVR3DTDIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkCenteredTransformInitializerVR3DTDIUS3IUS3 in _itkCenteredTransformInitializerPython:
_itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_swigregister(itkCenteredTransformInitializerVR3DTDIUS3IUS3)
itkCenteredTransformInitializerVR3DTDIUS3IUS3___New_orig__ = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3___New_orig__
itkCenteredTransformInitializerVR3DTDIUS3IUS3_cast = _itkCenteredTransformInitializerPython.itkCenteredTransformInitializerVR3DTDIUS3IUS3_cast



