# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMattesMutualInformationImageToImageMetricPython
else:
    import _itkMattesMutualInformationImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMattesMutualInformationImageToImageMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMattesMutualInformationImageToImageMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCommonBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkImageToImageMetricPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCostFunctionsPython
import itk.itkArray2DPython
import itk.itkCostFunctionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.vnl_least_squares_functionPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMapContainerPython
import itk.itkInterpolateImageFunctionPython
import itk.itkRGBPixelPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkImagePython

def itkMattesMutualInformationImageToImageMetricID2ID2_New():
    return itkMattesMutualInformationImageToImageMetricID2ID2.New()

class itkMattesMutualInformationImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricID2ID2
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricID2ID2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricID2ID2 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_swigregister(itkMattesMutualInformationImageToImageMetricID2ID2)
itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2___New_orig__
itkMattesMutualInformationImageToImageMetricID2ID2_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID2ID2_cast


def itkMattesMutualInformationImageToImageMetricID3ID3_New():
    return itkMattesMutualInformationImageToImageMetricID3ID3.New()

class itkMattesMutualInformationImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricID3ID3
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricID3ID3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricID3ID3 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_swigregister(itkMattesMutualInformationImageToImageMetricID3ID3)
itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3___New_orig__
itkMattesMutualInformationImageToImageMetricID3ID3_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID3ID3_cast


def itkMattesMutualInformationImageToImageMetricID4ID4_New():
    return itkMattesMutualInformationImageToImageMetricID4ID4.New()

class itkMattesMutualInformationImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricID4ID4
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricID4ID4

        Create a new object of the class itkMattesMutualInformationImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricID4ID4 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_swigregister(itkMattesMutualInformationImageToImageMetricID4ID4)
itkMattesMutualInformationImageToImageMetricID4ID4___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4___New_orig__
itkMattesMutualInformationImageToImageMetricID4ID4_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricID4ID4_cast


def itkMattesMutualInformationImageToImageMetricIF2IF2_New():
    return itkMattesMutualInformationImageToImageMetricIF2IF2.New()

class itkMattesMutualInformationImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIF2IF2
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIF2IF2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIF2IF2 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_swigregister(itkMattesMutualInformationImageToImageMetricIF2IF2)
itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2___New_orig__
itkMattesMutualInformationImageToImageMetricIF2IF2_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF2IF2_cast


def itkMattesMutualInformationImageToImageMetricIF3IF3_New():
    return itkMattesMutualInformationImageToImageMetricIF3IF3.New()

class itkMattesMutualInformationImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIF3IF3
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIF3IF3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIF3IF3 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_swigregister(itkMattesMutualInformationImageToImageMetricIF3IF3)
itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3___New_orig__
itkMattesMutualInformationImageToImageMetricIF3IF3_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF3IF3_cast


def itkMattesMutualInformationImageToImageMetricIF4IF4_New():
    return itkMattesMutualInformationImageToImageMetricIF4IF4.New()

class itkMattesMutualInformationImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIF4IF4
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIF4IF4

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIF4IF4 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_swigregister(itkMattesMutualInformationImageToImageMetricIF4IF4)
itkMattesMutualInformationImageToImageMetricIF4IF4___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4___New_orig__
itkMattesMutualInformationImageToImageMetricIF4IF4_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIF4IF4_cast


def itkMattesMutualInformationImageToImageMetricISS2ISS2_New():
    return itkMattesMutualInformationImageToImageMetricISS2ISS2.New()

class itkMattesMutualInformationImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricISS2ISS2
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricISS2ISS2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricISS2ISS2 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_swigregister(itkMattesMutualInformationImageToImageMetricISS2ISS2)
itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2___New_orig__
itkMattesMutualInformationImageToImageMetricISS2ISS2_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS2ISS2_cast


def itkMattesMutualInformationImageToImageMetricISS3ISS3_New():
    return itkMattesMutualInformationImageToImageMetricISS3ISS3.New()

class itkMattesMutualInformationImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricISS3ISS3
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricISS3ISS3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricISS3ISS3 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_swigregister(itkMattesMutualInformationImageToImageMetricISS3ISS3)
itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3___New_orig__
itkMattesMutualInformationImageToImageMetricISS3ISS3_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS3ISS3_cast


def itkMattesMutualInformationImageToImageMetricISS4ISS4_New():
    return itkMattesMutualInformationImageToImageMetricISS4ISS4.New()

class itkMattesMutualInformationImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricISS4ISS4
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricISS4ISS4

        Create a new object of the class itkMattesMutualInformationImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricISS4ISS4 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_swigregister(itkMattesMutualInformationImageToImageMetricISS4ISS4)
itkMattesMutualInformationImageToImageMetricISS4ISS4___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4___New_orig__
itkMattesMutualInformationImageToImageMetricISS4ISS4_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricISS4ISS4_cast


def itkMattesMutualInformationImageToImageMetricIUC2IUC2_New():
    return itkMattesMutualInformationImageToImageMetricIUC2IUC2.New()

class itkMattesMutualInformationImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUC2IUC2
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUC2IUC2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIUC2IUC2 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_swigregister(itkMattesMutualInformationImageToImageMetricIUC2IUC2)
itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2___New_orig__
itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC2IUC2_cast


def itkMattesMutualInformationImageToImageMetricIUC3IUC3_New():
    return itkMattesMutualInformationImageToImageMetricIUC3IUC3.New()

class itkMattesMutualInformationImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUC3IUC3
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUC3IUC3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIUC3IUC3 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_swigregister(itkMattesMutualInformationImageToImageMetricIUC3IUC3)
itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3___New_orig__
itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC3IUC3_cast


def itkMattesMutualInformationImageToImageMetricIUC4IUC4_New():
    return itkMattesMutualInformationImageToImageMetricIUC4IUC4.New()

class itkMattesMutualInformationImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUC4IUC4
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUC4IUC4

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIUC4IUC4 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_swigregister(itkMattesMutualInformationImageToImageMetricIUC4IUC4)
itkMattesMutualInformationImageToImageMetricIUC4IUC4___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4___New_orig__
itkMattesMutualInformationImageToImageMetricIUC4IUC4_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUC4IUC4_cast


def itkMattesMutualInformationImageToImageMetricIUS2IUS2_New():
    return itkMattesMutualInformationImageToImageMetricIUS2IUS2.New()

class itkMattesMutualInformationImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUS2IUS2
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUS2IUS2

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIUS2IUS2 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_swigregister(itkMattesMutualInformationImageToImageMetricIUS2IUS2)
itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2___New_orig__
itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS2IUS2_cast


def itkMattesMutualInformationImageToImageMetricIUS3IUS3_New():
    return itkMattesMutualInformationImageToImageMetricIUS3IUS3.New()

class itkMattesMutualInformationImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUS3IUS3
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUS3IUS3

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIUS3IUS3 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_swigregister(itkMattesMutualInformationImageToImageMetricIUS3IUS3)
itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3___New_orig__
itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS3IUS3_cast


def itkMattesMutualInformationImageToImageMetricIUS4IUS4_New():
    return itkMattesMutualInformationImageToImageMetricIUS4IUS4.New()

class itkMattesMutualInformationImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""


    Computes the mutual information between two images to be registered
    using the method of Mattes et al.

    MattesMutualInformationImageToImageMetric computes the mutual
    information between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    If a BSplineInterpolationFunction is used, this class obtain image
    derivatives from the BSpline interpolator. Otherwise, image
    derivatives are computed using central differencing.

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Mattes et al [1,2] where
    the probability density distribution are estimated using Parzen
    histograms. Since the fixed image PDF does not contribute to the
    derivatives, it does not need to be smooth. Hence, a zero order (box
    car) BSpline kernel is used for the fixed image intensity PDF. On the
    other hand, to ensure smoothness a third order BSpline kernel is used
    for the moving image intensity PDF.

    On Initialize(), the FixedImage is uniformly sampled within the
    FixedImageRegion. The number of samples used can be set via
    SetNumberOfSpatialSamples(). Typically, the number of spatial samples
    used should increase with the image size.

    The option UseAllPixelOn() disables the random sampling and uses all
    the pixels of the FixedImageRegion in order to estimate the joint
    intensity PDF.

    During each call of GetValue(), GetDerivatives(),
    GetValueAndDerivatives(), marginal and joint intensity PDF's values
    are estimated at discrete position or bins. The number of bins used
    can be set via SetNumberOfHistogramBins(). To handle data with
    arbitrary magnitude and dynamic range, the image intensity is scale
    such that any contribution to the histogram will fall into a valid
    bin.

    One the PDF's have been constructed, the mutual information is
    obtained by doubling summing over the discrete PDF values.

    Notes: This class returns the negative mutual information value.

    References: [1] "Nonrigid multimodality image registration" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank Medical
    Imaging 2001: Image Processing, 2001, pp. 1609-1620. [2] "PET-CT
    Image Registration in the Chest Using Free-form Deformations" D.
    Mattes, D. R. Haynor, H. Vesselle, T. Lewellen and W. Eubank IEEE
    Transactions in Medical Imaging. Vol.22, No.1, January 2003.
    pp.120-128. [3] "Optimization of Mutual Information for
    MultiResolution Image      Registration" P. Thevenaz and M. Unser
    IEEE Transactions in Image Processing, 9(12) December 2000.

    example{Registration/Common/WatchRegistration,Watch Registration} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_Clone)
    SetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_SetNumberOfHistogramBins)
    GetNumberOfHistogramBins = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_GetNumberOfHistogramBins)
    SetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_SetUseExplicitPDFDerivatives)
    GetUseExplicitPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_GetUseExplicitPDFDerivatives)
    UseExplicitPDFDerivativesOn = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_UseExplicitPDFDerivativesOn)
    UseExplicitPDFDerivativesOff = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_UseExplicitPDFDerivativesOff)
    GetJointPDF = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_GetJointPDF)
    GetJointPDFDerivatives = _swig_new_instance_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_GetJointPDFDerivatives)
    __swig_destroy__ = _itkMattesMutualInformationImageToImageMetricPython.delete_itkMattesMutualInformationImageToImageMetricIUS4IUS4
    cast = _swig_new_static_method(_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMattesMutualInformationImageToImageMetricIUS4IUS4

        Create a new object of the class itkMattesMutualInformationImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMattesMutualInformationImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMattesMutualInformationImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMattesMutualInformationImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMattesMutualInformationImageToImageMetricIUS4IUS4 in _itkMattesMutualInformationImageToImageMetricPython:
_itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_swigregister(itkMattesMutualInformationImageToImageMetricIUS4IUS4)
itkMattesMutualInformationImageToImageMetricIUS4IUS4___New_orig__ = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4___New_orig__
itkMattesMutualInformationImageToImageMetricIUS4IUS4_cast = _itkMattesMutualInformationImageToImageMetricPython.itkMattesMutualInformationImageToImageMetricIUS4IUS4_cast



