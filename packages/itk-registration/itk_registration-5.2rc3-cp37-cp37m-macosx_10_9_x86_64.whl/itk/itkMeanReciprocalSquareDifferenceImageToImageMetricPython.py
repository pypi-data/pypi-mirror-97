# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
else:
    import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkOptimizerParametersPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkArrayPython
import itk.itkImageToImageMetricPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkCovariantVectorPython
import itk.ITKCostFunctionsPython
import itk.itkArray2DPython
import itk.itkCostFunctionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.vnl_least_squares_functionPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkMapContainerPython
import itk.itkInterpolateImageFunctionPython
import itk.itkRGBPixelPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkImagePython

def itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4)
itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID4ID4_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF4IF4_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS2ISS2_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS3ISS3_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4)
itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricISS4ISS4_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC4IUC4_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast


def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_New():
    return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the Images to be compared and
    over the type of transformation and Iterpolator to be used.

    This metric computes the sum of squared differences between pixels in
    the moving image and pixels in the fixed image after passing the
    squared difference through a function of type $ \\frac{1}{1+x} $.

    Spatial correspondence between both images is established through a
    Transform. Pixel values are taken from the Moving image. Their
    positions are mapped to the Fixed image and result in general in non-
    grid position on it. Values at these non-grid position of the Fixed
    image are interpolated using a user-selected Interpolator. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_Clone)
    GetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_GetLambda)
    SetLambda = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_SetLambda)
    GetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_GetDelta)
    SetDelta = _swig_new_instance_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_SetDelta)
    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4
    cast = _swig_new_static_method(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4

        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4 in _itkMeanReciprocalSquareDifferenceImageToImageMetricPython:
_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4___New_orig__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4___New_orig__
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_cast = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS4IUS4_cast



