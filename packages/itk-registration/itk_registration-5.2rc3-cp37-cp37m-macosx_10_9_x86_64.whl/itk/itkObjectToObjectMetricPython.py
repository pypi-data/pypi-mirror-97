# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKOptimizersv4Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkObjectToObjectMetricPython
else:
    import _itkObjectToObjectMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkObjectToObjectMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkObjectToObjectMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkVectorPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkDisplacementFieldTransformPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
class itkObjectToObjectMetric22(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""


    Computes similarity between regions of two objects.

    This class is templated over the dimensionality of the two input
    objects. This is the abstract templated base class for a hierarchy of
    similarity metrics that may, in derived classes, operate on meshes,
    images, etc. This class computes a value that measures the similarity
    between the two objects.

    Derived classes must provide implementations for: GetValue
    GetDerivative GetValueAndDerivative
    SupportsArbitraryVirtualDomainSamples

    Similarity is evaluated using fixed and moving transforms. Both
    transforms are initialized to an IdentityTransform, and can be set by
    the user using SetFixedTranform() and SetMovingTransform().

    Virtual Domain

    This class uses a virtual reference space. This space defines the
    resolution at which the evaluation is performed, as well as the
    physical coordinate system. This is useful for unbiased registration.
    The virtual domain is stored in the m_VirtualDomain member, but this
    is subject to change so the convenience methods GetVirtualSpacing(),
    GetVirtualDirection() and GetVirtualOrigin() should be used whenever
    possible to retrieve virtual domain information. The region over which
    metric evaluation is performed is taken from the virtual image
    buffered region.

    The user can define a virtual domain by calling either
    SetVirtualDomain or SetVirtualDomainFromImage. See these methods for
    details. Derived classes may automatically assign a virtual domain if
    the user has not assigned one by initialization time.

    If the virtual domain is left undefined by the user and by derived
    classes, then unit or zero values are returned for
    GetVirtualSpacing(), GetVirtualDirection() and GetVirtualOrigin(), as
    appropriate. The virtual region is left undefined and an attempt to
    retrieve it via GetVirtualRegion() will generate an exception. The
    m_VirtualImage member will be nullptr.

    During evaluation, derived classes should verify that points are
    within the virtual domain and thus valid, as appropriate for the needs
    of the metric. When points are deemed invalid the number of valid
    points returned by GetNumberOfValidPoints() should reflect this.

    Transform Optimization This hierarchy currently assumes only the
    moving transform is 'active', i.e. only the moving transform is being
    optimized when used in an optimizer. Methods relevant to transform
    optimization such as GetNumberOfParameters(),
    UpdateTransformParameters() are passed on to the active transform. The
    eventual goal however is to allow for either moving, fixed or both
    transforms to be active within a single metric. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetFixedTransform)
    GetModifiableFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableFixedTransform)
    GetFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetFixedTransform)
    SetMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetMovingTransform)
    GetModifiableMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableMovingTransform)
    GetMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetMovingTransform)
    SetTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetTransform)
    GetTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetTransform)
    GetNumberOfValidPoints = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetNumberOfValidPoints)
    SetVirtualDomain = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomain)
    SetVirtualDomainFromImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SetVirtualDomainFromImage)
    SupportsArbitraryVirtualDomainSamples = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_SupportsArbitraryVirtualDomainSamples)
    GetVirtualDomainTimeStamp = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDomainTimeStamp)
    GetVirtualSpacing = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualSpacing)
    GetVirtualOrigin = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualOrigin)
    GetVirtualDirection = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualDirection)
    GetVirtualRegion = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualRegion)
    GetModifiableVirtualImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetModifiableVirtualImage)
    GetVirtualImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_GetVirtualImage)
    ComputeParameterOffsetFromVirtualIndex = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualIndex)
    ComputeParameterOffsetFromVirtualPoint = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_ComputeParameterOffsetFromVirtualPoint)
    IsInsideVirtualDomain = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_IsInsideVirtualDomain)
    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric22
    cast = _swig_new_static_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_cast)

# Register itkObjectToObjectMetric22 in _itkObjectToObjectMetricPython:
_itkObjectToObjectMetricPython.itkObjectToObjectMetric22_swigregister(itkObjectToObjectMetric22)
itkObjectToObjectMetric22_cast = _itkObjectToObjectMetricPython.itkObjectToObjectMetric22_cast

class itkObjectToObjectMetric33(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""


    Computes similarity between regions of two objects.

    This class is templated over the dimensionality of the two input
    objects. This is the abstract templated base class for a hierarchy of
    similarity metrics that may, in derived classes, operate on meshes,
    images, etc. This class computes a value that measures the similarity
    between the two objects.

    Derived classes must provide implementations for: GetValue
    GetDerivative GetValueAndDerivative
    SupportsArbitraryVirtualDomainSamples

    Similarity is evaluated using fixed and moving transforms. Both
    transforms are initialized to an IdentityTransform, and can be set by
    the user using SetFixedTranform() and SetMovingTransform().

    Virtual Domain

    This class uses a virtual reference space. This space defines the
    resolution at which the evaluation is performed, as well as the
    physical coordinate system. This is useful for unbiased registration.
    The virtual domain is stored in the m_VirtualDomain member, but this
    is subject to change so the convenience methods GetVirtualSpacing(),
    GetVirtualDirection() and GetVirtualOrigin() should be used whenever
    possible to retrieve virtual domain information. The region over which
    metric evaluation is performed is taken from the virtual image
    buffered region.

    The user can define a virtual domain by calling either
    SetVirtualDomain or SetVirtualDomainFromImage. See these methods for
    details. Derived classes may automatically assign a virtual domain if
    the user has not assigned one by initialization time.

    If the virtual domain is left undefined by the user and by derived
    classes, then unit or zero values are returned for
    GetVirtualSpacing(), GetVirtualDirection() and GetVirtualOrigin(), as
    appropriate. The virtual region is left undefined and an attempt to
    retrieve it via GetVirtualRegion() will generate an exception. The
    m_VirtualImage member will be nullptr.

    During evaluation, derived classes should verify that points are
    within the virtual domain and thus valid, as appropriate for the needs
    of the metric. When points are deemed invalid the number of valid
    points returned by GetNumberOfValidPoints() should reflect this.

    Transform Optimization This hierarchy currently assumes only the
    moving transform is 'active', i.e. only the moving transform is being
    optimized when used in an optimizer. Methods relevant to transform
    optimization such as GetNumberOfParameters(),
    UpdateTransformParameters() are passed on to the active transform. The
    eventual goal however is to allow for either moving, fixed or both
    transforms to be active within a single metric. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetFixedTransform)
    GetModifiableFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableFixedTransform)
    GetFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetFixedTransform)
    SetMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetMovingTransform)
    GetModifiableMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableMovingTransform)
    GetMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetMovingTransform)
    SetTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetTransform)
    GetTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetTransform)
    GetNumberOfValidPoints = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetNumberOfValidPoints)
    SetVirtualDomain = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomain)
    SetVirtualDomainFromImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SetVirtualDomainFromImage)
    SupportsArbitraryVirtualDomainSamples = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_SupportsArbitraryVirtualDomainSamples)
    GetVirtualDomainTimeStamp = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDomainTimeStamp)
    GetVirtualSpacing = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualSpacing)
    GetVirtualOrigin = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualOrigin)
    GetVirtualDirection = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualDirection)
    GetVirtualRegion = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualRegion)
    GetModifiableVirtualImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetModifiableVirtualImage)
    GetVirtualImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_GetVirtualImage)
    ComputeParameterOffsetFromVirtualIndex = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualIndex)
    ComputeParameterOffsetFromVirtualPoint = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_ComputeParameterOffsetFromVirtualPoint)
    IsInsideVirtualDomain = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_IsInsideVirtualDomain)
    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric33
    cast = _swig_new_static_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_cast)

# Register itkObjectToObjectMetric33 in _itkObjectToObjectMetricPython:
_itkObjectToObjectMetricPython.itkObjectToObjectMetric33_swigregister(itkObjectToObjectMetric33)
itkObjectToObjectMetric33_cast = _itkObjectToObjectMetricPython.itkObjectToObjectMetric33_cast

class itkObjectToObjectMetric44(itk.itkObjectToObjectMetricBasePython.itkObjectToObjectMetricBaseTemplateD):
    r"""


    Computes similarity between regions of two objects.

    This class is templated over the dimensionality of the two input
    objects. This is the abstract templated base class for a hierarchy of
    similarity metrics that may, in derived classes, operate on meshes,
    images, etc. This class computes a value that measures the similarity
    between the two objects.

    Derived classes must provide implementations for: GetValue
    GetDerivative GetValueAndDerivative
    SupportsArbitraryVirtualDomainSamples

    Similarity is evaluated using fixed and moving transforms. Both
    transforms are initialized to an IdentityTransform, and can be set by
    the user using SetFixedTranform() and SetMovingTransform().

    Virtual Domain

    This class uses a virtual reference space. This space defines the
    resolution at which the evaluation is performed, as well as the
    physical coordinate system. This is useful for unbiased registration.
    The virtual domain is stored in the m_VirtualDomain member, but this
    is subject to change so the convenience methods GetVirtualSpacing(),
    GetVirtualDirection() and GetVirtualOrigin() should be used whenever
    possible to retrieve virtual domain information. The region over which
    metric evaluation is performed is taken from the virtual image
    buffered region.

    The user can define a virtual domain by calling either
    SetVirtualDomain or SetVirtualDomainFromImage. See these methods for
    details. Derived classes may automatically assign a virtual domain if
    the user has not assigned one by initialization time.

    If the virtual domain is left undefined by the user and by derived
    classes, then unit or zero values are returned for
    GetVirtualSpacing(), GetVirtualDirection() and GetVirtualOrigin(), as
    appropriate. The virtual region is left undefined and an attempt to
    retrieve it via GetVirtualRegion() will generate an exception. The
    m_VirtualImage member will be nullptr.

    During evaluation, derived classes should verify that points are
    within the virtual domain and thus valid, as appropriate for the needs
    of the metric. When points are deemed invalid the number of valid
    points returned by GetNumberOfValidPoints() should reflect this.

    Transform Optimization This hierarchy currently assumes only the
    moving transform is 'active', i.e. only the moving transform is being
    optimized when used in an optimizer. Methods relevant to transform
    optimization such as GetNumberOfParameters(),
    UpdateTransformParameters() are passed on to the active transform. The
    eventual goal however is to allow for either moving, fixed or both
    transforms to be active within a single metric. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetFixedTransform)
    GetModifiableFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetModifiableFixedTransform)
    GetFixedTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetFixedTransform)
    SetMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetMovingTransform)
    GetModifiableMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetModifiableMovingTransform)
    GetMovingTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetMovingTransform)
    SetTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetTransform)
    GetTransform = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetTransform)
    GetNumberOfValidPoints = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetNumberOfValidPoints)
    SetVirtualDomain = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetVirtualDomain)
    SetVirtualDomainFromImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SetVirtualDomainFromImage)
    SupportsArbitraryVirtualDomainSamples = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_SupportsArbitraryVirtualDomainSamples)
    GetVirtualDomainTimeStamp = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualDomainTimeStamp)
    GetVirtualSpacing = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualSpacing)
    GetVirtualOrigin = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualOrigin)
    GetVirtualDirection = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualDirection)
    GetVirtualRegion = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualRegion)
    GetModifiableVirtualImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetModifiableVirtualImage)
    GetVirtualImage = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_GetVirtualImage)
    ComputeParameterOffsetFromVirtualIndex = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_ComputeParameterOffsetFromVirtualIndex)
    ComputeParameterOffsetFromVirtualPoint = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_ComputeParameterOffsetFromVirtualPoint)
    IsInsideVirtualDomain = _swig_new_instance_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_IsInsideVirtualDomain)
    __swig_destroy__ = _itkObjectToObjectMetricPython.delete_itkObjectToObjectMetric44
    cast = _swig_new_static_method(_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_cast)

# Register itkObjectToObjectMetric44 in _itkObjectToObjectMetricPython:
_itkObjectToObjectMetricPython.itkObjectToObjectMetric44_swigregister(itkObjectToObjectMetric44)
itkObjectToObjectMetric44_cast = _itkObjectToObjectMetricPython.itkObjectToObjectMetric44_cast



