# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLandmarkBasedTransformInitializerPython
else:
    import _itkLandmarkBasedTransformInitializerPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLandmarkBasedTransformInitializerPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLandmarkBasedTransformInitializerPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkArray2DPython
import itk.itkArrayPython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBPixelPython
import itk.itkVersorRigid3DTransformPython
import itk.itkVersorTransformPython
import itk.itkRigid3DTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVersorPython
import itk.itkBSplineTransformPython
import itk.itkContinuousIndexPython
import itk.itkBSplineBaseTransformPython
import itk.itkBSplineInterpolationWeightFunctionPython
import itk.itkFunctionBasePython
import itk.itkRigid2DTransformPython
import itk.itkAffineTransformPython

def itkLandmarkBasedTransformInitializerTD22_New():
    return itkLandmarkBasedTransformInitializerTD22.New()

class itkLandmarkBasedTransformInitializerTD22(itk.ITKCommonBasePython.itkObject):
    r"""


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    {Registration/Common/RegisterImageToAnotherUsingLandmarks,Register
    Image To Another Using Landmarks} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_Clone)
    SetTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetTransform)
    SetReferenceImage = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetReferenceImage)
    SetBSplineNumberOfControlPoints = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetBSplineNumberOfControlPoints)
    SetFixedLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetFixedLandmarks)
    SetMovingLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetMovingLandmarks)
    SetLandmarkWeight = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_SetLandmarkWeight)
    InitializeTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_InitializeTransform)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD22
    cast = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD22

        Create a new object of the class itkLandmarkBasedTransformInitializerTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTD22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTD22 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_swigregister(itkLandmarkBasedTransformInitializerTD22)
itkLandmarkBasedTransformInitializerTD22___New_orig__ = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22___New_orig__
itkLandmarkBasedTransformInitializerTD22_cast = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD22_cast


def itkLandmarkBasedTransformInitializerTD33_New():
    return itkLandmarkBasedTransformInitializerTD33.New()

class itkLandmarkBasedTransformInitializerTD33(itk.ITKCommonBasePython.itkObject):
    r"""


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    {Registration/Common/RegisterImageToAnotherUsingLandmarks,Register
    Image To Another Using Landmarks} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_Clone)
    SetTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetTransform)
    SetReferenceImage = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetReferenceImage)
    SetBSplineNumberOfControlPoints = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetBSplineNumberOfControlPoints)
    SetFixedLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetFixedLandmarks)
    SetMovingLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetMovingLandmarks)
    SetLandmarkWeight = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_SetLandmarkWeight)
    InitializeTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_InitializeTransform)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD33
    cast = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD33

        Create a new object of the class itkLandmarkBasedTransformInitializerTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTD33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTD33 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_swigregister(itkLandmarkBasedTransformInitializerTD33)
itkLandmarkBasedTransformInitializerTD33___New_orig__ = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33___New_orig__
itkLandmarkBasedTransformInitializerTD33_cast = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD33_cast


def itkLandmarkBasedTransformInitializerTD44_New():
    return itkLandmarkBasedTransformInitializerTD44.New()

class itkLandmarkBasedTransformInitializerTD44(itk.ITKCommonBasePython.itkObject):
    r"""


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    {Registration/Common/RegisterImageToAnotherUsingLandmarks,Register
    Image To Another Using Landmarks} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_Clone)
    SetTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetTransform)
    SetReferenceImage = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetReferenceImage)
    SetBSplineNumberOfControlPoints = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetBSplineNumberOfControlPoints)
    SetFixedLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetFixedLandmarks)
    SetMovingLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetMovingLandmarks)
    SetLandmarkWeight = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_SetLandmarkWeight)
    InitializeTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_InitializeTransform)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTD44
    cast = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTD44

        Create a new object of the class itkLandmarkBasedTransformInitializerTD44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTD44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTD44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTD44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTD44 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_swigregister(itkLandmarkBasedTransformInitializerTD44)
itkLandmarkBasedTransformInitializerTD44___New_orig__ = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44___New_orig__
itkLandmarkBasedTransformInitializerTD44_cast = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTD44_cast


def itkLandmarkBasedTransformInitializerTF22_New():
    return itkLandmarkBasedTransformInitializerTF22.New()

class itkLandmarkBasedTransformInitializerTF22(itk.ITKCommonBasePython.itkObject):
    r"""


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    {Registration/Common/RegisterImageToAnotherUsingLandmarks,Register
    Image To Another Using Landmarks} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_Clone)
    SetTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetTransform)
    SetReferenceImage = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetReferenceImage)
    SetBSplineNumberOfControlPoints = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetBSplineNumberOfControlPoints)
    SetFixedLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetFixedLandmarks)
    SetMovingLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetMovingLandmarks)
    SetLandmarkWeight = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_SetLandmarkWeight)
    InitializeTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_InitializeTransform)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF22
    cast = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF22

        Create a new object of the class itkLandmarkBasedTransformInitializerTF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTF22 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_swigregister(itkLandmarkBasedTransformInitializerTF22)
itkLandmarkBasedTransformInitializerTF22___New_orig__ = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22___New_orig__
itkLandmarkBasedTransformInitializerTF22_cast = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF22_cast


def itkLandmarkBasedTransformInitializerTF33_New():
    return itkLandmarkBasedTransformInitializerTF33.New()

class itkLandmarkBasedTransformInitializerTF33(itk.ITKCommonBasePython.itkObject):
    r"""


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    {Registration/Common/RegisterImageToAnotherUsingLandmarks,Register
    Image To Another Using Landmarks} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_Clone)
    SetTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetTransform)
    SetReferenceImage = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetReferenceImage)
    SetBSplineNumberOfControlPoints = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetBSplineNumberOfControlPoints)
    SetFixedLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetFixedLandmarks)
    SetMovingLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetMovingLandmarks)
    SetLandmarkWeight = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_SetLandmarkWeight)
    InitializeTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_InitializeTransform)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF33
    cast = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF33

        Create a new object of the class itkLandmarkBasedTransformInitializerTF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTF33 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_swigregister(itkLandmarkBasedTransformInitializerTF33)
itkLandmarkBasedTransformInitializerTF33___New_orig__ = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33___New_orig__
itkLandmarkBasedTransformInitializerTF33_cast = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF33_cast


def itkLandmarkBasedTransformInitializerTF44_New():
    return itkLandmarkBasedTransformInitializerTF44.New()

class itkLandmarkBasedTransformInitializerTF44(itk.ITKCommonBasePython.itkObject):
    r"""


    This class computes the transform that aligns the fixed and moving
    images given a set of pair landmarks. The class is templated over the
    Transform type as well as fixed image and moving image types. The
    transform computed gives the best fit transform that maps the fixed
    and moving images in a least squares sense. The indices are taken to
    correspond, so point 1 in the first set will get mapped close to point
    1 in the second set, etc.

    Currently, the following transforms are supported by the class:
    VersorRigid3DTransform Rigid2DTransform AffineTransform
    BSplineTransform

    An equal number of fixed and moving landmarks need to be specified
    using SetFixedLandmarks() and SetMovingLandmarks(). Any number of
    landmarks may be specified. In the case of the Affine transformation
    the number of landmarks must be greater than the landmark
    dimensionality. If this is not the case an exception is thrown. In the
    case of the VersorRigid3DTransform and Rigid2DTransform the number of
    landmarks must be equal or greater than the landmark dimensionality.
    If this is not the case, only the translational component of the
    transformation is computed and the rotation is the identity. In the
    case of using Affine or BSpline transforms, each landmark pair can
    contribute in the final transform based on its defined weight. Number
    of weights should be equal to the number of landmarks and can be
    specified using SetLandmarkWeight(). By defaults are weights are set
    to one. Call InitializeTransform() to initialize the transform.

    The class is based in part on Hybrid/vtkLandmarkTransform originally
    implemented in python by David G. Gobbi.

    The solution is based on Berthold K. P. Horn (1987), "Closed-form
    solution of absolute orientation using unit quaternions,"http://peopl
    e.csail.mit.edu/bkph/papers/Absolute_Orientation.pdf

    The Affine Transform initializer is based on an algorithm by H Spaeth,
    and is described in the Insight Journal Article "Affine
    Transformation for Landmark Based Registration Initializer in ITK" by
    Kim E.Y., Johnson H., Williams N. available
    athttp://midasjournal.com/browse/publication/825

    {Registration/Common/RegisterImageToAnotherUsingLandmarks,Register
    Image To Another Using Landmarks} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44___New_orig__)
    Clone = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_Clone)
    SetTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetTransform)
    SetReferenceImage = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetReferenceImage)
    SetBSplineNumberOfControlPoints = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetBSplineNumberOfControlPoints)
    SetFixedLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetFixedLandmarks)
    SetMovingLandmarks = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetMovingLandmarks)
    SetLandmarkWeight = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_SetLandmarkWeight)
    InitializeTransform = _swig_new_instance_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_InitializeTransform)
    __swig_destroy__ = _itkLandmarkBasedTransformInitializerPython.delete_itkLandmarkBasedTransformInitializerTF44
    cast = _swig_new_static_method(_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_cast)

    def New(*args, **kargs):
        """New() -> itkLandmarkBasedTransformInitializerTF44

        Create a new object of the class itkLandmarkBasedTransformInitializerTF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLandmarkBasedTransformInitializerTF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLandmarkBasedTransformInitializerTF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLandmarkBasedTransformInitializerTF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLandmarkBasedTransformInitializerTF44 in _itkLandmarkBasedTransformInitializerPython:
_itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_swigregister(itkLandmarkBasedTransformInitializerTF44)
itkLandmarkBasedTransformInitializerTF44___New_orig__ = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44___New_orig__
itkLandmarkBasedTransformInitializerTF44_cast = _itkLandmarkBasedTransformInitializerPython.itkLandmarkBasedTransformInitializerTF44_cast



