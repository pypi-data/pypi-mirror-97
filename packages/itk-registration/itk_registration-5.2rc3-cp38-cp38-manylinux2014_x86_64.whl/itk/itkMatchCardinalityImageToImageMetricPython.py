# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMatchCardinalityImageToImageMetricPython
else:
    import _itkMatchCardinalityImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMatchCardinalityImageToImageMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMatchCardinalityImageToImageMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkImageToImageMetricPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSpatialObjectBasePython
import itk.ITKCommonBasePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkOptimizerParametersPython
import itk.itkArray2DPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.ITKCostFunctionsPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkCostFunctionPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython

def itkMatchCardinalityImageToImageMetricID2ID2_New():
    return itkMatchCardinalityImageToImageMetricID2ID2.New()

class itkMatchCardinalityImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricID2ID2
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricID2ID2

        Create a new object of the class itkMatchCardinalityImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricID2ID2 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_swigregister(itkMatchCardinalityImageToImageMetricID2ID2)
itkMatchCardinalityImageToImageMetricID2ID2___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2___New_orig__
itkMatchCardinalityImageToImageMetricID2ID2_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID2ID2_cast


def itkMatchCardinalityImageToImageMetricID3ID3_New():
    return itkMatchCardinalityImageToImageMetricID3ID3.New()

class itkMatchCardinalityImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricID3ID3
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricID3ID3

        Create a new object of the class itkMatchCardinalityImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricID3ID3 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_swigregister(itkMatchCardinalityImageToImageMetricID3ID3)
itkMatchCardinalityImageToImageMetricID3ID3___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3___New_orig__
itkMatchCardinalityImageToImageMetricID3ID3_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID3ID3_cast


def itkMatchCardinalityImageToImageMetricID4ID4_New():
    return itkMatchCardinalityImageToImageMetricID4ID4.New()

class itkMatchCardinalityImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricID4ID4
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricID4ID4

        Create a new object of the class itkMatchCardinalityImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricID4ID4 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_swigregister(itkMatchCardinalityImageToImageMetricID4ID4)
itkMatchCardinalityImageToImageMetricID4ID4___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4___New_orig__
itkMatchCardinalityImageToImageMetricID4ID4_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricID4ID4_cast


def itkMatchCardinalityImageToImageMetricIF2IF2_New():
    return itkMatchCardinalityImageToImageMetricIF2IF2.New()

class itkMatchCardinalityImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIF2IF2
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIF2IF2

        Create a new object of the class itkMatchCardinalityImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIF2IF2 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_swigregister(itkMatchCardinalityImageToImageMetricIF2IF2)
itkMatchCardinalityImageToImageMetricIF2IF2___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2___New_orig__
itkMatchCardinalityImageToImageMetricIF2IF2_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF2IF2_cast


def itkMatchCardinalityImageToImageMetricIF3IF3_New():
    return itkMatchCardinalityImageToImageMetricIF3IF3.New()

class itkMatchCardinalityImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIF3IF3
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIF3IF3

        Create a new object of the class itkMatchCardinalityImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIF3IF3 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_swigregister(itkMatchCardinalityImageToImageMetricIF3IF3)
itkMatchCardinalityImageToImageMetricIF3IF3___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3___New_orig__
itkMatchCardinalityImageToImageMetricIF3IF3_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF3IF3_cast


def itkMatchCardinalityImageToImageMetricIF4IF4_New():
    return itkMatchCardinalityImageToImageMetricIF4IF4.New()

class itkMatchCardinalityImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIF4IF4
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIF4IF4

        Create a new object of the class itkMatchCardinalityImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIF4IF4 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_swigregister(itkMatchCardinalityImageToImageMetricIF4IF4)
itkMatchCardinalityImageToImageMetricIF4IF4___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4___New_orig__
itkMatchCardinalityImageToImageMetricIF4IF4_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIF4IF4_cast


def itkMatchCardinalityImageToImageMetricISS2ISS2_New():
    return itkMatchCardinalityImageToImageMetricISS2ISS2.New()

class itkMatchCardinalityImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricISS2ISS2
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricISS2ISS2

        Create a new object of the class itkMatchCardinalityImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricISS2ISS2 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_swigregister(itkMatchCardinalityImageToImageMetricISS2ISS2)
itkMatchCardinalityImageToImageMetricISS2ISS2___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2___New_orig__
itkMatchCardinalityImageToImageMetricISS2ISS2_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS2ISS2_cast


def itkMatchCardinalityImageToImageMetricISS3ISS3_New():
    return itkMatchCardinalityImageToImageMetricISS3ISS3.New()

class itkMatchCardinalityImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricISS3ISS3
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricISS3ISS3

        Create a new object of the class itkMatchCardinalityImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricISS3ISS3 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_swigregister(itkMatchCardinalityImageToImageMetricISS3ISS3)
itkMatchCardinalityImageToImageMetricISS3ISS3___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3___New_orig__
itkMatchCardinalityImageToImageMetricISS3ISS3_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS3ISS3_cast


def itkMatchCardinalityImageToImageMetricISS4ISS4_New():
    return itkMatchCardinalityImageToImageMetricISS4ISS4.New()

class itkMatchCardinalityImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricISS4ISS4
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricISS4ISS4

        Create a new object of the class itkMatchCardinalityImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricISS4ISS4 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_swigregister(itkMatchCardinalityImageToImageMetricISS4ISS4)
itkMatchCardinalityImageToImageMetricISS4ISS4___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4___New_orig__
itkMatchCardinalityImageToImageMetricISS4ISS4_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricISS4ISS4_cast


def itkMatchCardinalityImageToImageMetricIUC2IUC2_New():
    return itkMatchCardinalityImageToImageMetricIUC2IUC2.New()

class itkMatchCardinalityImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIUC2IUC2
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIUC2IUC2

        Create a new object of the class itkMatchCardinalityImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIUC2IUC2 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_swigregister(itkMatchCardinalityImageToImageMetricIUC2IUC2)
itkMatchCardinalityImageToImageMetricIUC2IUC2___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2___New_orig__
itkMatchCardinalityImageToImageMetricIUC2IUC2_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC2IUC2_cast


def itkMatchCardinalityImageToImageMetricIUC3IUC3_New():
    return itkMatchCardinalityImageToImageMetricIUC3IUC3.New()

class itkMatchCardinalityImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIUC3IUC3
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIUC3IUC3

        Create a new object of the class itkMatchCardinalityImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIUC3IUC3 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_swigregister(itkMatchCardinalityImageToImageMetricIUC3IUC3)
itkMatchCardinalityImageToImageMetricIUC3IUC3___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3___New_orig__
itkMatchCardinalityImageToImageMetricIUC3IUC3_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC3IUC3_cast


def itkMatchCardinalityImageToImageMetricIUC4IUC4_New():
    return itkMatchCardinalityImageToImageMetricIUC4IUC4.New()

class itkMatchCardinalityImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIUC4IUC4
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIUC4IUC4

        Create a new object of the class itkMatchCardinalityImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIUC4IUC4 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_swigregister(itkMatchCardinalityImageToImageMetricIUC4IUC4)
itkMatchCardinalityImageToImageMetricIUC4IUC4___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4___New_orig__
itkMatchCardinalityImageToImageMetricIUC4IUC4_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUC4IUC4_cast


def itkMatchCardinalityImageToImageMetricIUS2IUS2_New():
    return itkMatchCardinalityImageToImageMetricIUS2IUS2.New()

class itkMatchCardinalityImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIUS2IUS2
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIUS2IUS2

        Create a new object of the class itkMatchCardinalityImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIUS2IUS2 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_swigregister(itkMatchCardinalityImageToImageMetricIUS2IUS2)
itkMatchCardinalityImageToImageMetricIUS2IUS2___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2___New_orig__
itkMatchCardinalityImageToImageMetricIUS2IUS2_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS2IUS2_cast


def itkMatchCardinalityImageToImageMetricIUS3IUS3_New():
    return itkMatchCardinalityImageToImageMetricIUS3IUS3.New()

class itkMatchCardinalityImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIUS3IUS3
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIUS3IUS3

        Create a new object of the class itkMatchCardinalityImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIUS3IUS3 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_swigregister(itkMatchCardinalityImageToImageMetricIUS3IUS3)
itkMatchCardinalityImageToImageMetricIUS3IUS3___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3___New_orig__
itkMatchCardinalityImageToImageMetricIUS3IUS3_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS3IUS3_cast


def itkMatchCardinalityImageToImageMetricIUS4IUS4_New():
    return itkMatchCardinalityImageToImageMetricIUS4IUS4.New()

class itkMatchCardinalityImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""


    Computes similarity between two objects to be registered.

    This Class is templated over the type of the fixed and moving images
    to be compared.

    This metric computes cardinality of the set of pixels that match
    exactly between the moving and fixed images. The spatial
    correspondence between both images is established through a Transform.
    Pixel values are taken from the Moving image. Their positions are
    mapped to the Fixed image and result in general in non-grid position
    on it. Values at these non-grid position of the Fixed image are
    interpolated using a user-selected Interpolator.

    This metric is designed for matching label maps. All pixel mismatches
    are considered equal whether they are between label 1 and label 2 or
    between label 1 and label 500. In other words, the magnitude of an
    individual label mismatch is not relevant, or the occurrence of a
    label mismatch is important.

    Given the nature of label maps, a nearest neighbor interpolator is the
    preferred interpolator.

    The metric measure can measure the number of pixel matches (pixels
    with exactly the same label) or pixel mismatches (pixels with
    different labels). The returned metric value is the number of pixel
    matches (or mismatches) normalized by the number of pixels considered.
    The number of pixel considered is a function of the number of pixels
    in the overlap of the fixed and moving image buffers conditional on
    any assigned masks. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_Clone)
    SetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_SetMeasureMatches)
    MeasureMatchesOn = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_MeasureMatchesOn)
    MeasureMatchesOff = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_MeasureMatchesOff)
    GetMeasureMatches = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_GetMeasureMatches)
    GetMultiThreader = _swig_new_instance_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_GetMultiThreader)
    __swig_destroy__ = _itkMatchCardinalityImageToImageMetricPython.delete_itkMatchCardinalityImageToImageMetricIUS4IUS4
    cast = _swig_new_static_method(_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMatchCardinalityImageToImageMetricIUS4IUS4

        Create a new object of the class itkMatchCardinalityImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMatchCardinalityImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMatchCardinalityImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMatchCardinalityImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMatchCardinalityImageToImageMetricIUS4IUS4 in _itkMatchCardinalityImageToImageMetricPython:
_itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_swigregister(itkMatchCardinalityImageToImageMetricIUS4IUS4)
itkMatchCardinalityImageToImageMetricIUS4IUS4___New_orig__ = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4___New_orig__
itkMatchCardinalityImageToImageMetricIUS4IUS4_cast = _itkMatchCardinalityImageToImageMetricPython.itkMatchCardinalityImageToImageMetricIUS4IUS4_cast



