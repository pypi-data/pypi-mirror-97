# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDiffeomorphicDemonsRegistrationFilterPython
else:
    import _itkDiffeomorphicDemonsRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDiffeomorphicDemonsRegistrationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDiffeomorphicDemonsRegistrationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImagePython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBAPixelPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterBPython

def itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_New():
    return itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22.New()

class itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_swigregister(itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22)
itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22___New_orig__
itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID2ID2IVF22_cast


def itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_New():
    return itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33.New()

class itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_swigregister(itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33)
itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33___New_orig__
itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID3ID3IVF33_cast


def itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_New():
    return itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44.New()

class itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_swigregister(itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44)
itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44___New_orig__
itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterID4ID4IVF44_cast


def itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_New():
    return itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22.New()

class itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_swigregister(itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22)
itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF2IF2IVF22_cast


def itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_New():
    return itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33.New()

class itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_swigregister(itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33)
itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF3IF3IVF33_cast


def itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_New():
    return itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44.New()

class itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_swigregister(itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44)
itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIF4IF4IVF44_cast


def itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_New():
    return itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22.New()

class itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_swigregister(itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22)
itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22___New_orig__
itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS2ISS2IVF22_cast


def itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_New():
    return itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33.New()

class itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_swigregister(itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33)
itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33___New_orig__
itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS3ISS3IVF33_cast


def itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_New():
    return itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44.New()

class itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_swigregister(itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44)
itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44___New_orig__
itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterISS4ISS4IVF44_cast


def itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_New():
    return itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22.New()

class itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_swigregister(itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22)
itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC2IUC2IVF22_cast


def itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_New():
    return itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33.New()

class itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_swigregister(itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33)
itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC3IUC3IVF33_cast


def itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_New():
    return itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44.New()

class itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_swigregister(itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44)
itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUC4IUC4IVF44_cast


def itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_New():
    return itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22.New()

class itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_swigregister(itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22)
itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS2IUS2IVF22_cast


def itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_New():
    return itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33.New()

class itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_swigregister(itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33)
itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS3IUS3IVF33_cast


def itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_New():
    return itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44.New()

class itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44):
    r"""


    Deformably register two images using a diffeomorphic demons algorithm.

    This class was contributed by Tom Vercauteren, INRIA & Mauna Kea
    Technologies, based on a variation of the DemonsRegistrationFilter.
    The basic modification is to use diffeomorphism exponentials.

    See T. Vercauteren, X. Pennec, A. Perchant and N. Ayache, "Non-
    parametric Diffeomorphic Image Registration with the Demons
    Algorithm", Proc. of MICCAI 2007.

    DiffeomorphicDemonsRegistrationFilter implements the demons deformable
    algorithm that register two images by computing the deformation field
    which will map a moving image onto a fixed image.

    A deformation field is represented as a image whose pixel type is some
    vector type with at least N elements, where N is the dimension of the
    fixed image. The vector type must support element access via operator
    []. It is assumed that the vector elements behave like floating point
    scalars.

    This class is templated over the fixed image type, moving image type
    and the deformation field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial deformation field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output deformation field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    Tom Vercauteren, INRIA & Mauna Kea Technologies

    WARNING:  This filter assumes that the fixed image type, moving image
    type and deformation field type all have the same number of
    dimensions.  This implementation was taken from the Insight Journal
    paper:https://www.insight-journal.org/browse/publication/154

    See:   DemonsRegistrationFilter

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_GetMetric)
    SetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_SetUseGradientType)
    GetUseGradientType = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_GetUseGradientType)
    SetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_SetUseFirstOrderExp)
    GetUseFirstOrderExp = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_GetUseFirstOrderExp)
    UseFirstOrderExpOn = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_UseFirstOrderExpOn)
    UseFirstOrderExpOff = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_UseFirstOrderExpOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_GetIntensityDifferenceThreshold)
    SetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_SetMaximumUpdateStepLength)
    GetMaximumUpdateStepLength = _swig_new_instance_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_GetMaximumUpdateStepLength)
    __swig_destroy__ = _itkDiffeomorphicDemonsRegistrationFilterPython.delete_itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44
    cast = _swig_new_static_method(_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44 in _itkDiffeomorphicDemonsRegistrationFilterPython:
_itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_swigregister(itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44)
itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__ = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__
itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_cast = _itkDiffeomorphicDemonsRegistrationFilterPython.itkDiffeomorphicDemonsRegistrationFilterIUS4IUS4IVF44_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def diffeomorphic_demons_registration_filter(*args, **kwargs):
    """Procedural interface for DiffeomorphicDemonsRegistrationFilter"""
    import itk

    instance = itk.DiffeomorphicDemonsRegistrationFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def diffeomorphic_demons_registration_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKPDEDeformableRegistration.DiffeomorphicDemonsRegistrationFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    diffeomorphic_demons_registration_filter.__doc__ = filter_object.__doc__
    diffeomorphic_demons_registration_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    diffeomorphic_demons_registration_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        diffeomorphic_demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        diffeomorphic_demons_registration_filter.__doc__ += "\n"
        diffeomorphic_demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        diffeomorphic_demons_registration_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




