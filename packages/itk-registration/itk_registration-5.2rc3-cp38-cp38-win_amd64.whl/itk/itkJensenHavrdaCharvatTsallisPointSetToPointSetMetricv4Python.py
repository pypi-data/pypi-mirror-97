# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKMetricsv4Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python
else:
    import _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkEuclideanDistancePointSetToPointSetMetricPython
import itk.itkObjectToObjectMetricPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkArrayPython
import itk.itkOptimizerParametersPython
import itk.itkDisplacementFieldTransformPython
import itk.itkTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkArray2DPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkOptimizerParameterScalesEstimatorPython

def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSD2_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD2_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSD3_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD3_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSD4_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSD4_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSF2_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF2_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSF3_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF3_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSF4_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSF4_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSSS2_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS2_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSSS3_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS3_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSSS4_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSSS4_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUC2_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC2_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUC3_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC3_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUC4_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUC4_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUS2_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS2_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUS3_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS3_cast


def itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_New():
    return itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4.New()

class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUS4_Superclass):
    r"""


    Implementation of the Jensen Havrda Charvat Tsallis Point Set metric.

    Given a specified transform and direction, this class calculates the
    value and derivative between a "fixed" and "moving" point set pair
    using the Havrda-Charvat-Tsallis entropy family, a generalization of
    the well-known Shannon entropy, and the Jensen divergence. Another way
    to look at the family of information-theoretic measures is that the
    points are used to construct the corresponding probably density
    functions.

    In addition, we allow the user to invoke a manifold parzen windowing
    of the data. Instead of an isotropic Gaussian being associated with
    each point, we can actually calculate the covariance matrix for each
    point such that it reflects the locate point set structure.

    To speed up the metric calculation, we use ITK's K-d tree to query the
    metric value only for a given neighborhood. Considering that probably
    only a small subset of points is needed to get a good approximation of
    the metric value for a single point, this is probably warranted. So
    what we do is transform each point (with the specified transform) and
    construct the k-d tree from the transformed points.

    Contributed by Nicholas J. Tustison, James C. Gee in the Insight
    Journal paper:https://www.insight-journal.org/browse/publication/317

    The original work reported in Tustison et al. 2011 optionally employed
    a regularization term to prevent the moving point set(s) from
    coalescing to a single point location. However, within the
    registration framework, this term is of limited utility as such
    regularization is dictated by the transform and any explicit
    regularization terms. Also note that the published work applies to
    multiple points sets each of which could be considered "moving" but
    this is also not applicable for this particular implementation.
    REFERENCE  N.J. Tustison, S. P. Awate, G. Song, T. S. Cook, and J. C.
    Gee. "Point set registration using Havrda-Charvat-Tsallis entropy
    measures" IEEE Transactions on Medical Imaging, 30(2):451-60, 2011.

    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4___New_orig__)
    SetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_SetAlpha)
    GetAlpha = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetAlpha)
    SetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_SetPointSetSigma)
    GetPointSetSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetPointSetSigma)
    SetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_SetEvaluationKNeighborhood)
    GetEvaluationKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetEvaluationKNeighborhood)
    SetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_SetUseAnisotropicCovariances)
    GetUseAnisotropicCovariances = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetUseAnisotropicCovariances)
    UseAnisotropicCovariancesOn = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_UseAnisotropicCovariancesOn)
    UseAnisotropicCovariancesOff = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_UseAnisotropicCovariancesOff)
    SetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_SetCovarianceKNeighborhood)
    GetCovarianceKNeighborhood = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetCovarianceKNeighborhood)
    SetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_SetKernelSigma)
    GetKernelSigma = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetKernelSigma)
    GetLocalNeighborhoodValue = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetLocalNeighborhoodValue)
    GetLocalNeighborhoodValueAndDerivative = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_GetLocalNeighborhoodValueAndDerivative)
    InternalClone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_InternalClone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_cast)

    def New(*args, **kargs):
        """New() -> itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4

        Create a new object of the class itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_swigregister(itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4)
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4___New_orig__
itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4PSUS4_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD2_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD3_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSD4_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF2_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF3_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSF4_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS2_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS3_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSSS4_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC2_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC3_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUC4_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS2_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS3_cast


def itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4.New()

class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_Clone)
    __swig_destroy__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4
    cast = _swig_new_static_method(_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4 in _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python:
_itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4)
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4___New_orig__ = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_cast = _itkJensenHavrdaCharvatTsallisPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftJHCTPSTPSMPSUS4_cast



