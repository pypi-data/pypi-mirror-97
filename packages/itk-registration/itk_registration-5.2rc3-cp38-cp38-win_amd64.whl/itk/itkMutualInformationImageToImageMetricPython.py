# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMutualInformationImageToImageMetricPython
else:
    import _itkMutualInformationImageToImageMetricPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMutualInformationImageToImageMetricPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMutualInformationImageToImageMetricPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkKernelFunctionBasePython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkFunctionBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkContinuousIndexPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkArrayPython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkImageRegionPython
import itk.itkImageToImageMetricPython
import itk.itkInterpolateImageFunctionPython
import itk.itkImageFunctionBasePython
import itk.itkOptimizerParametersPython
import itk.ITKCostFunctionsPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkArray2DPython
import itk.itkCostFunctionPython
import itk.itkSpatialObjectBasePython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkVariableLengthVectorPython
import itk.itkDiffusionTensor3DPython
import itk.itkTransformBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkBoundingBoxPython
import itk.itkVectorContainerPython
import itk.itkMapContainerPython

def itkMutualInformationImageToImageMetricID2ID2_New():
    return itkMutualInformationImageToImageMetricID2ID2.New()

class itkMutualInformationImageToImageMetricID2ID2(itk.itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricID2ID2
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricID2ID2

        Create a new object of the class itkMutualInformationImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricID2ID2 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_swigregister(itkMutualInformationImageToImageMetricID2ID2)
itkMutualInformationImageToImageMetricID2ID2___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2___New_orig__
itkMutualInformationImageToImageMetricID2ID2_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID2ID2_cast


def itkMutualInformationImageToImageMetricID3ID3_New():
    return itkMutualInformationImageToImageMetricID3ID3.New()

class itkMutualInformationImageToImageMetricID3ID3(itk.itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricID3ID3
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricID3ID3

        Create a new object of the class itkMutualInformationImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricID3ID3 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_swigregister(itkMutualInformationImageToImageMetricID3ID3)
itkMutualInformationImageToImageMetricID3ID3___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3___New_orig__
itkMutualInformationImageToImageMetricID3ID3_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID3ID3_cast


def itkMutualInformationImageToImageMetricID4ID4_New():
    return itkMutualInformationImageToImageMetricID4ID4.New()

class itkMutualInformationImageToImageMetricID4ID4(itk.itkImageToImageMetricPython.itkImageToImageMetricID4ID4):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricID4ID4
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricID4ID4

        Create a new object of the class itkMutualInformationImageToImageMetricID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricID4ID4 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_swigregister(itkMutualInformationImageToImageMetricID4ID4)
itkMutualInformationImageToImageMetricID4ID4___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4___New_orig__
itkMutualInformationImageToImageMetricID4ID4_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricID4ID4_cast


def itkMutualInformationImageToImageMetricIF2IF2_New():
    return itkMutualInformationImageToImageMetricIF2IF2.New()

class itkMutualInformationImageToImageMetricIF2IF2(itk.itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIF2IF2
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIF2IF2

        Create a new object of the class itkMutualInformationImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIF2IF2 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_swigregister(itkMutualInformationImageToImageMetricIF2IF2)
itkMutualInformationImageToImageMetricIF2IF2___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2___New_orig__
itkMutualInformationImageToImageMetricIF2IF2_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF2IF2_cast


def itkMutualInformationImageToImageMetricIF3IF3_New():
    return itkMutualInformationImageToImageMetricIF3IF3.New()

class itkMutualInformationImageToImageMetricIF3IF3(itk.itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIF3IF3
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIF3IF3

        Create a new object of the class itkMutualInformationImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIF3IF3 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_swigregister(itkMutualInformationImageToImageMetricIF3IF3)
itkMutualInformationImageToImageMetricIF3IF3___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3___New_orig__
itkMutualInformationImageToImageMetricIF3IF3_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF3IF3_cast


def itkMutualInformationImageToImageMetricIF4IF4_New():
    return itkMutualInformationImageToImageMetricIF4IF4.New()

class itkMutualInformationImageToImageMetricIF4IF4(itk.itkImageToImageMetricPython.itkImageToImageMetricIF4IF4):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIF4IF4
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIF4IF4

        Create a new object of the class itkMutualInformationImageToImageMetricIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIF4IF4 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_swigregister(itkMutualInformationImageToImageMetricIF4IF4)
itkMutualInformationImageToImageMetricIF4IF4___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4___New_orig__
itkMutualInformationImageToImageMetricIF4IF4_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIF4IF4_cast


def itkMutualInformationImageToImageMetricISS2ISS2_New():
    return itkMutualInformationImageToImageMetricISS2ISS2.New()

class itkMutualInformationImageToImageMetricISS2ISS2(itk.itkImageToImageMetricPython.itkImageToImageMetricISS2ISS2):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricISS2ISS2
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricISS2ISS2

        Create a new object of the class itkMutualInformationImageToImageMetricISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricISS2ISS2 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_swigregister(itkMutualInformationImageToImageMetricISS2ISS2)
itkMutualInformationImageToImageMetricISS2ISS2___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2___New_orig__
itkMutualInformationImageToImageMetricISS2ISS2_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS2ISS2_cast


def itkMutualInformationImageToImageMetricISS3ISS3_New():
    return itkMutualInformationImageToImageMetricISS3ISS3.New()

class itkMutualInformationImageToImageMetricISS3ISS3(itk.itkImageToImageMetricPython.itkImageToImageMetricISS3ISS3):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricISS3ISS3
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricISS3ISS3

        Create a new object of the class itkMutualInformationImageToImageMetricISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricISS3ISS3 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_swigregister(itkMutualInformationImageToImageMetricISS3ISS3)
itkMutualInformationImageToImageMetricISS3ISS3___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3___New_orig__
itkMutualInformationImageToImageMetricISS3ISS3_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS3ISS3_cast


def itkMutualInformationImageToImageMetricISS4ISS4_New():
    return itkMutualInformationImageToImageMetricISS4ISS4.New()

class itkMutualInformationImageToImageMetricISS4ISS4(itk.itkImageToImageMetricPython.itkImageToImageMetricISS4ISS4):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricISS4ISS4
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricISS4ISS4

        Create a new object of the class itkMutualInformationImageToImageMetricISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricISS4ISS4 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_swigregister(itkMutualInformationImageToImageMetricISS4ISS4)
itkMutualInformationImageToImageMetricISS4ISS4___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4___New_orig__
itkMutualInformationImageToImageMetricISS4ISS4_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricISS4ISS4_cast


def itkMutualInformationImageToImageMetricIUC2IUC2_New():
    return itkMutualInformationImageToImageMetricIUC2IUC2.New()

class itkMutualInformationImageToImageMetricIUC2IUC2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIUC2IUC2
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIUC2IUC2

        Create a new object of the class itkMutualInformationImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIUC2IUC2 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_swigregister(itkMutualInformationImageToImageMetricIUC2IUC2)
itkMutualInformationImageToImageMetricIUC2IUC2___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2___New_orig__
itkMutualInformationImageToImageMetricIUC2IUC2_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC2IUC2_cast


def itkMutualInformationImageToImageMetricIUC3IUC3_New():
    return itkMutualInformationImageToImageMetricIUC3IUC3.New()

class itkMutualInformationImageToImageMetricIUC3IUC3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIUC3IUC3
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIUC3IUC3

        Create a new object of the class itkMutualInformationImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIUC3IUC3 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_swigregister(itkMutualInformationImageToImageMetricIUC3IUC3)
itkMutualInformationImageToImageMetricIUC3IUC3___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3___New_orig__
itkMutualInformationImageToImageMetricIUC3IUC3_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC3IUC3_cast


def itkMutualInformationImageToImageMetricIUC4IUC4_New():
    return itkMutualInformationImageToImageMetricIUC4IUC4.New()

class itkMutualInformationImageToImageMetricIUC4IUC4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUC4IUC4):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIUC4IUC4
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIUC4IUC4

        Create a new object of the class itkMutualInformationImageToImageMetricIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIUC4IUC4 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_swigregister(itkMutualInformationImageToImageMetricIUC4IUC4)
itkMutualInformationImageToImageMetricIUC4IUC4___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4___New_orig__
itkMutualInformationImageToImageMetricIUC4IUC4_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUC4IUC4_cast


def itkMutualInformationImageToImageMetricIUS2IUS2_New():
    return itkMutualInformationImageToImageMetricIUS2IUS2.New()

class itkMutualInformationImageToImageMetricIUS2IUS2(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIUS2IUS2
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIUS2IUS2

        Create a new object of the class itkMutualInformationImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIUS2IUS2 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_swigregister(itkMutualInformationImageToImageMetricIUS2IUS2)
itkMutualInformationImageToImageMetricIUS2IUS2___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2___New_orig__
itkMutualInformationImageToImageMetricIUS2IUS2_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS2IUS2_cast


def itkMutualInformationImageToImageMetricIUS3IUS3_New():
    return itkMutualInformationImageToImageMetricIUS3IUS3.New()

class itkMutualInformationImageToImageMetricIUS3IUS3(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIUS3IUS3
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIUS3IUS3

        Create a new object of the class itkMutualInformationImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIUS3IUS3 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_swigregister(itkMutualInformationImageToImageMetricIUS3IUS3)
itkMutualInformationImageToImageMetricIUS3IUS3___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3___New_orig__
itkMutualInformationImageToImageMetricIUS3IUS3_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS3IUS3_cast


def itkMutualInformationImageToImageMetricIUS4IUS4_New():
    return itkMutualInformationImageToImageMetricIUS4IUS4.New()

class itkMutualInformationImageToImageMetricIUS4IUS4(itk.itkImageToImageMetricPython.itkImageToImageMetricIUS4IUS4):
    r"""


    Computes the mutual information between two images to be registered.

    MutualInformationImageToImageMetric computes the mutual information
    between a fixed and moving image to be registered.

    This class is templated over the FixedImage type and the MovingImage
    type.

    The fixed and moving images are set via methods SetFixedImage() and
    SetMovingImage(). This metric makes use of user specified Transform
    and Interpolator. The Transform is used to map points from the fixed
    image to the moving image domain. The Interpolator is used to evaluate
    the image intensity at user specified geometric points in the moving
    image. The Transform and Interpolator are set via methods
    SetTransform() and SetInterpolator().

    WARNING:  This metric assumes that the moving image has already been
    connected to the interpolator outside of this class.  The method
    GetValue() computes of the mutual information while method
    GetValueAndDerivative() computes both the mutual information and its
    derivatives with respect to the transform parameters.

    The calculations are based on the method of Viola and Wells where the
    probability density distributions are estimated using Parzen windows.

    By default a Gaussian kernel is used in the density estimation. Other
    option include Cauchy and spline-based. A user can specify the kernel
    passing in a pointer a KernelFunctionBase using the
    SetKernelFunction() method.

    Mutual information is estimated using two sample sets: one to
    calculate the singular and joint pdf's and one to calculate the
    entropy integral. By default 50 samples points are used in each set.
    Other values can be set via the SetNumberOfSpatialSamples() method.

    Quality of the density estimate depends on the choice of the kernel's
    standard deviation. Optimal choice will depend on the images. It is
    can be shown that around the optimal variance, the mutual information
    estimate is relatively insensitive to small changes of the standard
    deviation. In our experiments, we have found that a standard deviation
    of 0.4 works well for images normalized to have a mean of zero and
    standard deviation of 1.0. The variance can be set via methods
    SetFixedImageStandardDeviation() and
    SetMovingImageStandardDeviation().

    Implementaton of this class is based on: Viola, P. and Wells III, W.
    (1997). "Alignment by Maximization of Mutual Information"
    International Journal of Computer Vision, 24(2):137-154

    See:  KernelFunctionBase

    See:  GaussianKernelFunction
    {Registration/Common/MutualInformation,Mutual Information}
    {Core/Transform/MutualInformationAffine,Mutual Information Affine} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_Clone)
    SetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_SetNumberOfSpatialSamples)
    GetNumberOfSpatialSamples = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_GetNumberOfSpatialSamples)
    SetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_SetMovingImageStandardDeviation)
    GetMovingImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_GetMovingImageStandardDeviation)
    SetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_SetFixedImageStandardDeviation)
    GetFixedImageStandardDeviation = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_GetFixedImageStandardDeviation)
    SetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_SetKernelFunction)
    GetModifiableKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_GetModifiableKernelFunction)
    GetKernelFunction = _swig_new_instance_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_GetKernelFunction)
    __swig_destroy__ = _itkMutualInformationImageToImageMetricPython.delete_itkMutualInformationImageToImageMetricIUS4IUS4
    cast = _swig_new_static_method(_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMutualInformationImageToImageMetricIUS4IUS4

        Create a new object of the class itkMutualInformationImageToImageMetricIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMutualInformationImageToImageMetricIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMutualInformationImageToImageMetricIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMutualInformationImageToImageMetricIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMutualInformationImageToImageMetricIUS4IUS4 in _itkMutualInformationImageToImageMetricPython:
_itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_swigregister(itkMutualInformationImageToImageMetricIUS4IUS4)
itkMutualInformationImageToImageMetricIUS4IUS4___New_orig__ = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4___New_orig__
itkMutualInformationImageToImageMetricIUS4IUS4_cast = _itkMutualInformationImageToImageMetricPython.itkMutualInformationImageToImageMetricIUS4IUS4_cast



