# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkImageRegistrationMethodPython
else:
    import _itkImageRegistrationMethodPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkImageRegistrationMethodPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkImageRegistrationMethodPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKOptimizersBasePython
import itk.ITKCostFunctionsPython
import itk.itkCostFunctionPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.vnl_least_squares_functionPython
import itk.vnl_cost_functionPython
import itk.vnl_unary_functionPython
import itk.itkArray2DPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkInterpolateImageFunctionPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkImageFunctionBasePython
import itk.itkFunctionBasePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkContinuousIndexPython
import itk.itkImageToImageMetricPython
import itk.itkSpatialObjectBasePython
import itk.itkSpatialObjectPropertyPython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkAffineTransformPython
import itk.itkMatrixOffsetTransformBasePython

def itkImageRegistrationMethodID2ID2_New():
    return itkImageRegistrationMethodID2ID2.New()

class itkImageRegistrationMethodID2ID2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID2ID2
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID2ID2

        Create a new object of the class itkImageRegistrationMethodID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodID2ID2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_swigregister(itkImageRegistrationMethodID2ID2)
itkImageRegistrationMethodID2ID2___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2___New_orig__
itkImageRegistrationMethodID2ID2_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID2ID2_cast


def itkImageRegistrationMethodID3ID3_New():
    return itkImageRegistrationMethodID3ID3.New()

class itkImageRegistrationMethodID3ID3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID3ID3
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID3ID3

        Create a new object of the class itkImageRegistrationMethodID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodID3ID3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_swigregister(itkImageRegistrationMethodID3ID3)
itkImageRegistrationMethodID3ID3___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3___New_orig__
itkImageRegistrationMethodID3ID3_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID3ID3_cast


def itkImageRegistrationMethodID4ID4_New():
    return itkImageRegistrationMethodID4ID4.New()

class itkImageRegistrationMethodID4ID4(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodID4ID4
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodID4ID4

        Create a new object of the class itkImageRegistrationMethodID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodID4ID4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_swigregister(itkImageRegistrationMethodID4ID4)
itkImageRegistrationMethodID4ID4___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4___New_orig__
itkImageRegistrationMethodID4ID4_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodID4ID4_cast


def itkImageRegistrationMethodIF2IF2_New():
    return itkImageRegistrationMethodIF2IF2.New()

class itkImageRegistrationMethodIF2IF2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF2IF2
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF2IF2

        Create a new object of the class itkImageRegistrationMethodIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIF2IF2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_swigregister(itkImageRegistrationMethodIF2IF2)
itkImageRegistrationMethodIF2IF2___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2___New_orig__
itkImageRegistrationMethodIF2IF2_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF2IF2_cast


def itkImageRegistrationMethodIF3IF3_New():
    return itkImageRegistrationMethodIF3IF3.New()

class itkImageRegistrationMethodIF3IF3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF3IF3
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF3IF3

        Create a new object of the class itkImageRegistrationMethodIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIF3IF3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_swigregister(itkImageRegistrationMethodIF3IF3)
itkImageRegistrationMethodIF3IF3___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3___New_orig__
itkImageRegistrationMethodIF3IF3_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF3IF3_cast


def itkImageRegistrationMethodIF4IF4_New():
    return itkImageRegistrationMethodIF4IF4.New()

class itkImageRegistrationMethodIF4IF4(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIF4IF4
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIF4IF4

        Create a new object of the class itkImageRegistrationMethodIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIF4IF4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_swigregister(itkImageRegistrationMethodIF4IF4)
itkImageRegistrationMethodIF4IF4___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4___New_orig__
itkImageRegistrationMethodIF4IF4_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIF4IF4_cast


def itkImageRegistrationMethodISS2ISS2_New():
    return itkImageRegistrationMethodISS2ISS2.New()

class itkImageRegistrationMethodISS2ISS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS2ISS2
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS2ISS2

        Create a new object of the class itkImageRegistrationMethodISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodISS2ISS2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_swigregister(itkImageRegistrationMethodISS2ISS2)
itkImageRegistrationMethodISS2ISS2___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2___New_orig__
itkImageRegistrationMethodISS2ISS2_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS2ISS2_cast


def itkImageRegistrationMethodISS3ISS3_New():
    return itkImageRegistrationMethodISS3ISS3.New()

class itkImageRegistrationMethodISS3ISS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS3ISS3
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS3ISS3

        Create a new object of the class itkImageRegistrationMethodISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodISS3ISS3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_swigregister(itkImageRegistrationMethodISS3ISS3)
itkImageRegistrationMethodISS3ISS3___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3___New_orig__
itkImageRegistrationMethodISS3ISS3_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS3ISS3_cast


def itkImageRegistrationMethodISS4ISS4_New():
    return itkImageRegistrationMethodISS4ISS4.New()

class itkImageRegistrationMethodISS4ISS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodISS4ISS4
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodISS4ISS4

        Create a new object of the class itkImageRegistrationMethodISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodISS4ISS4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_swigregister(itkImageRegistrationMethodISS4ISS4)
itkImageRegistrationMethodISS4ISS4___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4___New_orig__
itkImageRegistrationMethodISS4ISS4_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodISS4ISS4_cast


def itkImageRegistrationMethodIUC2IUC2_New():
    return itkImageRegistrationMethodIUC2IUC2.New()

class itkImageRegistrationMethodIUC2IUC2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC2IUC2
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC2IUC2

        Create a new object of the class itkImageRegistrationMethodIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUC2IUC2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_swigregister(itkImageRegistrationMethodIUC2IUC2)
itkImageRegistrationMethodIUC2IUC2___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2___New_orig__
itkImageRegistrationMethodIUC2IUC2_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC2IUC2_cast


def itkImageRegistrationMethodIUC3IUC3_New():
    return itkImageRegistrationMethodIUC3IUC3.New()

class itkImageRegistrationMethodIUC3IUC3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC3IUC3
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC3IUC3

        Create a new object of the class itkImageRegistrationMethodIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUC3IUC3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_swigregister(itkImageRegistrationMethodIUC3IUC3)
itkImageRegistrationMethodIUC3IUC3___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3___New_orig__
itkImageRegistrationMethodIUC3IUC3_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC3IUC3_cast


def itkImageRegistrationMethodIUC4IUC4_New():
    return itkImageRegistrationMethodIUC4IUC4.New()

class itkImageRegistrationMethodIUC4IUC4(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUC4IUC4
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUC4IUC4

        Create a new object of the class itkImageRegistrationMethodIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUC4IUC4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_swigregister(itkImageRegistrationMethodIUC4IUC4)
itkImageRegistrationMethodIUC4IUC4___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4___New_orig__
itkImageRegistrationMethodIUC4IUC4_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUC4IUC4_cast


def itkImageRegistrationMethodIUS2IUS2_New():
    return itkImageRegistrationMethodIUS2IUS2.New()

class itkImageRegistrationMethodIUS2IUS2(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS2IUS2
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS2IUS2

        Create a new object of the class itkImageRegistrationMethodIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUS2IUS2 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_swigregister(itkImageRegistrationMethodIUS2IUS2)
itkImageRegistrationMethodIUS2IUS2___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2___New_orig__
itkImageRegistrationMethodIUS2IUS2_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS2IUS2_cast


def itkImageRegistrationMethodIUS3IUS3_New():
    return itkImageRegistrationMethodIUS3IUS3.New()

class itkImageRegistrationMethodIUS3IUS3(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS3IUS3
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS3IUS3

        Create a new object of the class itkImageRegistrationMethodIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUS3IUS3 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_swigregister(itkImageRegistrationMethodIUS3IUS3)
itkImageRegistrationMethodIUS3IUS3___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3___New_orig__
itkImageRegistrationMethodIUS3IUS3_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS3IUS3_cast


def itkImageRegistrationMethodIUS4IUS4_New():
    return itkImageRegistrationMethodIUS4IUS4.New()

class itkImageRegistrationMethodIUS4IUS4(itk.ITKCommonBasePython.itkProcessObject):
    r"""


    Base class for Image Registration Methods.

    This Class define the generic interface for a registration method.

    This class is templated over the type of the two image to be
    registered. A generic Transform is used by this class. That allows to
    select at run time the particular type of transformation that is to be
    applied for registering the images.

    This method use a generic Metric in order to compare the two images.
    the final goal of the registration method is to find the set of
    parameters of the Transformation that optimizes the metric.

    The registration method also support a generic optimizer that can be
    selected at run-time. The only restriction for the optimizer is that
    it should be able to operate in single-valued cost functions given
    that the metrics used to compare images provide a single value as
    output.

    The terms : Fixed image and Moving image are used in this class to
    indicate what image is being mapped by the transform.

    This class uses the coordinate system of the Fixed image as a
    reference and searches for a Transform that will map points from the
    space of the Fixed image to the space of the Moving image.

    For doing so, a Metric will be continuously applied to compare the
    Fixed image with the Transformed Moving image. This process also
    requires to interpolate values from the Moving image.

    example{Registration/Common/GlobalRegistrationOfTwoImages,Global
    Registration Of Two Images}
    example{Core/Transform/GlobalRegistrationTwoImagesAffine,Global
    Registration Two Images (Affine)}
    example{Core/Transform/GlobalRegistrationTwoImagesBSpline,Global
    Registration Of Two Images (BSpline)} 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_Clone)
    SetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetMovingImage)
    SetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetOptimizer)
    GetModifiableOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableOptimizer)
    GetOptimizer = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetOptimizer)
    SetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetMetric)
    GetModifiableMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableMetric)
    GetMetric = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetMetric)
    SetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetTransform)
    GetModifiableTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableTransform)
    GetTransform = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetTransform)
    SetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetInterpolator)
    GetModifiableInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetModifiableInterpolator)
    GetInterpolator = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetInterpolator)
    SetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetInitialTransformParameters)
    GetInitialTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetInitialTransformParameters)
    GetLastTransformParameters = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetLastTransformParameters)
    SetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetFixedImageRegion)
    GetFixedImageRegion = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetFixedImageRegion)
    GetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetFixedImageRegionDefined)
    SetFixedImageRegionDefined = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_SetFixedImageRegionDefined)
    Initialize = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_Initialize)
    GetOutput = _swig_new_instance_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_GetOutput)
    __swig_destroy__ = _itkImageRegistrationMethodPython.delete_itkImageRegistrationMethodIUS4IUS4
    cast = _swig_new_static_method(_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkImageRegistrationMethodIUS4IUS4

        Create a new object of the class itkImageRegistrationMethodIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkImageRegistrationMethodIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkImageRegistrationMethodIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkImageRegistrationMethodIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkImageRegistrationMethodIUS4IUS4 in _itkImageRegistrationMethodPython:
_itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_swigregister(itkImageRegistrationMethodIUS4IUS4)
itkImageRegistrationMethodIUS4IUS4___New_orig__ = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4___New_orig__
itkImageRegistrationMethodIUS4IUS4_cast = _itkImageRegistrationMethodPython.itkImageRegistrationMethodIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_registration_method(*args, **kwargs):
    """Procedural interface for ImageRegistrationMethod"""
    import itk

    instance = itk.ImageRegistrationMethod.New(*args, **kwargs)
    return instance.__internal_call__()


def image_registration_method_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKRegistrationCommon.ImageRegistrationMethod
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_registration_method.__doc__ = filter_object.__doc__
    image_registration_method.__doc__ += "\n args are input(s) to the filter.\n\n"
    image_registration_method.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        image_registration_method.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_registration_method.__doc__ += "\n"
        image_registration_method.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_registration_method.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




