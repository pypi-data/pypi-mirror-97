# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKMetricsv4Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabeledPointSetToPointSetMetricv4Python
else:
    import _itkLabeledPointSetToPointSetMetricv4Python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabeledPointSetToPointSetMetricv4Python.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabeledPointSetToPointSetMetricv4Python.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkEuclideanDistancePointSetToPointSetMetricPython
import itk.itkOptimizerParametersPython
import itk.ITKCommonBasePython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkObjectToObjectMetricPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkImageRegionPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkDisplacementFieldTransformPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkDiffusionTensor3DPython
import itk.itkVariableLengthVectorPython
import itk.itkArray2DPython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkRGBPixelPython
import itk.itkOptimizerParameterScalesEstimatorPython
import itk.itkPointSetPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython

def itkLabeledPointSetToPointSetMetricv4PSSS2_New():
    return itkLabeledPointSetToPointSetMetricv4PSSS2.New()

class itkLabeledPointSetToPointSetMetricv4PSSS2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSSS2_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSSS2
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSSS2

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSSS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSSS2 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_swigregister(itkLabeledPointSetToPointSetMetricv4PSSS2)
itkLabeledPointSetToPointSetMetricv4PSSS2___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2___New_orig__
itkLabeledPointSetToPointSetMetricv4PSSS2_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS2_cast


def itkLabeledPointSetToPointSetMetricv4PSSS3_New():
    return itkLabeledPointSetToPointSetMetricv4PSSS3.New()

class itkLabeledPointSetToPointSetMetricv4PSSS3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSSS3_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSSS3
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSSS3

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSSS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSSS3 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_swigregister(itkLabeledPointSetToPointSetMetricv4PSSS3)
itkLabeledPointSetToPointSetMetricv4PSSS3___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3___New_orig__
itkLabeledPointSetToPointSetMetricv4PSSS3_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS3_cast


def itkLabeledPointSetToPointSetMetricv4PSSS4_New():
    return itkLabeledPointSetToPointSetMetricv4PSSS4.New()

class itkLabeledPointSetToPointSetMetricv4PSSS4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSSS4_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSSS4
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSSS4

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSSS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSSS4 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_swigregister(itkLabeledPointSetToPointSetMetricv4PSSS4)
itkLabeledPointSetToPointSetMetricv4PSSS4___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4___New_orig__
itkLabeledPointSetToPointSetMetricv4PSSS4_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSSS4_cast


def itkLabeledPointSetToPointSetMetricv4PSUC2_New():
    return itkLabeledPointSetToPointSetMetricv4PSUC2.New()

class itkLabeledPointSetToPointSetMetricv4PSUC2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUC2_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSUC2
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSUC2

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSUC2 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_swigregister(itkLabeledPointSetToPointSetMetricv4PSUC2)
itkLabeledPointSetToPointSetMetricv4PSUC2___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2___New_orig__
itkLabeledPointSetToPointSetMetricv4PSUC2_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC2_cast


def itkLabeledPointSetToPointSetMetricv4PSUC3_New():
    return itkLabeledPointSetToPointSetMetricv4PSUC3.New()

class itkLabeledPointSetToPointSetMetricv4PSUC3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUC3_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSUC3
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSUC3

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSUC3 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_swigregister(itkLabeledPointSetToPointSetMetricv4PSUC3)
itkLabeledPointSetToPointSetMetricv4PSUC3___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3___New_orig__
itkLabeledPointSetToPointSetMetricv4PSUC3_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC3_cast


def itkLabeledPointSetToPointSetMetricv4PSUC4_New():
    return itkLabeledPointSetToPointSetMetricv4PSUC4.New()

class itkLabeledPointSetToPointSetMetricv4PSUC4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUC4_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSUC4
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSUC4

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSUC4 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_swigregister(itkLabeledPointSetToPointSetMetricv4PSUC4)
itkLabeledPointSetToPointSetMetricv4PSUC4___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4___New_orig__
itkLabeledPointSetToPointSetMetricv4PSUC4_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUC4_cast


def itkLabeledPointSetToPointSetMetricv4PSUS2_New():
    return itkLabeledPointSetToPointSetMetricv4PSUS2.New()

class itkLabeledPointSetToPointSetMetricv4PSUS2(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUS2_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSUS2
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSUS2

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSUS2 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_swigregister(itkLabeledPointSetToPointSetMetricv4PSUS2)
itkLabeledPointSetToPointSetMetricv4PSUS2___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2___New_orig__
itkLabeledPointSetToPointSetMetricv4PSUS2_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS2_cast


def itkLabeledPointSetToPointSetMetricv4PSUS3_New():
    return itkLabeledPointSetToPointSetMetricv4PSUS3.New()

class itkLabeledPointSetToPointSetMetricv4PSUS3(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUS3_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSUS3
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSUS3

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSUS3 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_swigregister(itkLabeledPointSetToPointSetMetricv4PSUS3)
itkLabeledPointSetToPointSetMetricv4PSUS3___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3___New_orig__
itkLabeledPointSetToPointSetMetricv4PSUS3_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS3_cast


def itkLabeledPointSetToPointSetMetricv4PSUS4_New():
    return itkLabeledPointSetToPointSetMetricv4PSUS4.New()

class itkLabeledPointSetToPointSetMetricv4PSUS4(itk.itkEuclideanDistancePointSetToPointSetMetricPython.itkEuclideanDistancePointSetToPointSetMetricv4PSUS4_Superclass):
    r"""


    Computes the distance metric and gradient between two labeled point
    sets.

    This class is generic in that it takes an unlabeled point set metric,
    such as one of the following options

    EuclideanDistancePointSetToPointSetMetricv4 (default)

    ExpectationBasedPointSetToPointSetMetricv4

    JensenHavrdaCharvatTsallisPointSetToPointSetMetricv4  where it is
    assumed that the point set PixelType associated with each point is a
    label (i.e. LabelEnum). This class is used to find the total metric
    and total derivative based on the matching between the separate fixed
    and moving labeled point sets. This class first determines the common
    label set between the fixed and moving point sets. For each common
    label, the specified unlabeled point set metric is cloned and the
    fixed and moving point subset associated with that common label is
    specified as the fixed and moving point set input. Functionality in
    the base class ( PointSetToPointSetMetric) is used to accumulated the
    value and gradient.

    Nick Tustison 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_Clone)
    SetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_SetPointSetMetric)
    GetModifiablePointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_GetModifiablePointSetMetric)
    GetPointSetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_GetPointSetMetric)
    LabelTypeIsInteger = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_LabelTypeIsInteger
    
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkLabeledPointSetToPointSetMetricv4PSUS4
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_cast)

    def New(*args, **kargs):
        """New() -> itkLabeledPointSetToPointSetMetricv4PSUS4

        Create a new object of the class itkLabeledPointSetToPointSetMetricv4PSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabeledPointSetToPointSetMetricv4PSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabeledPointSetToPointSetMetricv4PSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabeledPointSetToPointSetMetricv4PSUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabeledPointSetToPointSetMetricv4PSUS4 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_swigregister(itkLabeledPointSetToPointSetMetricv4PSUS4)
itkLabeledPointSetToPointSetMetricv4PSUS4___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4___New_orig__
itkLabeledPointSetToPointSetMetricv4PSUS4_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkLabeledPointSetToPointSetMetricv4PSUS4_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass(itk.itkOptimizerParameterScalesEstimatorPython.itkOptimizerParameterScalesEstimatorTemplateD):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetMetric = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_SetMetric)
    SetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_SetTransformForward)
    GetTransformForward = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_GetTransformForward)
    SetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_SetVirtualDomainPointSet)
    GetVirtualDomainPointSet = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_GetVirtualDomainPointSet)
    SetCentralRegionRadius = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_SetCentralRegionRadius)
    SetScalesSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_SetScalesSamplingStrategy)
    SetStepScaleSamplingStrategy = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_SetStepScaleSamplingStrategy)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass_cast

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_Superclass):
    r"""Proxy of C++ itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    SetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_SetSmallParameterVariation)
    GetSmallParameterVariation = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_GetSmallParameterVariation)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_cast)

# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS2_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS3_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSSS4_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC2_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC3_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUC4_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS2_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS3_cast


def itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_New():
    return itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4.New()

class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Superclass):
    r"""


    Registration helper class for estimating scales of transform
    parameters a step sizes, from the maximum voxel shift in physical
    space caused by a parameter change. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_Clone)
    __swig_destroy__ = _itkLabeledPointSetToPointSetMetricv4Python.delete_itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4
    cast = _swig_new_static_method(_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_cast)

    def New(*args, **kargs):
        """New() -> itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4

        Create a new object of the class itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4 in _itkLabeledPointSetToPointSetMetricv4Python:
_itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_swigregister(itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4)
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4___New_orig__ = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4___New_orig__
itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_cast = _itkLabeledPointSetToPointSetMetricv4Python.itkRegistrationParameterScalesFromPhysicalShiftLPSTPSMPSUS4_cast



