# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkPDEDeformableRegistrationFilterPython
else:
    import _itkPDEDeformableRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkPDEDeformableRegistrationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkPDEDeformableRegistrationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkImagePython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.ITKCommonBasePython
import itk.itkCovariantVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkRGBPixelPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkPDEDeformableRegistrationFilterID2ID2IVF22_New():
    return itkPDEDeformableRegistrationFilterID2ID2IVF22.New()

class itkPDEDeformableRegistrationFilterID2ID2IVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterID2ID2IVF22

        Create a new object of the class itkPDEDeformableRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterID2ID2IVF22 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_swigregister(itkPDEDeformableRegistrationFilterID2ID2IVF22)
itkPDEDeformableRegistrationFilterID2ID2IVF22___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22___New_orig__
itkPDEDeformableRegistrationFilterID2ID2IVF22_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22_cast


def itkPDEDeformableRegistrationFilterID3ID3IVF33_New():
    return itkPDEDeformableRegistrationFilterID3ID3IVF33.New()

class itkPDEDeformableRegistrationFilterID3ID3IVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterID3ID3IVF33

        Create a new object of the class itkPDEDeformableRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterID3ID3IVF33 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_swigregister(itkPDEDeformableRegistrationFilterID3ID3IVF33)
itkPDEDeformableRegistrationFilterID3ID3IVF33___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33___New_orig__
itkPDEDeformableRegistrationFilterID3ID3IVF33_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33_cast


def itkPDEDeformableRegistrationFilterID4ID4IVF44_New():
    return itkPDEDeformableRegistrationFilterID4ID4IVF44.New()

class itkPDEDeformableRegistrationFilterID4ID4IVF44(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF44IVF44):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterID4ID4IVF44
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterID4ID4IVF44

        Create a new object of the class itkPDEDeformableRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterID4ID4IVF44 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_swigregister(itkPDEDeformableRegistrationFilterID4ID4IVF44)
itkPDEDeformableRegistrationFilterID4ID4IVF44___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44___New_orig__
itkPDEDeformableRegistrationFilterID4ID4IVF44_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44_cast


def itkPDEDeformableRegistrationFilterIF2IF2IVF22_New():
    return itkPDEDeformableRegistrationFilterIF2IF2IVF22.New()

class itkPDEDeformableRegistrationFilterIF2IF2IVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkPDEDeformableRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIF2IF2IVF22 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_swigregister(itkPDEDeformableRegistrationFilterIF2IF2IVF22)
itkPDEDeformableRegistrationFilterIF2IF2IVF22___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22___New_orig__
itkPDEDeformableRegistrationFilterIF2IF2IVF22_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22_cast


def itkPDEDeformableRegistrationFilterIF3IF3IVF33_New():
    return itkPDEDeformableRegistrationFilterIF3IF3IVF33.New()

class itkPDEDeformableRegistrationFilterIF3IF3IVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkPDEDeformableRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIF3IF3IVF33 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_swigregister(itkPDEDeformableRegistrationFilterIF3IF3IVF33)
itkPDEDeformableRegistrationFilterIF3IF3IVF33___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33___New_orig__
itkPDEDeformableRegistrationFilterIF3IF3IVF33_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33_cast


def itkPDEDeformableRegistrationFilterIF4IF4IVF44_New():
    return itkPDEDeformableRegistrationFilterIF4IF4IVF44.New()

class itkPDEDeformableRegistrationFilterIF4IF4IVF44(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF44IVF44):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIF4IF4IVF44
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkPDEDeformableRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIF4IF4IVF44 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_swigregister(itkPDEDeformableRegistrationFilterIF4IF4IVF44)
itkPDEDeformableRegistrationFilterIF4IF4IVF44___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44___New_orig__
itkPDEDeformableRegistrationFilterIF4IF4IVF44_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44_cast


def itkPDEDeformableRegistrationFilterISS2ISS2IVF22_New():
    return itkPDEDeformableRegistrationFilterISS2ISS2IVF22.New()

class itkPDEDeformableRegistrationFilterISS2ISS2IVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkPDEDeformableRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterISS2ISS2IVF22 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_swigregister(itkPDEDeformableRegistrationFilterISS2ISS2IVF22)
itkPDEDeformableRegistrationFilterISS2ISS2IVF22___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22___New_orig__
itkPDEDeformableRegistrationFilterISS2ISS2IVF22_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22_cast


def itkPDEDeformableRegistrationFilterISS3ISS3IVF33_New():
    return itkPDEDeformableRegistrationFilterISS3ISS3IVF33.New()

class itkPDEDeformableRegistrationFilterISS3ISS3IVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkPDEDeformableRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterISS3ISS3IVF33 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_swigregister(itkPDEDeformableRegistrationFilterISS3ISS3IVF33)
itkPDEDeformableRegistrationFilterISS3ISS3IVF33___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33___New_orig__
itkPDEDeformableRegistrationFilterISS3ISS3IVF33_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33_cast


def itkPDEDeformableRegistrationFilterISS4ISS4IVF44_New():
    return itkPDEDeformableRegistrationFilterISS4ISS4IVF44.New()

class itkPDEDeformableRegistrationFilterISS4ISS4IVF44(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF44IVF44):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterISS4ISS4IVF44
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkPDEDeformableRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterISS4ISS4IVF44 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_swigregister(itkPDEDeformableRegistrationFilterISS4ISS4IVF44)
itkPDEDeformableRegistrationFilterISS4ISS4IVF44___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44___New_orig__
itkPDEDeformableRegistrationFilterISS4ISS4IVF44_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44_cast


def itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_New():
    return itkPDEDeformableRegistrationFilterIUC2IUC2IVF22.New()

class itkPDEDeformableRegistrationFilterIUC2IUC2IVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkPDEDeformableRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIUC2IUC2IVF22 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_swigregister(itkPDEDeformableRegistrationFilterIUC2IUC2IVF22)
itkPDEDeformableRegistrationFilterIUC2IUC2IVF22___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22___New_orig__
itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22_cast


def itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_New():
    return itkPDEDeformableRegistrationFilterIUC3IUC3IVF33.New()

class itkPDEDeformableRegistrationFilterIUC3IUC3IVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkPDEDeformableRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIUC3IUC3IVF33 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_swigregister(itkPDEDeformableRegistrationFilterIUC3IUC3IVF33)
itkPDEDeformableRegistrationFilterIUC3IUC3IVF33___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33___New_orig__
itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33_cast


def itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_New():
    return itkPDEDeformableRegistrationFilterIUC4IUC4IVF44.New()

class itkPDEDeformableRegistrationFilterIUC4IUC4IVF44(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF44IVF44):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIUC4IUC4IVF44
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkPDEDeformableRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIUC4IUC4IVF44 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_swigregister(itkPDEDeformableRegistrationFilterIUC4IUC4IVF44)
itkPDEDeformableRegistrationFilterIUC4IUC4IVF44___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44___New_orig__
itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44_cast


def itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_New():
    return itkPDEDeformableRegistrationFilterIUS2IUS2IVF22.New()

class itkPDEDeformableRegistrationFilterIUS2IUS2IVF22(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF22IVF22):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkPDEDeformableRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIUS2IUS2IVF22 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_swigregister(itkPDEDeformableRegistrationFilterIUS2IUS2IVF22)
itkPDEDeformableRegistrationFilterIUS2IUS2IVF22___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22___New_orig__
itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22_cast


def itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_New():
    return itkPDEDeformableRegistrationFilterIUS3IUS3IVF33.New()

class itkPDEDeformableRegistrationFilterIUS3IUS3IVF33(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF33IVF33):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkPDEDeformableRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIUS3IUS3IVF33 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_swigregister(itkPDEDeformableRegistrationFilterIUS3IUS3IVF33)
itkPDEDeformableRegistrationFilterIUS3IUS3IVF33___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33___New_orig__
itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33_cast


def itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_New():
    return itkPDEDeformableRegistrationFilterIUS4IUS4IVF44.New()

class itkPDEDeformableRegistrationFilterIUS4IUS4IVF44(itk.itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIVF44IVF44):
    r"""


    Deformably register two images using a PDE algorithm.

    PDEDeformableRegistrationFilter is a base case for filter implementing
    a PDE deformable algorithm that register two images by computing the
    displacement field which will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement Field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    The PDE algorithm is run for a user defined number of iterations.
    Typically the PDE algorithm requires period Gaussin smoothing of the
    displacement field to enforce an elastic-like condition. The amount of
    smoothing is governed by a set of user defined standard deviations
    (one for each dimension).

    In terms of memory, this filter keeps two internal buffers: one for
    storing the intermediate updates to the field and one for double-
    buffering when smoothing the displacement field. Both buffers are the
    same type and size as the output displacement field.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed using a
    PDEDeformableRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  PDEDeformableRegistrationFunction. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_Clone)
    SetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetFixedImage)
    GetFixedImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetFixedImage)
    SetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetMovingImage)
    GetMovingImage = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetMovingImage)
    SetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetInitialDisplacementField)
    GetInitialDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetInitialDisplacementField)
    GetDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetDisplacementField)
    SetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetSmoothDisplacementField)
    GetSmoothDisplacementField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetSmoothDisplacementField)
    SmoothDisplacementFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SmoothDisplacementFieldOn)
    SmoothDisplacementFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SmoothDisplacementFieldOff)
    SetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetStandardDeviations)
    GetStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetStandardDeviations)
    SetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetSmoothUpdateField)
    GetSmoothUpdateField = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetSmoothUpdateField)
    SmoothUpdateFieldOn = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SmoothUpdateFieldOn)
    SmoothUpdateFieldOff = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SmoothUpdateFieldOff)
    SetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetUpdateFieldStandardDeviations)
    GetUpdateFieldStandardDeviations = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetUpdateFieldStandardDeviations)
    StopRegistration = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_StopRegistration)
    SetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetMaximumError)
    SetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_SetMaximumKernelWidth)
    GetMaximumKernelWidth = _swig_new_instance_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_GetMaximumKernelWidth)
    __swig_destroy__ = _itkPDEDeformableRegistrationFilterPython.delete_itkPDEDeformableRegistrationFilterIUS4IUS4IVF44
    cast = _swig_new_static_method(_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkPDEDeformableRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkPDEDeformableRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkPDEDeformableRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkPDEDeformableRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkPDEDeformableRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkPDEDeformableRegistrationFilterIUS4IUS4IVF44 in _itkPDEDeformableRegistrationFilterPython:
_itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_swigregister(itkPDEDeformableRegistrationFilterIUS4IUS4IVF44)
itkPDEDeformableRegistrationFilterIUS4IUS4IVF44___New_orig__ = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44___New_orig__
itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_cast = _itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def pde_deformable_registration_filter(*args, **kwargs):
    """Procedural interface for PDEDeformableRegistrationFilter"""
    import itk

    instance = itk.PDEDeformableRegistrationFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def pde_deformable_registration_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKPDEDeformableRegistration.PDEDeformableRegistrationFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    pde_deformable_registration_filter.__doc__ = filter_object.__doc__
    pde_deformable_registration_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    pde_deformable_registration_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        pde_deformable_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        pde_deformable_registration_filter.__doc__ += "\n"
        pde_deformable_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        pde_deformable_registration_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




