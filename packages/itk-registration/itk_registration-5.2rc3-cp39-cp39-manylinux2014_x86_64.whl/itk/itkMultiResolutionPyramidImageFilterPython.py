# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegistrationCommonPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMultiResolutionPyramidImageFilterPython
else:
    import _itkMultiResolutionPyramidImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMultiResolutionPyramidImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMultiResolutionPyramidImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkArray2DPython
import itk.vnl_matrixPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkImageSourcePython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkFixedArrayPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython

def itkMultiResolutionPyramidImageFilterID2ID2_New():
    return itkMultiResolutionPyramidImageFilterID2ID2.New()

class itkMultiResolutionPyramidImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID2ID2
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID2ID2

        Create a new object of the class itkMultiResolutionPyramidImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterID2ID2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_swigregister(itkMultiResolutionPyramidImageFilterID2ID2)
itkMultiResolutionPyramidImageFilterID2ID2___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2___New_orig__
itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterID2ID2_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID2ID2_cast


def itkMultiResolutionPyramidImageFilterID3ID3_New():
    return itkMultiResolutionPyramidImageFilterID3ID3.New()

class itkMultiResolutionPyramidImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID3ID3
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID3ID3

        Create a new object of the class itkMultiResolutionPyramidImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterID3ID3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_swigregister(itkMultiResolutionPyramidImageFilterID3ID3)
itkMultiResolutionPyramidImageFilterID3ID3___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3___New_orig__
itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterID3ID3_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID3ID3_cast


def itkMultiResolutionPyramidImageFilterID4ID4_New():
    return itkMultiResolutionPyramidImageFilterID4ID4.New()

class itkMultiResolutionPyramidImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterID4ID4
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterID4ID4

        Create a new object of the class itkMultiResolutionPyramidImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterID4ID4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_swigregister(itkMultiResolutionPyramidImageFilterID4ID4)
itkMultiResolutionPyramidImageFilterID4ID4___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4___New_orig__
itkMultiResolutionPyramidImageFilterID4ID4_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterID4ID4_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterID4ID4_cast


def itkMultiResolutionPyramidImageFilterIF2IF2_New():
    return itkMultiResolutionPyramidImageFilterIF2IF2.New()

class itkMultiResolutionPyramidImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF2IF2
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF2IF2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIF2IF2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_swigregister(itkMultiResolutionPyramidImageFilterIF2IF2)
itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2___New_orig__
itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIF2IF2_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF2IF2_cast


def itkMultiResolutionPyramidImageFilterIF3IF3_New():
    return itkMultiResolutionPyramidImageFilterIF3IF3.New()

class itkMultiResolutionPyramidImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF3IF3
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF3IF3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIF3IF3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_swigregister(itkMultiResolutionPyramidImageFilterIF3IF3)
itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3___New_orig__
itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIF3IF3_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF3IF3_cast


def itkMultiResolutionPyramidImageFilterIF4IF4_New():
    return itkMultiResolutionPyramidImageFilterIF4IF4.New()

class itkMultiResolutionPyramidImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIF4IF4
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIF4IF4

        Create a new object of the class itkMultiResolutionPyramidImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIF4IF4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_swigregister(itkMultiResolutionPyramidImageFilterIF4IF4)
itkMultiResolutionPyramidImageFilterIF4IF4___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4___New_orig__
itkMultiResolutionPyramidImageFilterIF4IF4_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIF4IF4_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIF4IF4_cast


def itkMultiResolutionPyramidImageFilterISS2ISS2_New():
    return itkMultiResolutionPyramidImageFilterISS2ISS2.New()

class itkMultiResolutionPyramidImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS2ISS2

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterISS2ISS2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_swigregister(itkMultiResolutionPyramidImageFilterISS2ISS2)
itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2___New_orig__
itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterISS2ISS2_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS2ISS2_cast


def itkMultiResolutionPyramidImageFilterISS3ISS3_New():
    return itkMultiResolutionPyramidImageFilterISS3ISS3.New()

class itkMultiResolutionPyramidImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS3ISS3

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterISS3ISS3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_swigregister(itkMultiResolutionPyramidImageFilterISS3ISS3)
itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3___New_orig__
itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterISS3ISS3_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS3ISS3_cast


def itkMultiResolutionPyramidImageFilterISS4ISS4_New():
    return itkMultiResolutionPyramidImageFilterISS4ISS4.New()

class itkMultiResolutionPyramidImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterISS4ISS4

        Create a new object of the class itkMultiResolutionPyramidImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterISS4ISS4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_swigregister(itkMultiResolutionPyramidImageFilterISS4ISS4)
itkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4___New_orig__
itkMultiResolutionPyramidImageFilterISS4ISS4_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterISS4ISS4_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterISS4ISS4_cast


def itkMultiResolutionPyramidImageFilterIUC2IUC2_New():
    return itkMultiResolutionPyramidImageFilterIUC2IUC2.New()

class itkMultiResolutionPyramidImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC2IUC2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUC2IUC2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_swigregister(itkMultiResolutionPyramidImageFilterIUC2IUC2)
itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2___New_orig__
itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIUC2IUC2_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC2IUC2_cast


def itkMultiResolutionPyramidImageFilterIUC3IUC3_New():
    return itkMultiResolutionPyramidImageFilterIUC3IUC3.New()

class itkMultiResolutionPyramidImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC3IUC3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUC3IUC3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_swigregister(itkMultiResolutionPyramidImageFilterIUC3IUC3)
itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3___New_orig__
itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIUC3IUC3_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC3IUC3_cast


def itkMultiResolutionPyramidImageFilterIUC4IUC4_New():
    return itkMultiResolutionPyramidImageFilterIUC4IUC4.New()

class itkMultiResolutionPyramidImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUC4IUC4

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUC4IUC4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_swigregister(itkMultiResolutionPyramidImageFilterIUC4IUC4)
itkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4___New_orig__
itkMultiResolutionPyramidImageFilterIUC4IUC4_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIUC4IUC4_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUC4IUC4_cast


def itkMultiResolutionPyramidImageFilterIUS2IUS2_New():
    return itkMultiResolutionPyramidImageFilterIUS2IUS2.New()

class itkMultiResolutionPyramidImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS2IUS2

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUS2IUS2 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_swigregister(itkMultiResolutionPyramidImageFilterIUS2IUS2)
itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2___New_orig__
itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIUS2IUS2_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS2IUS2_cast


def itkMultiResolutionPyramidImageFilterIUS3IUS3_New():
    return itkMultiResolutionPyramidImageFilterIUS3IUS3.New()

class itkMultiResolutionPyramidImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS3IUS3

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUS3IUS3 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_swigregister(itkMultiResolutionPyramidImageFilterIUS3IUS3)
itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3___New_orig__
itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIUS3IUS3_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS3IUS3_cast


def itkMultiResolutionPyramidImageFilterIUS4IUS4_New():
    return itkMultiResolutionPyramidImageFilterIUS4IUS4.New()

class itkMultiResolutionPyramidImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    Framework for creating images in a multi-resolution pyramid.

    MultiResolutionPyramidImageFilter provides a generic framework to to
    create a image pryamid according to a user defined multi-resolution
    schedule.

    The multi-resolution schedule is specified in terms for shrink factors
    at each multi-resolution level for each dimension.

    A user can either use the default schedules or specify each factor in
    the schedules directly.

    The schedule is stored as an unsigned int matrix. An element of the
    table can be access via the double bracket notation:
    table[resLevel][dimension]

    8 4 4 4 4 2

    is a schedule for two computation level. In the first (coarsest) level
    the image is reduce by a factor of 8 in the column dimension, factor
    of 4 in the row dimension and factor of 4 in the slice dimension. In
    the second level, the image is reduce by a factor of 4 in the column
    dimension, 4 is the row dimension and 2 in the slice dimension.

    The method SetNumberOfLevels() set the number of computation levels in
    the pyramid. This method will allocate memory for the multi-resolution
    schedule table. This method generates defaults tables with the
    starting shrink factor for all dimension set to 2^(NumberOfLevel - 1).
    All factors are halved for all subsequent levels.

    8 8 8 4 4 4 2 2 2 1 1 1

    The user can get a copy of the schedule via GetSchedule() They may
    make alteration and reset it using SetSchedule().

    A user can create a default table by specifying the starting shrink
    factors via methods SetStartingShrinkFactors() The factors for
    subsequent level is generated by halving the factor or setting to one,
    depending on which is larger.

    the default table would be:

    8 8 4 4 4 2 2 2 1 1 1 1

    When this filter is updated, NumberOfLevels outputs are produced. The
    N'th output correspond to the N'th level of the pyramid.

    To generate each output image, Gaussian smoothing is first performed
    using a DiscreteGaussianImageFilter with variance (shrink factor /
    2)^2. The smoothed image is then downsampled using a
    ResampleImageFilter.

    Note that even if the shrink factors are all equal to one, a smoothing
    will still be applied. The output at the finest level of the pyramid
    will thus typically be a smoothed version of the input.

    This class is templated over the input image type and the output image
    type.

    This filter uses multithreaded filters to perform the smoothing and
    downsampling.

    This filter supports streaming.

    See:  DiscreteGaussianImageFilter

    See:  ShrinkImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_Clone)
    SetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetNumberOfLevels)
    GetNumberOfLevels = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetNumberOfLevels)
    SetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetSchedule)
    GetSchedule = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetSchedule)
    SetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetStartingShrinkFactors)
    GetStartingShrinkFactors = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetStartingShrinkFactors)
    IsScheduleDownwardDivisible = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_IsScheduleDownwardDivisible)
    GenerateOutputInformation = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GenerateOutputInformation)
    GenerateOutputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GenerateOutputRequestedRegion)
    GenerateInputRequestedRegion = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GenerateInputRequestedRegion)
    SetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetMaximumError)
    GetMaximumError = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetMaximumError)
    SetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SetUseShrinkImageFilter)
    GetUseShrinkImageFilter = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_GetUseShrinkImageFilter)
    UseShrinkImageFilterOn = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_UseShrinkImageFilterOn)
    UseShrinkImageFilterOff = _swig_new_instance_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_UseShrinkImageFilterOff)
    SameDimensionCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_SameDimensionCheck
    
    OutputHasNumericTraitsCheck = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkMultiResolutionPyramidImageFilterPython.delete_itkMultiResolutionPyramidImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMultiResolutionPyramidImageFilterIUS4IUS4

        Create a new object of the class itkMultiResolutionPyramidImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMultiResolutionPyramidImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMultiResolutionPyramidImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMultiResolutionPyramidImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMultiResolutionPyramidImageFilterIUS4IUS4 in _itkMultiResolutionPyramidImageFilterPython:
_itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_swigregister(itkMultiResolutionPyramidImageFilterIUS4IUS4)
itkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__ = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4___New_orig__
itkMultiResolutionPyramidImageFilterIUS4IUS4_IsScheduleDownwardDivisible = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_IsScheduleDownwardDivisible
itkMultiResolutionPyramidImageFilterIUS4IUS4_cast = _itkMultiResolutionPyramidImageFilterPython.itkMultiResolutionPyramidImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def multi_resolution_pyramid_image_filter(*args, **kwargs):
    """Procedural interface for MultiResolutionPyramidImageFilter"""
    import itk

    instance = itk.MultiResolutionPyramidImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def multi_resolution_pyramid_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKRegistrationCommon.MultiResolutionPyramidImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    multi_resolution_pyramid_image_filter.__doc__ = filter_object.__doc__
    multi_resolution_pyramid_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    multi_resolution_pyramid_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        multi_resolution_pyramid_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        multi_resolution_pyramid_image_filter.__doc__ += "\n"
        multi_resolution_pyramid_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        multi_resolution_pyramid_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




