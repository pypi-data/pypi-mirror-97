# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKPDEDeformableRegistrationPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkDemonsRegistrationFilterPython
else:
    import _itkDemonsRegistrationFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkDemonsRegistrationFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkDemonsRegistrationFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkPDEDeformableRegistrationFilterPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImagePython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vector_refPython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkMatrixPython
import itk.itkCovariantVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.itkRGBAPixelPython
import itk.itkDenseFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceImageFilterPython
import itk.itkFiniteDifferenceFunctionPython
import itk.itkInPlaceImageFilterAPython
import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageToImageFilterBPython

def itkDemonsRegistrationFilterID2ID2IVF22_New():
    return itkDemonsRegistrationFilterID2ID2IVF22.New()

class itkDemonsRegistrationFilterID2ID2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID2ID2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID2ID2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID2ID2IVF22

        Create a new object of the class itkDemonsRegistrationFilterID2ID2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID2ID2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID2ID2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID2ID2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID2ID2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_swigregister(itkDemonsRegistrationFilterID2ID2IVF22)
itkDemonsRegistrationFilterID2ID2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22___New_orig__
itkDemonsRegistrationFilterID2ID2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID2ID2IVF22_cast


def itkDemonsRegistrationFilterID3ID3IVF33_New():
    return itkDemonsRegistrationFilterID3ID3IVF33.New()

class itkDemonsRegistrationFilterID3ID3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID3ID3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID3ID3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID3ID3IVF33

        Create a new object of the class itkDemonsRegistrationFilterID3ID3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID3ID3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID3ID3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID3ID3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID3ID3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_swigregister(itkDemonsRegistrationFilterID3ID3IVF33)
itkDemonsRegistrationFilterID3ID3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33___New_orig__
itkDemonsRegistrationFilterID3ID3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID3ID3IVF33_cast


def itkDemonsRegistrationFilterID4ID4IVF44_New():
    return itkDemonsRegistrationFilterID4ID4IVF44.New()

class itkDemonsRegistrationFilterID4ID4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterID4ID4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterID4ID4IVF44
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterID4ID4IVF44

        Create a new object of the class itkDemonsRegistrationFilterID4ID4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterID4ID4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterID4ID4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterID4ID4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterID4ID4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_swigregister(itkDemonsRegistrationFilterID4ID4IVF44)
itkDemonsRegistrationFilterID4ID4IVF44___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44___New_orig__
itkDemonsRegistrationFilterID4ID4IVF44_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterID4ID4IVF44_cast


def itkDemonsRegistrationFilterIF2IF2IVF22_New():
    return itkDemonsRegistrationFilterIF2IF2IVF22.New()

class itkDemonsRegistrationFilterIF2IF2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF2IF2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF2IF2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF2IF2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIF2IF2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF2IF2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF2IF2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF2IF2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF2IF2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_swigregister(itkDemonsRegistrationFilterIF2IF2IVF22)
itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22___New_orig__
itkDemonsRegistrationFilterIF2IF2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF2IF2IVF22_cast


def itkDemonsRegistrationFilterIF3IF3IVF33_New():
    return itkDemonsRegistrationFilterIF3IF3IVF33.New()

class itkDemonsRegistrationFilterIF3IF3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF3IF3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF3IF3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF3IF3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIF3IF3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF3IF3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF3IF3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF3IF3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF3IF3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_swigregister(itkDemonsRegistrationFilterIF3IF3IVF33)
itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33___New_orig__
itkDemonsRegistrationFilterIF3IF3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF3IF3IVF33_cast


def itkDemonsRegistrationFilterIF4IF4IVF44_New():
    return itkDemonsRegistrationFilterIF4IF4IVF44.New()

class itkDemonsRegistrationFilterIF4IF4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIF4IF4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIF4IF4IVF44
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIF4IF4IVF44

        Create a new object of the class itkDemonsRegistrationFilterIF4IF4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIF4IF4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIF4IF4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIF4IF4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIF4IF4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_swigregister(itkDemonsRegistrationFilterIF4IF4IVF44)
itkDemonsRegistrationFilterIF4IF4IVF44___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44___New_orig__
itkDemonsRegistrationFilterIF4IF4IVF44_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIF4IF4IVF44_cast


def itkDemonsRegistrationFilterISS2ISS2IVF22_New():
    return itkDemonsRegistrationFilterISS2ISS2IVF22.New()

class itkDemonsRegistrationFilterISS2ISS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS2ISS2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS2ISS2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS2ISS2IVF22

        Create a new object of the class itkDemonsRegistrationFilterISS2ISS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS2ISS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS2ISS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS2ISS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS2ISS2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_swigregister(itkDemonsRegistrationFilterISS2ISS2IVF22)
itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22___New_orig__
itkDemonsRegistrationFilterISS2ISS2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS2ISS2IVF22_cast


def itkDemonsRegistrationFilterISS3ISS3IVF33_New():
    return itkDemonsRegistrationFilterISS3ISS3IVF33.New()

class itkDemonsRegistrationFilterISS3ISS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS3ISS3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS3ISS3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS3ISS3IVF33

        Create a new object of the class itkDemonsRegistrationFilterISS3ISS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS3ISS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS3ISS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS3ISS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS3ISS3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_swigregister(itkDemonsRegistrationFilterISS3ISS3IVF33)
itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33___New_orig__
itkDemonsRegistrationFilterISS3ISS3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS3ISS3IVF33_cast


def itkDemonsRegistrationFilterISS4ISS4IVF44_New():
    return itkDemonsRegistrationFilterISS4ISS4IVF44.New()

class itkDemonsRegistrationFilterISS4ISS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterISS4ISS4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterISS4ISS4IVF44
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterISS4ISS4IVF44

        Create a new object of the class itkDemonsRegistrationFilterISS4ISS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterISS4ISS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterISS4ISS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterISS4ISS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterISS4ISS4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_swigregister(itkDemonsRegistrationFilterISS4ISS4IVF44)
itkDemonsRegistrationFilterISS4ISS4IVF44___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44___New_orig__
itkDemonsRegistrationFilterISS4ISS4IVF44_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterISS4ISS4IVF44_cast


def itkDemonsRegistrationFilterIUC2IUC2IVF22_New():
    return itkDemonsRegistrationFilterIUC2IUC2IVF22.New()

class itkDemonsRegistrationFilterIUC2IUC2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC2IUC2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC2IUC2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC2IUC2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIUC2IUC2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC2IUC2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC2IUC2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC2IUC2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC2IUC2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_swigregister(itkDemonsRegistrationFilterIUC2IUC2IVF22)
itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22___New_orig__
itkDemonsRegistrationFilterIUC2IUC2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC2IUC2IVF22_cast


def itkDemonsRegistrationFilterIUC3IUC3IVF33_New():
    return itkDemonsRegistrationFilterIUC3IUC3IVF33.New()

class itkDemonsRegistrationFilterIUC3IUC3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC3IUC3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC3IUC3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC3IUC3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIUC3IUC3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC3IUC3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC3IUC3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC3IUC3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC3IUC3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_swigregister(itkDemonsRegistrationFilterIUC3IUC3IVF33)
itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33___New_orig__
itkDemonsRegistrationFilterIUC3IUC3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC3IUC3IVF33_cast


def itkDemonsRegistrationFilterIUC4IUC4IVF44_New():
    return itkDemonsRegistrationFilterIUC4IUC4IVF44.New()

class itkDemonsRegistrationFilterIUC4IUC4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUC4IUC4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUC4IUC4IVF44
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUC4IUC4IVF44

        Create a new object of the class itkDemonsRegistrationFilterIUC4IUC4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUC4IUC4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUC4IUC4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUC4IUC4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUC4IUC4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_swigregister(itkDemonsRegistrationFilterIUC4IUC4IVF44)
itkDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44___New_orig__
itkDemonsRegistrationFilterIUC4IUC4IVF44_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUC4IUC4IVF44_cast


def itkDemonsRegistrationFilterIUS2IUS2IVF22_New():
    return itkDemonsRegistrationFilterIUS2IUS2IVF22.New()

class itkDemonsRegistrationFilterIUS2IUS2IVF22(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS2IUS2IVF22):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS2IUS2IVF22
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS2IUS2IVF22

        Create a new object of the class itkDemonsRegistrationFilterIUS2IUS2IVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS2IUS2IVF22.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS2IUS2IVF22.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS2IUS2IVF22.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS2IUS2IVF22 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_swigregister(itkDemonsRegistrationFilterIUS2IUS2IVF22)
itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22___New_orig__
itkDemonsRegistrationFilterIUS2IUS2IVF22_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS2IUS2IVF22_cast


def itkDemonsRegistrationFilterIUS3IUS3IVF33_New():
    return itkDemonsRegistrationFilterIUS3IUS3IVF33.New()

class itkDemonsRegistrationFilterIUS3IUS3IVF33(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS3IUS3IVF33):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS3IUS3IVF33
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS3IUS3IVF33

        Create a new object of the class itkDemonsRegistrationFilterIUS3IUS3IVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS3IUS3IVF33.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS3IUS3IVF33.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS3IUS3IVF33.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS3IUS3IVF33 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_swigregister(itkDemonsRegistrationFilterIUS3IUS3IVF33)
itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33___New_orig__
itkDemonsRegistrationFilterIUS3IUS3IVF33_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS3IUS3IVF33_cast


def itkDemonsRegistrationFilterIUS4IUS4IVF44_New():
    return itkDemonsRegistrationFilterIUS4IUS4IVF44.New()

class itkDemonsRegistrationFilterIUS4IUS4IVF44(itk.itkPDEDeformableRegistrationFilterPython.itkPDEDeformableRegistrationFilterIUS4IUS4IVF44):
    r"""


    Deformably register two images using the demons algorithm.

    DemonsRegistrationFilter implements the demons deformable algorithm
    that register two images by computing the displacement field which
    will map a moving image onto a fixed image.

    A displacement field is represented as a image whose pixel type is
    some vector type with at least N elements, where N is the dimension of
    the fixed image. The vector type must support element access via
    operator []. It is assumed that the vector elements behave like
    floating point scalars.

    This class is templated over the fixed image type, moving image type
    and the displacement field type.

    The input fixed and moving images are set via methods SetFixedImage
    and SetMovingImage respectively. An initial displacement field maybe
    set via SetInitialDisplacementField or SetInput. If no initial field
    is set, a zero field is used as the initial condition.

    The algorithm has one parameters: the number of iteration to be
    performed.

    The output displacement field can be obtained via methods GetOutput or
    GetDisplacementField.

    This class make use of the finite difference solver hierarchy. Update
    for each iteration is computed in DemonsRegistrationFunction.

    WARNING:  This filter assumes that the fixed image type, moving image
    type and displacement field type all have the same number of
    dimensions.

    See:  DemonsRegistrationFunction 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__)
    Clone = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_Clone)
    GetMetric = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_GetMetric)
    SetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_SetUseMovingImageGradient)
    GetUseMovingImageGradient = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_GetUseMovingImageGradient)
    UseMovingImageGradientOn = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_UseMovingImageGradientOn)
    UseMovingImageGradientOff = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_UseMovingImageGradientOff)
    SetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_SetIntensityDifferenceThreshold)
    GetIntensityDifferenceThreshold = _swig_new_instance_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_GetIntensityDifferenceThreshold)
    __swig_destroy__ = _itkDemonsRegistrationFilterPython.delete_itkDemonsRegistrationFilterIUS4IUS4IVF44
    cast = _swig_new_static_method(_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_cast)

    def New(*args, **kargs):
        """New() -> itkDemonsRegistrationFilterIUS4IUS4IVF44

        Create a new object of the class itkDemonsRegistrationFilterIUS4IUS4IVF44 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkDemonsRegistrationFilterIUS4IUS4IVF44.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkDemonsRegistrationFilterIUS4IUS4IVF44.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkDemonsRegistrationFilterIUS4IUS4IVF44.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkDemonsRegistrationFilterIUS4IUS4IVF44 in _itkDemonsRegistrationFilterPython:
_itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_swigregister(itkDemonsRegistrationFilterIUS4IUS4IVF44)
itkDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__ = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44___New_orig__
itkDemonsRegistrationFilterIUS4IUS4IVF44_cast = _itkDemonsRegistrationFilterPython.itkDemonsRegistrationFilterIUS4IUS4IVF44_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def demons_registration_filter(*args, **kwargs):
    """Procedural interface for DemonsRegistrationFilter"""
    import itk

    instance = itk.DemonsRegistrationFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def demons_registration_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKPDEDeformableRegistration.DemonsRegistrationFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    demons_registration_filter.__doc__ = filter_object.__doc__
    demons_registration_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    demons_registration_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        demons_registration_filter.__doc__ += "\n"
        demons_registration_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        demons_registration_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




