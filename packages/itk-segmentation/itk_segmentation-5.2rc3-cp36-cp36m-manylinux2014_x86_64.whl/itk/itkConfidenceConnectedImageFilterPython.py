# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegionGrowingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkConfidenceConnectedImageFilterPython
else:
    import _itkConfidenceConnectedImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkConfidenceConnectedImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkConfidenceConnectedImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.itkImageToImageFilterAPython
import itk.itkImageRegionPython
import itk.itkImagePython
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython

def itkConfidenceConnectedImageFilterID2ISS2_New():
    return itkConfidenceConnectedImageFilterID2ISS2.New()

class itkConfidenceConnectedImageFilterID2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID2ISS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID2ISS2

        Create a new object of the class itkConfidenceConnectedImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID2ISS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_swigregister(itkConfidenceConnectedImageFilterID2ISS2)
itkConfidenceConnectedImageFilterID2ISS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2___New_orig__
itkConfidenceConnectedImageFilterID2ISS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2ISS2_cast


def itkConfidenceConnectedImageFilterID2IUC2_New():
    return itkConfidenceConnectedImageFilterID2IUC2.New()

class itkConfidenceConnectedImageFilterID2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID2IUC2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID2IUC2

        Create a new object of the class itkConfidenceConnectedImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID2IUC2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_swigregister(itkConfidenceConnectedImageFilterID2IUC2)
itkConfidenceConnectedImageFilterID2IUC2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2___New_orig__
itkConfidenceConnectedImageFilterID2IUC2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUC2_cast


def itkConfidenceConnectedImageFilterID2IUS2_New():
    return itkConfidenceConnectedImageFilterID2IUS2.New()

class itkConfidenceConnectedImageFilterID2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID2IUS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID2IUS2

        Create a new object of the class itkConfidenceConnectedImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID2IUS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_swigregister(itkConfidenceConnectedImageFilterID2IUS2)
itkConfidenceConnectedImageFilterID2IUS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2___New_orig__
itkConfidenceConnectedImageFilterID2IUS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID2IUS2_cast


def itkConfidenceConnectedImageFilterID3ISS3_New():
    return itkConfidenceConnectedImageFilterID3ISS3.New()

class itkConfidenceConnectedImageFilterID3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID3ISS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID3ISS3

        Create a new object of the class itkConfidenceConnectedImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID3ISS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_swigregister(itkConfidenceConnectedImageFilterID3ISS3)
itkConfidenceConnectedImageFilterID3ISS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3___New_orig__
itkConfidenceConnectedImageFilterID3ISS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3ISS3_cast


def itkConfidenceConnectedImageFilterID3IUC3_New():
    return itkConfidenceConnectedImageFilterID3IUC3.New()

class itkConfidenceConnectedImageFilterID3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID3IUC3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID3IUC3

        Create a new object of the class itkConfidenceConnectedImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID3IUC3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_swigregister(itkConfidenceConnectedImageFilterID3IUC3)
itkConfidenceConnectedImageFilterID3IUC3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3___New_orig__
itkConfidenceConnectedImageFilterID3IUC3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUC3_cast


def itkConfidenceConnectedImageFilterID3IUS3_New():
    return itkConfidenceConnectedImageFilterID3IUS3.New()

class itkConfidenceConnectedImageFilterID3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID3IUS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID3IUS3

        Create a new object of the class itkConfidenceConnectedImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID3IUS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_swigregister(itkConfidenceConnectedImageFilterID3IUS3)
itkConfidenceConnectedImageFilterID3IUS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3___New_orig__
itkConfidenceConnectedImageFilterID3IUS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID3IUS3_cast


def itkConfidenceConnectedImageFilterID4ISS4_New():
    return itkConfidenceConnectedImageFilterID4ISS4.New()

class itkConfidenceConnectedImageFilterID4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID4ISS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID4ISS4

        Create a new object of the class itkConfidenceConnectedImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID4ISS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_swigregister(itkConfidenceConnectedImageFilterID4ISS4)
itkConfidenceConnectedImageFilterID4ISS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4___New_orig__
itkConfidenceConnectedImageFilterID4ISS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4ISS4_cast


def itkConfidenceConnectedImageFilterID4IUC4_New():
    return itkConfidenceConnectedImageFilterID4IUC4.New()

class itkConfidenceConnectedImageFilterID4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID4IUC4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID4IUC4

        Create a new object of the class itkConfidenceConnectedImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID4IUC4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_swigregister(itkConfidenceConnectedImageFilterID4IUC4)
itkConfidenceConnectedImageFilterID4IUC4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4___New_orig__
itkConfidenceConnectedImageFilterID4IUC4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUC4_cast


def itkConfidenceConnectedImageFilterID4IUS4_New():
    return itkConfidenceConnectedImageFilterID4IUS4.New()

class itkConfidenceConnectedImageFilterID4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterID4IUS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterID4IUS4

        Create a new object of the class itkConfidenceConnectedImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterID4IUS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_swigregister(itkConfidenceConnectedImageFilterID4IUS4)
itkConfidenceConnectedImageFilterID4IUS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4___New_orig__
itkConfidenceConnectedImageFilterID4IUS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterID4IUS4_cast


def itkConfidenceConnectedImageFilterIF2ISS2_New():
    return itkConfidenceConnectedImageFilterIF2ISS2.New()

class itkConfidenceConnectedImageFilterIF2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF2ISS2

        Create a new object of the class itkConfidenceConnectedImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF2ISS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_swigregister(itkConfidenceConnectedImageFilterIF2ISS2)
itkConfidenceConnectedImageFilterIF2ISS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2___New_orig__
itkConfidenceConnectedImageFilterIF2ISS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2ISS2_cast


def itkConfidenceConnectedImageFilterIF2IUC2_New():
    return itkConfidenceConnectedImageFilterIF2IUC2.New()

class itkConfidenceConnectedImageFilterIF2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF2IUC2

        Create a new object of the class itkConfidenceConnectedImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF2IUC2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_swigregister(itkConfidenceConnectedImageFilterIF2IUC2)
itkConfidenceConnectedImageFilterIF2IUC2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2___New_orig__
itkConfidenceConnectedImageFilterIF2IUC2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUC2_cast


def itkConfidenceConnectedImageFilterIF2IUS2_New():
    return itkConfidenceConnectedImageFilterIF2IUS2.New()

class itkConfidenceConnectedImageFilterIF2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF2IUS2

        Create a new object of the class itkConfidenceConnectedImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF2IUS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_swigregister(itkConfidenceConnectedImageFilterIF2IUS2)
itkConfidenceConnectedImageFilterIF2IUS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2___New_orig__
itkConfidenceConnectedImageFilterIF2IUS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF2IUS2_cast


def itkConfidenceConnectedImageFilterIF3ISS3_New():
    return itkConfidenceConnectedImageFilterIF3ISS3.New()

class itkConfidenceConnectedImageFilterIF3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF3ISS3

        Create a new object of the class itkConfidenceConnectedImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF3ISS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_swigregister(itkConfidenceConnectedImageFilterIF3ISS3)
itkConfidenceConnectedImageFilterIF3ISS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3___New_orig__
itkConfidenceConnectedImageFilterIF3ISS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3ISS3_cast


def itkConfidenceConnectedImageFilterIF3IUC3_New():
    return itkConfidenceConnectedImageFilterIF3IUC3.New()

class itkConfidenceConnectedImageFilterIF3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF3IUC3

        Create a new object of the class itkConfidenceConnectedImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF3IUC3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_swigregister(itkConfidenceConnectedImageFilterIF3IUC3)
itkConfidenceConnectedImageFilterIF3IUC3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3___New_orig__
itkConfidenceConnectedImageFilterIF3IUC3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUC3_cast


def itkConfidenceConnectedImageFilterIF3IUS3_New():
    return itkConfidenceConnectedImageFilterIF3IUS3.New()

class itkConfidenceConnectedImageFilterIF3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF3IUS3

        Create a new object of the class itkConfidenceConnectedImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF3IUS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_swigregister(itkConfidenceConnectedImageFilterIF3IUS3)
itkConfidenceConnectedImageFilterIF3IUS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3___New_orig__
itkConfidenceConnectedImageFilterIF3IUS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF3IUS3_cast


def itkConfidenceConnectedImageFilterIF4ISS4_New():
    return itkConfidenceConnectedImageFilterIF4ISS4.New()

class itkConfidenceConnectedImageFilterIF4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF4ISS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF4ISS4

        Create a new object of the class itkConfidenceConnectedImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF4ISS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_swigregister(itkConfidenceConnectedImageFilterIF4ISS4)
itkConfidenceConnectedImageFilterIF4ISS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4___New_orig__
itkConfidenceConnectedImageFilterIF4ISS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4ISS4_cast


def itkConfidenceConnectedImageFilterIF4IUC4_New():
    return itkConfidenceConnectedImageFilterIF4IUC4.New()

class itkConfidenceConnectedImageFilterIF4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF4IUC4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF4IUC4

        Create a new object of the class itkConfidenceConnectedImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF4IUC4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_swigregister(itkConfidenceConnectedImageFilterIF4IUC4)
itkConfidenceConnectedImageFilterIF4IUC4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4___New_orig__
itkConfidenceConnectedImageFilterIF4IUC4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUC4_cast


def itkConfidenceConnectedImageFilterIF4IUS4_New():
    return itkConfidenceConnectedImageFilterIF4IUS4.New()

class itkConfidenceConnectedImageFilterIF4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIF4IUS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIF4IUS4

        Create a new object of the class itkConfidenceConnectedImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIF4IUS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_swigregister(itkConfidenceConnectedImageFilterIF4IUS4)
itkConfidenceConnectedImageFilterIF4IUS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4___New_orig__
itkConfidenceConnectedImageFilterIF4IUS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIF4IUS4_cast


def itkConfidenceConnectedImageFilterISS2ISS2_New():
    return itkConfidenceConnectedImageFilterISS2ISS2.New()

class itkConfidenceConnectedImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS2ISS2

        Create a new object of the class itkConfidenceConnectedImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS2ISS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_swigregister(itkConfidenceConnectedImageFilterISS2ISS2)
itkConfidenceConnectedImageFilterISS2ISS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2___New_orig__
itkConfidenceConnectedImageFilterISS2ISS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2ISS2_cast


def itkConfidenceConnectedImageFilterISS2IUC2_New():
    return itkConfidenceConnectedImageFilterISS2IUC2.New()

class itkConfidenceConnectedImageFilterISS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS2IUC2

        Create a new object of the class itkConfidenceConnectedImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS2IUC2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_swigregister(itkConfidenceConnectedImageFilterISS2IUC2)
itkConfidenceConnectedImageFilterISS2IUC2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2___New_orig__
itkConfidenceConnectedImageFilterISS2IUC2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUC2_cast


def itkConfidenceConnectedImageFilterISS2IUS2_New():
    return itkConfidenceConnectedImageFilterISS2IUS2.New()

class itkConfidenceConnectedImageFilterISS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS2IUS2

        Create a new object of the class itkConfidenceConnectedImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS2IUS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_swigregister(itkConfidenceConnectedImageFilterISS2IUS2)
itkConfidenceConnectedImageFilterISS2IUS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2___New_orig__
itkConfidenceConnectedImageFilterISS2IUS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS2IUS2_cast


def itkConfidenceConnectedImageFilterISS3ISS3_New():
    return itkConfidenceConnectedImageFilterISS3ISS3.New()

class itkConfidenceConnectedImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS3ISS3

        Create a new object of the class itkConfidenceConnectedImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS3ISS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_swigregister(itkConfidenceConnectedImageFilterISS3ISS3)
itkConfidenceConnectedImageFilterISS3ISS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3___New_orig__
itkConfidenceConnectedImageFilterISS3ISS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3ISS3_cast


def itkConfidenceConnectedImageFilterISS3IUC3_New():
    return itkConfidenceConnectedImageFilterISS3IUC3.New()

class itkConfidenceConnectedImageFilterISS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS3IUC3

        Create a new object of the class itkConfidenceConnectedImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS3IUC3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_swigregister(itkConfidenceConnectedImageFilterISS3IUC3)
itkConfidenceConnectedImageFilterISS3IUC3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3___New_orig__
itkConfidenceConnectedImageFilterISS3IUC3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUC3_cast


def itkConfidenceConnectedImageFilterISS3IUS3_New():
    return itkConfidenceConnectedImageFilterISS3IUS3.New()

class itkConfidenceConnectedImageFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS3IUS3

        Create a new object of the class itkConfidenceConnectedImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS3IUS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_swigregister(itkConfidenceConnectedImageFilterISS3IUS3)
itkConfidenceConnectedImageFilterISS3IUS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3___New_orig__
itkConfidenceConnectedImageFilterISS3IUS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS3IUS3_cast


def itkConfidenceConnectedImageFilterISS4ISS4_New():
    return itkConfidenceConnectedImageFilterISS4ISS4.New()

class itkConfidenceConnectedImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS4ISS4

        Create a new object of the class itkConfidenceConnectedImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS4ISS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_swigregister(itkConfidenceConnectedImageFilterISS4ISS4)
itkConfidenceConnectedImageFilterISS4ISS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4___New_orig__
itkConfidenceConnectedImageFilterISS4ISS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4ISS4_cast


def itkConfidenceConnectedImageFilterISS4IUC4_New():
    return itkConfidenceConnectedImageFilterISS4IUC4.New()

class itkConfidenceConnectedImageFilterISS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS4IUC4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS4IUC4

        Create a new object of the class itkConfidenceConnectedImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS4IUC4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_swigregister(itkConfidenceConnectedImageFilterISS4IUC4)
itkConfidenceConnectedImageFilterISS4IUC4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4___New_orig__
itkConfidenceConnectedImageFilterISS4IUC4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUC4_cast


def itkConfidenceConnectedImageFilterISS4IUS4_New():
    return itkConfidenceConnectedImageFilterISS4IUS4.New()

class itkConfidenceConnectedImageFilterISS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterISS4IUS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterISS4IUS4

        Create a new object of the class itkConfidenceConnectedImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterISS4IUS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_swigregister(itkConfidenceConnectedImageFilterISS4IUS4)
itkConfidenceConnectedImageFilterISS4IUS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4___New_orig__
itkConfidenceConnectedImageFilterISS4IUS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterISS4IUS4_cast


def itkConfidenceConnectedImageFilterIUC2ISS2_New():
    return itkConfidenceConnectedImageFilterIUC2ISS2.New()

class itkConfidenceConnectedImageFilterIUC2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC2ISS2

        Create a new object of the class itkConfidenceConnectedImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC2ISS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_swigregister(itkConfidenceConnectedImageFilterIUC2ISS2)
itkConfidenceConnectedImageFilterIUC2ISS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2___New_orig__
itkConfidenceConnectedImageFilterIUC2ISS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2ISS2_cast


def itkConfidenceConnectedImageFilterIUC2IUC2_New():
    return itkConfidenceConnectedImageFilterIUC2IUC2.New()

class itkConfidenceConnectedImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC2IUC2

        Create a new object of the class itkConfidenceConnectedImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC2IUC2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_swigregister(itkConfidenceConnectedImageFilterIUC2IUC2)
itkConfidenceConnectedImageFilterIUC2IUC2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2___New_orig__
itkConfidenceConnectedImageFilterIUC2IUC2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUC2_cast


def itkConfidenceConnectedImageFilterIUC2IUS2_New():
    return itkConfidenceConnectedImageFilterIUC2IUS2.New()

class itkConfidenceConnectedImageFilterIUC2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC2IUS2

        Create a new object of the class itkConfidenceConnectedImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC2IUS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_swigregister(itkConfidenceConnectedImageFilterIUC2IUS2)
itkConfidenceConnectedImageFilterIUC2IUS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2___New_orig__
itkConfidenceConnectedImageFilterIUC2IUS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC2IUS2_cast


def itkConfidenceConnectedImageFilterIUC3ISS3_New():
    return itkConfidenceConnectedImageFilterIUC3ISS3.New()

class itkConfidenceConnectedImageFilterIUC3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC3ISS3

        Create a new object of the class itkConfidenceConnectedImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC3ISS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_swigregister(itkConfidenceConnectedImageFilterIUC3ISS3)
itkConfidenceConnectedImageFilterIUC3ISS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3___New_orig__
itkConfidenceConnectedImageFilterIUC3ISS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3ISS3_cast


def itkConfidenceConnectedImageFilterIUC3IUC3_New():
    return itkConfidenceConnectedImageFilterIUC3IUC3.New()

class itkConfidenceConnectedImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC3IUC3

        Create a new object of the class itkConfidenceConnectedImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC3IUC3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_swigregister(itkConfidenceConnectedImageFilterIUC3IUC3)
itkConfidenceConnectedImageFilterIUC3IUC3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3___New_orig__
itkConfidenceConnectedImageFilterIUC3IUC3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUC3_cast


def itkConfidenceConnectedImageFilterIUC3IUS3_New():
    return itkConfidenceConnectedImageFilterIUC3IUS3.New()

class itkConfidenceConnectedImageFilterIUC3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC3IUS3

        Create a new object of the class itkConfidenceConnectedImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC3IUS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_swigregister(itkConfidenceConnectedImageFilterIUC3IUS3)
itkConfidenceConnectedImageFilterIUC3IUS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3___New_orig__
itkConfidenceConnectedImageFilterIUC3IUS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC3IUS3_cast


def itkConfidenceConnectedImageFilterIUC4ISS4_New():
    return itkConfidenceConnectedImageFilterIUC4ISS4.New()

class itkConfidenceConnectedImageFilterIUC4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC4ISS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC4ISS4

        Create a new object of the class itkConfidenceConnectedImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC4ISS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_swigregister(itkConfidenceConnectedImageFilterIUC4ISS4)
itkConfidenceConnectedImageFilterIUC4ISS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4___New_orig__
itkConfidenceConnectedImageFilterIUC4ISS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4ISS4_cast


def itkConfidenceConnectedImageFilterIUC4IUC4_New():
    return itkConfidenceConnectedImageFilterIUC4IUC4.New()

class itkConfidenceConnectedImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC4IUC4

        Create a new object of the class itkConfidenceConnectedImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC4IUC4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_swigregister(itkConfidenceConnectedImageFilterIUC4IUC4)
itkConfidenceConnectedImageFilterIUC4IUC4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4___New_orig__
itkConfidenceConnectedImageFilterIUC4IUC4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUC4_cast


def itkConfidenceConnectedImageFilterIUC4IUS4_New():
    return itkConfidenceConnectedImageFilterIUC4IUS4.New()

class itkConfidenceConnectedImageFilterIUC4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUC4IUS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUC4IUS4

        Create a new object of the class itkConfidenceConnectedImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUC4IUS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_swigregister(itkConfidenceConnectedImageFilterIUC4IUS4)
itkConfidenceConnectedImageFilterIUC4IUS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4___New_orig__
itkConfidenceConnectedImageFilterIUC4IUS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUC4IUS4_cast


def itkConfidenceConnectedImageFilterIUS2ISS2_New():
    return itkConfidenceConnectedImageFilterIUS2ISS2.New()

class itkConfidenceConnectedImageFilterIUS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS2ISS2

        Create a new object of the class itkConfidenceConnectedImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS2ISS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_swigregister(itkConfidenceConnectedImageFilterIUS2ISS2)
itkConfidenceConnectedImageFilterIUS2ISS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2___New_orig__
itkConfidenceConnectedImageFilterIUS2ISS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2ISS2_cast


def itkConfidenceConnectedImageFilterIUS2IUC2_New():
    return itkConfidenceConnectedImageFilterIUS2IUC2.New()

class itkConfidenceConnectedImageFilterIUS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS2IUC2

        Create a new object of the class itkConfidenceConnectedImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS2IUC2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_swigregister(itkConfidenceConnectedImageFilterIUS2IUC2)
itkConfidenceConnectedImageFilterIUS2IUC2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2___New_orig__
itkConfidenceConnectedImageFilterIUS2IUC2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUC2_cast


def itkConfidenceConnectedImageFilterIUS2IUS2_New():
    return itkConfidenceConnectedImageFilterIUS2IUS2.New()

class itkConfidenceConnectedImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS2IUS2

        Create a new object of the class itkConfidenceConnectedImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS2IUS2 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_swigregister(itkConfidenceConnectedImageFilterIUS2IUS2)
itkConfidenceConnectedImageFilterIUS2IUS2___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2___New_orig__
itkConfidenceConnectedImageFilterIUS2IUS2_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS2IUS2_cast


def itkConfidenceConnectedImageFilterIUS3ISS3_New():
    return itkConfidenceConnectedImageFilterIUS3ISS3.New()

class itkConfidenceConnectedImageFilterIUS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS3ISS3

        Create a new object of the class itkConfidenceConnectedImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS3ISS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_swigregister(itkConfidenceConnectedImageFilterIUS3ISS3)
itkConfidenceConnectedImageFilterIUS3ISS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3___New_orig__
itkConfidenceConnectedImageFilterIUS3ISS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3ISS3_cast


def itkConfidenceConnectedImageFilterIUS3IUC3_New():
    return itkConfidenceConnectedImageFilterIUS3IUC3.New()

class itkConfidenceConnectedImageFilterIUS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS3IUC3

        Create a new object of the class itkConfidenceConnectedImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS3IUC3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_swigregister(itkConfidenceConnectedImageFilterIUS3IUC3)
itkConfidenceConnectedImageFilterIUS3IUC3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3___New_orig__
itkConfidenceConnectedImageFilterIUS3IUC3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUC3_cast


def itkConfidenceConnectedImageFilterIUS3IUS3_New():
    return itkConfidenceConnectedImageFilterIUS3IUS3.New()

class itkConfidenceConnectedImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS3IUS3

        Create a new object of the class itkConfidenceConnectedImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS3IUS3 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_swigregister(itkConfidenceConnectedImageFilterIUS3IUS3)
itkConfidenceConnectedImageFilterIUS3IUS3___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3___New_orig__
itkConfidenceConnectedImageFilterIUS3IUS3_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS3IUS3_cast


def itkConfidenceConnectedImageFilterIUS4ISS4_New():
    return itkConfidenceConnectedImageFilterIUS4ISS4.New()

class itkConfidenceConnectedImageFilterIUS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS4ISS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS4ISS4

        Create a new object of the class itkConfidenceConnectedImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS4ISS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_swigregister(itkConfidenceConnectedImageFilterIUS4ISS4)
itkConfidenceConnectedImageFilterIUS4ISS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4___New_orig__
itkConfidenceConnectedImageFilterIUS4ISS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4ISS4_cast


def itkConfidenceConnectedImageFilterIUS4IUC4_New():
    return itkConfidenceConnectedImageFilterIUS4IUC4.New()

class itkConfidenceConnectedImageFilterIUS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS4IUC4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS4IUC4

        Create a new object of the class itkConfidenceConnectedImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS4IUC4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_swigregister(itkConfidenceConnectedImageFilterIUS4IUC4)
itkConfidenceConnectedImageFilterIUS4IUC4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4___New_orig__
itkConfidenceConnectedImageFilterIUS4IUC4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUC4_cast


def itkConfidenceConnectedImageFilterIUS4IUS4_New():
    return itkConfidenceConnectedImageFilterIUS4IUS4.New()

class itkConfidenceConnectedImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculated using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_SetSeed)
    ClearSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_ClearSeeds)
    AddSeed = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_AddSeed)
    SetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetMean)
    GetVariance = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetVariance)
    GetSeeds = _swig_new_instance_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_GetSeeds)
    InputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    OutputHasNumericTraitsCheck = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_OutputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkConfidenceConnectedImageFilterPython.delete_itkConfidenceConnectedImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkConfidenceConnectedImageFilterIUS4IUS4

        Create a new object of the class itkConfidenceConnectedImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkConfidenceConnectedImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkConfidenceConnectedImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkConfidenceConnectedImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkConfidenceConnectedImageFilterIUS4IUS4 in _itkConfidenceConnectedImageFilterPython:
_itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_swigregister(itkConfidenceConnectedImageFilterIUS4IUS4)
itkConfidenceConnectedImageFilterIUS4IUS4___New_orig__ = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4___New_orig__
itkConfidenceConnectedImageFilterIUS4IUS4_cast = _itkConfidenceConnectedImageFilterPython.itkConfidenceConnectedImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def confidence_connected_image_filter(*args, **kwargs):
    """Procedural interface for ConfidenceConnectedImageFilter"""
    import itk

    instance = itk.ConfidenceConnectedImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def confidence_connected_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKRegionGrowing.ConfidenceConnectedImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    confidence_connected_image_filter.__doc__ = filter_object.__doc__
    confidence_connected_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    confidence_connected_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        confidence_connected_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        confidence_connected_image_filter.__doc__ += "\n"
        confidence_connected_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        confidence_connected_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




