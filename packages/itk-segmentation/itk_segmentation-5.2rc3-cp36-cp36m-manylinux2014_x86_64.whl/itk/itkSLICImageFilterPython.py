# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKSuperPixelPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSLICImageFilterPython
else:
    import _itkSLICImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSLICImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSLICImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkCovariantVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.pyBasePython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.itkImageToImageFilterCommonPython
import itk.itkVariableLengthVectorPython
import itk.itkVectorImagePython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBPixelPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
class itkSLICImageFilterICVD22IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterICVD22IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_cast)

# Register itkSLICImageFilterICVD22IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_swigregister(itkSLICImageFilterICVD22IUL2_Superclass)
itkSLICImageFilterICVD22IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Superclass_cast

class itkSLICImageFilterICVD22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVD22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_cast)

# Register itkSLICImageFilterICVD22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_swigregister(itkSLICImageFilterICVD22IUS2_Superclass)
itkSLICImageFilterICVD22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_cast

class itkSLICImageFilterICVD23IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterICVD23IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_cast)

# Register itkSLICImageFilterICVD23IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_swigregister(itkSLICImageFilterICVD23IUL3_Superclass)
itkSLICImageFilterICVD23IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Superclass_cast

class itkSLICImageFilterICVD23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVD23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_cast)

# Register itkSLICImageFilterICVD23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_swigregister(itkSLICImageFilterICVD23IUS3_Superclass)
itkSLICImageFilterICVD23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_cast

class itkSLICImageFilterICVD24IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterICVD24IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_cast)

# Register itkSLICImageFilterICVD24IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_swigregister(itkSLICImageFilterICVD24IUL4_Superclass)
itkSLICImageFilterICVD24IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Superclass_cast

class itkSLICImageFilterICVD24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVD24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_cast)

# Register itkSLICImageFilterICVD24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_swigregister(itkSLICImageFilterICVD24IUS4_Superclass)
itkSLICImageFilterICVD24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_cast

class itkSLICImageFilterICVD32IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterICVD32IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_cast)

# Register itkSLICImageFilterICVD32IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_swigregister(itkSLICImageFilterICVD32IUL2_Superclass)
itkSLICImageFilterICVD32IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Superclass_cast

class itkSLICImageFilterICVD32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVD32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_cast)

# Register itkSLICImageFilterICVD32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_swigregister(itkSLICImageFilterICVD32IUS2_Superclass)
itkSLICImageFilterICVD32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_cast

class itkSLICImageFilterICVD33IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterICVD33IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_cast)

# Register itkSLICImageFilterICVD33IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_swigregister(itkSLICImageFilterICVD33IUL3_Superclass)
itkSLICImageFilterICVD33IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Superclass_cast

class itkSLICImageFilterICVD33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVD33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_cast)

# Register itkSLICImageFilterICVD33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_swigregister(itkSLICImageFilterICVD33IUS3_Superclass)
itkSLICImageFilterICVD33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_cast

class itkSLICImageFilterICVD34IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterICVD34IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_cast)

# Register itkSLICImageFilterICVD34IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_swigregister(itkSLICImageFilterICVD34IUL4_Superclass)
itkSLICImageFilterICVD34IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Superclass_cast

class itkSLICImageFilterICVD34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVD34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_cast)

# Register itkSLICImageFilterICVD34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_swigregister(itkSLICImageFilterICVD34IUS4_Superclass)
itkSLICImageFilterICVD34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_cast

class itkSLICImageFilterICVD42IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterICVD42IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_cast)

# Register itkSLICImageFilterICVD42IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_swigregister(itkSLICImageFilterICVD42IUL2_Superclass)
itkSLICImageFilterICVD42IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Superclass_cast

class itkSLICImageFilterICVD42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVD42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_cast)

# Register itkSLICImageFilterICVD42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_swigregister(itkSLICImageFilterICVD42IUS2_Superclass)
itkSLICImageFilterICVD42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_cast

class itkSLICImageFilterICVD43IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterICVD43IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_cast)

# Register itkSLICImageFilterICVD43IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_swigregister(itkSLICImageFilterICVD43IUL3_Superclass)
itkSLICImageFilterICVD43IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Superclass_cast

class itkSLICImageFilterICVD43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVD43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_cast)

# Register itkSLICImageFilterICVD43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_swigregister(itkSLICImageFilterICVD43IUS3_Superclass)
itkSLICImageFilterICVD43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_cast

class itkSLICImageFilterICVD44IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterICVD44IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_cast)

# Register itkSLICImageFilterICVD44IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_swigregister(itkSLICImageFilterICVD44IUL4_Superclass)
itkSLICImageFilterICVD44IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Superclass_cast

class itkSLICImageFilterICVD44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVD44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_cast)

# Register itkSLICImageFilterICVD44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_swigregister(itkSLICImageFilterICVD44IUS4_Superclass)
itkSLICImageFilterICVD44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_cast

class itkSLICImageFilterICVF22IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterICVF22IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_cast)

# Register itkSLICImageFilterICVF22IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_swigregister(itkSLICImageFilterICVF22IUL2_Superclass)
itkSLICImageFilterICVF22IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Superclass_cast

class itkSLICImageFilterICVF22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVF22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_cast)

# Register itkSLICImageFilterICVF22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_swigregister(itkSLICImageFilterICVF22IUS2_Superclass)
itkSLICImageFilterICVF22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_cast

class itkSLICImageFilterICVF23IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterICVF23IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_cast)

# Register itkSLICImageFilterICVF23IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_swigregister(itkSLICImageFilterICVF23IUL3_Superclass)
itkSLICImageFilterICVF23IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Superclass_cast

class itkSLICImageFilterICVF23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVF23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_cast)

# Register itkSLICImageFilterICVF23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_swigregister(itkSLICImageFilterICVF23IUS3_Superclass)
itkSLICImageFilterICVF23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_cast

class itkSLICImageFilterICVF24IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterICVF24IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_cast)

# Register itkSLICImageFilterICVF24IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_swigregister(itkSLICImageFilterICVF24IUL4_Superclass)
itkSLICImageFilterICVF24IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Superclass_cast

class itkSLICImageFilterICVF24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVF24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_cast)

# Register itkSLICImageFilterICVF24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_swigregister(itkSLICImageFilterICVF24IUS4_Superclass)
itkSLICImageFilterICVF24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_cast

class itkSLICImageFilterICVF32IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterICVF32IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_cast)

# Register itkSLICImageFilterICVF32IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_swigregister(itkSLICImageFilterICVF32IUL2_Superclass)
itkSLICImageFilterICVF32IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Superclass_cast

class itkSLICImageFilterICVF32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVF32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_cast)

# Register itkSLICImageFilterICVF32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_swigregister(itkSLICImageFilterICVF32IUS2_Superclass)
itkSLICImageFilterICVF32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_cast

class itkSLICImageFilterICVF33IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterICVF33IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_cast)

# Register itkSLICImageFilterICVF33IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_swigregister(itkSLICImageFilterICVF33IUL3_Superclass)
itkSLICImageFilterICVF33IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Superclass_cast

class itkSLICImageFilterICVF33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVF33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_cast)

# Register itkSLICImageFilterICVF33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_swigregister(itkSLICImageFilterICVF33IUS3_Superclass)
itkSLICImageFilterICVF33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_cast

class itkSLICImageFilterICVF34IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterICVF34IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_cast)

# Register itkSLICImageFilterICVF34IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_swigregister(itkSLICImageFilterICVF34IUL4_Superclass)
itkSLICImageFilterICVF34IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Superclass_cast

class itkSLICImageFilterICVF34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVF34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_cast)

# Register itkSLICImageFilterICVF34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_swigregister(itkSLICImageFilterICVF34IUS4_Superclass)
itkSLICImageFilterICVF34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_cast

class itkSLICImageFilterICVF42IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterICVF42IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_cast)

# Register itkSLICImageFilterICVF42IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_swigregister(itkSLICImageFilterICVF42IUL2_Superclass)
itkSLICImageFilterICVF42IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Superclass_cast

class itkSLICImageFilterICVF42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVF42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_cast)

# Register itkSLICImageFilterICVF42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_swigregister(itkSLICImageFilterICVF42IUS2_Superclass)
itkSLICImageFilterICVF42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_cast

class itkSLICImageFilterICVF43IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterICVF43IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_cast)

# Register itkSLICImageFilterICVF43IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_swigregister(itkSLICImageFilterICVF43IUL3_Superclass)
itkSLICImageFilterICVF43IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Superclass_cast

class itkSLICImageFilterICVF43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVF43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_cast)

# Register itkSLICImageFilterICVF43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_swigregister(itkSLICImageFilterICVF43IUS3_Superclass)
itkSLICImageFilterICVF43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_cast

class itkSLICImageFilterICVF44IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterICVF44IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_cast)

# Register itkSLICImageFilterICVF44IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_swigregister(itkSLICImageFilterICVF44IUL4_Superclass)
itkSLICImageFilterICVF44IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Superclass_cast

class itkSLICImageFilterICVF44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVF44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_cast)

# Register itkSLICImageFilterICVF44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_swigregister(itkSLICImageFilterICVF44IUS4_Superclass)
itkSLICImageFilterICVF44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_cast

class itkSLICImageFilterID2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterID2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_cast)

# Register itkSLICImageFilterID2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_swigregister(itkSLICImageFilterID2IUL2_Superclass)
itkSLICImageFilterID2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Superclass_cast

class itkSLICImageFilterID2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_cast)

# Register itkSLICImageFilterID2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_swigregister(itkSLICImageFilterID2IUS2_Superclass)
itkSLICImageFilterID2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_cast

class itkSLICImageFilterID3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterID3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_cast)

# Register itkSLICImageFilterID3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_swigregister(itkSLICImageFilterID3IUL3_Superclass)
itkSLICImageFilterID3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Superclass_cast

class itkSLICImageFilterID3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_cast)

# Register itkSLICImageFilterID3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_swigregister(itkSLICImageFilterID3IUS3_Superclass)
itkSLICImageFilterID3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_cast

class itkSLICImageFilterID4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterID4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_cast)

# Register itkSLICImageFilterID4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_swigregister(itkSLICImageFilterID4IUL4_Superclass)
itkSLICImageFilterID4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Superclass_cast

class itkSLICImageFilterID4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterID4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_cast)

# Register itkSLICImageFilterID4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_swigregister(itkSLICImageFilterID4IUS4_Superclass)
itkSLICImageFilterID4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_cast

class itkSLICImageFilterIF2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIF2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_cast)

# Register itkSLICImageFilterIF2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_swigregister(itkSLICImageFilterIF2IUL2_Superclass)
itkSLICImageFilterIF2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Superclass_cast

class itkSLICImageFilterIF2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast)

# Register itkSLICImageFilterIF2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_swigregister(itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast

class itkSLICImageFilterIF3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIF3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_cast)

# Register itkSLICImageFilterIF3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_swigregister(itkSLICImageFilterIF3IUL3_Superclass)
itkSLICImageFilterIF3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Superclass_cast

class itkSLICImageFilterIF3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast)

# Register itkSLICImageFilterIF3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_swigregister(itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast

class itkSLICImageFilterIF4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIF4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_cast)

# Register itkSLICImageFilterIF4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_swigregister(itkSLICImageFilterIF4IUL4_Superclass)
itkSLICImageFilterIF4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Superclass_cast

class itkSLICImageFilterIF4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIF4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_cast)

# Register itkSLICImageFilterIF4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_swigregister(itkSLICImageFilterIF4IUS4_Superclass)
itkSLICImageFilterIF4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_cast

class itkSLICImageFilterIRGBUC2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_cast)

# Register itkSLICImageFilterIRGBUC2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_swigregister(itkSLICImageFilterIRGBUC2IUL2_Superclass)
itkSLICImageFilterIRGBUC2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Superclass_cast

class itkSLICImageFilterIRGBUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterIRGBUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_swigregister(itkSLICImageFilterIRGBUC2IUS2_Superclass)
itkSLICImageFilterIRGBUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_cast

class itkSLICImageFilterIRGBUC3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_cast)

# Register itkSLICImageFilterIRGBUC3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_swigregister(itkSLICImageFilterIRGBUC3IUL3_Superclass)
itkSLICImageFilterIRGBUC3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Superclass_cast

class itkSLICImageFilterIRGBUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterIRGBUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_swigregister(itkSLICImageFilterIRGBUC3IUS3_Superclass)
itkSLICImageFilterIRGBUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_cast

class itkSLICImageFilterIRGBUC4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_cast)

# Register itkSLICImageFilterIRGBUC4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_swigregister(itkSLICImageFilterIRGBUC4IUL4_Superclass)
itkSLICImageFilterIRGBUC4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Superclass_cast

class itkSLICImageFilterIRGBUC4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_cast)

# Register itkSLICImageFilterIRGBUC4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_swigregister(itkSLICImageFilterIRGBUC4IUS4_Superclass)
itkSLICImageFilterIRGBUC4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_cast

class itkSLICImageFilterISS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterISS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_cast)

# Register itkSLICImageFilterISS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_swigregister(itkSLICImageFilterISS2IUL2_Superclass)
itkSLICImageFilterISS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Superclass_cast

class itkSLICImageFilterISS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast)

# Register itkSLICImageFilterISS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_swigregister(itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast

class itkSLICImageFilterISS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterISS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_cast)

# Register itkSLICImageFilterISS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_swigregister(itkSLICImageFilterISS3IUL3_Superclass)
itkSLICImageFilterISS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Superclass_cast

class itkSLICImageFilterISS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast)

# Register itkSLICImageFilterISS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_swigregister(itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast

class itkSLICImageFilterISS4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterISS4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_cast)

# Register itkSLICImageFilterISS4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_swigregister(itkSLICImageFilterISS4IUL4_Superclass)
itkSLICImageFilterISS4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Superclass_cast

class itkSLICImageFilterISS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterISS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_cast)

# Register itkSLICImageFilterISS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_swigregister(itkSLICImageFilterISS4IUS4_Superclass)
itkSLICImageFilterISS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_cast

class itkSLICImageFilterIUC2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIUC2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_cast)

# Register itkSLICImageFilterIUC2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_swigregister(itkSLICImageFilterIUC2IUL2_Superclass)
itkSLICImageFilterIUC2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Superclass_cast

class itkSLICImageFilterIUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterIUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_swigregister(itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast

class itkSLICImageFilterIUC3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIUC3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_cast)

# Register itkSLICImageFilterIUC3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_swigregister(itkSLICImageFilterIUC3IUL3_Superclass)
itkSLICImageFilterIUC3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Superclass_cast

class itkSLICImageFilterIUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterIUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_swigregister(itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast

class itkSLICImageFilterIUC4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIUC4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_cast)

# Register itkSLICImageFilterIUC4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_swigregister(itkSLICImageFilterIUC4IUL4_Superclass)
itkSLICImageFilterIUC4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Superclass_cast

class itkSLICImageFilterIUC4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_cast)

# Register itkSLICImageFilterIUC4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_swigregister(itkSLICImageFilterIUC4IUS4_Superclass)
itkSLICImageFilterIUC4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_cast

class itkSLICImageFilterIUS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIUS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_cast)

# Register itkSLICImageFilterIUS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_swigregister(itkSLICImageFilterIUS2IUL2_Superclass)
itkSLICImageFilterIUS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Superclass_cast

class itkSLICImageFilterIUS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast)

# Register itkSLICImageFilterIUS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_swigregister(itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast

class itkSLICImageFilterIUS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIUS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_cast)

# Register itkSLICImageFilterIUS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_swigregister(itkSLICImageFilterIUS3IUL3_Superclass)
itkSLICImageFilterIUS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Superclass_cast

class itkSLICImageFilterIUS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast)

# Register itkSLICImageFilterIUS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_swigregister(itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast

class itkSLICImageFilterIUS4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIUS4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_cast)

# Register itkSLICImageFilterIUS4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_swigregister(itkSLICImageFilterIUS4IUL4_Superclass)
itkSLICImageFilterIUS4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Superclass_cast

class itkSLICImageFilterIUS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_cast)

# Register itkSLICImageFilterIUS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_swigregister(itkSLICImageFilterIUS4IUS4_Superclass)
itkSLICImageFilterIUS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_cast

class itkSLICImageFilterIVD22IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIVD22IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_cast)

# Register itkSLICImageFilterIVD22IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_swigregister(itkSLICImageFilterIVD22IUL2_Superclass)
itkSLICImageFilterIVD22IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Superclass_cast

class itkSLICImageFilterIVD22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVD22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_cast)

# Register itkSLICImageFilterIVD22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_swigregister(itkSLICImageFilterIVD22IUS2_Superclass)
itkSLICImageFilterIVD22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_cast

class itkSLICImageFilterIVD23IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIVD23IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_cast)

# Register itkSLICImageFilterIVD23IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_swigregister(itkSLICImageFilterIVD23IUL3_Superclass)
itkSLICImageFilterIVD23IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Superclass_cast

class itkSLICImageFilterIVD23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVD23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_cast)

# Register itkSLICImageFilterIVD23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_swigregister(itkSLICImageFilterIVD23IUS3_Superclass)
itkSLICImageFilterIVD23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_cast

class itkSLICImageFilterIVD24IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIVD24IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_cast)

# Register itkSLICImageFilterIVD24IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_swigregister(itkSLICImageFilterIVD24IUL4_Superclass)
itkSLICImageFilterIVD24IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Superclass_cast

class itkSLICImageFilterIVD24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVD24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_cast)

# Register itkSLICImageFilterIVD24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_swigregister(itkSLICImageFilterIVD24IUS4_Superclass)
itkSLICImageFilterIVD24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_cast

class itkSLICImageFilterIVD32IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIVD32IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_cast)

# Register itkSLICImageFilterIVD32IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_swigregister(itkSLICImageFilterIVD32IUL2_Superclass)
itkSLICImageFilterIVD32IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Superclass_cast

class itkSLICImageFilterIVD32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVD32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_cast)

# Register itkSLICImageFilterIVD32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_swigregister(itkSLICImageFilterIVD32IUS2_Superclass)
itkSLICImageFilterIVD32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_cast

class itkSLICImageFilterIVD33IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIVD33IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_cast)

# Register itkSLICImageFilterIVD33IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_swigregister(itkSLICImageFilterIVD33IUL3_Superclass)
itkSLICImageFilterIVD33IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Superclass_cast

class itkSLICImageFilterIVD33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVD33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_cast)

# Register itkSLICImageFilterIVD33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_swigregister(itkSLICImageFilterIVD33IUS3_Superclass)
itkSLICImageFilterIVD33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_cast

class itkSLICImageFilterIVD34IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIVD34IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_cast)

# Register itkSLICImageFilterIVD34IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_swigregister(itkSLICImageFilterIVD34IUL4_Superclass)
itkSLICImageFilterIVD34IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Superclass_cast

class itkSLICImageFilterIVD34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVD34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_cast)

# Register itkSLICImageFilterIVD34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_swigregister(itkSLICImageFilterIVD34IUS4_Superclass)
itkSLICImageFilterIVD34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_cast

class itkSLICImageFilterIVD42IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIVD42IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_cast)

# Register itkSLICImageFilterIVD42IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_swigregister(itkSLICImageFilterIVD42IUL2_Superclass)
itkSLICImageFilterIVD42IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Superclass_cast

class itkSLICImageFilterIVD42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVD42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_cast)

# Register itkSLICImageFilterIVD42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_swigregister(itkSLICImageFilterIVD42IUS2_Superclass)
itkSLICImageFilterIVD42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_cast

class itkSLICImageFilterIVD43IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIVD43IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_cast)

# Register itkSLICImageFilterIVD43IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_swigregister(itkSLICImageFilterIVD43IUL3_Superclass)
itkSLICImageFilterIVD43IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Superclass_cast

class itkSLICImageFilterIVD43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVD43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_cast)

# Register itkSLICImageFilterIVD43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_swigregister(itkSLICImageFilterIVD43IUS3_Superclass)
itkSLICImageFilterIVD43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_cast

class itkSLICImageFilterIVD44IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIVD44IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_cast)

# Register itkSLICImageFilterIVD44IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_swigregister(itkSLICImageFilterIVD44IUL4_Superclass)
itkSLICImageFilterIVD44IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Superclass_cast

class itkSLICImageFilterIVD44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVD44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_cast)

# Register itkSLICImageFilterIVD44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_swigregister(itkSLICImageFilterIVD44IUS4_Superclass)
itkSLICImageFilterIVD44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_cast

class itkSLICImageFilterIVF22IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIVF22IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_cast)

# Register itkSLICImageFilterIVF22IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_swigregister(itkSLICImageFilterIVF22IUL2_Superclass)
itkSLICImageFilterIVF22IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Superclass_cast

class itkSLICImageFilterIVF22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVF22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_cast)

# Register itkSLICImageFilterIVF22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_swigregister(itkSLICImageFilterIVF22IUS2_Superclass)
itkSLICImageFilterIVF22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_cast

class itkSLICImageFilterIVF23IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIVF23IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_cast)

# Register itkSLICImageFilterIVF23IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_swigregister(itkSLICImageFilterIVF23IUL3_Superclass)
itkSLICImageFilterIVF23IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Superclass_cast

class itkSLICImageFilterIVF23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVF23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_cast)

# Register itkSLICImageFilterIVF23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_swigregister(itkSLICImageFilterIVF23IUS3_Superclass)
itkSLICImageFilterIVF23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_cast

class itkSLICImageFilterIVF24IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIVF24IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_cast)

# Register itkSLICImageFilterIVF24IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_swigregister(itkSLICImageFilterIVF24IUL4_Superclass)
itkSLICImageFilterIVF24IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Superclass_cast

class itkSLICImageFilterIVF24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVF24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_cast)

# Register itkSLICImageFilterIVF24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_swigregister(itkSLICImageFilterIVF24IUS4_Superclass)
itkSLICImageFilterIVF24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_cast

class itkSLICImageFilterIVF32IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIVF32IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_cast)

# Register itkSLICImageFilterIVF32IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_swigregister(itkSLICImageFilterIVF32IUL2_Superclass)
itkSLICImageFilterIVF32IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Superclass_cast

class itkSLICImageFilterIVF32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVF32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_cast)

# Register itkSLICImageFilterIVF32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_swigregister(itkSLICImageFilterIVF32IUS2_Superclass)
itkSLICImageFilterIVF32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_cast

class itkSLICImageFilterIVF33IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIVF33IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_cast)

# Register itkSLICImageFilterIVF33IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_swigregister(itkSLICImageFilterIVF33IUL3_Superclass)
itkSLICImageFilterIVF33IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Superclass_cast

class itkSLICImageFilterIVF33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVF33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_cast)

# Register itkSLICImageFilterIVF33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_swigregister(itkSLICImageFilterIVF33IUS3_Superclass)
itkSLICImageFilterIVF33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_cast

class itkSLICImageFilterIVF34IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIVF34IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_cast)

# Register itkSLICImageFilterIVF34IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_swigregister(itkSLICImageFilterIVF34IUL4_Superclass)
itkSLICImageFilterIVF34IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Superclass_cast

class itkSLICImageFilterIVF34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVF34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_cast)

# Register itkSLICImageFilterIVF34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_swigregister(itkSLICImageFilterIVF34IUS4_Superclass)
itkSLICImageFilterIVF34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_cast

class itkSLICImageFilterIVF42IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterIVF42IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_cast)

# Register itkSLICImageFilterIVF42IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_swigregister(itkSLICImageFilterIVF42IUL2_Superclass)
itkSLICImageFilterIVF42IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Superclass_cast

class itkSLICImageFilterIVF42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVF42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_cast)

# Register itkSLICImageFilterIVF42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_swigregister(itkSLICImageFilterIVF42IUS2_Superclass)
itkSLICImageFilterIVF42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_cast

class itkSLICImageFilterIVF43IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterIVF43IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_cast)

# Register itkSLICImageFilterIVF43IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_swigregister(itkSLICImageFilterIVF43IUL3_Superclass)
itkSLICImageFilterIVF43IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Superclass_cast

class itkSLICImageFilterIVF43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVF43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_cast)

# Register itkSLICImageFilterIVF43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_swigregister(itkSLICImageFilterIVF43IUS3_Superclass)
itkSLICImageFilterIVF43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_cast

class itkSLICImageFilterIVF44IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterIVF44IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_cast)

# Register itkSLICImageFilterIVF44IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_swigregister(itkSLICImageFilterIVF44IUL4_Superclass)
itkSLICImageFilterIVF44IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Superclass_cast

class itkSLICImageFilterIVF44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVF44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_cast)

# Register itkSLICImageFilterIVF44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_swigregister(itkSLICImageFilterIVF44IUS4_Superclass)
itkSLICImageFilterIVF44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_cast

class itkSLICImageFilterVID2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVID2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_cast)

# Register itkSLICImageFilterVID2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_swigregister(itkSLICImageFilterVID2IUL2_Superclass)
itkSLICImageFilterVID2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Superclass_cast

class itkSLICImageFilterVID2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_cast)

# Register itkSLICImageFilterVID2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_swigregister(itkSLICImageFilterVID2IUS2_Superclass)
itkSLICImageFilterVID2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_cast

class itkSLICImageFilterVID3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVID3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_cast)

# Register itkSLICImageFilterVID3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_swigregister(itkSLICImageFilterVID3IUL3_Superclass)
itkSLICImageFilterVID3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Superclass_cast

class itkSLICImageFilterVID3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_cast)

# Register itkSLICImageFilterVID3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_swigregister(itkSLICImageFilterVID3IUS3_Superclass)
itkSLICImageFilterVID3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_cast

class itkSLICImageFilterVID4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterVID4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_cast)

# Register itkSLICImageFilterVID4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_swigregister(itkSLICImageFilterVID4IUL4_Superclass)
itkSLICImageFilterVID4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Superclass_cast

class itkSLICImageFilterVID4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVID4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_cast)

# Register itkSLICImageFilterVID4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_swigregister(itkSLICImageFilterVID4IUS4_Superclass)
itkSLICImageFilterVID4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_cast

class itkSLICImageFilterVIF2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVIF2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_cast)

# Register itkSLICImageFilterVIF2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_swigregister(itkSLICImageFilterVIF2IUL2_Superclass)
itkSLICImageFilterVIF2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Superclass_cast

class itkSLICImageFilterVIF2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIF2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_swigregister(itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast

class itkSLICImageFilterVIF3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVIF3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_cast)

# Register itkSLICImageFilterVIF3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_swigregister(itkSLICImageFilterVIF3IUL3_Superclass)
itkSLICImageFilterVIF3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Superclass_cast

class itkSLICImageFilterVIF3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIF3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_swigregister(itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast

class itkSLICImageFilterVIF4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterVIF4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_cast)

# Register itkSLICImageFilterVIF4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_swigregister(itkSLICImageFilterVIF4IUL4_Superclass)
itkSLICImageFilterVIF4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Superclass_cast

class itkSLICImageFilterVIF4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVIF4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_cast)

# Register itkSLICImageFilterVIF4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_swigregister(itkSLICImageFilterVIF4IUS4_Superclass)
itkSLICImageFilterVIF4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_cast

class itkSLICImageFilterVISS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVISS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_cast)

# Register itkSLICImageFilterVISS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_swigregister(itkSLICImageFilterVISS2IUL2_Superclass)
itkSLICImageFilterVISS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Superclass_cast

class itkSLICImageFilterVISS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast)

# Register itkSLICImageFilterVISS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_swigregister(itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast

class itkSLICImageFilterVISS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVISS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_cast)

# Register itkSLICImageFilterVISS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_swigregister(itkSLICImageFilterVISS3IUL3_Superclass)
itkSLICImageFilterVISS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Superclass_cast

class itkSLICImageFilterVISS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast)

# Register itkSLICImageFilterVISS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_swigregister(itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast

class itkSLICImageFilterVISS4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterVISS4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_cast)

# Register itkSLICImageFilterVISS4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_swigregister(itkSLICImageFilterVISS4IUL4_Superclass)
itkSLICImageFilterVISS4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Superclass_cast

class itkSLICImageFilterVISS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVISS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_cast)

# Register itkSLICImageFilterVISS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_swigregister(itkSLICImageFilterVISS4IUS4_Superclass)
itkSLICImageFilterVISS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_cast

class itkSLICImageFilterVIUC2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVIUC2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_cast)

# Register itkSLICImageFilterVIUC2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_swigregister(itkSLICImageFilterVIUC2IUL2_Superclass)
itkSLICImageFilterVIUC2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Superclass_cast

class itkSLICImageFilterVIUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_swigregister(itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast

class itkSLICImageFilterVIUC3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVIUC3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_cast)

# Register itkSLICImageFilterVIUC3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_swigregister(itkSLICImageFilterVIUC3IUL3_Superclass)
itkSLICImageFilterVIUC3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Superclass_cast

class itkSLICImageFilterVIUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_swigregister(itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast

class itkSLICImageFilterVIUC4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterVIUC4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_cast)

# Register itkSLICImageFilterVIUC4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_swigregister(itkSLICImageFilterVIUC4IUL4_Superclass)
itkSLICImageFilterVIUC4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Superclass_cast

class itkSLICImageFilterVIUC4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVIUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_cast)

# Register itkSLICImageFilterVIUC4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_swigregister(itkSLICImageFilterVIUC4IUS4_Superclass)
itkSLICImageFilterVIUC4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_cast

class itkSLICImageFilterVIUS2IUL2_Superclass(itk.itkImageSourcePython.itkImageSourceIUL2):
    r"""Proxy of C++ itkSLICImageFilterVIUS2IUL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_cast)

# Register itkSLICImageFilterVIUS2IUL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_swigregister(itkSLICImageFilterVIUS2IUL2_Superclass)
itkSLICImageFilterVIUS2IUL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Superclass_cast

class itkSLICImageFilterVIUS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIUS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_swigregister(itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast

class itkSLICImageFilterVIUS3IUL3_Superclass(itk.itkImageSourcePython.itkImageSourceIUL3):
    r"""Proxy of C++ itkSLICImageFilterVIUS3IUL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_cast)

# Register itkSLICImageFilterVIUS3IUL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_swigregister(itkSLICImageFilterVIUS3IUL3_Superclass)
itkSLICImageFilterVIUS3IUL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Superclass_cast

class itkSLICImageFilterVIUS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIUS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_swigregister(itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast

class itkSLICImageFilterVIUS4IUL4_Superclass(itk.itkImageSourcePython.itkImageSourceIUL4):
    r"""Proxy of C++ itkSLICImageFilterVIUS4IUL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IUL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_cast)

# Register itkSLICImageFilterVIUS4IUL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_swigregister(itkSLICImageFilterVIUS4IUL4_Superclass)
itkSLICImageFilterVIUS4IUL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Superclass_cast

class itkSLICImageFilterVIUS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_cast)

# Register itkSLICImageFilterVIUS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_swigregister(itkSLICImageFilterVIUS4IUS4_Superclass)
itkSLICImageFilterVIUS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_cast


def itkSLICImageFilterICVD22IUL2_New():
    return itkSLICImageFilterICVD22IUL2.New()

class itkSLICImageFilterICVD22IUL2(itkSLICImageFilterICVD22IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD22IUL2

        Create a new object of the class itkSLICImageFilterICVD22IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD22IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD22IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD22IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD22IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_swigregister(itkSLICImageFilterICVD22IUL2)
itkSLICImageFilterICVD22IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2___New_orig__
itkSLICImageFilterICVD22IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUL2_cast


def itkSLICImageFilterICVD22IUS2_New():
    return itkSLICImageFilterICVD22IUS2.New()

class itkSLICImageFilterICVD22IUS2(itkSLICImageFilterICVD22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD22IUS2

        Create a new object of the class itkSLICImageFilterICVD22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_swigregister(itkSLICImageFilterICVD22IUS2)
itkSLICImageFilterICVD22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2___New_orig__
itkSLICImageFilterICVD22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_cast


def itkSLICImageFilterICVD23IUL3_New():
    return itkSLICImageFilterICVD23IUL3.New()

class itkSLICImageFilterICVD23IUL3(itkSLICImageFilterICVD23IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD23IUL3

        Create a new object of the class itkSLICImageFilterICVD23IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD23IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD23IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD23IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD23IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_swigregister(itkSLICImageFilterICVD23IUL3)
itkSLICImageFilterICVD23IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3___New_orig__
itkSLICImageFilterICVD23IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUL3_cast


def itkSLICImageFilterICVD23IUS3_New():
    return itkSLICImageFilterICVD23IUS3.New()

class itkSLICImageFilterICVD23IUS3(itkSLICImageFilterICVD23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD23IUS3

        Create a new object of the class itkSLICImageFilterICVD23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_swigregister(itkSLICImageFilterICVD23IUS3)
itkSLICImageFilterICVD23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3___New_orig__
itkSLICImageFilterICVD23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_cast


def itkSLICImageFilterICVD24IUL4_New():
    return itkSLICImageFilterICVD24IUL4.New()

class itkSLICImageFilterICVD24IUL4(itkSLICImageFilterICVD24IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD24IUL4

        Create a new object of the class itkSLICImageFilterICVD24IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD24IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD24IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD24IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD24IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_swigregister(itkSLICImageFilterICVD24IUL4)
itkSLICImageFilterICVD24IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4___New_orig__
itkSLICImageFilterICVD24IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUL4_cast


def itkSLICImageFilterICVD24IUS4_New():
    return itkSLICImageFilterICVD24IUS4.New()

class itkSLICImageFilterICVD24IUS4(itkSLICImageFilterICVD24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD24IUS4

        Create a new object of the class itkSLICImageFilterICVD24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_swigregister(itkSLICImageFilterICVD24IUS4)
itkSLICImageFilterICVD24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4___New_orig__
itkSLICImageFilterICVD24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_cast


def itkSLICImageFilterICVD32IUL2_New():
    return itkSLICImageFilterICVD32IUL2.New()

class itkSLICImageFilterICVD32IUL2(itkSLICImageFilterICVD32IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD32IUL2

        Create a new object of the class itkSLICImageFilterICVD32IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD32IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD32IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD32IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD32IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_swigregister(itkSLICImageFilterICVD32IUL2)
itkSLICImageFilterICVD32IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2___New_orig__
itkSLICImageFilterICVD32IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUL2_cast


def itkSLICImageFilterICVD32IUS2_New():
    return itkSLICImageFilterICVD32IUS2.New()

class itkSLICImageFilterICVD32IUS2(itkSLICImageFilterICVD32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD32IUS2

        Create a new object of the class itkSLICImageFilterICVD32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_swigregister(itkSLICImageFilterICVD32IUS2)
itkSLICImageFilterICVD32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2___New_orig__
itkSLICImageFilterICVD32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_cast


def itkSLICImageFilterICVD33IUL3_New():
    return itkSLICImageFilterICVD33IUL3.New()

class itkSLICImageFilterICVD33IUL3(itkSLICImageFilterICVD33IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD33IUL3

        Create a new object of the class itkSLICImageFilterICVD33IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD33IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD33IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD33IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD33IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_swigregister(itkSLICImageFilterICVD33IUL3)
itkSLICImageFilterICVD33IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3___New_orig__
itkSLICImageFilterICVD33IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUL3_cast


def itkSLICImageFilterICVD33IUS3_New():
    return itkSLICImageFilterICVD33IUS3.New()

class itkSLICImageFilterICVD33IUS3(itkSLICImageFilterICVD33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD33IUS3

        Create a new object of the class itkSLICImageFilterICVD33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_swigregister(itkSLICImageFilterICVD33IUS3)
itkSLICImageFilterICVD33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3___New_orig__
itkSLICImageFilterICVD33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_cast


def itkSLICImageFilterICVD34IUL4_New():
    return itkSLICImageFilterICVD34IUL4.New()

class itkSLICImageFilterICVD34IUL4(itkSLICImageFilterICVD34IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD34IUL4

        Create a new object of the class itkSLICImageFilterICVD34IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD34IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD34IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD34IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD34IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_swigregister(itkSLICImageFilterICVD34IUL4)
itkSLICImageFilterICVD34IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4___New_orig__
itkSLICImageFilterICVD34IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUL4_cast


def itkSLICImageFilterICVD34IUS4_New():
    return itkSLICImageFilterICVD34IUS4.New()

class itkSLICImageFilterICVD34IUS4(itkSLICImageFilterICVD34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD34IUS4

        Create a new object of the class itkSLICImageFilterICVD34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_swigregister(itkSLICImageFilterICVD34IUS4)
itkSLICImageFilterICVD34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4___New_orig__
itkSLICImageFilterICVD34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_cast


def itkSLICImageFilterICVD42IUL2_New():
    return itkSLICImageFilterICVD42IUL2.New()

class itkSLICImageFilterICVD42IUL2(itkSLICImageFilterICVD42IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD42IUL2

        Create a new object of the class itkSLICImageFilterICVD42IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD42IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD42IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD42IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD42IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_swigregister(itkSLICImageFilterICVD42IUL2)
itkSLICImageFilterICVD42IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2___New_orig__
itkSLICImageFilterICVD42IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUL2_cast


def itkSLICImageFilterICVD42IUS2_New():
    return itkSLICImageFilterICVD42IUS2.New()

class itkSLICImageFilterICVD42IUS2(itkSLICImageFilterICVD42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD42IUS2

        Create a new object of the class itkSLICImageFilterICVD42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_swigregister(itkSLICImageFilterICVD42IUS2)
itkSLICImageFilterICVD42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2___New_orig__
itkSLICImageFilterICVD42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_cast


def itkSLICImageFilterICVD43IUL3_New():
    return itkSLICImageFilterICVD43IUL3.New()

class itkSLICImageFilterICVD43IUL3(itkSLICImageFilterICVD43IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD43IUL3

        Create a new object of the class itkSLICImageFilterICVD43IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD43IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD43IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD43IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD43IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_swigregister(itkSLICImageFilterICVD43IUL3)
itkSLICImageFilterICVD43IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3___New_orig__
itkSLICImageFilterICVD43IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUL3_cast


def itkSLICImageFilterICVD43IUS3_New():
    return itkSLICImageFilterICVD43IUS3.New()

class itkSLICImageFilterICVD43IUS3(itkSLICImageFilterICVD43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD43IUS3

        Create a new object of the class itkSLICImageFilterICVD43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_swigregister(itkSLICImageFilterICVD43IUS3)
itkSLICImageFilterICVD43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3___New_orig__
itkSLICImageFilterICVD43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_cast


def itkSLICImageFilterICVD44IUL4_New():
    return itkSLICImageFilterICVD44IUL4.New()

class itkSLICImageFilterICVD44IUL4(itkSLICImageFilterICVD44IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD44IUL4

        Create a new object of the class itkSLICImageFilterICVD44IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD44IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD44IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD44IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD44IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_swigregister(itkSLICImageFilterICVD44IUL4)
itkSLICImageFilterICVD44IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4___New_orig__
itkSLICImageFilterICVD44IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUL4_cast


def itkSLICImageFilterICVD44IUS4_New():
    return itkSLICImageFilterICVD44IUS4.New()

class itkSLICImageFilterICVD44IUS4(itkSLICImageFilterICVD44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD44IUS4

        Create a new object of the class itkSLICImageFilterICVD44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_swigregister(itkSLICImageFilterICVD44IUS4)
itkSLICImageFilterICVD44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4___New_orig__
itkSLICImageFilterICVD44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_cast


def itkSLICImageFilterICVF22IUL2_New():
    return itkSLICImageFilterICVF22IUL2.New()

class itkSLICImageFilterICVF22IUL2(itkSLICImageFilterICVF22IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF22IUL2

        Create a new object of the class itkSLICImageFilterICVF22IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF22IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF22IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF22IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF22IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_swigregister(itkSLICImageFilterICVF22IUL2)
itkSLICImageFilterICVF22IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2___New_orig__
itkSLICImageFilterICVF22IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUL2_cast


def itkSLICImageFilterICVF22IUS2_New():
    return itkSLICImageFilterICVF22IUS2.New()

class itkSLICImageFilterICVF22IUS2(itkSLICImageFilterICVF22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF22IUS2

        Create a new object of the class itkSLICImageFilterICVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_swigregister(itkSLICImageFilterICVF22IUS2)
itkSLICImageFilterICVF22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2___New_orig__
itkSLICImageFilterICVF22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_cast


def itkSLICImageFilterICVF23IUL3_New():
    return itkSLICImageFilterICVF23IUL3.New()

class itkSLICImageFilterICVF23IUL3(itkSLICImageFilterICVF23IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF23IUL3

        Create a new object of the class itkSLICImageFilterICVF23IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF23IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF23IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF23IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF23IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_swigregister(itkSLICImageFilterICVF23IUL3)
itkSLICImageFilterICVF23IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3___New_orig__
itkSLICImageFilterICVF23IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUL3_cast


def itkSLICImageFilterICVF23IUS3_New():
    return itkSLICImageFilterICVF23IUS3.New()

class itkSLICImageFilterICVF23IUS3(itkSLICImageFilterICVF23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF23IUS3

        Create a new object of the class itkSLICImageFilterICVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_swigregister(itkSLICImageFilterICVF23IUS3)
itkSLICImageFilterICVF23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3___New_orig__
itkSLICImageFilterICVF23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_cast


def itkSLICImageFilterICVF24IUL4_New():
    return itkSLICImageFilterICVF24IUL4.New()

class itkSLICImageFilterICVF24IUL4(itkSLICImageFilterICVF24IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF24IUL4

        Create a new object of the class itkSLICImageFilterICVF24IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF24IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF24IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF24IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF24IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_swigregister(itkSLICImageFilterICVF24IUL4)
itkSLICImageFilterICVF24IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4___New_orig__
itkSLICImageFilterICVF24IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUL4_cast


def itkSLICImageFilterICVF24IUS4_New():
    return itkSLICImageFilterICVF24IUS4.New()

class itkSLICImageFilterICVF24IUS4(itkSLICImageFilterICVF24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF24IUS4

        Create a new object of the class itkSLICImageFilterICVF24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_swigregister(itkSLICImageFilterICVF24IUS4)
itkSLICImageFilterICVF24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4___New_orig__
itkSLICImageFilterICVF24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_cast


def itkSLICImageFilterICVF32IUL2_New():
    return itkSLICImageFilterICVF32IUL2.New()

class itkSLICImageFilterICVF32IUL2(itkSLICImageFilterICVF32IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF32IUL2

        Create a new object of the class itkSLICImageFilterICVF32IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF32IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF32IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF32IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF32IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_swigregister(itkSLICImageFilterICVF32IUL2)
itkSLICImageFilterICVF32IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2___New_orig__
itkSLICImageFilterICVF32IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUL2_cast


def itkSLICImageFilterICVF32IUS2_New():
    return itkSLICImageFilterICVF32IUS2.New()

class itkSLICImageFilterICVF32IUS2(itkSLICImageFilterICVF32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF32IUS2

        Create a new object of the class itkSLICImageFilterICVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_swigregister(itkSLICImageFilterICVF32IUS2)
itkSLICImageFilterICVF32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2___New_orig__
itkSLICImageFilterICVF32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_cast


def itkSLICImageFilterICVF33IUL3_New():
    return itkSLICImageFilterICVF33IUL3.New()

class itkSLICImageFilterICVF33IUL3(itkSLICImageFilterICVF33IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF33IUL3

        Create a new object of the class itkSLICImageFilterICVF33IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF33IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF33IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF33IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF33IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_swigregister(itkSLICImageFilterICVF33IUL3)
itkSLICImageFilterICVF33IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3___New_orig__
itkSLICImageFilterICVF33IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUL3_cast


def itkSLICImageFilterICVF33IUS3_New():
    return itkSLICImageFilterICVF33IUS3.New()

class itkSLICImageFilterICVF33IUS3(itkSLICImageFilterICVF33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF33IUS3

        Create a new object of the class itkSLICImageFilterICVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_swigregister(itkSLICImageFilterICVF33IUS3)
itkSLICImageFilterICVF33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3___New_orig__
itkSLICImageFilterICVF33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_cast


def itkSLICImageFilterICVF34IUL4_New():
    return itkSLICImageFilterICVF34IUL4.New()

class itkSLICImageFilterICVF34IUL4(itkSLICImageFilterICVF34IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF34IUL4

        Create a new object of the class itkSLICImageFilterICVF34IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF34IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF34IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF34IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF34IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_swigregister(itkSLICImageFilterICVF34IUL4)
itkSLICImageFilterICVF34IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4___New_orig__
itkSLICImageFilterICVF34IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUL4_cast


def itkSLICImageFilterICVF34IUS4_New():
    return itkSLICImageFilterICVF34IUS4.New()

class itkSLICImageFilterICVF34IUS4(itkSLICImageFilterICVF34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF34IUS4

        Create a new object of the class itkSLICImageFilterICVF34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_swigregister(itkSLICImageFilterICVF34IUS4)
itkSLICImageFilterICVF34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4___New_orig__
itkSLICImageFilterICVF34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_cast


def itkSLICImageFilterICVF42IUL2_New():
    return itkSLICImageFilterICVF42IUL2.New()

class itkSLICImageFilterICVF42IUL2(itkSLICImageFilterICVF42IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF42IUL2

        Create a new object of the class itkSLICImageFilterICVF42IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF42IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF42IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF42IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF42IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_swigregister(itkSLICImageFilterICVF42IUL2)
itkSLICImageFilterICVF42IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2___New_orig__
itkSLICImageFilterICVF42IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUL2_cast


def itkSLICImageFilterICVF42IUS2_New():
    return itkSLICImageFilterICVF42IUS2.New()

class itkSLICImageFilterICVF42IUS2(itkSLICImageFilterICVF42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF42IUS2

        Create a new object of the class itkSLICImageFilterICVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_swigregister(itkSLICImageFilterICVF42IUS2)
itkSLICImageFilterICVF42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2___New_orig__
itkSLICImageFilterICVF42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_cast


def itkSLICImageFilterICVF43IUL3_New():
    return itkSLICImageFilterICVF43IUL3.New()

class itkSLICImageFilterICVF43IUL3(itkSLICImageFilterICVF43IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF43IUL3

        Create a new object of the class itkSLICImageFilterICVF43IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF43IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF43IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF43IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF43IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_swigregister(itkSLICImageFilterICVF43IUL3)
itkSLICImageFilterICVF43IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3___New_orig__
itkSLICImageFilterICVF43IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUL3_cast


def itkSLICImageFilterICVF43IUS3_New():
    return itkSLICImageFilterICVF43IUS3.New()

class itkSLICImageFilterICVF43IUS3(itkSLICImageFilterICVF43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF43IUS3

        Create a new object of the class itkSLICImageFilterICVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_swigregister(itkSLICImageFilterICVF43IUS3)
itkSLICImageFilterICVF43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3___New_orig__
itkSLICImageFilterICVF43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_cast


def itkSLICImageFilterICVF44IUL4_New():
    return itkSLICImageFilterICVF44IUL4.New()

class itkSLICImageFilterICVF44IUL4(itkSLICImageFilterICVF44IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF44IUL4

        Create a new object of the class itkSLICImageFilterICVF44IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF44IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF44IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF44IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF44IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_swigregister(itkSLICImageFilterICVF44IUL4)
itkSLICImageFilterICVF44IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4___New_orig__
itkSLICImageFilterICVF44IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUL4_cast


def itkSLICImageFilterICVF44IUS4_New():
    return itkSLICImageFilterICVF44IUS4.New()

class itkSLICImageFilterICVF44IUS4(itkSLICImageFilterICVF44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF44IUS4

        Create a new object of the class itkSLICImageFilterICVF44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_swigregister(itkSLICImageFilterICVF44IUS4)
itkSLICImageFilterICVF44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4___New_orig__
itkSLICImageFilterICVF44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_cast


def itkSLICImageFilterID2IUL2_New():
    return itkSLICImageFilterID2IUL2.New()

class itkSLICImageFilterID2IUL2(itkSLICImageFilterID2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID2IUL2

        Create a new object of the class itkSLICImageFilterID2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_swigregister(itkSLICImageFilterID2IUL2)
itkSLICImageFilterID2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID2IUL2___New_orig__
itkSLICImageFilterID2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUL2_cast


def itkSLICImageFilterID2IUS2_New():
    return itkSLICImageFilterID2IUS2.New()

class itkSLICImageFilterID2IUS2(itkSLICImageFilterID2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID2IUS2

        Create a new object of the class itkSLICImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_swigregister(itkSLICImageFilterID2IUS2)
itkSLICImageFilterID2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2___New_orig__
itkSLICImageFilterID2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_cast


def itkSLICImageFilterID3IUL3_New():
    return itkSLICImageFilterID3IUL3.New()

class itkSLICImageFilterID3IUL3(itkSLICImageFilterID3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID3IUL3

        Create a new object of the class itkSLICImageFilterID3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_swigregister(itkSLICImageFilterID3IUL3)
itkSLICImageFilterID3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID3IUL3___New_orig__
itkSLICImageFilterID3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUL3_cast


def itkSLICImageFilterID3IUS3_New():
    return itkSLICImageFilterID3IUS3.New()

class itkSLICImageFilterID3IUS3(itkSLICImageFilterID3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID3IUS3

        Create a new object of the class itkSLICImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_swigregister(itkSLICImageFilterID3IUS3)
itkSLICImageFilterID3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3___New_orig__
itkSLICImageFilterID3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_cast


def itkSLICImageFilterID4IUL4_New():
    return itkSLICImageFilterID4IUL4.New()

class itkSLICImageFilterID4IUL4(itkSLICImageFilterID4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID4IUL4

        Create a new object of the class itkSLICImageFilterID4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_swigregister(itkSLICImageFilterID4IUL4)
itkSLICImageFilterID4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID4IUL4___New_orig__
itkSLICImageFilterID4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IUL4_cast


def itkSLICImageFilterID4IUS4_New():
    return itkSLICImageFilterID4IUS4.New()

class itkSLICImageFilterID4IUS4(itkSLICImageFilterID4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID4IUS4

        Create a new object of the class itkSLICImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_swigregister(itkSLICImageFilterID4IUS4)
itkSLICImageFilterID4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID4IUS4___New_orig__
itkSLICImageFilterID4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_cast


def itkSLICImageFilterIF2IUL2_New():
    return itkSLICImageFilterIF2IUL2.New()

class itkSLICImageFilterIF2IUL2(itkSLICImageFilterIF2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUL2

        Create a new object of the class itkSLICImageFilterIF2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_swigregister(itkSLICImageFilterIF2IUL2)
itkSLICImageFilterIF2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2___New_orig__
itkSLICImageFilterIF2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUL2_cast


def itkSLICImageFilterIF2IUS2_New():
    return itkSLICImageFilterIF2IUS2.New()

class itkSLICImageFilterIF2IUS2(itkSLICImageFilterIF2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUS2

        Create a new object of the class itkSLICImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_swigregister(itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__
itkSLICImageFilterIF2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast


def itkSLICImageFilterIF3IUL3_New():
    return itkSLICImageFilterIF3IUL3.New()

class itkSLICImageFilterIF3IUL3(itkSLICImageFilterIF3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUL3

        Create a new object of the class itkSLICImageFilterIF3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_swigregister(itkSLICImageFilterIF3IUL3)
itkSLICImageFilterIF3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3___New_orig__
itkSLICImageFilterIF3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUL3_cast


def itkSLICImageFilterIF3IUS3_New():
    return itkSLICImageFilterIF3IUS3.New()

class itkSLICImageFilterIF3IUS3(itkSLICImageFilterIF3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUS3

        Create a new object of the class itkSLICImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_swigregister(itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__
itkSLICImageFilterIF3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast


def itkSLICImageFilterIF4IUL4_New():
    return itkSLICImageFilterIF4IUL4.New()

class itkSLICImageFilterIF4IUL4(itkSLICImageFilterIF4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF4IUL4

        Create a new object of the class itkSLICImageFilterIF4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_swigregister(itkSLICImageFilterIF4IUL4)
itkSLICImageFilterIF4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4___New_orig__
itkSLICImageFilterIF4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUL4_cast


def itkSLICImageFilterIF4IUS4_New():
    return itkSLICImageFilterIF4IUS4.New()

class itkSLICImageFilterIF4IUS4(itkSLICImageFilterIF4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF4IUS4

        Create a new object of the class itkSLICImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_swigregister(itkSLICImageFilterIF4IUS4)
itkSLICImageFilterIF4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4___New_orig__
itkSLICImageFilterIF4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_cast


def itkSLICImageFilterIRGBUC2IUL2_New():
    return itkSLICImageFilterIRGBUC2IUL2.New()

class itkSLICImageFilterIRGBUC2IUL2(itkSLICImageFilterIRGBUC2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC2IUL2

        Create a new object of the class itkSLICImageFilterIRGBUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_swigregister(itkSLICImageFilterIRGBUC2IUL2)
itkSLICImageFilterIRGBUC2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2___New_orig__
itkSLICImageFilterIRGBUC2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUL2_cast


def itkSLICImageFilterIRGBUC2IUS2_New():
    return itkSLICImageFilterIRGBUC2IUS2.New()

class itkSLICImageFilterIRGBUC2IUS2(itkSLICImageFilterIRGBUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC2IUS2

        Create a new object of the class itkSLICImageFilterIRGBUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_swigregister(itkSLICImageFilterIRGBUC2IUS2)
itkSLICImageFilterIRGBUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2___New_orig__
itkSLICImageFilterIRGBUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_cast


def itkSLICImageFilterIRGBUC3IUL3_New():
    return itkSLICImageFilterIRGBUC3IUL3.New()

class itkSLICImageFilterIRGBUC3IUL3(itkSLICImageFilterIRGBUC3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC3IUL3

        Create a new object of the class itkSLICImageFilterIRGBUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_swigregister(itkSLICImageFilterIRGBUC3IUL3)
itkSLICImageFilterIRGBUC3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3___New_orig__
itkSLICImageFilterIRGBUC3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUL3_cast


def itkSLICImageFilterIRGBUC3IUS3_New():
    return itkSLICImageFilterIRGBUC3IUS3.New()

class itkSLICImageFilterIRGBUC3IUS3(itkSLICImageFilterIRGBUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC3IUS3

        Create a new object of the class itkSLICImageFilterIRGBUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_swigregister(itkSLICImageFilterIRGBUC3IUS3)
itkSLICImageFilterIRGBUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3___New_orig__
itkSLICImageFilterIRGBUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_cast


def itkSLICImageFilterIRGBUC4IUL4_New():
    return itkSLICImageFilterIRGBUC4IUL4.New()

class itkSLICImageFilterIRGBUC4IUL4(itkSLICImageFilterIRGBUC4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC4IUL4

        Create a new object of the class itkSLICImageFilterIRGBUC4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_swigregister(itkSLICImageFilterIRGBUC4IUL4)
itkSLICImageFilterIRGBUC4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4___New_orig__
itkSLICImageFilterIRGBUC4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUL4_cast


def itkSLICImageFilterIRGBUC4IUS4_New():
    return itkSLICImageFilterIRGBUC4IUS4.New()

class itkSLICImageFilterIRGBUC4IUS4(itkSLICImageFilterIRGBUC4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC4IUS4

        Create a new object of the class itkSLICImageFilterIRGBUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_swigregister(itkSLICImageFilterIRGBUC4IUS4)
itkSLICImageFilterIRGBUC4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4___New_orig__
itkSLICImageFilterIRGBUC4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_cast


def itkSLICImageFilterISS2IUL2_New():
    return itkSLICImageFilterISS2IUL2.New()

class itkSLICImageFilterISS2IUL2(itkSLICImageFilterISS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUL2

        Create a new object of the class itkSLICImageFilterISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_swigregister(itkSLICImageFilterISS2IUL2)
itkSLICImageFilterISS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2___New_orig__
itkSLICImageFilterISS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUL2_cast


def itkSLICImageFilterISS2IUS2_New():
    return itkSLICImageFilterISS2IUS2.New()

class itkSLICImageFilterISS2IUS2(itkSLICImageFilterISS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUS2

        Create a new object of the class itkSLICImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_swigregister(itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__
itkSLICImageFilterISS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast


def itkSLICImageFilterISS3IUL3_New():
    return itkSLICImageFilterISS3IUL3.New()

class itkSLICImageFilterISS3IUL3(itkSLICImageFilterISS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUL3

        Create a new object of the class itkSLICImageFilterISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_swigregister(itkSLICImageFilterISS3IUL3)
itkSLICImageFilterISS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3___New_orig__
itkSLICImageFilterISS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUL3_cast


def itkSLICImageFilterISS3IUS3_New():
    return itkSLICImageFilterISS3IUS3.New()

class itkSLICImageFilterISS3IUS3(itkSLICImageFilterISS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUS3

        Create a new object of the class itkSLICImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_swigregister(itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__
itkSLICImageFilterISS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast


def itkSLICImageFilterISS4IUL4_New():
    return itkSLICImageFilterISS4IUL4.New()

class itkSLICImageFilterISS4IUL4(itkSLICImageFilterISS4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS4IUL4

        Create a new object of the class itkSLICImageFilterISS4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_swigregister(itkSLICImageFilterISS4IUL4)
itkSLICImageFilterISS4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4___New_orig__
itkSLICImageFilterISS4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUL4_cast


def itkSLICImageFilterISS4IUS4_New():
    return itkSLICImageFilterISS4IUS4.New()

class itkSLICImageFilterISS4IUS4(itkSLICImageFilterISS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS4IUS4

        Create a new object of the class itkSLICImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_swigregister(itkSLICImageFilterISS4IUS4)
itkSLICImageFilterISS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4___New_orig__
itkSLICImageFilterISS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_cast


def itkSLICImageFilterIUC2IUL2_New():
    return itkSLICImageFilterIUC2IUL2.New()

class itkSLICImageFilterIUC2IUL2(itkSLICImageFilterIUC2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUL2

        Create a new object of the class itkSLICImageFilterIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_swigregister(itkSLICImageFilterIUC2IUL2)
itkSLICImageFilterIUC2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2___New_orig__
itkSLICImageFilterIUC2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUL2_cast


def itkSLICImageFilterIUC2IUS2_New():
    return itkSLICImageFilterIUC2IUS2.New()

class itkSLICImageFilterIUC2IUS2(itkSLICImageFilterIUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUS2

        Create a new object of the class itkSLICImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_swigregister(itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__
itkSLICImageFilterIUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast


def itkSLICImageFilterIUC3IUL3_New():
    return itkSLICImageFilterIUC3IUL3.New()

class itkSLICImageFilterIUC3IUL3(itkSLICImageFilterIUC3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUL3

        Create a new object of the class itkSLICImageFilterIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_swigregister(itkSLICImageFilterIUC3IUL3)
itkSLICImageFilterIUC3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3___New_orig__
itkSLICImageFilterIUC3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUL3_cast


def itkSLICImageFilterIUC3IUS3_New():
    return itkSLICImageFilterIUC3IUS3.New()

class itkSLICImageFilterIUC3IUS3(itkSLICImageFilterIUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUS3

        Create a new object of the class itkSLICImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_swigregister(itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__
itkSLICImageFilterIUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast


def itkSLICImageFilterIUC4IUL4_New():
    return itkSLICImageFilterIUC4IUL4.New()

class itkSLICImageFilterIUC4IUL4(itkSLICImageFilterIUC4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC4IUL4

        Create a new object of the class itkSLICImageFilterIUC4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_swigregister(itkSLICImageFilterIUC4IUL4)
itkSLICImageFilterIUC4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4___New_orig__
itkSLICImageFilterIUC4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUL4_cast


def itkSLICImageFilterIUC4IUS4_New():
    return itkSLICImageFilterIUC4IUS4.New()

class itkSLICImageFilterIUC4IUS4(itkSLICImageFilterIUC4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC4IUS4

        Create a new object of the class itkSLICImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_swigregister(itkSLICImageFilterIUC4IUS4)
itkSLICImageFilterIUC4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4___New_orig__
itkSLICImageFilterIUC4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_cast


def itkSLICImageFilterIUS2IUL2_New():
    return itkSLICImageFilterIUS2IUL2.New()

class itkSLICImageFilterIUS2IUL2(itkSLICImageFilterIUS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUL2

        Create a new object of the class itkSLICImageFilterIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_swigregister(itkSLICImageFilterIUS2IUL2)
itkSLICImageFilterIUS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2___New_orig__
itkSLICImageFilterIUS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUL2_cast


def itkSLICImageFilterIUS2IUS2_New():
    return itkSLICImageFilterIUS2IUS2.New()

class itkSLICImageFilterIUS2IUS2(itkSLICImageFilterIUS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUS2

        Create a new object of the class itkSLICImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_swigregister(itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__
itkSLICImageFilterIUS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast


def itkSLICImageFilterIUS3IUL3_New():
    return itkSLICImageFilterIUS3IUL3.New()

class itkSLICImageFilterIUS3IUL3(itkSLICImageFilterIUS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUL3

        Create a new object of the class itkSLICImageFilterIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_swigregister(itkSLICImageFilterIUS3IUL3)
itkSLICImageFilterIUS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3___New_orig__
itkSLICImageFilterIUS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUL3_cast


def itkSLICImageFilterIUS3IUS3_New():
    return itkSLICImageFilterIUS3IUS3.New()

class itkSLICImageFilterIUS3IUS3(itkSLICImageFilterIUS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUS3

        Create a new object of the class itkSLICImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_swigregister(itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__
itkSLICImageFilterIUS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast


def itkSLICImageFilterIUS4IUL4_New():
    return itkSLICImageFilterIUS4IUL4.New()

class itkSLICImageFilterIUS4IUL4(itkSLICImageFilterIUS4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS4IUL4

        Create a new object of the class itkSLICImageFilterIUS4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_swigregister(itkSLICImageFilterIUS4IUL4)
itkSLICImageFilterIUS4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4___New_orig__
itkSLICImageFilterIUS4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUL4_cast


def itkSLICImageFilterIUS4IUS4_New():
    return itkSLICImageFilterIUS4IUS4.New()

class itkSLICImageFilterIUS4IUS4(itkSLICImageFilterIUS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS4IUS4

        Create a new object of the class itkSLICImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_swigregister(itkSLICImageFilterIUS4IUS4)
itkSLICImageFilterIUS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4___New_orig__
itkSLICImageFilterIUS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_cast


def itkSLICImageFilterIVD22IUL2_New():
    return itkSLICImageFilterIVD22IUL2.New()

class itkSLICImageFilterIVD22IUL2(itkSLICImageFilterIVD22IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD22IUL2

        Create a new object of the class itkSLICImageFilterIVD22IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD22IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD22IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD22IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD22IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_swigregister(itkSLICImageFilterIVD22IUL2)
itkSLICImageFilterIVD22IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2___New_orig__
itkSLICImageFilterIVD22IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUL2_cast


def itkSLICImageFilterIVD22IUS2_New():
    return itkSLICImageFilterIVD22IUS2.New()

class itkSLICImageFilterIVD22IUS2(itkSLICImageFilterIVD22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD22IUS2

        Create a new object of the class itkSLICImageFilterIVD22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_swigregister(itkSLICImageFilterIVD22IUS2)
itkSLICImageFilterIVD22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2___New_orig__
itkSLICImageFilterIVD22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_cast


def itkSLICImageFilterIVD23IUL3_New():
    return itkSLICImageFilterIVD23IUL3.New()

class itkSLICImageFilterIVD23IUL3(itkSLICImageFilterIVD23IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD23IUL3

        Create a new object of the class itkSLICImageFilterIVD23IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD23IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD23IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD23IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD23IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_swigregister(itkSLICImageFilterIVD23IUL3)
itkSLICImageFilterIVD23IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3___New_orig__
itkSLICImageFilterIVD23IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUL3_cast


def itkSLICImageFilterIVD23IUS3_New():
    return itkSLICImageFilterIVD23IUS3.New()

class itkSLICImageFilterIVD23IUS3(itkSLICImageFilterIVD23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD23IUS3

        Create a new object of the class itkSLICImageFilterIVD23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_swigregister(itkSLICImageFilterIVD23IUS3)
itkSLICImageFilterIVD23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3___New_orig__
itkSLICImageFilterIVD23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_cast


def itkSLICImageFilterIVD24IUL4_New():
    return itkSLICImageFilterIVD24IUL4.New()

class itkSLICImageFilterIVD24IUL4(itkSLICImageFilterIVD24IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD24IUL4

        Create a new object of the class itkSLICImageFilterIVD24IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD24IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD24IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD24IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD24IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_swigregister(itkSLICImageFilterIVD24IUL4)
itkSLICImageFilterIVD24IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4___New_orig__
itkSLICImageFilterIVD24IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUL4_cast


def itkSLICImageFilterIVD24IUS4_New():
    return itkSLICImageFilterIVD24IUS4.New()

class itkSLICImageFilterIVD24IUS4(itkSLICImageFilterIVD24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD24IUS4

        Create a new object of the class itkSLICImageFilterIVD24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_swigregister(itkSLICImageFilterIVD24IUS4)
itkSLICImageFilterIVD24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4___New_orig__
itkSLICImageFilterIVD24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_cast


def itkSLICImageFilterIVD32IUL2_New():
    return itkSLICImageFilterIVD32IUL2.New()

class itkSLICImageFilterIVD32IUL2(itkSLICImageFilterIVD32IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD32IUL2

        Create a new object of the class itkSLICImageFilterIVD32IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD32IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD32IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD32IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD32IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_swigregister(itkSLICImageFilterIVD32IUL2)
itkSLICImageFilterIVD32IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2___New_orig__
itkSLICImageFilterIVD32IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUL2_cast


def itkSLICImageFilterIVD32IUS2_New():
    return itkSLICImageFilterIVD32IUS2.New()

class itkSLICImageFilterIVD32IUS2(itkSLICImageFilterIVD32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD32IUS2

        Create a new object of the class itkSLICImageFilterIVD32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_swigregister(itkSLICImageFilterIVD32IUS2)
itkSLICImageFilterIVD32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2___New_orig__
itkSLICImageFilterIVD32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_cast


def itkSLICImageFilterIVD33IUL3_New():
    return itkSLICImageFilterIVD33IUL3.New()

class itkSLICImageFilterIVD33IUL3(itkSLICImageFilterIVD33IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD33IUL3

        Create a new object of the class itkSLICImageFilterIVD33IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD33IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD33IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD33IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD33IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_swigregister(itkSLICImageFilterIVD33IUL3)
itkSLICImageFilterIVD33IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3___New_orig__
itkSLICImageFilterIVD33IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUL3_cast


def itkSLICImageFilterIVD33IUS3_New():
    return itkSLICImageFilterIVD33IUS3.New()

class itkSLICImageFilterIVD33IUS3(itkSLICImageFilterIVD33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD33IUS3

        Create a new object of the class itkSLICImageFilterIVD33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_swigregister(itkSLICImageFilterIVD33IUS3)
itkSLICImageFilterIVD33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3___New_orig__
itkSLICImageFilterIVD33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_cast


def itkSLICImageFilterIVD34IUL4_New():
    return itkSLICImageFilterIVD34IUL4.New()

class itkSLICImageFilterIVD34IUL4(itkSLICImageFilterIVD34IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD34IUL4

        Create a new object of the class itkSLICImageFilterIVD34IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD34IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD34IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD34IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD34IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_swigregister(itkSLICImageFilterIVD34IUL4)
itkSLICImageFilterIVD34IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4___New_orig__
itkSLICImageFilterIVD34IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUL4_cast


def itkSLICImageFilterIVD34IUS4_New():
    return itkSLICImageFilterIVD34IUS4.New()

class itkSLICImageFilterIVD34IUS4(itkSLICImageFilterIVD34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD34IUS4

        Create a new object of the class itkSLICImageFilterIVD34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_swigregister(itkSLICImageFilterIVD34IUS4)
itkSLICImageFilterIVD34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4___New_orig__
itkSLICImageFilterIVD34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_cast


def itkSLICImageFilterIVD42IUL2_New():
    return itkSLICImageFilterIVD42IUL2.New()

class itkSLICImageFilterIVD42IUL2(itkSLICImageFilterIVD42IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD42IUL2

        Create a new object of the class itkSLICImageFilterIVD42IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD42IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD42IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD42IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD42IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_swigregister(itkSLICImageFilterIVD42IUL2)
itkSLICImageFilterIVD42IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2___New_orig__
itkSLICImageFilterIVD42IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUL2_cast


def itkSLICImageFilterIVD42IUS2_New():
    return itkSLICImageFilterIVD42IUS2.New()

class itkSLICImageFilterIVD42IUS2(itkSLICImageFilterIVD42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD42IUS2

        Create a new object of the class itkSLICImageFilterIVD42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_swigregister(itkSLICImageFilterIVD42IUS2)
itkSLICImageFilterIVD42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2___New_orig__
itkSLICImageFilterIVD42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_cast


def itkSLICImageFilterIVD43IUL3_New():
    return itkSLICImageFilterIVD43IUL3.New()

class itkSLICImageFilterIVD43IUL3(itkSLICImageFilterIVD43IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD43IUL3

        Create a new object of the class itkSLICImageFilterIVD43IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD43IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD43IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD43IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD43IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_swigregister(itkSLICImageFilterIVD43IUL3)
itkSLICImageFilterIVD43IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3___New_orig__
itkSLICImageFilterIVD43IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUL3_cast


def itkSLICImageFilterIVD43IUS3_New():
    return itkSLICImageFilterIVD43IUS3.New()

class itkSLICImageFilterIVD43IUS3(itkSLICImageFilterIVD43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD43IUS3

        Create a new object of the class itkSLICImageFilterIVD43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_swigregister(itkSLICImageFilterIVD43IUS3)
itkSLICImageFilterIVD43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3___New_orig__
itkSLICImageFilterIVD43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_cast


def itkSLICImageFilterIVD44IUL4_New():
    return itkSLICImageFilterIVD44IUL4.New()

class itkSLICImageFilterIVD44IUL4(itkSLICImageFilterIVD44IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD44IUL4

        Create a new object of the class itkSLICImageFilterIVD44IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD44IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD44IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD44IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD44IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_swigregister(itkSLICImageFilterIVD44IUL4)
itkSLICImageFilterIVD44IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4___New_orig__
itkSLICImageFilterIVD44IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUL4_cast


def itkSLICImageFilterIVD44IUS4_New():
    return itkSLICImageFilterIVD44IUS4.New()

class itkSLICImageFilterIVD44IUS4(itkSLICImageFilterIVD44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD44IUS4

        Create a new object of the class itkSLICImageFilterIVD44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_swigregister(itkSLICImageFilterIVD44IUS4)
itkSLICImageFilterIVD44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4___New_orig__
itkSLICImageFilterIVD44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_cast


def itkSLICImageFilterIVF22IUL2_New():
    return itkSLICImageFilterIVF22IUL2.New()

class itkSLICImageFilterIVF22IUL2(itkSLICImageFilterIVF22IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF22IUL2

        Create a new object of the class itkSLICImageFilterIVF22IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF22IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF22IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF22IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF22IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_swigregister(itkSLICImageFilterIVF22IUL2)
itkSLICImageFilterIVF22IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2___New_orig__
itkSLICImageFilterIVF22IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUL2_cast


def itkSLICImageFilterIVF22IUS2_New():
    return itkSLICImageFilterIVF22IUS2.New()

class itkSLICImageFilterIVF22IUS2(itkSLICImageFilterIVF22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF22IUS2

        Create a new object of the class itkSLICImageFilterIVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_swigregister(itkSLICImageFilterIVF22IUS2)
itkSLICImageFilterIVF22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2___New_orig__
itkSLICImageFilterIVF22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_cast


def itkSLICImageFilterIVF23IUL3_New():
    return itkSLICImageFilterIVF23IUL3.New()

class itkSLICImageFilterIVF23IUL3(itkSLICImageFilterIVF23IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF23IUL3

        Create a new object of the class itkSLICImageFilterIVF23IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF23IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF23IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF23IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF23IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_swigregister(itkSLICImageFilterIVF23IUL3)
itkSLICImageFilterIVF23IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3___New_orig__
itkSLICImageFilterIVF23IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUL3_cast


def itkSLICImageFilterIVF23IUS3_New():
    return itkSLICImageFilterIVF23IUS3.New()

class itkSLICImageFilterIVF23IUS3(itkSLICImageFilterIVF23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF23IUS3

        Create a new object of the class itkSLICImageFilterIVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_swigregister(itkSLICImageFilterIVF23IUS3)
itkSLICImageFilterIVF23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3___New_orig__
itkSLICImageFilterIVF23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_cast


def itkSLICImageFilterIVF24IUL4_New():
    return itkSLICImageFilterIVF24IUL4.New()

class itkSLICImageFilterIVF24IUL4(itkSLICImageFilterIVF24IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF24IUL4

        Create a new object of the class itkSLICImageFilterIVF24IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF24IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF24IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF24IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF24IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_swigregister(itkSLICImageFilterIVF24IUL4)
itkSLICImageFilterIVF24IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4___New_orig__
itkSLICImageFilterIVF24IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUL4_cast


def itkSLICImageFilterIVF24IUS4_New():
    return itkSLICImageFilterIVF24IUS4.New()

class itkSLICImageFilterIVF24IUS4(itkSLICImageFilterIVF24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF24IUS4

        Create a new object of the class itkSLICImageFilterIVF24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_swigregister(itkSLICImageFilterIVF24IUS4)
itkSLICImageFilterIVF24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4___New_orig__
itkSLICImageFilterIVF24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_cast


def itkSLICImageFilterIVF32IUL2_New():
    return itkSLICImageFilterIVF32IUL2.New()

class itkSLICImageFilterIVF32IUL2(itkSLICImageFilterIVF32IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF32IUL2

        Create a new object of the class itkSLICImageFilterIVF32IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF32IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF32IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF32IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF32IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_swigregister(itkSLICImageFilterIVF32IUL2)
itkSLICImageFilterIVF32IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2___New_orig__
itkSLICImageFilterIVF32IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUL2_cast


def itkSLICImageFilterIVF32IUS2_New():
    return itkSLICImageFilterIVF32IUS2.New()

class itkSLICImageFilterIVF32IUS2(itkSLICImageFilterIVF32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF32IUS2

        Create a new object of the class itkSLICImageFilterIVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_swigregister(itkSLICImageFilterIVF32IUS2)
itkSLICImageFilterIVF32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2___New_orig__
itkSLICImageFilterIVF32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_cast


def itkSLICImageFilterIVF33IUL3_New():
    return itkSLICImageFilterIVF33IUL3.New()

class itkSLICImageFilterIVF33IUL3(itkSLICImageFilterIVF33IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF33IUL3

        Create a new object of the class itkSLICImageFilterIVF33IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF33IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF33IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF33IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF33IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_swigregister(itkSLICImageFilterIVF33IUL3)
itkSLICImageFilterIVF33IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3___New_orig__
itkSLICImageFilterIVF33IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUL3_cast


def itkSLICImageFilterIVF33IUS3_New():
    return itkSLICImageFilterIVF33IUS3.New()

class itkSLICImageFilterIVF33IUS3(itkSLICImageFilterIVF33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF33IUS3

        Create a new object of the class itkSLICImageFilterIVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_swigregister(itkSLICImageFilterIVF33IUS3)
itkSLICImageFilterIVF33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3___New_orig__
itkSLICImageFilterIVF33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_cast


def itkSLICImageFilterIVF34IUL4_New():
    return itkSLICImageFilterIVF34IUL4.New()

class itkSLICImageFilterIVF34IUL4(itkSLICImageFilterIVF34IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF34IUL4

        Create a new object of the class itkSLICImageFilterIVF34IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF34IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF34IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF34IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF34IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_swigregister(itkSLICImageFilterIVF34IUL4)
itkSLICImageFilterIVF34IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4___New_orig__
itkSLICImageFilterIVF34IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUL4_cast


def itkSLICImageFilterIVF34IUS4_New():
    return itkSLICImageFilterIVF34IUS4.New()

class itkSLICImageFilterIVF34IUS4(itkSLICImageFilterIVF34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF34IUS4

        Create a new object of the class itkSLICImageFilterIVF34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_swigregister(itkSLICImageFilterIVF34IUS4)
itkSLICImageFilterIVF34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4___New_orig__
itkSLICImageFilterIVF34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_cast


def itkSLICImageFilterIVF42IUL2_New():
    return itkSLICImageFilterIVF42IUL2.New()

class itkSLICImageFilterIVF42IUL2(itkSLICImageFilterIVF42IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF42IUL2

        Create a new object of the class itkSLICImageFilterIVF42IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF42IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF42IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF42IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF42IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_swigregister(itkSLICImageFilterIVF42IUL2)
itkSLICImageFilterIVF42IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2___New_orig__
itkSLICImageFilterIVF42IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUL2_cast


def itkSLICImageFilterIVF42IUS2_New():
    return itkSLICImageFilterIVF42IUS2.New()

class itkSLICImageFilterIVF42IUS2(itkSLICImageFilterIVF42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF42IUS2

        Create a new object of the class itkSLICImageFilterIVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_swigregister(itkSLICImageFilterIVF42IUS2)
itkSLICImageFilterIVF42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2___New_orig__
itkSLICImageFilterIVF42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_cast


def itkSLICImageFilterIVF43IUL3_New():
    return itkSLICImageFilterIVF43IUL3.New()

class itkSLICImageFilterIVF43IUL3(itkSLICImageFilterIVF43IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF43IUL3

        Create a new object of the class itkSLICImageFilterIVF43IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF43IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF43IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF43IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF43IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_swigregister(itkSLICImageFilterIVF43IUL3)
itkSLICImageFilterIVF43IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3___New_orig__
itkSLICImageFilterIVF43IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUL3_cast


def itkSLICImageFilterIVF43IUS3_New():
    return itkSLICImageFilterIVF43IUS3.New()

class itkSLICImageFilterIVF43IUS3(itkSLICImageFilterIVF43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF43IUS3

        Create a new object of the class itkSLICImageFilterIVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_swigregister(itkSLICImageFilterIVF43IUS3)
itkSLICImageFilterIVF43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3___New_orig__
itkSLICImageFilterIVF43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_cast


def itkSLICImageFilterIVF44IUL4_New():
    return itkSLICImageFilterIVF44IUL4.New()

class itkSLICImageFilterIVF44IUL4(itkSLICImageFilterIVF44IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF44IUL4

        Create a new object of the class itkSLICImageFilterIVF44IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF44IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF44IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF44IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF44IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_swigregister(itkSLICImageFilterIVF44IUL4)
itkSLICImageFilterIVF44IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4___New_orig__
itkSLICImageFilterIVF44IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUL4_cast


def itkSLICImageFilterIVF44IUS4_New():
    return itkSLICImageFilterIVF44IUS4.New()

class itkSLICImageFilterIVF44IUS4(itkSLICImageFilterIVF44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF44IUS4

        Create a new object of the class itkSLICImageFilterIVF44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_swigregister(itkSLICImageFilterIVF44IUS4)
itkSLICImageFilterIVF44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4___New_orig__
itkSLICImageFilterIVF44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_cast


def itkSLICImageFilterVID2IUL2_New():
    return itkSLICImageFilterVID2IUL2.New()

class itkSLICImageFilterVID2IUL2(itkSLICImageFilterVID2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID2IUL2

        Create a new object of the class itkSLICImageFilterVID2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_swigregister(itkSLICImageFilterVID2IUL2)
itkSLICImageFilterVID2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2___New_orig__
itkSLICImageFilterVID2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUL2_cast


def itkSLICImageFilterVID2IUS2_New():
    return itkSLICImageFilterVID2IUS2.New()

class itkSLICImageFilterVID2IUS2(itkSLICImageFilterVID2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID2IUS2

        Create a new object of the class itkSLICImageFilterVID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_swigregister(itkSLICImageFilterVID2IUS2)
itkSLICImageFilterVID2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2___New_orig__
itkSLICImageFilterVID2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_cast


def itkSLICImageFilterVID3IUL3_New():
    return itkSLICImageFilterVID3IUL3.New()

class itkSLICImageFilterVID3IUL3(itkSLICImageFilterVID3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID3IUL3

        Create a new object of the class itkSLICImageFilterVID3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_swigregister(itkSLICImageFilterVID3IUL3)
itkSLICImageFilterVID3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3___New_orig__
itkSLICImageFilterVID3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUL3_cast


def itkSLICImageFilterVID3IUS3_New():
    return itkSLICImageFilterVID3IUS3.New()

class itkSLICImageFilterVID3IUS3(itkSLICImageFilterVID3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID3IUS3

        Create a new object of the class itkSLICImageFilterVID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_swigregister(itkSLICImageFilterVID3IUS3)
itkSLICImageFilterVID3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3___New_orig__
itkSLICImageFilterVID3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_cast


def itkSLICImageFilterVID4IUL4_New():
    return itkSLICImageFilterVID4IUL4.New()

class itkSLICImageFilterVID4IUL4(itkSLICImageFilterVID4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID4IUL4

        Create a new object of the class itkSLICImageFilterVID4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_swigregister(itkSLICImageFilterVID4IUL4)
itkSLICImageFilterVID4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4___New_orig__
itkSLICImageFilterVID4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUL4_cast


def itkSLICImageFilterVID4IUS4_New():
    return itkSLICImageFilterVID4IUS4.New()

class itkSLICImageFilterVID4IUS4(itkSLICImageFilterVID4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID4IUS4

        Create a new object of the class itkSLICImageFilterVID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_swigregister(itkSLICImageFilterVID4IUS4)
itkSLICImageFilterVID4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4___New_orig__
itkSLICImageFilterVID4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_cast


def itkSLICImageFilterVIF2IUL2_New():
    return itkSLICImageFilterVIF2IUL2.New()

class itkSLICImageFilterVIF2IUL2(itkSLICImageFilterVIF2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUL2

        Create a new object of the class itkSLICImageFilterVIF2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_swigregister(itkSLICImageFilterVIF2IUL2)
itkSLICImageFilterVIF2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2___New_orig__
itkSLICImageFilterVIF2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUL2_cast


def itkSLICImageFilterVIF2IUS2_New():
    return itkSLICImageFilterVIF2IUS2.New()

class itkSLICImageFilterVIF2IUS2(itkSLICImageFilterVIF2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUS2

        Create a new object of the class itkSLICImageFilterVIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_swigregister(itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__
itkSLICImageFilterVIF2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast


def itkSLICImageFilterVIF3IUL3_New():
    return itkSLICImageFilterVIF3IUL3.New()

class itkSLICImageFilterVIF3IUL3(itkSLICImageFilterVIF3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUL3

        Create a new object of the class itkSLICImageFilterVIF3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_swigregister(itkSLICImageFilterVIF3IUL3)
itkSLICImageFilterVIF3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3___New_orig__
itkSLICImageFilterVIF3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUL3_cast


def itkSLICImageFilterVIF3IUS3_New():
    return itkSLICImageFilterVIF3IUS3.New()

class itkSLICImageFilterVIF3IUS3(itkSLICImageFilterVIF3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUS3

        Create a new object of the class itkSLICImageFilterVIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_swigregister(itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__
itkSLICImageFilterVIF3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast


def itkSLICImageFilterVIF4IUL4_New():
    return itkSLICImageFilterVIF4IUL4.New()

class itkSLICImageFilterVIF4IUL4(itkSLICImageFilterVIF4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF4IUL4

        Create a new object of the class itkSLICImageFilterVIF4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_swigregister(itkSLICImageFilterVIF4IUL4)
itkSLICImageFilterVIF4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4___New_orig__
itkSLICImageFilterVIF4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUL4_cast


def itkSLICImageFilterVIF4IUS4_New():
    return itkSLICImageFilterVIF4IUS4.New()

class itkSLICImageFilterVIF4IUS4(itkSLICImageFilterVIF4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF4IUS4

        Create a new object of the class itkSLICImageFilterVIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_swigregister(itkSLICImageFilterVIF4IUS4)
itkSLICImageFilterVIF4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4___New_orig__
itkSLICImageFilterVIF4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_cast


def itkSLICImageFilterVISS2IUL2_New():
    return itkSLICImageFilterVISS2IUL2.New()

class itkSLICImageFilterVISS2IUL2(itkSLICImageFilterVISS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUL2

        Create a new object of the class itkSLICImageFilterVISS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_swigregister(itkSLICImageFilterVISS2IUL2)
itkSLICImageFilterVISS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2___New_orig__
itkSLICImageFilterVISS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUL2_cast


def itkSLICImageFilterVISS2IUS2_New():
    return itkSLICImageFilterVISS2IUS2.New()

class itkSLICImageFilterVISS2IUS2(itkSLICImageFilterVISS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUS2

        Create a new object of the class itkSLICImageFilterVISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_swigregister(itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__
itkSLICImageFilterVISS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast


def itkSLICImageFilterVISS3IUL3_New():
    return itkSLICImageFilterVISS3IUL3.New()

class itkSLICImageFilterVISS3IUL3(itkSLICImageFilterVISS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUL3

        Create a new object of the class itkSLICImageFilterVISS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_swigregister(itkSLICImageFilterVISS3IUL3)
itkSLICImageFilterVISS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3___New_orig__
itkSLICImageFilterVISS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUL3_cast


def itkSLICImageFilterVISS3IUS3_New():
    return itkSLICImageFilterVISS3IUS3.New()

class itkSLICImageFilterVISS3IUS3(itkSLICImageFilterVISS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUS3

        Create a new object of the class itkSLICImageFilterVISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_swigregister(itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__
itkSLICImageFilterVISS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast


def itkSLICImageFilterVISS4IUL4_New():
    return itkSLICImageFilterVISS4IUL4.New()

class itkSLICImageFilterVISS4IUL4(itkSLICImageFilterVISS4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS4IUL4

        Create a new object of the class itkSLICImageFilterVISS4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_swigregister(itkSLICImageFilterVISS4IUL4)
itkSLICImageFilterVISS4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4___New_orig__
itkSLICImageFilterVISS4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUL4_cast


def itkSLICImageFilterVISS4IUS4_New():
    return itkSLICImageFilterVISS4IUS4.New()

class itkSLICImageFilterVISS4IUS4(itkSLICImageFilterVISS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS4IUS4

        Create a new object of the class itkSLICImageFilterVISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_swigregister(itkSLICImageFilterVISS4IUS4)
itkSLICImageFilterVISS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4___New_orig__
itkSLICImageFilterVISS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_cast


def itkSLICImageFilterVIUC2IUL2_New():
    return itkSLICImageFilterVIUC2IUL2.New()

class itkSLICImageFilterVIUC2IUL2(itkSLICImageFilterVIUC2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUL2

        Create a new object of the class itkSLICImageFilterVIUC2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_swigregister(itkSLICImageFilterVIUC2IUL2)
itkSLICImageFilterVIUC2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2___New_orig__
itkSLICImageFilterVIUC2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUL2_cast


def itkSLICImageFilterVIUC2IUS2_New():
    return itkSLICImageFilterVIUC2IUS2.New()

class itkSLICImageFilterVIUC2IUS2(itkSLICImageFilterVIUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUS2

        Create a new object of the class itkSLICImageFilterVIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_swigregister(itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__
itkSLICImageFilterVIUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast


def itkSLICImageFilterVIUC3IUL3_New():
    return itkSLICImageFilterVIUC3IUL3.New()

class itkSLICImageFilterVIUC3IUL3(itkSLICImageFilterVIUC3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUL3

        Create a new object of the class itkSLICImageFilterVIUC3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_swigregister(itkSLICImageFilterVIUC3IUL3)
itkSLICImageFilterVIUC3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3___New_orig__
itkSLICImageFilterVIUC3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUL3_cast


def itkSLICImageFilterVIUC3IUS3_New():
    return itkSLICImageFilterVIUC3IUS3.New()

class itkSLICImageFilterVIUC3IUS3(itkSLICImageFilterVIUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUS3

        Create a new object of the class itkSLICImageFilterVIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_swigregister(itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__
itkSLICImageFilterVIUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast


def itkSLICImageFilterVIUC4IUL4_New():
    return itkSLICImageFilterVIUC4IUL4.New()

class itkSLICImageFilterVIUC4IUL4(itkSLICImageFilterVIUC4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC4IUL4

        Create a new object of the class itkSLICImageFilterVIUC4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_swigregister(itkSLICImageFilterVIUC4IUL4)
itkSLICImageFilterVIUC4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4___New_orig__
itkSLICImageFilterVIUC4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUL4_cast


def itkSLICImageFilterVIUC4IUS4_New():
    return itkSLICImageFilterVIUC4IUS4.New()

class itkSLICImageFilterVIUC4IUS4(itkSLICImageFilterVIUC4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC4IUS4

        Create a new object of the class itkSLICImageFilterVIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_swigregister(itkSLICImageFilterVIUC4IUS4)
itkSLICImageFilterVIUC4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4___New_orig__
itkSLICImageFilterVIUC4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_cast


def itkSLICImageFilterVIUS2IUL2_New():
    return itkSLICImageFilterVIUS2IUL2.New()

class itkSLICImageFilterVIUS2IUL2(itkSLICImageFilterVIUS2IUL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUL2

        Create a new object of the class itkSLICImageFilterVIUS2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS2IUL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS2IUL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_swigregister(itkSLICImageFilterVIUS2IUL2)
itkSLICImageFilterVIUS2IUL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2___New_orig__
itkSLICImageFilterVIUS2IUL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUL2_cast


def itkSLICImageFilterVIUS2IUS2_New():
    return itkSLICImageFilterVIUS2IUS2.New()

class itkSLICImageFilterVIUS2IUS2(itkSLICImageFilterVIUS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUS2

        Create a new object of the class itkSLICImageFilterVIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_swigregister(itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__
itkSLICImageFilterVIUS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast


def itkSLICImageFilterVIUS3IUL3_New():
    return itkSLICImageFilterVIUS3IUL3.New()

class itkSLICImageFilterVIUS3IUL3(itkSLICImageFilterVIUS3IUL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUL3

        Create a new object of the class itkSLICImageFilterVIUS3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS3IUL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS3IUL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_swigregister(itkSLICImageFilterVIUS3IUL3)
itkSLICImageFilterVIUS3IUL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3___New_orig__
itkSLICImageFilterVIUS3IUL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUL3_cast


def itkSLICImageFilterVIUS3IUS3_New():
    return itkSLICImageFilterVIUS3IUS3.New()

class itkSLICImageFilterVIUS3IUS3(itkSLICImageFilterVIUS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUS3

        Create a new object of the class itkSLICImageFilterVIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_swigregister(itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__
itkSLICImageFilterVIUS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast


def itkSLICImageFilterVIUS4IUL4_New():
    return itkSLICImageFilterVIUS4IUL4.New()

class itkSLICImageFilterVIUS4IUL4(itkSLICImageFilterVIUS4IUL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IUL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS4IUL4

        Create a new object of the class itkSLICImageFilterVIUS4IUL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS4IUL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS4IUL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS4IUL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS4IUL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_swigregister(itkSLICImageFilterVIUS4IUL4)
itkSLICImageFilterVIUS4IUL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4___New_orig__
itkSLICImageFilterVIUS4IUL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUL4_cast


def itkSLICImageFilterVIUS4IUS4_New():
    return itkSLICImageFilterVIUS4IUS4.New()

class itkSLICImageFilterVIUS4IUS4(itkSLICImageFilterVIUS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS4IUS4

        Create a new object of the class itkSLICImageFilterVIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_swigregister(itkSLICImageFilterVIUS4IUS4)
itkSLICImageFilterVIUS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4___New_orig__
itkSLICImageFilterVIUS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def image_to_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKSuperPixel.ImageToImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    image_to_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_image_filter.__doc__ += "\n"
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )

from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def slic_image_filter(*args, **kwargs):
    """Procedural interface for SLICImageFilter"""
    import itk

    instance = itk.SLICImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def slic_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKSuperPixel.SLICImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    slic_image_filter.__doc__ = filter_object.__doc__
    slic_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    slic_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        slic_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        slic_image_filter.__doc__ += "\n"
        slic_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        slic_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




