# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegionGrowingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVectorConfidenceConnectedImageFilterPython
else:
    import _itkVectorConfidenceConnectedImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVectorConfidenceConnectedImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVectorConfidenceConnectedImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkIndexPython
import itk.itkSizePython
import itk.itkOffsetPython
import itk.vnl_matrixPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkFixedArrayPython
import itk.itkCovariantVectorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkVectorConfidenceConnectedImageFilterICVF22ISS2_New():
    return itkVectorConfidenceConnectedImageFilterICVF22ISS2.New()

class itkVectorConfidenceConnectedImageFilterICVF22ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF22ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF22ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF22ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF22ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF22ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF22ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF22ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_swigregister(itkVectorConfidenceConnectedImageFilterICVF22ISS2)
itkVectorConfidenceConnectedImageFilterICVF22ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF22ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22ISS2_cast


def itkVectorConfidenceConnectedImageFilterICVF22IUC2_New():
    return itkVectorConfidenceConnectedImageFilterICVF22IUC2.New()

class itkVectorConfidenceConnectedImageFilterICVF22IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF22IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF22IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF22IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF22IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF22IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF22IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF22IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_swigregister(itkVectorConfidenceConnectedImageFilterICVF22IUC2)
itkVectorConfidenceConnectedImageFilterICVF22IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF22IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUC2_cast


def itkVectorConfidenceConnectedImageFilterICVF22IUS2_New():
    return itkVectorConfidenceConnectedImageFilterICVF22IUS2.New()

class itkVectorConfidenceConnectedImageFilterICVF22IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF22IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF22IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF22IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF22IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_swigregister(itkVectorConfidenceConnectedImageFilterICVF22IUS2)
itkVectorConfidenceConnectedImageFilterICVF22IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF22IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF22IUS2_cast


def itkVectorConfidenceConnectedImageFilterICVF23ISS3_New():
    return itkVectorConfidenceConnectedImageFilterICVF23ISS3.New()

class itkVectorConfidenceConnectedImageFilterICVF23ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF23ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF23ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF23ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF23ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF23ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF23ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF23ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_swigregister(itkVectorConfidenceConnectedImageFilterICVF23ISS3)
itkVectorConfidenceConnectedImageFilterICVF23ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF23ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23ISS3_cast


def itkVectorConfidenceConnectedImageFilterICVF23IUC3_New():
    return itkVectorConfidenceConnectedImageFilterICVF23IUC3.New()

class itkVectorConfidenceConnectedImageFilterICVF23IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF23IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF23IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF23IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF23IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF23IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF23IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF23IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_swigregister(itkVectorConfidenceConnectedImageFilterICVF23IUC3)
itkVectorConfidenceConnectedImageFilterICVF23IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF23IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUC3_cast


def itkVectorConfidenceConnectedImageFilterICVF23IUS3_New():
    return itkVectorConfidenceConnectedImageFilterICVF23IUS3.New()

class itkVectorConfidenceConnectedImageFilterICVF23IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF23IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF23IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF23IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF23IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_swigregister(itkVectorConfidenceConnectedImageFilterICVF23IUS3)
itkVectorConfidenceConnectedImageFilterICVF23IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF23IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF23IUS3_cast


def itkVectorConfidenceConnectedImageFilterICVF24ISS4_New():
    return itkVectorConfidenceConnectedImageFilterICVF24ISS4.New()

class itkVectorConfidenceConnectedImageFilterICVF24ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF24ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF24ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF24ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF24ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF24ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF24ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF24ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF24ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_swigregister(itkVectorConfidenceConnectedImageFilterICVF24ISS4)
itkVectorConfidenceConnectedImageFilterICVF24ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF24ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24ISS4_cast


def itkVectorConfidenceConnectedImageFilterICVF24IUC4_New():
    return itkVectorConfidenceConnectedImageFilterICVF24IUC4.New()

class itkVectorConfidenceConnectedImageFilterICVF24IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF24IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF24IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF24IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF24IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF24IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF24IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF24IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_swigregister(itkVectorConfidenceConnectedImageFilterICVF24IUC4)
itkVectorConfidenceConnectedImageFilterICVF24IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF24IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUC4_cast


def itkVectorConfidenceConnectedImageFilterICVF24IUS4_New():
    return itkVectorConfidenceConnectedImageFilterICVF24IUS4.New()

class itkVectorConfidenceConnectedImageFilterICVF24IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF24IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF24IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF24IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF24IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_swigregister(itkVectorConfidenceConnectedImageFilterICVF24IUS4)
itkVectorConfidenceConnectedImageFilterICVF24IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF24IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF24IUS4_cast


def itkVectorConfidenceConnectedImageFilterICVF32ISS2_New():
    return itkVectorConfidenceConnectedImageFilterICVF32ISS2.New()

class itkVectorConfidenceConnectedImageFilterICVF32ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF32ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF32ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF32ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF32ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF32ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF32ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF32ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_swigregister(itkVectorConfidenceConnectedImageFilterICVF32ISS2)
itkVectorConfidenceConnectedImageFilterICVF32ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF32ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32ISS2_cast


def itkVectorConfidenceConnectedImageFilterICVF32IUC2_New():
    return itkVectorConfidenceConnectedImageFilterICVF32IUC2.New()

class itkVectorConfidenceConnectedImageFilterICVF32IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF32IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF32IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF32IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF32IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF32IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF32IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF32IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_swigregister(itkVectorConfidenceConnectedImageFilterICVF32IUC2)
itkVectorConfidenceConnectedImageFilterICVF32IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF32IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUC2_cast


def itkVectorConfidenceConnectedImageFilterICVF32IUS2_New():
    return itkVectorConfidenceConnectedImageFilterICVF32IUS2.New()

class itkVectorConfidenceConnectedImageFilterICVF32IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF32IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF32IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF32IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF32IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_swigregister(itkVectorConfidenceConnectedImageFilterICVF32IUS2)
itkVectorConfidenceConnectedImageFilterICVF32IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF32IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF32IUS2_cast


def itkVectorConfidenceConnectedImageFilterICVF33ISS3_New():
    return itkVectorConfidenceConnectedImageFilterICVF33ISS3.New()

class itkVectorConfidenceConnectedImageFilterICVF33ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF33ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF33ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF33ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF33ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF33ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF33ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF33ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_swigregister(itkVectorConfidenceConnectedImageFilterICVF33ISS3)
itkVectorConfidenceConnectedImageFilterICVF33ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF33ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33ISS3_cast


def itkVectorConfidenceConnectedImageFilterICVF33IUC3_New():
    return itkVectorConfidenceConnectedImageFilterICVF33IUC3.New()

class itkVectorConfidenceConnectedImageFilterICVF33IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF33IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF33IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF33IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF33IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF33IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF33IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF33IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_swigregister(itkVectorConfidenceConnectedImageFilterICVF33IUC3)
itkVectorConfidenceConnectedImageFilterICVF33IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF33IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUC3_cast


def itkVectorConfidenceConnectedImageFilterICVF33IUS3_New():
    return itkVectorConfidenceConnectedImageFilterICVF33IUS3.New()

class itkVectorConfidenceConnectedImageFilterICVF33IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF33IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF33IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF33IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF33IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_swigregister(itkVectorConfidenceConnectedImageFilterICVF33IUS3)
itkVectorConfidenceConnectedImageFilterICVF33IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF33IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF33IUS3_cast


def itkVectorConfidenceConnectedImageFilterICVF34ISS4_New():
    return itkVectorConfidenceConnectedImageFilterICVF34ISS4.New()

class itkVectorConfidenceConnectedImageFilterICVF34ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF34ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF34ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF34ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF34ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF34ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF34ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF34ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF34ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_swigregister(itkVectorConfidenceConnectedImageFilterICVF34ISS4)
itkVectorConfidenceConnectedImageFilterICVF34ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF34ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34ISS4_cast


def itkVectorConfidenceConnectedImageFilterICVF34IUC4_New():
    return itkVectorConfidenceConnectedImageFilterICVF34IUC4.New()

class itkVectorConfidenceConnectedImageFilterICVF34IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF34IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF34IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF34IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF34IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF34IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF34IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF34IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_swigregister(itkVectorConfidenceConnectedImageFilterICVF34IUC4)
itkVectorConfidenceConnectedImageFilterICVF34IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF34IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUC4_cast


def itkVectorConfidenceConnectedImageFilterICVF34IUS4_New():
    return itkVectorConfidenceConnectedImageFilterICVF34IUS4.New()

class itkVectorConfidenceConnectedImageFilterICVF34IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF34IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF34IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF34IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF34IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_swigregister(itkVectorConfidenceConnectedImageFilterICVF34IUS4)
itkVectorConfidenceConnectedImageFilterICVF34IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF34IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF34IUS4_cast


def itkVectorConfidenceConnectedImageFilterICVF42ISS2_New():
    return itkVectorConfidenceConnectedImageFilterICVF42ISS2.New()

class itkVectorConfidenceConnectedImageFilterICVF42ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF42ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF42ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF42ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF42ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF42ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF42ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF42ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_swigregister(itkVectorConfidenceConnectedImageFilterICVF42ISS2)
itkVectorConfidenceConnectedImageFilterICVF42ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF42ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42ISS2_cast


def itkVectorConfidenceConnectedImageFilterICVF42IUC2_New():
    return itkVectorConfidenceConnectedImageFilterICVF42IUC2.New()

class itkVectorConfidenceConnectedImageFilterICVF42IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF42IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF42IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF42IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF42IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF42IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF42IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF42IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_swigregister(itkVectorConfidenceConnectedImageFilterICVF42IUC2)
itkVectorConfidenceConnectedImageFilterICVF42IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF42IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUC2_cast


def itkVectorConfidenceConnectedImageFilterICVF42IUS2_New():
    return itkVectorConfidenceConnectedImageFilterICVF42IUS2.New()

class itkVectorConfidenceConnectedImageFilterICVF42IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF42IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF42IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF42IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF42IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_swigregister(itkVectorConfidenceConnectedImageFilterICVF42IUS2)
itkVectorConfidenceConnectedImageFilterICVF42IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterICVF42IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF42IUS2_cast


def itkVectorConfidenceConnectedImageFilterICVF43ISS3_New():
    return itkVectorConfidenceConnectedImageFilterICVF43ISS3.New()

class itkVectorConfidenceConnectedImageFilterICVF43ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF43ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF43ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF43ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF43ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF43ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF43ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF43ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_swigregister(itkVectorConfidenceConnectedImageFilterICVF43ISS3)
itkVectorConfidenceConnectedImageFilterICVF43ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF43ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43ISS3_cast


def itkVectorConfidenceConnectedImageFilterICVF43IUC3_New():
    return itkVectorConfidenceConnectedImageFilterICVF43IUC3.New()

class itkVectorConfidenceConnectedImageFilterICVF43IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF43IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF43IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF43IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF43IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF43IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF43IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF43IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_swigregister(itkVectorConfidenceConnectedImageFilterICVF43IUC3)
itkVectorConfidenceConnectedImageFilterICVF43IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF43IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUC3_cast


def itkVectorConfidenceConnectedImageFilterICVF43IUS3_New():
    return itkVectorConfidenceConnectedImageFilterICVF43IUS3.New()

class itkVectorConfidenceConnectedImageFilterICVF43IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF43IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF43IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF43IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF43IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_swigregister(itkVectorConfidenceConnectedImageFilterICVF43IUS3)
itkVectorConfidenceConnectedImageFilterICVF43IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterICVF43IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF43IUS3_cast


def itkVectorConfidenceConnectedImageFilterICVF44ISS4_New():
    return itkVectorConfidenceConnectedImageFilterICVF44ISS4.New()

class itkVectorConfidenceConnectedImageFilterICVF44ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF44ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF44ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF44ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF44ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF44ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF44ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF44ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF44ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_swigregister(itkVectorConfidenceConnectedImageFilterICVF44ISS4)
itkVectorConfidenceConnectedImageFilterICVF44ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF44ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44ISS4_cast


def itkVectorConfidenceConnectedImageFilterICVF44IUC4_New():
    return itkVectorConfidenceConnectedImageFilterICVF44IUC4.New()

class itkVectorConfidenceConnectedImageFilterICVF44IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF44IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF44IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF44IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF44IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF44IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF44IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF44IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_swigregister(itkVectorConfidenceConnectedImageFilterICVF44IUC4)
itkVectorConfidenceConnectedImageFilterICVF44IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF44IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUC4_cast


def itkVectorConfidenceConnectedImageFilterICVF44IUS4_New():
    return itkVectorConfidenceConnectedImageFilterICVF44IUS4.New()

class itkVectorConfidenceConnectedImageFilterICVF44IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterICVF44IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterICVF44IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterICVF44IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterICVF44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterICVF44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterICVF44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterICVF44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterICVF44IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_swigregister(itkVectorConfidenceConnectedImageFilterICVF44IUS4)
itkVectorConfidenceConnectedImageFilterICVF44IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterICVF44IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterICVF44IUS4_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2)
itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2ISS2_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2)
itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUC2_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2)
itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC2IUS2_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3)
itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3ISS3_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3)
itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUC3_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3)
itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC3IUS3_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4)
itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4ISS4_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4)
itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUC4_cast


def itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_New():
    return itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4.New()

class itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBAUC4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_swigregister(itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4)
itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBAUC4IUS4_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2)
itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2ISS2_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2)
itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUC2_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC2IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2)
itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC2IUS2_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3)
itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3ISS3_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3)
itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUC3_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC3IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3)
itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC3IUS3_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4)
itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4ISS4_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4)
itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUC4_cast


def itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_New():
    return itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4.New()

class itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIRGBUC4IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_swigregister(itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4)
itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIRGBUC4IUS4_cast


def itkVectorConfidenceConnectedImageFilterIVF22ISS2_New():
    return itkVectorConfidenceConnectedImageFilterIVF22ISS2.New()

class itkVectorConfidenceConnectedImageFilterIVF22ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF22ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF22ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF22ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF22ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF22ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF22ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF22ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_swigregister(itkVectorConfidenceConnectedImageFilterIVF22ISS2)
itkVectorConfidenceConnectedImageFilterIVF22ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF22ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22ISS2_cast


def itkVectorConfidenceConnectedImageFilterIVF22IUC2_New():
    return itkVectorConfidenceConnectedImageFilterIVF22IUC2.New()

class itkVectorConfidenceConnectedImageFilterIVF22IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF22IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF22IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF22IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF22IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF22IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF22IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF22IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_swigregister(itkVectorConfidenceConnectedImageFilterIVF22IUC2)
itkVectorConfidenceConnectedImageFilterIVF22IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF22IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUC2_cast


def itkVectorConfidenceConnectedImageFilterIVF22IUS2_New():
    return itkVectorConfidenceConnectedImageFilterIVF22IUS2.New()

class itkVectorConfidenceConnectedImageFilterIVF22IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF22IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF22IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF22IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF22IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_swigregister(itkVectorConfidenceConnectedImageFilterIVF22IUS2)
itkVectorConfidenceConnectedImageFilterIVF22IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF22IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF22IUS2_cast


def itkVectorConfidenceConnectedImageFilterIVF23ISS3_New():
    return itkVectorConfidenceConnectedImageFilterIVF23ISS3.New()

class itkVectorConfidenceConnectedImageFilterIVF23ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF23ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF23ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF23ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF23ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF23ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF23ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF23ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_swigregister(itkVectorConfidenceConnectedImageFilterIVF23ISS3)
itkVectorConfidenceConnectedImageFilterIVF23ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF23ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23ISS3_cast


def itkVectorConfidenceConnectedImageFilterIVF23IUC3_New():
    return itkVectorConfidenceConnectedImageFilterIVF23IUC3.New()

class itkVectorConfidenceConnectedImageFilterIVF23IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF23IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF23IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF23IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF23IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF23IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF23IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF23IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_swigregister(itkVectorConfidenceConnectedImageFilterIVF23IUC3)
itkVectorConfidenceConnectedImageFilterIVF23IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF23IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUC3_cast


def itkVectorConfidenceConnectedImageFilterIVF23IUS3_New():
    return itkVectorConfidenceConnectedImageFilterIVF23IUS3.New()

class itkVectorConfidenceConnectedImageFilterIVF23IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF23IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF23IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF23IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF23IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_swigregister(itkVectorConfidenceConnectedImageFilterIVF23IUS3)
itkVectorConfidenceConnectedImageFilterIVF23IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF23IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF23IUS3_cast


def itkVectorConfidenceConnectedImageFilterIVF24ISS4_New():
    return itkVectorConfidenceConnectedImageFilterIVF24ISS4.New()

class itkVectorConfidenceConnectedImageFilterIVF24ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF24ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF24ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF24ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF24ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF24ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF24ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF24ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF24ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_swigregister(itkVectorConfidenceConnectedImageFilterIVF24ISS4)
itkVectorConfidenceConnectedImageFilterIVF24ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF24ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24ISS4_cast


def itkVectorConfidenceConnectedImageFilterIVF24IUC4_New():
    return itkVectorConfidenceConnectedImageFilterIVF24IUC4.New()

class itkVectorConfidenceConnectedImageFilterIVF24IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF24IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF24IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF24IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF24IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF24IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF24IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF24IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_swigregister(itkVectorConfidenceConnectedImageFilterIVF24IUC4)
itkVectorConfidenceConnectedImageFilterIVF24IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF24IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUC4_cast


def itkVectorConfidenceConnectedImageFilterIVF24IUS4_New():
    return itkVectorConfidenceConnectedImageFilterIVF24IUS4.New()

class itkVectorConfidenceConnectedImageFilterIVF24IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF24IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF24IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF24IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF24IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_swigregister(itkVectorConfidenceConnectedImageFilterIVF24IUS4)
itkVectorConfidenceConnectedImageFilterIVF24IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF24IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF24IUS4_cast


def itkVectorConfidenceConnectedImageFilterIVF32ISS2_New():
    return itkVectorConfidenceConnectedImageFilterIVF32ISS2.New()

class itkVectorConfidenceConnectedImageFilterIVF32ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF32ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF32ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF32ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF32ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF32ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF32ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF32ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_swigregister(itkVectorConfidenceConnectedImageFilterIVF32ISS2)
itkVectorConfidenceConnectedImageFilterIVF32ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF32ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32ISS2_cast


def itkVectorConfidenceConnectedImageFilterIVF32IUC2_New():
    return itkVectorConfidenceConnectedImageFilterIVF32IUC2.New()

class itkVectorConfidenceConnectedImageFilterIVF32IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF32IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF32IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF32IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF32IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF32IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF32IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF32IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_swigregister(itkVectorConfidenceConnectedImageFilterIVF32IUC2)
itkVectorConfidenceConnectedImageFilterIVF32IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF32IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUC2_cast


def itkVectorConfidenceConnectedImageFilterIVF32IUS2_New():
    return itkVectorConfidenceConnectedImageFilterIVF32IUS2.New()

class itkVectorConfidenceConnectedImageFilterIVF32IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF32IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF32IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF32IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF32IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_swigregister(itkVectorConfidenceConnectedImageFilterIVF32IUS2)
itkVectorConfidenceConnectedImageFilterIVF32IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF32IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF32IUS2_cast


def itkVectorConfidenceConnectedImageFilterIVF33ISS3_New():
    return itkVectorConfidenceConnectedImageFilterIVF33ISS3.New()

class itkVectorConfidenceConnectedImageFilterIVF33ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF33ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF33ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF33ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF33ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF33ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF33ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF33ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_swigregister(itkVectorConfidenceConnectedImageFilterIVF33ISS3)
itkVectorConfidenceConnectedImageFilterIVF33ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF33ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33ISS3_cast


def itkVectorConfidenceConnectedImageFilterIVF33IUC3_New():
    return itkVectorConfidenceConnectedImageFilterIVF33IUC3.New()

class itkVectorConfidenceConnectedImageFilterIVF33IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF33IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF33IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF33IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF33IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF33IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF33IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF33IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_swigregister(itkVectorConfidenceConnectedImageFilterIVF33IUC3)
itkVectorConfidenceConnectedImageFilterIVF33IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF33IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUC3_cast


def itkVectorConfidenceConnectedImageFilterIVF33IUS3_New():
    return itkVectorConfidenceConnectedImageFilterIVF33IUS3.New()

class itkVectorConfidenceConnectedImageFilterIVF33IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF33IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF33IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF33IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF33IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_swigregister(itkVectorConfidenceConnectedImageFilterIVF33IUS3)
itkVectorConfidenceConnectedImageFilterIVF33IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF33IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF33IUS3_cast


def itkVectorConfidenceConnectedImageFilterIVF34ISS4_New():
    return itkVectorConfidenceConnectedImageFilterIVF34ISS4.New()

class itkVectorConfidenceConnectedImageFilterIVF34ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF34ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF34ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF34ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF34ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF34ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF34ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF34ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF34ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_swigregister(itkVectorConfidenceConnectedImageFilterIVF34ISS4)
itkVectorConfidenceConnectedImageFilterIVF34ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF34ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34ISS4_cast


def itkVectorConfidenceConnectedImageFilterIVF34IUC4_New():
    return itkVectorConfidenceConnectedImageFilterIVF34IUC4.New()

class itkVectorConfidenceConnectedImageFilterIVF34IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF34IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF34IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF34IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF34IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF34IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF34IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF34IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_swigregister(itkVectorConfidenceConnectedImageFilterIVF34IUC4)
itkVectorConfidenceConnectedImageFilterIVF34IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF34IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUC4_cast


def itkVectorConfidenceConnectedImageFilterIVF34IUS4_New():
    return itkVectorConfidenceConnectedImageFilterIVF34IUS4.New()

class itkVectorConfidenceConnectedImageFilterIVF34IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF34IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF34IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF34IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF34IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_swigregister(itkVectorConfidenceConnectedImageFilterIVF34IUS4)
itkVectorConfidenceConnectedImageFilterIVF34IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF34IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF34IUS4_cast


def itkVectorConfidenceConnectedImageFilterIVF42ISS2_New():
    return itkVectorConfidenceConnectedImageFilterIVF42ISS2.New()

class itkVectorConfidenceConnectedImageFilterIVF42ISS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42ISS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF42ISS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF42ISS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF42ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF42ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF42ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF42ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF42ISS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_swigregister(itkVectorConfidenceConnectedImageFilterIVF42ISS2)
itkVectorConfidenceConnectedImageFilterIVF42ISS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF42ISS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42ISS2_cast


def itkVectorConfidenceConnectedImageFilterIVF42IUC2_New():
    return itkVectorConfidenceConnectedImageFilterIVF42IUC2.New()

class itkVectorConfidenceConnectedImageFilterIVF42IUC2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUC2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF42IUC2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF42IUC2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF42IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF42IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF42IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF42IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF42IUC2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_swigregister(itkVectorConfidenceConnectedImageFilterIVF42IUC2)
itkVectorConfidenceConnectedImageFilterIVF42IUC2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF42IUC2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUC2_cast


def itkVectorConfidenceConnectedImageFilterIVF42IUS2_New():
    return itkVectorConfidenceConnectedImageFilterIVF42IUS2.New()

class itkVectorConfidenceConnectedImageFilterIVF42IUS2(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF42IUS2):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF42IUS2
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF42IUS2

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF42IUS2 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_swigregister(itkVectorConfidenceConnectedImageFilterIVF42IUS2)
itkVectorConfidenceConnectedImageFilterIVF42IUS2___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2___New_orig__
itkVectorConfidenceConnectedImageFilterIVF42IUS2_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF42IUS2_cast


def itkVectorConfidenceConnectedImageFilterIVF43ISS3_New():
    return itkVectorConfidenceConnectedImageFilterIVF43ISS3.New()

class itkVectorConfidenceConnectedImageFilterIVF43ISS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43ISS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF43ISS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF43ISS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF43ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF43ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF43ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF43ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF43ISS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_swigregister(itkVectorConfidenceConnectedImageFilterIVF43ISS3)
itkVectorConfidenceConnectedImageFilterIVF43ISS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF43ISS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43ISS3_cast


def itkVectorConfidenceConnectedImageFilterIVF43IUC3_New():
    return itkVectorConfidenceConnectedImageFilterIVF43IUC3.New()

class itkVectorConfidenceConnectedImageFilterIVF43IUC3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUC3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF43IUC3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF43IUC3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF43IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF43IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF43IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF43IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF43IUC3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_swigregister(itkVectorConfidenceConnectedImageFilterIVF43IUC3)
itkVectorConfidenceConnectedImageFilterIVF43IUC3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF43IUC3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUC3_cast


def itkVectorConfidenceConnectedImageFilterIVF43IUS3_New():
    return itkVectorConfidenceConnectedImageFilterIVF43IUS3.New()

class itkVectorConfidenceConnectedImageFilterIVF43IUS3(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF43IUS3):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF43IUS3
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF43IUS3

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF43IUS3 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_swigregister(itkVectorConfidenceConnectedImageFilterIVF43IUS3)
itkVectorConfidenceConnectedImageFilterIVF43IUS3___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3___New_orig__
itkVectorConfidenceConnectedImageFilterIVF43IUS3_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF43IUS3_cast


def itkVectorConfidenceConnectedImageFilterIVF44ISS4_New():
    return itkVectorConfidenceConnectedImageFilterIVF44ISS4.New()

class itkVectorConfidenceConnectedImageFilterIVF44ISS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF44ISS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF44ISS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF44ISS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF44ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF44ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF44ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF44ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF44ISS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_swigregister(itkVectorConfidenceConnectedImageFilterIVF44ISS4)
itkVectorConfidenceConnectedImageFilterIVF44ISS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF44ISS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44ISS4_cast


def itkVectorConfidenceConnectedImageFilterIVF44IUC4_New():
    return itkVectorConfidenceConnectedImageFilterIVF44IUC4.New()

class itkVectorConfidenceConnectedImageFilterIVF44IUC4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUC4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF44IUC4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF44IUC4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF44IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF44IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF44IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF44IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF44IUC4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_swigregister(itkVectorConfidenceConnectedImageFilterIVF44IUC4)
itkVectorConfidenceConnectedImageFilterIVF44IUC4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF44IUC4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUC4_cast


def itkVectorConfidenceConnectedImageFilterIVF44IUS4_New():
    return itkVectorConfidenceConnectedImageFilterIVF44IUS4.New()

class itkVectorConfidenceConnectedImageFilterIVF44IUS4(itk.itkImageToImageFilterBPython.itkImageToImageFilterIVF44IUS4):
    r"""


    Segment pixels with similar statistics using connectivity.

    This filter extracts a connected set of pixels whose pixel intensities
    are consistent with the pixel statistics of a seed point. The mean and
    variance across a neighborhood (8-connected, 26-connected, etc.) are
    calculated for a seed point. Then pixels connected to this seed point
    whose values are within the confidence interval for the seed point are
    grouped. The width of the confidence interval is controlled by the
    "Multiplier" variable (the confidence interval is the mean plus or
    minus the "Multiplier" times the standard deviation). If the
    intensity variations across a segment were gaussian, a "Multiplier"
    setting of 2.5 would define a confidence interval wide enough to
    capture 99% of samples in the segment.

    After this initial segmentation is calculated, the mean and variance
    are re-calculated. All the pixels in the previous segmentation are
    used to calculate the mean the standard deviation (as opposed to using
    the pixels in the neighborhood of the seed point). The segmentation is
    then recalculted using these refined estimates for the mean and
    variance of the pixel values. This process is repeated for the
    specified number of iterations. Setting the "NumberOfIterations" to
    zero stops the algorithm after the initial segmentation from the seed
    point.

    NOTE: the lower and upper threshold are restricted to lie within the
    valid numeric limits of the input data pixel type. Also, the limits
    may be adjusted to contain the seed point's intensity. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_PrintSelf)
    SetSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_SetSeed)
    AddSeed = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_AddSeed)
    ClearSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_ClearSeeds)
    SetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_SetMultiplier)
    GetMultiplier = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetMultiplier)
    SetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_SetNumberOfIterations)
    GetNumberOfIterations = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetNumberOfIterations)
    SetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetReplaceValue)
    SetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_SetInitialNeighborhoodRadius)
    GetInitialNeighborhoodRadius = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetInitialNeighborhoodRadius)
    GetMean = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetMean)
    GetCovariance = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetCovariance)
    GetSeeds = _swig_new_instance_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_GetSeeds)
    OutputEqualityComparableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_OutputEqualityComparableCheck
    
    InputHasNumericTraitsCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_InputHasNumericTraitsCheck
    
    OutputOStreamWritableCheck = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkVectorConfidenceConnectedImageFilterPython.delete_itkVectorConfidenceConnectedImageFilterIVF44IUS4
    cast = _swig_new_static_method(_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVectorConfidenceConnectedImageFilterIVF44IUS4

        Create a new object of the class itkVectorConfidenceConnectedImageFilterIVF44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVectorConfidenceConnectedImageFilterIVF44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVectorConfidenceConnectedImageFilterIVF44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVectorConfidenceConnectedImageFilterIVF44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVectorConfidenceConnectedImageFilterIVF44IUS4 in _itkVectorConfidenceConnectedImageFilterPython:
_itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_swigregister(itkVectorConfidenceConnectedImageFilterIVF44IUS4)
itkVectorConfidenceConnectedImageFilterIVF44IUS4___New_orig__ = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4___New_orig__
itkVectorConfidenceConnectedImageFilterIVF44IUS4_cast = _itkVectorConfidenceConnectedImageFilterPython.itkVectorConfidenceConnectedImageFilterIVF44IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def vector_confidence_connected_image_filter(*args, **kwargs):
    """Procedural interface for VectorConfidenceConnectedImageFilter"""
    import itk

    instance = itk.VectorConfidenceConnectedImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def vector_confidence_connected_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKRegionGrowing.VectorConfidenceConnectedImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    vector_confidence_connected_image_filter.__doc__ = filter_object.__doc__
    vector_confidence_connected_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    vector_confidence_connected_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        vector_confidence_connected_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        vector_confidence_connected_image_filter.__doc__ += "\n"
        vector_confidence_connected_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        vector_confidence_connected_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




