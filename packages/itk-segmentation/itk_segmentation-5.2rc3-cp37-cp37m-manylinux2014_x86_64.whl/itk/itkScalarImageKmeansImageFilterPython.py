# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKClassifiersPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkScalarImageKmeansImageFilterPython
else:
    import _itkScalarImageKmeansImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkScalarImageKmeansImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkScalarImageKmeansImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageRegionPython
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkArrayPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkScalarImageKmeansImageFilterID2ISS2_New():
    return itkScalarImageKmeansImageFilterID2ISS2.New()

class itkScalarImageKmeansImageFilterID2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID2ISS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_swigregister(itkScalarImageKmeansImageFilterID2ISS2)
itkScalarImageKmeansImageFilterID2ISS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2___New_orig__
itkScalarImageKmeansImageFilterID2ISS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2ISS2_cast


def itkScalarImageKmeansImageFilterID2IUC2_New():
    return itkScalarImageKmeansImageFilterID2IUC2.New()

class itkScalarImageKmeansImageFilterID2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID2IUC2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_swigregister(itkScalarImageKmeansImageFilterID2IUC2)
itkScalarImageKmeansImageFilterID2IUC2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2___New_orig__
itkScalarImageKmeansImageFilterID2IUC2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUC2_cast


def itkScalarImageKmeansImageFilterID2IUS2_New():
    return itkScalarImageKmeansImageFilterID2IUS2.New()

class itkScalarImageKmeansImageFilterID2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID2IUS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_swigregister(itkScalarImageKmeansImageFilterID2IUS2)
itkScalarImageKmeansImageFilterID2IUS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2___New_orig__
itkScalarImageKmeansImageFilterID2IUS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID2IUS2_cast


def itkScalarImageKmeansImageFilterID3ISS3_New():
    return itkScalarImageKmeansImageFilterID3ISS3.New()

class itkScalarImageKmeansImageFilterID3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID3ISS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_swigregister(itkScalarImageKmeansImageFilterID3ISS3)
itkScalarImageKmeansImageFilterID3ISS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3___New_orig__
itkScalarImageKmeansImageFilterID3ISS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3ISS3_cast


def itkScalarImageKmeansImageFilterID3IUC3_New():
    return itkScalarImageKmeansImageFilterID3IUC3.New()

class itkScalarImageKmeansImageFilterID3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID3IUC3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_swigregister(itkScalarImageKmeansImageFilterID3IUC3)
itkScalarImageKmeansImageFilterID3IUC3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3___New_orig__
itkScalarImageKmeansImageFilterID3IUC3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUC3_cast


def itkScalarImageKmeansImageFilterID3IUS3_New():
    return itkScalarImageKmeansImageFilterID3IUS3.New()

class itkScalarImageKmeansImageFilterID3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID3IUS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_swigregister(itkScalarImageKmeansImageFilterID3IUS3)
itkScalarImageKmeansImageFilterID3IUS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3___New_orig__
itkScalarImageKmeansImageFilterID3IUS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID3IUS3_cast


def itkScalarImageKmeansImageFilterID4ISS4_New():
    return itkScalarImageKmeansImageFilterID4ISS4.New()

class itkScalarImageKmeansImageFilterID4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID4ISS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_swigregister(itkScalarImageKmeansImageFilterID4ISS4)
itkScalarImageKmeansImageFilterID4ISS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4___New_orig__
itkScalarImageKmeansImageFilterID4ISS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4ISS4_cast


def itkScalarImageKmeansImageFilterID4IUC4_New():
    return itkScalarImageKmeansImageFilterID4IUC4.New()

class itkScalarImageKmeansImageFilterID4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID4IUC4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_swigregister(itkScalarImageKmeansImageFilterID4IUC4)
itkScalarImageKmeansImageFilterID4IUC4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4___New_orig__
itkScalarImageKmeansImageFilterID4IUC4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUC4_cast


def itkScalarImageKmeansImageFilterID4IUS4_New():
    return itkScalarImageKmeansImageFilterID4IUS4.New()

class itkScalarImageKmeansImageFilterID4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterID4IUS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterID4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterID4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_swigregister(itkScalarImageKmeansImageFilterID4IUS4)
itkScalarImageKmeansImageFilterID4IUS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4___New_orig__
itkScalarImageKmeansImageFilterID4IUS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterID4IUS4_cast


def itkScalarImageKmeansImageFilterIF2ISS2_New():
    return itkScalarImageKmeansImageFilterIF2ISS2.New()

class itkScalarImageKmeansImageFilterIF2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_swigregister(itkScalarImageKmeansImageFilterIF2ISS2)
itkScalarImageKmeansImageFilterIF2ISS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2___New_orig__
itkScalarImageKmeansImageFilterIF2ISS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2ISS2_cast


def itkScalarImageKmeansImageFilterIF2IUC2_New():
    return itkScalarImageKmeansImageFilterIF2IUC2.New()

class itkScalarImageKmeansImageFilterIF2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_swigregister(itkScalarImageKmeansImageFilterIF2IUC2)
itkScalarImageKmeansImageFilterIF2IUC2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2___New_orig__
itkScalarImageKmeansImageFilterIF2IUC2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUC2_cast


def itkScalarImageKmeansImageFilterIF2IUS2_New():
    return itkScalarImageKmeansImageFilterIF2IUS2.New()

class itkScalarImageKmeansImageFilterIF2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_swigregister(itkScalarImageKmeansImageFilterIF2IUS2)
itkScalarImageKmeansImageFilterIF2IUS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2___New_orig__
itkScalarImageKmeansImageFilterIF2IUS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF2IUS2_cast


def itkScalarImageKmeansImageFilterIF3ISS3_New():
    return itkScalarImageKmeansImageFilterIF3ISS3.New()

class itkScalarImageKmeansImageFilterIF3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_swigregister(itkScalarImageKmeansImageFilterIF3ISS3)
itkScalarImageKmeansImageFilterIF3ISS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3___New_orig__
itkScalarImageKmeansImageFilterIF3ISS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3ISS3_cast


def itkScalarImageKmeansImageFilterIF3IUC3_New():
    return itkScalarImageKmeansImageFilterIF3IUC3.New()

class itkScalarImageKmeansImageFilterIF3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_swigregister(itkScalarImageKmeansImageFilterIF3IUC3)
itkScalarImageKmeansImageFilterIF3IUC3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3___New_orig__
itkScalarImageKmeansImageFilterIF3IUC3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUC3_cast


def itkScalarImageKmeansImageFilterIF3IUS3_New():
    return itkScalarImageKmeansImageFilterIF3IUS3.New()

class itkScalarImageKmeansImageFilterIF3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_swigregister(itkScalarImageKmeansImageFilterIF3IUS3)
itkScalarImageKmeansImageFilterIF3IUS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3___New_orig__
itkScalarImageKmeansImageFilterIF3IUS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF3IUS3_cast


def itkScalarImageKmeansImageFilterIF4ISS4_New():
    return itkScalarImageKmeansImageFilterIF4ISS4.New()

class itkScalarImageKmeansImageFilterIF4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF4ISS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_swigregister(itkScalarImageKmeansImageFilterIF4ISS4)
itkScalarImageKmeansImageFilterIF4ISS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4___New_orig__
itkScalarImageKmeansImageFilterIF4ISS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4ISS4_cast


def itkScalarImageKmeansImageFilterIF4IUC4_New():
    return itkScalarImageKmeansImageFilterIF4IUC4.New()

class itkScalarImageKmeansImageFilterIF4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF4IUC4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_swigregister(itkScalarImageKmeansImageFilterIF4IUC4)
itkScalarImageKmeansImageFilterIF4IUC4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4___New_orig__
itkScalarImageKmeansImageFilterIF4IUC4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUC4_cast


def itkScalarImageKmeansImageFilterIF4IUS4_New():
    return itkScalarImageKmeansImageFilterIF4IUS4.New()

class itkScalarImageKmeansImageFilterIF4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIF4IUS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIF4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIF4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_swigregister(itkScalarImageKmeansImageFilterIF4IUS4)
itkScalarImageKmeansImageFilterIF4IUS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4___New_orig__
itkScalarImageKmeansImageFilterIF4IUS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIF4IUS4_cast


def itkScalarImageKmeansImageFilterISS2ISS2_New():
    return itkScalarImageKmeansImageFilterISS2ISS2.New()

class itkScalarImageKmeansImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_swigregister(itkScalarImageKmeansImageFilterISS2ISS2)
itkScalarImageKmeansImageFilterISS2ISS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2___New_orig__
itkScalarImageKmeansImageFilterISS2ISS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2ISS2_cast


def itkScalarImageKmeansImageFilterISS2IUC2_New():
    return itkScalarImageKmeansImageFilterISS2IUC2.New()

class itkScalarImageKmeansImageFilterISS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_swigregister(itkScalarImageKmeansImageFilterISS2IUC2)
itkScalarImageKmeansImageFilterISS2IUC2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2___New_orig__
itkScalarImageKmeansImageFilterISS2IUC2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUC2_cast


def itkScalarImageKmeansImageFilterISS2IUS2_New():
    return itkScalarImageKmeansImageFilterISS2IUS2.New()

class itkScalarImageKmeansImageFilterISS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_swigregister(itkScalarImageKmeansImageFilterISS2IUS2)
itkScalarImageKmeansImageFilterISS2IUS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2___New_orig__
itkScalarImageKmeansImageFilterISS2IUS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS2IUS2_cast


def itkScalarImageKmeansImageFilterISS3ISS3_New():
    return itkScalarImageKmeansImageFilterISS3ISS3.New()

class itkScalarImageKmeansImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_swigregister(itkScalarImageKmeansImageFilterISS3ISS3)
itkScalarImageKmeansImageFilterISS3ISS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3___New_orig__
itkScalarImageKmeansImageFilterISS3ISS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3ISS3_cast


def itkScalarImageKmeansImageFilterISS3IUC3_New():
    return itkScalarImageKmeansImageFilterISS3IUC3.New()

class itkScalarImageKmeansImageFilterISS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_swigregister(itkScalarImageKmeansImageFilterISS3IUC3)
itkScalarImageKmeansImageFilterISS3IUC3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3___New_orig__
itkScalarImageKmeansImageFilterISS3IUC3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUC3_cast


def itkScalarImageKmeansImageFilterISS3IUS3_New():
    return itkScalarImageKmeansImageFilterISS3IUS3.New()

class itkScalarImageKmeansImageFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_swigregister(itkScalarImageKmeansImageFilterISS3IUS3)
itkScalarImageKmeansImageFilterISS3IUS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3___New_orig__
itkScalarImageKmeansImageFilterISS3IUS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS3IUS3_cast


def itkScalarImageKmeansImageFilterISS4ISS4_New():
    return itkScalarImageKmeansImageFilterISS4ISS4.New()

class itkScalarImageKmeansImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_swigregister(itkScalarImageKmeansImageFilterISS4ISS4)
itkScalarImageKmeansImageFilterISS4ISS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4___New_orig__
itkScalarImageKmeansImageFilterISS4ISS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4ISS4_cast


def itkScalarImageKmeansImageFilterISS4IUC4_New():
    return itkScalarImageKmeansImageFilterISS4IUC4.New()

class itkScalarImageKmeansImageFilterISS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS4IUC4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_swigregister(itkScalarImageKmeansImageFilterISS4IUC4)
itkScalarImageKmeansImageFilterISS4IUC4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4___New_orig__
itkScalarImageKmeansImageFilterISS4IUC4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUC4_cast


def itkScalarImageKmeansImageFilterISS4IUS4_New():
    return itkScalarImageKmeansImageFilterISS4IUS4.New()

class itkScalarImageKmeansImageFilterISS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterISS4IUS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterISS4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterISS4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_swigregister(itkScalarImageKmeansImageFilterISS4IUS4)
itkScalarImageKmeansImageFilterISS4IUS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4___New_orig__
itkScalarImageKmeansImageFilterISS4IUS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterISS4IUS4_cast


def itkScalarImageKmeansImageFilterIUC2ISS2_New():
    return itkScalarImageKmeansImageFilterIUC2ISS2.New()

class itkScalarImageKmeansImageFilterIUC2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_swigregister(itkScalarImageKmeansImageFilterIUC2ISS2)
itkScalarImageKmeansImageFilterIUC2ISS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2___New_orig__
itkScalarImageKmeansImageFilterIUC2ISS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2ISS2_cast


def itkScalarImageKmeansImageFilterIUC2IUC2_New():
    return itkScalarImageKmeansImageFilterIUC2IUC2.New()

class itkScalarImageKmeansImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_swigregister(itkScalarImageKmeansImageFilterIUC2IUC2)
itkScalarImageKmeansImageFilterIUC2IUC2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2___New_orig__
itkScalarImageKmeansImageFilterIUC2IUC2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUC2_cast


def itkScalarImageKmeansImageFilterIUC2IUS2_New():
    return itkScalarImageKmeansImageFilterIUC2IUS2.New()

class itkScalarImageKmeansImageFilterIUC2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_swigregister(itkScalarImageKmeansImageFilterIUC2IUS2)
itkScalarImageKmeansImageFilterIUC2IUS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2___New_orig__
itkScalarImageKmeansImageFilterIUC2IUS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC2IUS2_cast


def itkScalarImageKmeansImageFilterIUC3ISS3_New():
    return itkScalarImageKmeansImageFilterIUC3ISS3.New()

class itkScalarImageKmeansImageFilterIUC3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_swigregister(itkScalarImageKmeansImageFilterIUC3ISS3)
itkScalarImageKmeansImageFilterIUC3ISS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3___New_orig__
itkScalarImageKmeansImageFilterIUC3ISS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3ISS3_cast


def itkScalarImageKmeansImageFilterIUC3IUC3_New():
    return itkScalarImageKmeansImageFilterIUC3IUC3.New()

class itkScalarImageKmeansImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_swigregister(itkScalarImageKmeansImageFilterIUC3IUC3)
itkScalarImageKmeansImageFilterIUC3IUC3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3___New_orig__
itkScalarImageKmeansImageFilterIUC3IUC3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUC3_cast


def itkScalarImageKmeansImageFilterIUC3IUS3_New():
    return itkScalarImageKmeansImageFilterIUC3IUS3.New()

class itkScalarImageKmeansImageFilterIUC3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_swigregister(itkScalarImageKmeansImageFilterIUC3IUS3)
itkScalarImageKmeansImageFilterIUC3IUS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3___New_orig__
itkScalarImageKmeansImageFilterIUC3IUS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC3IUS3_cast


def itkScalarImageKmeansImageFilterIUC4ISS4_New():
    return itkScalarImageKmeansImageFilterIUC4ISS4.New()

class itkScalarImageKmeansImageFilterIUC4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC4ISS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_swigregister(itkScalarImageKmeansImageFilterIUC4ISS4)
itkScalarImageKmeansImageFilterIUC4ISS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4___New_orig__
itkScalarImageKmeansImageFilterIUC4ISS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4ISS4_cast


def itkScalarImageKmeansImageFilterIUC4IUC4_New():
    return itkScalarImageKmeansImageFilterIUC4IUC4.New()

class itkScalarImageKmeansImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_swigregister(itkScalarImageKmeansImageFilterIUC4IUC4)
itkScalarImageKmeansImageFilterIUC4IUC4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4___New_orig__
itkScalarImageKmeansImageFilterIUC4IUC4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUC4_cast


def itkScalarImageKmeansImageFilterIUC4IUS4_New():
    return itkScalarImageKmeansImageFilterIUC4IUS4.New()

class itkScalarImageKmeansImageFilterIUC4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUC4IUS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUC4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUC4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_swigregister(itkScalarImageKmeansImageFilterIUC4IUS4)
itkScalarImageKmeansImageFilterIUC4IUS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4___New_orig__
itkScalarImageKmeansImageFilterIUC4IUS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUC4IUS4_cast


def itkScalarImageKmeansImageFilterIUS2ISS2_New():
    return itkScalarImageKmeansImageFilterIUS2ISS2.New()

class itkScalarImageKmeansImageFilterIUS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS2ISS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS2ISS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_swigregister(itkScalarImageKmeansImageFilterIUS2ISS2)
itkScalarImageKmeansImageFilterIUS2ISS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2___New_orig__
itkScalarImageKmeansImageFilterIUS2ISS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2ISS2_cast


def itkScalarImageKmeansImageFilterIUS2IUC2_New():
    return itkScalarImageKmeansImageFilterIUS2IUC2.New()

class itkScalarImageKmeansImageFilterIUS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS2IUC2

        Create a new object of the class itkScalarImageKmeansImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS2IUC2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_swigregister(itkScalarImageKmeansImageFilterIUS2IUC2)
itkScalarImageKmeansImageFilterIUS2IUC2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2___New_orig__
itkScalarImageKmeansImageFilterIUS2IUC2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUC2_cast


def itkScalarImageKmeansImageFilterIUS2IUS2_New():
    return itkScalarImageKmeansImageFilterIUS2IUS2.New()

class itkScalarImageKmeansImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS2IUS2

        Create a new object of the class itkScalarImageKmeansImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS2IUS2 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_swigregister(itkScalarImageKmeansImageFilterIUS2IUS2)
itkScalarImageKmeansImageFilterIUS2IUS2___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2___New_orig__
itkScalarImageKmeansImageFilterIUS2IUS2_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS2IUS2_cast


def itkScalarImageKmeansImageFilterIUS3ISS3_New():
    return itkScalarImageKmeansImageFilterIUS3ISS3.New()

class itkScalarImageKmeansImageFilterIUS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS3ISS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS3ISS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_swigregister(itkScalarImageKmeansImageFilterIUS3ISS3)
itkScalarImageKmeansImageFilterIUS3ISS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3___New_orig__
itkScalarImageKmeansImageFilterIUS3ISS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3ISS3_cast


def itkScalarImageKmeansImageFilterIUS3IUC3_New():
    return itkScalarImageKmeansImageFilterIUS3IUC3.New()

class itkScalarImageKmeansImageFilterIUS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS3IUC3

        Create a new object of the class itkScalarImageKmeansImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS3IUC3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_swigregister(itkScalarImageKmeansImageFilterIUS3IUC3)
itkScalarImageKmeansImageFilterIUS3IUC3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3___New_orig__
itkScalarImageKmeansImageFilterIUS3IUC3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUC3_cast


def itkScalarImageKmeansImageFilterIUS3IUS3_New():
    return itkScalarImageKmeansImageFilterIUS3IUS3.New()

class itkScalarImageKmeansImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS3IUS3

        Create a new object of the class itkScalarImageKmeansImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS3IUS3 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_swigregister(itkScalarImageKmeansImageFilterIUS3IUS3)
itkScalarImageKmeansImageFilterIUS3IUS3___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3___New_orig__
itkScalarImageKmeansImageFilterIUS3IUS3_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS3IUS3_cast


def itkScalarImageKmeansImageFilterIUS4ISS4_New():
    return itkScalarImageKmeansImageFilterIUS4ISS4.New()

class itkScalarImageKmeansImageFilterIUS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS4ISS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS4ISS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS4ISS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_swigregister(itkScalarImageKmeansImageFilterIUS4ISS4)
itkScalarImageKmeansImageFilterIUS4ISS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4___New_orig__
itkScalarImageKmeansImageFilterIUS4ISS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4ISS4_cast


def itkScalarImageKmeansImageFilterIUS4IUC4_New():
    return itkScalarImageKmeansImageFilterIUS4IUC4.New()

class itkScalarImageKmeansImageFilterIUS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS4IUC4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS4IUC4

        Create a new object of the class itkScalarImageKmeansImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS4IUC4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_swigregister(itkScalarImageKmeansImageFilterIUS4IUC4)
itkScalarImageKmeansImageFilterIUS4IUC4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4___New_orig__
itkScalarImageKmeansImageFilterIUS4IUC4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUC4_cast


def itkScalarImageKmeansImageFilterIUS4IUS4_New():
    return itkScalarImageKmeansImageFilterIUS4IUS4.New()

class itkScalarImageKmeansImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    Classifies the intensity values of a scalar image using the K-Means
    algorithm.

    Given an input image with scalar values, it uses the K-Means
    statistical classifier in order to define labels for every pixel in
    the image. The filter is templated over the type of the input image.
    The output image is predefined as having the same dimension of the
    input image and pixel type unsigned char, under the assumption that
    the classifier will generate less than 256 classes.

    You may want to look also at the RelabelImageFilter that may be used
    as a postprocessing stage, in particular if you are interested in
    ordering the labels by their relative size in number of pixels.

    See:  Image

    See:  ImageKmeansModelEstimator

    See:  KdTreeBasedKmeansEstimator, WeightedCentroidKdTreeGenerator,
    KdTree

    See:  RelabelImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_Clone)
    AddClassWithInitialMean = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_AddClassWithInitialMean)
    GetFinalMeans = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_GetFinalMeans)
    SetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_SetUseNonContiguousLabels)
    GetUseNonContiguousLabels = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_GetUseNonContiguousLabels)
    UseNonContiguousLabelsOn = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_UseNonContiguousLabelsOn)
    UseNonContiguousLabelsOff = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_UseNonContiguousLabelsOff)
    SetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_SetImageRegion)
    GetImageRegion = _swig_new_instance_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_GetImageRegion)
    InputHasNumericTraitsCheck = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkScalarImageKmeansImageFilterPython.delete_itkScalarImageKmeansImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkScalarImageKmeansImageFilterIUS4IUS4

        Create a new object of the class itkScalarImageKmeansImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkScalarImageKmeansImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkScalarImageKmeansImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkScalarImageKmeansImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkScalarImageKmeansImageFilterIUS4IUS4 in _itkScalarImageKmeansImageFilterPython:
_itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_swigregister(itkScalarImageKmeansImageFilterIUS4IUS4)
itkScalarImageKmeansImageFilterIUS4IUS4___New_orig__ = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4___New_orig__
itkScalarImageKmeansImageFilterIUS4IUS4_cast = _itkScalarImageKmeansImageFilterPython.itkScalarImageKmeansImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def scalar_image_kmeans_image_filter(*args, **kwargs):
    """Procedural interface for ScalarImageKmeansImageFilter"""
    import itk

    instance = itk.ScalarImageKmeansImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def scalar_image_kmeans_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKClassifiers.ScalarImageKmeansImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    scalar_image_kmeans_image_filter.__doc__ = filter_object.__doc__
    scalar_image_kmeans_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    scalar_image_kmeans_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        scalar_image_kmeans_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        scalar_image_kmeans_image_filter.__doc__ += "\n"
        scalar_image_kmeans_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        scalar_image_kmeans_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




