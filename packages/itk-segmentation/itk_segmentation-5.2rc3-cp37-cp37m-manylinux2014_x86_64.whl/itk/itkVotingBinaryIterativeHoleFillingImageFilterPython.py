# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKLabelVotingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkVotingBinaryIterativeHoleFillingImageFilterPython
else:
    import _itkVotingBinaryIterativeHoleFillingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkVotingBinaryIterativeHoleFillingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkVotingBinaryIterativeHoleFillingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkSizePython
import itk.pyBasePython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkFixedArrayPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkRGBAPixelPython
import itk.itkPointPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython

def itkVotingBinaryIterativeHoleFillingImageFilterISS2_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterISS2.New()

class itkVotingBinaryIterativeHoleFillingImageFilterISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterISS2
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterISS2

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterISS2 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterISS2)
itkVotingBinaryIterativeHoleFillingImageFilterISS2___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterISS2_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS2_cast


def itkVotingBinaryIterativeHoleFillingImageFilterISS3_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterISS3.New()

class itkVotingBinaryIterativeHoleFillingImageFilterISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterISS3
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterISS3

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterISS3 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterISS3)
itkVotingBinaryIterativeHoleFillingImageFilterISS3___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterISS3_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS3_cast


def itkVotingBinaryIterativeHoleFillingImageFilterISS4_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterISS4.New()

class itkVotingBinaryIterativeHoleFillingImageFilterISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterISS4
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterISS4

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterISS4 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterISS4)
itkVotingBinaryIterativeHoleFillingImageFilterISS4___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterISS4_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterISS4_cast


def itkVotingBinaryIterativeHoleFillingImageFilterIUC2_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterIUC2.New()

class itkVotingBinaryIterativeHoleFillingImageFilterIUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterIUC2
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterIUC2

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterIUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterIUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterIUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterIUC2 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterIUC2)
itkVotingBinaryIterativeHoleFillingImageFilterIUC2___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterIUC2_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC2_cast


def itkVotingBinaryIterativeHoleFillingImageFilterIUC3_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterIUC3.New()

class itkVotingBinaryIterativeHoleFillingImageFilterIUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterIUC3
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterIUC3

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterIUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterIUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterIUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterIUC3 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterIUC3)
itkVotingBinaryIterativeHoleFillingImageFilterIUC3___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterIUC3_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC3_cast


def itkVotingBinaryIterativeHoleFillingImageFilterIUC4_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterIUC4.New()

class itkVotingBinaryIterativeHoleFillingImageFilterIUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterIUC4
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterIUC4

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterIUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterIUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterIUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterIUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterIUC4 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterIUC4)
itkVotingBinaryIterativeHoleFillingImageFilterIUC4___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterIUC4_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUC4_cast


def itkVotingBinaryIterativeHoleFillingImageFilterIUS2_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterIUS2.New()

class itkVotingBinaryIterativeHoleFillingImageFilterIUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterIUS2
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterIUS2

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterIUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterIUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterIUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterIUS2 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterIUS2)
itkVotingBinaryIterativeHoleFillingImageFilterIUS2___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterIUS2_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS2_cast


def itkVotingBinaryIterativeHoleFillingImageFilterIUS3_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterIUS3.New()

class itkVotingBinaryIterativeHoleFillingImageFilterIUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterIUS3
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterIUS3

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterIUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterIUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterIUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterIUS3 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterIUS3)
itkVotingBinaryIterativeHoleFillingImageFilterIUS3___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterIUS3_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS3_cast


def itkVotingBinaryIterativeHoleFillingImageFilterIUS4_New():
    return itkVotingBinaryIterativeHoleFillingImageFilterIUS4.New()

class itkVotingBinaryIterativeHoleFillingImageFilterIUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    Fills in holes and cavities by iteratively applying a voting
    operation.

    This filter uses internally the VotingBinaryHoleFillingImageFilter,
    and runs it iteratively until no pixels are being changed or until it
    reaches the maximum number of iterations. The purpose of the filter is
    to fill in holes of medium size (tens of pixels in radius). In
    principle the number of iterations is related to the size of the holes
    to be filled in. The larger the holes, the more iteration must be run
    with this filter in order to fill in the full hole. The size of the
    neighborhood is also related to the curvature of the hole borders and
    therefore the hole size. Note that as a collateral effect this filter
    may also fill in cavities in the external side of structures.

    This filter is templated over a single image type because the output
    image type must be the same as the input image type. This is required
    in order to make the iterations possible, since the output image of
    one iteration is taken as the input image for the next iteration.

    See:  Image

    See:   VotingBinaryImageFilter

    See:   VotingBinaryHoleFillingImageFilter

    See:  Neighborhood

    See:  NeighborhoodOperator

    See:  NeighborhoodIterator 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_Clone)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetMaximumNumberOfIterations)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_SetMaximumNumberOfIterations)
    GetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetCurrentNumberOfIterations)
    SetCurrentNumberOfIterations = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_SetCurrentNumberOfIterations)
    SetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_SetRadius)
    GetRadius = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetRadius)
    SetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_SetBackgroundValue)
    SetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_SetForegroundValue)
    GetBackgroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetBackgroundValue)
    GetForegroundValue = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetForegroundValue)
    GetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetMajorityThreshold)
    SetMajorityThreshold = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_SetMajorityThreshold)
    GetNumberOfPixelsChanged = _swig_new_instance_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_GetNumberOfPixelsChanged)
    InputEqualityComparableCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_InputEqualityComparableCheck
    
    InputOStreamWritableeCheck = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_InputOStreamWritableeCheck
    
    __swig_destroy__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.delete_itkVotingBinaryIterativeHoleFillingImageFilterIUS4
    cast = _swig_new_static_method(_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_cast)

    def New(*args, **kargs):
        """New() -> itkVotingBinaryIterativeHoleFillingImageFilterIUS4

        Create a new object of the class itkVotingBinaryIterativeHoleFillingImageFilterIUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkVotingBinaryIterativeHoleFillingImageFilterIUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkVotingBinaryIterativeHoleFillingImageFilterIUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkVotingBinaryIterativeHoleFillingImageFilterIUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkVotingBinaryIterativeHoleFillingImageFilterIUS4 in _itkVotingBinaryIterativeHoleFillingImageFilterPython:
_itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_swigregister(itkVotingBinaryIterativeHoleFillingImageFilterIUS4)
itkVotingBinaryIterativeHoleFillingImageFilterIUS4___New_orig__ = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4___New_orig__
itkVotingBinaryIterativeHoleFillingImageFilterIUS4_cast = _itkVotingBinaryIterativeHoleFillingImageFilterPython.itkVotingBinaryIterativeHoleFillingImageFilterIUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def voting_binary_iterative_hole_filling_image_filter(*args, **kwargs):
    """Procedural interface for VotingBinaryIterativeHoleFillingImageFilter"""
    import itk

    instance = itk.VotingBinaryIterativeHoleFillingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def voting_binary_iterative_hole_filling_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKLabelVoting.VotingBinaryIterativeHoleFillingImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    voting_binary_iterative_hole_filling_image_filter.__doc__ = filter_object.__doc__
    voting_binary_iterative_hole_filling_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    voting_binary_iterative_hole_filling_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        voting_binary_iterative_hole_filling_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        voting_binary_iterative_hole_filling_image_filter.__doc__ += "\n"
        voting_binary_iterative_hole_filling_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        voting_binary_iterative_hole_filling_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




