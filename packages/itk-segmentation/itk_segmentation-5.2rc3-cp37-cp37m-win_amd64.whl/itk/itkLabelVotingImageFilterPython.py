# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKLabelVotingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkLabelVotingImageFilterPython
else:
    import _itkLabelVotingImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkLabelVotingImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkLabelVotingImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkLabelVotingImageFilterIUC2IUC2_New():
    return itkLabelVotingImageFilterIUC2IUC2.New()

class itkLabelVotingImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_Clone)
    SetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_SetLabelForUndecidedPixels)
    GetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_GetLabelForUndecidedPixels)
    UnsetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_UnsetLabelForUndecidedPixels)
    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputConvertibleToOutputCheck
    
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_SameDimensionCheck
    
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputUnsignedIntCheck
    
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_IntConvertibleToOutputPixelType
    
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputPlusIntCheck
    
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_InputIncrementDecrementOperatorsCheck
    
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUC2IUC2

        Create a new object of the class itkLabelVotingImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelVotingImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelVotingImageFilterIUC2IUC2 in _itkLabelVotingImageFilterPython:
_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_swigregister(itkLabelVotingImageFilterIUC2IUC2)
itkLabelVotingImageFilterIUC2IUC2___New_orig__ = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2___New_orig__
itkLabelVotingImageFilterIUC2IUC2_cast = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC2IUC2_cast


def itkLabelVotingImageFilterIUC3IUC3_New():
    return itkLabelVotingImageFilterIUC3IUC3.New()

class itkLabelVotingImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_Clone)
    SetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_SetLabelForUndecidedPixels)
    GetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_GetLabelForUndecidedPixels)
    UnsetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_UnsetLabelForUndecidedPixels)
    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputConvertibleToOutputCheck
    
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_SameDimensionCheck
    
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputUnsignedIntCheck
    
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_IntConvertibleToOutputPixelType
    
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputPlusIntCheck
    
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_InputIncrementDecrementOperatorsCheck
    
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUC3IUC3

        Create a new object of the class itkLabelVotingImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelVotingImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelVotingImageFilterIUC3IUC3 in _itkLabelVotingImageFilterPython:
_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_swigregister(itkLabelVotingImageFilterIUC3IUC3)
itkLabelVotingImageFilterIUC3IUC3___New_orig__ = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3___New_orig__
itkLabelVotingImageFilterIUC3IUC3_cast = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC3IUC3_cast


def itkLabelVotingImageFilterIUC4IUC4_New():
    return itkLabelVotingImageFilterIUC4IUC4.New()

class itkLabelVotingImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_Clone)
    SetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_SetLabelForUndecidedPixels)
    GetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_GetLabelForUndecidedPixels)
    UnsetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_UnsetLabelForUndecidedPixels)
    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_InputConvertibleToOutputCheck
    
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_SameDimensionCheck
    
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_InputUnsignedIntCheck
    
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_IntConvertibleToOutputPixelType
    
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_InputPlusIntCheck
    
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_InputIncrementDecrementOperatorsCheck
    
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUC4IUC4

        Create a new object of the class itkLabelVotingImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelVotingImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelVotingImageFilterIUC4IUC4 in _itkLabelVotingImageFilterPython:
_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_swigregister(itkLabelVotingImageFilterIUC4IUC4)
itkLabelVotingImageFilterIUC4IUC4___New_orig__ = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4___New_orig__
itkLabelVotingImageFilterIUC4IUC4_cast = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUC4IUC4_cast


def itkLabelVotingImageFilterIUS2IUS2_New():
    return itkLabelVotingImageFilterIUS2IUS2.New()

class itkLabelVotingImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_Clone)
    SetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_SetLabelForUndecidedPixels)
    GetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_GetLabelForUndecidedPixels)
    UnsetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_UnsetLabelForUndecidedPixels)
    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputConvertibleToOutputCheck
    
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_SameDimensionCheck
    
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputUnsignedIntCheck
    
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_IntConvertibleToOutputPixelType
    
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputPlusIntCheck
    
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_InputIncrementDecrementOperatorsCheck
    
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUS2IUS2

        Create a new object of the class itkLabelVotingImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelVotingImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelVotingImageFilterIUS2IUS2 in _itkLabelVotingImageFilterPython:
_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_swigregister(itkLabelVotingImageFilterIUS2IUS2)
itkLabelVotingImageFilterIUS2IUS2___New_orig__ = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2___New_orig__
itkLabelVotingImageFilterIUS2IUS2_cast = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS2IUS2_cast


def itkLabelVotingImageFilterIUS3IUS3_New():
    return itkLabelVotingImageFilterIUS3IUS3.New()

class itkLabelVotingImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_Clone)
    SetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_SetLabelForUndecidedPixels)
    GetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_GetLabelForUndecidedPixels)
    UnsetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_UnsetLabelForUndecidedPixels)
    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputConvertibleToOutputCheck
    
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_SameDimensionCheck
    
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputUnsignedIntCheck
    
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_IntConvertibleToOutputPixelType
    
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputPlusIntCheck
    
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_InputIncrementDecrementOperatorsCheck
    
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUS3IUS3

        Create a new object of the class itkLabelVotingImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelVotingImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelVotingImageFilterIUS3IUS3 in _itkLabelVotingImageFilterPython:
_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_swigregister(itkLabelVotingImageFilterIUS3IUS3)
itkLabelVotingImageFilterIUS3IUS3___New_orig__ = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3___New_orig__
itkLabelVotingImageFilterIUS3IUS3_cast = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS3IUS3_cast


def itkLabelVotingImageFilterIUS4IUS4_New():
    return itkLabelVotingImageFilterIUS4IUS4.New()

class itkLabelVotingImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    This filter performs pixelwise voting among an arbitrary number of
    input images, where each of them represents a segmentation of the same
    scene (i.e., image).

    Label voting is a simple method of classifier combination applied to
    image segmentation. Typically, the accuracy of the combined
    segmentation exceeds the accuracy of any of the input segmentations.
    Voting is therefore commonly used as a way of boosting segmentation
    performance.

    The use of label voting for combination of multiple segmentations is
    described in

    T. Rohlfing and C. R. Maurer, Jr., "Multi-classifier framework for
    atlas-based image segmentation," Pattern Recognition Letters, 2005.

    INPUTS All input volumes to this filter must be segmentations of an
    image, that is, they must have discrete pixel values where each value
    represents a different segmented object.  Input volumes must all
    contain the same size RequestedRegions. Not all input images must
    contain all possible labels, but all label values must have the same
    meaning in all images.

    OUTPUTS The voting filter produces a single output volume. Each output
    pixel contains the label that occurred most often among the labels
    assigned to this pixel in all the input volumes, that is, the label
    that received the maximum number of "votes" from the input pixels..
    If the maximum number of votes is not unique, i.e., if more than one
    label have a maximum number of votes, an "undecided" label is
    assigned to that output pixel.  By default, the label used for
    undecided pixels is the maximum label value used in the input images
    plus one. Since it is possible for an image with 8 bit pixel values to
    use all 256 possible label values, it is permissible to combine 8 bit
    (i.e., byte) images into a 16 bit (i.e., short) output image.

    PARAMETERS The label used for "undecided" labels can be set using
    SetLabelForUndecidedPixels. This functionality can be unset by calling
    UnsetLabelForUndecidedPixels.

    Torsten Rohlfing, SRI International, Neuroscience Program 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_Clone)
    SetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_SetLabelForUndecidedPixels)
    GetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_GetLabelForUndecidedPixels)
    UnsetLabelForUndecidedPixels = _swig_new_instance_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_UnsetLabelForUndecidedPixels)
    InputConvertibleToOutputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_InputConvertibleToOutputCheck
    
    IntConvertibleToInputCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_IntConvertibleToInputCheck
    
    SameDimensionCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_SameDimensionCheck
    
    InputUnsignedIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_InputUnsignedIntCheck
    
    IntConvertibleToOutputPixelType = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_IntConvertibleToOutputPixelType
    
    InputPlusIntCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_InputPlusIntCheck
    
    InputIncrementDecrementOperatorsCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_InputIncrementDecrementOperatorsCheck
    
    OutputOStreamWritableCheck = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_OutputOStreamWritableCheck
    
    __swig_destroy__ = _itkLabelVotingImageFilterPython.delete_itkLabelVotingImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkLabelVotingImageFilterIUS4IUS4

        Create a new object of the class itkLabelVotingImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkLabelVotingImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkLabelVotingImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkLabelVotingImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkLabelVotingImageFilterIUS4IUS4 in _itkLabelVotingImageFilterPython:
_itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_swigregister(itkLabelVotingImageFilterIUS4IUS4)
itkLabelVotingImageFilterIUS4IUS4___New_orig__ = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4___New_orig__
itkLabelVotingImageFilterIUS4IUS4_cast = _itkLabelVotingImageFilterPython.itkLabelVotingImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def label_voting_image_filter(*args, **kwargs):
    """Procedural interface for LabelVotingImageFilter"""
    import itk

    instance = itk.LabelVotingImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def label_voting_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKLabelVoting.LabelVotingImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    label_voting_image_filter.__doc__ = filter_object.__doc__
    label_voting_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    label_voting_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        label_voting_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        label_voting_image_filter.__doc__ += "\n"
        label_voting_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        label_voting_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




