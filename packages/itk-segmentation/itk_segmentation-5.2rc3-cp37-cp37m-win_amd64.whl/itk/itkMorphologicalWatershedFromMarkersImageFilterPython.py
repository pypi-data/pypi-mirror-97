# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKWatershedsPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkMorphologicalWatershedFromMarkersImageFilterPython
else:
    import _itkMorphologicalWatershedFromMarkersImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkMorphologicalWatershedFromMarkersImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkMorphologicalWatershedFromMarkersImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID2ISS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterID2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ISS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID2ISS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID2ISS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID2ISS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID2ISS2)
itkMorphologicalWatershedFromMarkersImageFilterID2ISS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2ISS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID2IUC2.New()

class itkMorphologicalWatershedFromMarkersImageFilterID2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUC2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID2IUC2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID2IUC2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID2IUC2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID2IUC2)
itkMorphologicalWatershedFromMarkersImageFilterID2IUC2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUC2_cast


def itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID2IUS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterID2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2IUS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID2IUS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID2IUS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID2IUS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID2IUS2)
itkMorphologicalWatershedFromMarkersImageFilterID2IUS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID2IUS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID3ISS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterID3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ISS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID3ISS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID3ISS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID3ISS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID3ISS3)
itkMorphologicalWatershedFromMarkersImageFilterID3ISS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3ISS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID3IUC3.New()

class itkMorphologicalWatershedFromMarkersImageFilterID3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID3IUC3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID3IUC3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID3IUC3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID3IUC3)
itkMorphologicalWatershedFromMarkersImageFilterID3IUC3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUC3_cast


def itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID3IUS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterID3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID3IUS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID3IUS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID3IUS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID3IUS3)
itkMorphologicalWatershedFromMarkersImageFilterID3IUS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID3IUS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID4ISS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterID4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ISS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID4ISS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID4ISS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID4ISS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID4ISS4)
itkMorphologicalWatershedFromMarkersImageFilterID4ISS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4ISS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID4IUC4.New()

class itkMorphologicalWatershedFromMarkersImageFilterID4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUC4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID4IUC4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID4IUC4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID4IUC4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID4IUC4)
itkMorphologicalWatershedFromMarkersImageFilterID4IUC4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUC4_cast


def itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterID4IUS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterID4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4IUS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterID4IUS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterID4IUS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterID4IUS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterID4IUS4)
itkMorphologicalWatershedFromMarkersImageFilterID4IUS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterID4IUS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2ISS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2)
itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2ISS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUC2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2)
itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUC2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IUS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2)
itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF2IUS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3ISS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3)
itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3ISS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3)
itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUC3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3)
itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF3IUS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4ISS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4)
itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4ISS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUC4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4)
itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUC4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IUS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4)
itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIF4IUS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2)
itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2ISS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUC2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2)
itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUC2_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2IUS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2)
itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS2IUS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3)
itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3ISS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3)
itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUC3_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3)
itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS3IUS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4)
itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4ISS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUC4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4)
itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUC4_cast


def itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4IUS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4)
itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterISS4IUS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2ISS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2)
itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2ISS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2)
itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUC2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2)
itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC2IUS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3ISS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3)
itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3ISS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3)
itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUC3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3)
itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC3IUS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4ISS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4)
itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4ISS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4)
itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUC4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4)
itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUC4IUS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2ISS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2)
itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2ISS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUC2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2)
itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUC2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2)
itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS2IUS2_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3ISS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3)
itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3ISS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3)
itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUC3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3)
itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS3IUS3_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4ISS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4)
itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4ISS4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUC4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4)
itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUC4_cast


def itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_New():
    return itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4.New()

class itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    Morphological watershed transform from markers.

    The watershed transform is a tool for image segmentation that is fast
    and flexible and potentially fairly parameter free. It was originally
    derived from a geophysical model of rain falling on a terrain and a
    variety of more formal definitions have been devised to allow
    development of practical algorithms. If an image is considered as a
    terrain and divided into catchment basins then the hope is that each
    catchment basin would contain an object of interest.

    The output is a label image. A label image, sometimes referred to as a
    categorical image, has unique values for each region. For example, if
    a watershed produces 2 regions, all pixels belonging to one region
    would have value A, and all belonging to the other might have value B.
    Unassigned pixels, such as watershed lines, might have the background
    value (0 by convention).

    The simplest way of using the watershed is to preprocess the image we
    want to segment so that the boundaries of our objects are bright (e.g
    apply an edge detector) and compute the watershed transform of the
    edge image. Watershed lines will correspond to the boundaries and our
    problem will be solved. This is rarely useful in practice because
    there are always more regional minima than there are objects, either
    due to noise or natural variations in the object surfaces. Therefore,
    while many watershed lines do lie on significant boundaries, there are
    many that don't. Various methods can be used to reduce the number of
    minima in the image, like thresholding the smallest values, filtering
    the minima and/or smoothing the image.

    This filter use another approach to avoid the problem of over
    segmentation: it let the user provide a marker image which mark the
    minima in the input image and give them a label. The minima are
    imposed in the input image by the markers. The labels of the output
    image are the label of the marker image.

    The morphological watershed transform algorithm is described in
    Chapter 9.2 of Pierre Soille's book "Morphological Image Analysis:
    Principles and Applications", Second Edition, Springer, 2003.

    This code was contributed in the Insight Journal paper: "The
    watershed transform in ITK - discussion and new developments" by
    Beare R., Lehmann G.https://www.insight-
    journal.org/browse/publication/92

    Gaetan Lehmann. Biologie du Developpement et de la Reproduction, INRA
    de Jouy-en-Josas, France.

    Richard Beare. Department of Medicine, Monash University, Melbourne,
    Australia.

    See:   WatershedImageFilter, MorphologicalWatershedImageFilter 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_Clone)
    SetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_SetMarkerImage)
    GetMarkerImage = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_GetMarkerImage)
    SetInput1 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_SetInput1)
    SetInput2 = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_SetInput2)
    SetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_SetFullyConnected)
    GetFullyConnected = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_GetFullyConnected)
    FullyConnectedOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_FullyConnectedOn)
    FullyConnectedOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_FullyConnectedOff)
    SetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_SetMarkWatershedLine)
    GetMarkWatershedLine = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_GetMarkWatershedLine)
    MarkWatershedLineOn = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_MarkWatershedLineOn)
    MarkWatershedLineOff = _swig_new_instance_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_MarkWatershedLineOff)
    __swig_destroy__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.delete_itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4

        Create a new object of the class itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4 in _itkMorphologicalWatershedFromMarkersImageFilterPython:
_itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_swigregister(itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4)
itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4___New_orig__ = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4___New_orig__
itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_cast = _itkMorphologicalWatershedFromMarkersImageFilterPython.itkMorphologicalWatershedFromMarkersImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def morphological_watershed_from_markers_image_filter(*args, **kwargs):
    """Procedural interface for MorphologicalWatershedFromMarkersImageFilter"""
    import itk

    instance = itk.MorphologicalWatershedFromMarkersImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def morphological_watershed_from_markers_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKWatersheds.MorphologicalWatershedFromMarkersImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    morphological_watershed_from_markers_image_filter.__doc__ = filter_object.__doc__
    morphological_watershed_from_markers_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    morphological_watershed_from_markers_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        morphological_watershed_from_markers_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        morphological_watershed_from_markers_image_filter.__doc__ += "\n"
        morphological_watershed_from_markers_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        morphological_watershed_from_markers_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




