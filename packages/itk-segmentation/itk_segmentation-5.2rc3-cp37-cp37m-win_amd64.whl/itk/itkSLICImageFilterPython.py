# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKSuperPixelPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSLICImageFilterPython
else:
    import _itkSLICImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSLICImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSLICImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkFixedArrayPython
import itk.pyBasePython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkRGBAPixelPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.ITKCommonBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageToImageFilterCommonPython
class itkSLICImageFilterICVD22IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterICVD22IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_cast)

# Register itkSLICImageFilterICVD22IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_swigregister(itkSLICImageFilterICVD22IULL2_Superclass)
itkSLICImageFilterICVD22IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Superclass_cast

class itkSLICImageFilterICVD22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVD22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_cast)

# Register itkSLICImageFilterICVD22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_swigregister(itkSLICImageFilterICVD22IUS2_Superclass)
itkSLICImageFilterICVD22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Superclass_cast

class itkSLICImageFilterICVD23IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterICVD23IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_cast)

# Register itkSLICImageFilterICVD23IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_swigregister(itkSLICImageFilterICVD23IULL3_Superclass)
itkSLICImageFilterICVD23IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Superclass_cast

class itkSLICImageFilterICVD23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVD23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_cast)

# Register itkSLICImageFilterICVD23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_swigregister(itkSLICImageFilterICVD23IUS3_Superclass)
itkSLICImageFilterICVD23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Superclass_cast

class itkSLICImageFilterICVD24IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterICVD24IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_cast)

# Register itkSLICImageFilterICVD24IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_swigregister(itkSLICImageFilterICVD24IULL4_Superclass)
itkSLICImageFilterICVD24IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Superclass_cast

class itkSLICImageFilterICVD24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVD24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_cast)

# Register itkSLICImageFilterICVD24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_swigregister(itkSLICImageFilterICVD24IUS4_Superclass)
itkSLICImageFilterICVD24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Superclass_cast

class itkSLICImageFilterICVD32IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterICVD32IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_cast)

# Register itkSLICImageFilterICVD32IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_swigregister(itkSLICImageFilterICVD32IULL2_Superclass)
itkSLICImageFilterICVD32IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Superclass_cast

class itkSLICImageFilterICVD32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVD32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_cast)

# Register itkSLICImageFilterICVD32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_swigregister(itkSLICImageFilterICVD32IUS2_Superclass)
itkSLICImageFilterICVD32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Superclass_cast

class itkSLICImageFilterICVD33IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterICVD33IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_cast)

# Register itkSLICImageFilterICVD33IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_swigregister(itkSLICImageFilterICVD33IULL3_Superclass)
itkSLICImageFilterICVD33IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Superclass_cast

class itkSLICImageFilterICVD33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVD33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_cast)

# Register itkSLICImageFilterICVD33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_swigregister(itkSLICImageFilterICVD33IUS3_Superclass)
itkSLICImageFilterICVD33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Superclass_cast

class itkSLICImageFilterICVD34IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterICVD34IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_cast)

# Register itkSLICImageFilterICVD34IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_swigregister(itkSLICImageFilterICVD34IULL4_Superclass)
itkSLICImageFilterICVD34IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Superclass_cast

class itkSLICImageFilterICVD34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVD34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_cast)

# Register itkSLICImageFilterICVD34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_swigregister(itkSLICImageFilterICVD34IUS4_Superclass)
itkSLICImageFilterICVD34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Superclass_cast

class itkSLICImageFilterICVD42IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterICVD42IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_cast)

# Register itkSLICImageFilterICVD42IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_swigregister(itkSLICImageFilterICVD42IULL2_Superclass)
itkSLICImageFilterICVD42IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Superclass_cast

class itkSLICImageFilterICVD42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVD42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_cast)

# Register itkSLICImageFilterICVD42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_swigregister(itkSLICImageFilterICVD42IUS2_Superclass)
itkSLICImageFilterICVD42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Superclass_cast

class itkSLICImageFilterICVD43IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterICVD43IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_cast)

# Register itkSLICImageFilterICVD43IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_swigregister(itkSLICImageFilterICVD43IULL3_Superclass)
itkSLICImageFilterICVD43IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Superclass_cast

class itkSLICImageFilterICVD43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVD43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_cast)

# Register itkSLICImageFilterICVD43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_swigregister(itkSLICImageFilterICVD43IUS3_Superclass)
itkSLICImageFilterICVD43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Superclass_cast

class itkSLICImageFilterICVD44IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterICVD44IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_cast)

# Register itkSLICImageFilterICVD44IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_swigregister(itkSLICImageFilterICVD44IULL4_Superclass)
itkSLICImageFilterICVD44IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Superclass_cast

class itkSLICImageFilterICVD44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVD44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_cast)

# Register itkSLICImageFilterICVD44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_swigregister(itkSLICImageFilterICVD44IUS4_Superclass)
itkSLICImageFilterICVD44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Superclass_cast

class itkSLICImageFilterICVF22IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterICVF22IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_cast)

# Register itkSLICImageFilterICVF22IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_swigregister(itkSLICImageFilterICVF22IULL2_Superclass)
itkSLICImageFilterICVF22IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Superclass_cast

class itkSLICImageFilterICVF22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVF22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_cast)

# Register itkSLICImageFilterICVF22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_swigregister(itkSLICImageFilterICVF22IUS2_Superclass)
itkSLICImageFilterICVF22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Superclass_cast

class itkSLICImageFilterICVF23IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterICVF23IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_cast)

# Register itkSLICImageFilterICVF23IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_swigregister(itkSLICImageFilterICVF23IULL3_Superclass)
itkSLICImageFilterICVF23IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Superclass_cast

class itkSLICImageFilterICVF23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVF23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_cast)

# Register itkSLICImageFilterICVF23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_swigregister(itkSLICImageFilterICVF23IUS3_Superclass)
itkSLICImageFilterICVF23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Superclass_cast

class itkSLICImageFilterICVF24IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterICVF24IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_cast)

# Register itkSLICImageFilterICVF24IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_swigregister(itkSLICImageFilterICVF24IULL4_Superclass)
itkSLICImageFilterICVF24IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Superclass_cast

class itkSLICImageFilterICVF24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVF24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_cast)

# Register itkSLICImageFilterICVF24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_swigregister(itkSLICImageFilterICVF24IUS4_Superclass)
itkSLICImageFilterICVF24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Superclass_cast

class itkSLICImageFilterICVF32IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterICVF32IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_cast)

# Register itkSLICImageFilterICVF32IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_swigregister(itkSLICImageFilterICVF32IULL2_Superclass)
itkSLICImageFilterICVF32IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Superclass_cast

class itkSLICImageFilterICVF32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVF32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_cast)

# Register itkSLICImageFilterICVF32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_swigregister(itkSLICImageFilterICVF32IUS2_Superclass)
itkSLICImageFilterICVF32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Superclass_cast

class itkSLICImageFilterICVF33IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterICVF33IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_cast)

# Register itkSLICImageFilterICVF33IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_swigregister(itkSLICImageFilterICVF33IULL3_Superclass)
itkSLICImageFilterICVF33IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Superclass_cast

class itkSLICImageFilterICVF33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVF33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_cast)

# Register itkSLICImageFilterICVF33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_swigregister(itkSLICImageFilterICVF33IUS3_Superclass)
itkSLICImageFilterICVF33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Superclass_cast

class itkSLICImageFilterICVF34IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterICVF34IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_cast)

# Register itkSLICImageFilterICVF34IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_swigregister(itkSLICImageFilterICVF34IULL4_Superclass)
itkSLICImageFilterICVF34IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Superclass_cast

class itkSLICImageFilterICVF34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVF34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_cast)

# Register itkSLICImageFilterICVF34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_swigregister(itkSLICImageFilterICVF34IUS4_Superclass)
itkSLICImageFilterICVF34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Superclass_cast

class itkSLICImageFilterICVF42IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterICVF42IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_cast)

# Register itkSLICImageFilterICVF42IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_swigregister(itkSLICImageFilterICVF42IULL2_Superclass)
itkSLICImageFilterICVF42IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Superclass_cast

class itkSLICImageFilterICVF42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterICVF42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_cast)

# Register itkSLICImageFilterICVF42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_swigregister(itkSLICImageFilterICVF42IUS2_Superclass)
itkSLICImageFilterICVF42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Superclass_cast

class itkSLICImageFilterICVF43IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterICVF43IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_cast)

# Register itkSLICImageFilterICVF43IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_swigregister(itkSLICImageFilterICVF43IULL3_Superclass)
itkSLICImageFilterICVF43IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Superclass_cast

class itkSLICImageFilterICVF43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterICVF43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_cast)

# Register itkSLICImageFilterICVF43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_swigregister(itkSLICImageFilterICVF43IUS3_Superclass)
itkSLICImageFilterICVF43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Superclass_cast

class itkSLICImageFilterICVF44IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterICVF44IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_cast)

# Register itkSLICImageFilterICVF44IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_swigregister(itkSLICImageFilterICVF44IULL4_Superclass)
itkSLICImageFilterICVF44IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Superclass_cast

class itkSLICImageFilterICVF44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterICVF44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_cast)

# Register itkSLICImageFilterICVF44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_swigregister(itkSLICImageFilterICVF44IUS4_Superclass)
itkSLICImageFilterICVF44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Superclass_cast

class itkSLICImageFilterID2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterID2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_cast)

# Register itkSLICImageFilterID2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_swigregister(itkSLICImageFilterID2IULL2_Superclass)
itkSLICImageFilterID2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Superclass_cast

class itkSLICImageFilterID2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_cast)

# Register itkSLICImageFilterID2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_swigregister(itkSLICImageFilterID2IUS2_Superclass)
itkSLICImageFilterID2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Superclass_cast

class itkSLICImageFilterID3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterID3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_cast)

# Register itkSLICImageFilterID3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_swigregister(itkSLICImageFilterID3IULL3_Superclass)
itkSLICImageFilterID3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Superclass_cast

class itkSLICImageFilterID3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_cast)

# Register itkSLICImageFilterID3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_swigregister(itkSLICImageFilterID3IUS3_Superclass)
itkSLICImageFilterID3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Superclass_cast

class itkSLICImageFilterID4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterID4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_cast)

# Register itkSLICImageFilterID4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_swigregister(itkSLICImageFilterID4IULL4_Superclass)
itkSLICImageFilterID4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Superclass_cast

class itkSLICImageFilterID4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterID4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_cast)

# Register itkSLICImageFilterID4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_swigregister(itkSLICImageFilterID4IUS4_Superclass)
itkSLICImageFilterID4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Superclass_cast

class itkSLICImageFilterIF2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIF2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_cast)

# Register itkSLICImageFilterIF2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_swigregister(itkSLICImageFilterIF2IULL2_Superclass)
itkSLICImageFilterIF2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Superclass_cast

class itkSLICImageFilterIF2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast)

# Register itkSLICImageFilterIF2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_swigregister(itkSLICImageFilterIF2IUS2_Superclass)
itkSLICImageFilterIF2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Superclass_cast

class itkSLICImageFilterIF3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIF3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_cast)

# Register itkSLICImageFilterIF3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_swigregister(itkSLICImageFilterIF3IULL3_Superclass)
itkSLICImageFilterIF3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Superclass_cast

class itkSLICImageFilterIF3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast)

# Register itkSLICImageFilterIF3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_swigregister(itkSLICImageFilterIF3IUS3_Superclass)
itkSLICImageFilterIF3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Superclass_cast

class itkSLICImageFilterIF4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIF4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_cast)

# Register itkSLICImageFilterIF4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_swigregister(itkSLICImageFilterIF4IULL4_Superclass)
itkSLICImageFilterIF4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Superclass_cast

class itkSLICImageFilterIF4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIF4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_cast)

# Register itkSLICImageFilterIF4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_swigregister(itkSLICImageFilterIF4IUS4_Superclass)
itkSLICImageFilterIF4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Superclass_cast

class itkSLICImageFilterIRGBUC2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_cast)

# Register itkSLICImageFilterIRGBUC2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_swigregister(itkSLICImageFilterIRGBUC2IULL2_Superclass)
itkSLICImageFilterIRGBUC2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Superclass_cast

class itkSLICImageFilterIRGBUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterIRGBUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_swigregister(itkSLICImageFilterIRGBUC2IUS2_Superclass)
itkSLICImageFilterIRGBUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Superclass_cast

class itkSLICImageFilterIRGBUC3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_cast)

# Register itkSLICImageFilterIRGBUC3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_swigregister(itkSLICImageFilterIRGBUC3IULL3_Superclass)
itkSLICImageFilterIRGBUC3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Superclass_cast

class itkSLICImageFilterIRGBUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterIRGBUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_swigregister(itkSLICImageFilterIRGBUC3IUS3_Superclass)
itkSLICImageFilterIRGBUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Superclass_cast

class itkSLICImageFilterIRGBUC4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_cast)

# Register itkSLICImageFilterIRGBUC4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_swigregister(itkSLICImageFilterIRGBUC4IULL4_Superclass)
itkSLICImageFilterIRGBUC4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Superclass_cast

class itkSLICImageFilterIRGBUC4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIRGBUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_cast)

# Register itkSLICImageFilterIRGBUC4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_swigregister(itkSLICImageFilterIRGBUC4IUS4_Superclass)
itkSLICImageFilterIRGBUC4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Superclass_cast

class itkSLICImageFilterISS2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterISS2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_cast)

# Register itkSLICImageFilterISS2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_swigregister(itkSLICImageFilterISS2IULL2_Superclass)
itkSLICImageFilterISS2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Superclass_cast

class itkSLICImageFilterISS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast)

# Register itkSLICImageFilterISS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_swigregister(itkSLICImageFilterISS2IUS2_Superclass)
itkSLICImageFilterISS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Superclass_cast

class itkSLICImageFilterISS3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterISS3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_cast)

# Register itkSLICImageFilterISS3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_swigregister(itkSLICImageFilterISS3IULL3_Superclass)
itkSLICImageFilterISS3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Superclass_cast

class itkSLICImageFilterISS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast)

# Register itkSLICImageFilterISS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_swigregister(itkSLICImageFilterISS3IUS3_Superclass)
itkSLICImageFilterISS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Superclass_cast

class itkSLICImageFilterISS4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterISS4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_cast)

# Register itkSLICImageFilterISS4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_swigregister(itkSLICImageFilterISS4IULL4_Superclass)
itkSLICImageFilterISS4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Superclass_cast

class itkSLICImageFilterISS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterISS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_cast)

# Register itkSLICImageFilterISS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_swigregister(itkSLICImageFilterISS4IUS4_Superclass)
itkSLICImageFilterISS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Superclass_cast

class itkSLICImageFilterIUC2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIUC2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_cast)

# Register itkSLICImageFilterIUC2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_swigregister(itkSLICImageFilterIUC2IULL2_Superclass)
itkSLICImageFilterIUC2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Superclass_cast

class itkSLICImageFilterIUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterIUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_swigregister(itkSLICImageFilterIUC2IUS2_Superclass)
itkSLICImageFilterIUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Superclass_cast

class itkSLICImageFilterIUC3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIUC3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_cast)

# Register itkSLICImageFilterIUC3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_swigregister(itkSLICImageFilterIUC3IULL3_Superclass)
itkSLICImageFilterIUC3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Superclass_cast

class itkSLICImageFilterIUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterIUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_swigregister(itkSLICImageFilterIUC3IUS3_Superclass)
itkSLICImageFilterIUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Superclass_cast

class itkSLICImageFilterIUC4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIUC4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_cast)

# Register itkSLICImageFilterIUC4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_swigregister(itkSLICImageFilterIUC4IULL4_Superclass)
itkSLICImageFilterIUC4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Superclass_cast

class itkSLICImageFilterIUC4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_cast)

# Register itkSLICImageFilterIUC4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_swigregister(itkSLICImageFilterIUC4IUS4_Superclass)
itkSLICImageFilterIUC4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Superclass_cast

class itkSLICImageFilterIUS2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIUS2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_cast)

# Register itkSLICImageFilterIUS2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_swigregister(itkSLICImageFilterIUS2IULL2_Superclass)
itkSLICImageFilterIUS2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Superclass_cast

class itkSLICImageFilterIUS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast)

# Register itkSLICImageFilterIUS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_swigregister(itkSLICImageFilterIUS2IUS2_Superclass)
itkSLICImageFilterIUS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Superclass_cast

class itkSLICImageFilterIUS3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIUS3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_cast)

# Register itkSLICImageFilterIUS3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_swigregister(itkSLICImageFilterIUS3IULL3_Superclass)
itkSLICImageFilterIUS3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Superclass_cast

class itkSLICImageFilterIUS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast)

# Register itkSLICImageFilterIUS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_swigregister(itkSLICImageFilterIUS3IUS3_Superclass)
itkSLICImageFilterIUS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Superclass_cast

class itkSLICImageFilterIUS4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIUS4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_cast)

# Register itkSLICImageFilterIUS4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_swigregister(itkSLICImageFilterIUS4IULL4_Superclass)
itkSLICImageFilterIUS4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Superclass_cast

class itkSLICImageFilterIUS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_cast)

# Register itkSLICImageFilterIUS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_swigregister(itkSLICImageFilterIUS4IUS4_Superclass)
itkSLICImageFilterIUS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Superclass_cast

class itkSLICImageFilterIVD22IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIVD22IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_cast)

# Register itkSLICImageFilterIVD22IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_swigregister(itkSLICImageFilterIVD22IULL2_Superclass)
itkSLICImageFilterIVD22IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Superclass_cast

class itkSLICImageFilterIVD22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVD22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_cast)

# Register itkSLICImageFilterIVD22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_swigregister(itkSLICImageFilterIVD22IUS2_Superclass)
itkSLICImageFilterIVD22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Superclass_cast

class itkSLICImageFilterIVD23IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIVD23IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_cast)

# Register itkSLICImageFilterIVD23IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_swigregister(itkSLICImageFilterIVD23IULL3_Superclass)
itkSLICImageFilterIVD23IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Superclass_cast

class itkSLICImageFilterIVD23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVD23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_cast)

# Register itkSLICImageFilterIVD23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_swigregister(itkSLICImageFilterIVD23IUS3_Superclass)
itkSLICImageFilterIVD23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Superclass_cast

class itkSLICImageFilterIVD24IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIVD24IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_cast)

# Register itkSLICImageFilterIVD24IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_swigregister(itkSLICImageFilterIVD24IULL4_Superclass)
itkSLICImageFilterIVD24IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Superclass_cast

class itkSLICImageFilterIVD24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVD24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_cast)

# Register itkSLICImageFilterIVD24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_swigregister(itkSLICImageFilterIVD24IUS4_Superclass)
itkSLICImageFilterIVD24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Superclass_cast

class itkSLICImageFilterIVD32IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIVD32IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_cast)

# Register itkSLICImageFilterIVD32IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_swigregister(itkSLICImageFilterIVD32IULL2_Superclass)
itkSLICImageFilterIVD32IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Superclass_cast

class itkSLICImageFilterIVD32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVD32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_cast)

# Register itkSLICImageFilterIVD32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_swigregister(itkSLICImageFilterIVD32IUS2_Superclass)
itkSLICImageFilterIVD32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Superclass_cast

class itkSLICImageFilterIVD33IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIVD33IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_cast)

# Register itkSLICImageFilterIVD33IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_swigregister(itkSLICImageFilterIVD33IULL3_Superclass)
itkSLICImageFilterIVD33IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Superclass_cast

class itkSLICImageFilterIVD33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVD33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_cast)

# Register itkSLICImageFilterIVD33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_swigregister(itkSLICImageFilterIVD33IUS3_Superclass)
itkSLICImageFilterIVD33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Superclass_cast

class itkSLICImageFilterIVD34IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIVD34IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_cast)

# Register itkSLICImageFilterIVD34IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_swigregister(itkSLICImageFilterIVD34IULL4_Superclass)
itkSLICImageFilterIVD34IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Superclass_cast

class itkSLICImageFilterIVD34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVD34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_cast)

# Register itkSLICImageFilterIVD34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_swigregister(itkSLICImageFilterIVD34IUS4_Superclass)
itkSLICImageFilterIVD34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Superclass_cast

class itkSLICImageFilterIVD42IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIVD42IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_cast)

# Register itkSLICImageFilterIVD42IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_swigregister(itkSLICImageFilterIVD42IULL2_Superclass)
itkSLICImageFilterIVD42IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Superclass_cast

class itkSLICImageFilterIVD42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVD42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_cast)

# Register itkSLICImageFilterIVD42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_swigregister(itkSLICImageFilterIVD42IUS2_Superclass)
itkSLICImageFilterIVD42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Superclass_cast

class itkSLICImageFilterIVD43IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIVD43IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_cast)

# Register itkSLICImageFilterIVD43IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_swigregister(itkSLICImageFilterIVD43IULL3_Superclass)
itkSLICImageFilterIVD43IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Superclass_cast

class itkSLICImageFilterIVD43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVD43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_cast)

# Register itkSLICImageFilterIVD43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_swigregister(itkSLICImageFilterIVD43IUS3_Superclass)
itkSLICImageFilterIVD43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Superclass_cast

class itkSLICImageFilterIVD44IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIVD44IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_cast)

# Register itkSLICImageFilterIVD44IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_swigregister(itkSLICImageFilterIVD44IULL4_Superclass)
itkSLICImageFilterIVD44IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Superclass_cast

class itkSLICImageFilterIVD44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVD44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_cast)

# Register itkSLICImageFilterIVD44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_swigregister(itkSLICImageFilterIVD44IUS4_Superclass)
itkSLICImageFilterIVD44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Superclass_cast

class itkSLICImageFilterIVF22IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIVF22IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_cast)

# Register itkSLICImageFilterIVF22IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_swigregister(itkSLICImageFilterIVF22IULL2_Superclass)
itkSLICImageFilterIVF22IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Superclass_cast

class itkSLICImageFilterIVF22IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVF22IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_cast)

# Register itkSLICImageFilterIVF22IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_swigregister(itkSLICImageFilterIVF22IUS2_Superclass)
itkSLICImageFilterIVF22IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Superclass_cast

class itkSLICImageFilterIVF23IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIVF23IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_cast)

# Register itkSLICImageFilterIVF23IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_swigregister(itkSLICImageFilterIVF23IULL3_Superclass)
itkSLICImageFilterIVF23IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Superclass_cast

class itkSLICImageFilterIVF23IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVF23IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_cast)

# Register itkSLICImageFilterIVF23IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_swigregister(itkSLICImageFilterIVF23IUS3_Superclass)
itkSLICImageFilterIVF23IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Superclass_cast

class itkSLICImageFilterIVF24IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIVF24IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_cast)

# Register itkSLICImageFilterIVF24IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_swigregister(itkSLICImageFilterIVF24IULL4_Superclass)
itkSLICImageFilterIVF24IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Superclass_cast

class itkSLICImageFilterIVF24IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVF24IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_cast)

# Register itkSLICImageFilterIVF24IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_swigregister(itkSLICImageFilterIVF24IUS4_Superclass)
itkSLICImageFilterIVF24IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Superclass_cast

class itkSLICImageFilterIVF32IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIVF32IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_cast)

# Register itkSLICImageFilterIVF32IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_swigregister(itkSLICImageFilterIVF32IULL2_Superclass)
itkSLICImageFilterIVF32IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Superclass_cast

class itkSLICImageFilterIVF32IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVF32IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_cast)

# Register itkSLICImageFilterIVF32IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_swigregister(itkSLICImageFilterIVF32IUS2_Superclass)
itkSLICImageFilterIVF32IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Superclass_cast

class itkSLICImageFilterIVF33IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIVF33IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_cast)

# Register itkSLICImageFilterIVF33IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_swigregister(itkSLICImageFilterIVF33IULL3_Superclass)
itkSLICImageFilterIVF33IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Superclass_cast

class itkSLICImageFilterIVF33IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVF33IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_cast)

# Register itkSLICImageFilterIVF33IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_swigregister(itkSLICImageFilterIVF33IUS3_Superclass)
itkSLICImageFilterIVF33IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Superclass_cast

class itkSLICImageFilterIVF34IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIVF34IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_cast)

# Register itkSLICImageFilterIVF34IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_swigregister(itkSLICImageFilterIVF34IULL4_Superclass)
itkSLICImageFilterIVF34IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Superclass_cast

class itkSLICImageFilterIVF34IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVF34IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_cast)

# Register itkSLICImageFilterIVF34IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_swigregister(itkSLICImageFilterIVF34IUS4_Superclass)
itkSLICImageFilterIVF34IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Superclass_cast

class itkSLICImageFilterIVF42IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterIVF42IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_cast)

# Register itkSLICImageFilterIVF42IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_swigregister(itkSLICImageFilterIVF42IULL2_Superclass)
itkSLICImageFilterIVF42IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Superclass_cast

class itkSLICImageFilterIVF42IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterIVF42IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_cast)

# Register itkSLICImageFilterIVF42IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_swigregister(itkSLICImageFilterIVF42IUS2_Superclass)
itkSLICImageFilterIVF42IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Superclass_cast

class itkSLICImageFilterIVF43IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterIVF43IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_cast)

# Register itkSLICImageFilterIVF43IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_swigregister(itkSLICImageFilterIVF43IULL3_Superclass)
itkSLICImageFilterIVF43IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Superclass_cast

class itkSLICImageFilterIVF43IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterIVF43IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_cast)

# Register itkSLICImageFilterIVF43IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_swigregister(itkSLICImageFilterIVF43IUS3_Superclass)
itkSLICImageFilterIVF43IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Superclass_cast

class itkSLICImageFilterIVF44IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterIVF44IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_cast)

# Register itkSLICImageFilterIVF44IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_swigregister(itkSLICImageFilterIVF44IULL4_Superclass)
itkSLICImageFilterIVF44IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Superclass_cast

class itkSLICImageFilterIVF44IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterIVF44IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_cast)

# Register itkSLICImageFilterIVF44IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_swigregister(itkSLICImageFilterIVF44IUS4_Superclass)
itkSLICImageFilterIVF44IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Superclass_cast

class itkSLICImageFilterVID2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterVID2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_cast)

# Register itkSLICImageFilterVID2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_swigregister(itkSLICImageFilterVID2IULL2_Superclass)
itkSLICImageFilterVID2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Superclass_cast

class itkSLICImageFilterVID2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVID2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_cast)

# Register itkSLICImageFilterVID2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_swigregister(itkSLICImageFilterVID2IUS2_Superclass)
itkSLICImageFilterVID2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Superclass_cast

class itkSLICImageFilterVID3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterVID3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_cast)

# Register itkSLICImageFilterVID3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_swigregister(itkSLICImageFilterVID3IULL3_Superclass)
itkSLICImageFilterVID3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Superclass_cast

class itkSLICImageFilterVID3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVID3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_cast)

# Register itkSLICImageFilterVID3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_swigregister(itkSLICImageFilterVID3IUS3_Superclass)
itkSLICImageFilterVID3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Superclass_cast

class itkSLICImageFilterVID4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterVID4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_cast)

# Register itkSLICImageFilterVID4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_swigregister(itkSLICImageFilterVID4IULL4_Superclass)
itkSLICImageFilterVID4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Superclass_cast

class itkSLICImageFilterVID4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVID4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_cast)

# Register itkSLICImageFilterVID4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_swigregister(itkSLICImageFilterVID4IUS4_Superclass)
itkSLICImageFilterVID4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Superclass_cast

class itkSLICImageFilterVIF2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterVIF2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_cast)

# Register itkSLICImageFilterVIF2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_swigregister(itkSLICImageFilterVIF2IULL2_Superclass)
itkSLICImageFilterVIF2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Superclass_cast

class itkSLICImageFilterVIF2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIF2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIF2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_swigregister(itkSLICImageFilterVIF2IUS2_Superclass)
itkSLICImageFilterVIF2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Superclass_cast

class itkSLICImageFilterVIF3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterVIF3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_cast)

# Register itkSLICImageFilterVIF3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_swigregister(itkSLICImageFilterVIF3IULL3_Superclass)
itkSLICImageFilterVIF3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Superclass_cast

class itkSLICImageFilterVIF3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIF3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIF3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_swigregister(itkSLICImageFilterVIF3IUS3_Superclass)
itkSLICImageFilterVIF3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Superclass_cast

class itkSLICImageFilterVIF4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterVIF4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_cast)

# Register itkSLICImageFilterVIF4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_swigregister(itkSLICImageFilterVIF4IULL4_Superclass)
itkSLICImageFilterVIF4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Superclass_cast

class itkSLICImageFilterVIF4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVIF4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_cast)

# Register itkSLICImageFilterVIF4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_swigregister(itkSLICImageFilterVIF4IUS4_Superclass)
itkSLICImageFilterVIF4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Superclass_cast

class itkSLICImageFilterVISS2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterVISS2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_cast)

# Register itkSLICImageFilterVISS2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_swigregister(itkSLICImageFilterVISS2IULL2_Superclass)
itkSLICImageFilterVISS2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Superclass_cast

class itkSLICImageFilterVISS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVISS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast)

# Register itkSLICImageFilterVISS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_swigregister(itkSLICImageFilterVISS2IUS2_Superclass)
itkSLICImageFilterVISS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Superclass_cast

class itkSLICImageFilterVISS3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterVISS3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_cast)

# Register itkSLICImageFilterVISS3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_swigregister(itkSLICImageFilterVISS3IULL3_Superclass)
itkSLICImageFilterVISS3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Superclass_cast

class itkSLICImageFilterVISS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVISS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast)

# Register itkSLICImageFilterVISS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_swigregister(itkSLICImageFilterVISS3IUS3_Superclass)
itkSLICImageFilterVISS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Superclass_cast

class itkSLICImageFilterVISS4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterVISS4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_cast)

# Register itkSLICImageFilterVISS4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_swigregister(itkSLICImageFilterVISS4IULL4_Superclass)
itkSLICImageFilterVISS4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Superclass_cast

class itkSLICImageFilterVISS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVISS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_cast)

# Register itkSLICImageFilterVISS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_swigregister(itkSLICImageFilterVISS4IUS4_Superclass)
itkSLICImageFilterVISS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Superclass_cast

class itkSLICImageFilterVIUC2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterVIUC2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_cast)

# Register itkSLICImageFilterVIUC2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_swigregister(itkSLICImageFilterVIUC2IULL2_Superclass)
itkSLICImageFilterVIUC2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Superclass_cast

class itkSLICImageFilterVIUC2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIUC2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIUC2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_swigregister(itkSLICImageFilterVIUC2IUS2_Superclass)
itkSLICImageFilterVIUC2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Superclass_cast

class itkSLICImageFilterVIUC3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterVIUC3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_cast)

# Register itkSLICImageFilterVIUC3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_swigregister(itkSLICImageFilterVIUC3IULL3_Superclass)
itkSLICImageFilterVIUC3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Superclass_cast

class itkSLICImageFilterVIUC3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIUC3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIUC3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_swigregister(itkSLICImageFilterVIUC3IUS3_Superclass)
itkSLICImageFilterVIUC3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Superclass_cast

class itkSLICImageFilterVIUC4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterVIUC4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_cast)

# Register itkSLICImageFilterVIUC4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_swigregister(itkSLICImageFilterVIUC4IULL4_Superclass)
itkSLICImageFilterVIUC4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Superclass_cast

class itkSLICImageFilterVIUC4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVIUC4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_cast)

# Register itkSLICImageFilterVIUC4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_swigregister(itkSLICImageFilterVIUC4IUS4_Superclass)
itkSLICImageFilterVIUC4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Superclass_cast

class itkSLICImageFilterVIUS2IULL2_Superclass(itk.itkImageSourcePython.itkImageSourceIULL2):
    r"""Proxy of C++ itkSLICImageFilterVIUS2IULL2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IULL2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_cast)

# Register itkSLICImageFilterVIUS2IULL2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_swigregister(itkSLICImageFilterVIUS2IULL2_Superclass)
itkSLICImageFilterVIUS2IULL2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Superclass_cast

class itkSLICImageFilterVIUS2IUS2_Superclass(itk.itkImageSourcePython.itkImageSourceIUS2):
    r"""Proxy of C++ itkSLICImageFilterVIUS2IUS2_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast)

# Register itkSLICImageFilterVIUS2IUS2_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_swigregister(itkSLICImageFilterVIUS2IUS2_Superclass)
itkSLICImageFilterVIUS2IUS2_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Superclass_cast

class itkSLICImageFilterVIUS3IULL3_Superclass(itk.itkImageSourcePython.itkImageSourceIULL3):
    r"""Proxy of C++ itkSLICImageFilterVIUS3IULL3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IULL3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_cast)

# Register itkSLICImageFilterVIUS3IULL3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_swigregister(itkSLICImageFilterVIUS3IULL3_Superclass)
itkSLICImageFilterVIUS3IULL3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Superclass_cast

class itkSLICImageFilterVIUS3IUS3_Superclass(itk.itkImageSourcePython.itkImageSourceIUS3):
    r"""Proxy of C++ itkSLICImageFilterVIUS3IUS3_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast)

# Register itkSLICImageFilterVIUS3IUS3_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_swigregister(itkSLICImageFilterVIUS3IUS3_Superclass)
itkSLICImageFilterVIUS3IUS3_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Superclass_cast

class itkSLICImageFilterVIUS4IULL4_Superclass(itk.itkImageSourcePython.itkImageSourceIULL4):
    r"""Proxy of C++ itkSLICImageFilterVIUS4IULL4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IULL4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_cast)

# Register itkSLICImageFilterVIUS4IULL4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_swigregister(itkSLICImageFilterVIUS4IULL4_Superclass)
itkSLICImageFilterVIUS4IULL4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Superclass_cast

class itkSLICImageFilterVIUS4IUS4_Superclass(itk.itkImageSourcePython.itkImageSourceIUS4):
    r"""Proxy of C++ itkSLICImageFilterVIUS4IUS4_Superclass class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_SetInput)
    GetInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_GetInput)
    PushBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PushBackInput)
    PopBackInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PopBackInput)
    PushFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PushFrontInput)
    PopFrontInput = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_PopFrontInput)
    SetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_SetCoordinateTolerance)
    GetCoordinateTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_GetCoordinateTolerance)
    SetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_SetDirectionTolerance)
    GetDirectionTolerance = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_GetDirectionTolerance)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IUS4_Superclass
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_cast)

# Register itkSLICImageFilterVIUS4IUS4_Superclass in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_swigregister(itkSLICImageFilterVIUS4IUS4_Superclass)
itkSLICImageFilterVIUS4IUS4_Superclass_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Superclass_cast


def itkSLICImageFilterICVD22IULL2_New():
    return itkSLICImageFilterICVD22IULL2.New()

class itkSLICImageFilterICVD22IULL2(itkSLICImageFilterICVD22IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD22IULL2

        Create a new object of the class itkSLICImageFilterICVD22IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD22IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD22IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD22IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD22IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_swigregister(itkSLICImageFilterICVD22IULL2)
itkSLICImageFilterICVD22IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2___New_orig__
itkSLICImageFilterICVD22IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IULL2_cast


def itkSLICImageFilterICVD22IUS2_New():
    return itkSLICImageFilterICVD22IUS2.New()

class itkSLICImageFilterICVD22IUS2(itkSLICImageFilterICVD22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD22IUS2

        Create a new object of the class itkSLICImageFilterICVD22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_swigregister(itkSLICImageFilterICVD22IUS2)
itkSLICImageFilterICVD22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2___New_orig__
itkSLICImageFilterICVD22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD22IUS2_cast


def itkSLICImageFilterICVD23IULL3_New():
    return itkSLICImageFilterICVD23IULL3.New()

class itkSLICImageFilterICVD23IULL3(itkSLICImageFilterICVD23IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD23IULL3

        Create a new object of the class itkSLICImageFilterICVD23IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD23IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD23IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD23IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD23IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_swigregister(itkSLICImageFilterICVD23IULL3)
itkSLICImageFilterICVD23IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3___New_orig__
itkSLICImageFilterICVD23IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IULL3_cast


def itkSLICImageFilterICVD23IUS3_New():
    return itkSLICImageFilterICVD23IUS3.New()

class itkSLICImageFilterICVD23IUS3(itkSLICImageFilterICVD23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD23IUS3

        Create a new object of the class itkSLICImageFilterICVD23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_swigregister(itkSLICImageFilterICVD23IUS3)
itkSLICImageFilterICVD23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3___New_orig__
itkSLICImageFilterICVD23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD23IUS3_cast


def itkSLICImageFilterICVD24IULL4_New():
    return itkSLICImageFilterICVD24IULL4.New()

class itkSLICImageFilterICVD24IULL4(itkSLICImageFilterICVD24IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD24IULL4

        Create a new object of the class itkSLICImageFilterICVD24IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD24IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD24IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD24IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD24IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_swigregister(itkSLICImageFilterICVD24IULL4)
itkSLICImageFilterICVD24IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4___New_orig__
itkSLICImageFilterICVD24IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IULL4_cast


def itkSLICImageFilterICVD24IUS4_New():
    return itkSLICImageFilterICVD24IUS4.New()

class itkSLICImageFilterICVD24IUS4(itkSLICImageFilterICVD24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD24IUS4

        Create a new object of the class itkSLICImageFilterICVD24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_swigregister(itkSLICImageFilterICVD24IUS4)
itkSLICImageFilterICVD24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4___New_orig__
itkSLICImageFilterICVD24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD24IUS4_cast


def itkSLICImageFilterICVD32IULL2_New():
    return itkSLICImageFilterICVD32IULL2.New()

class itkSLICImageFilterICVD32IULL2(itkSLICImageFilterICVD32IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD32IULL2

        Create a new object of the class itkSLICImageFilterICVD32IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD32IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD32IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD32IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD32IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_swigregister(itkSLICImageFilterICVD32IULL2)
itkSLICImageFilterICVD32IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2___New_orig__
itkSLICImageFilterICVD32IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IULL2_cast


def itkSLICImageFilterICVD32IUS2_New():
    return itkSLICImageFilterICVD32IUS2.New()

class itkSLICImageFilterICVD32IUS2(itkSLICImageFilterICVD32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD32IUS2

        Create a new object of the class itkSLICImageFilterICVD32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_swigregister(itkSLICImageFilterICVD32IUS2)
itkSLICImageFilterICVD32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2___New_orig__
itkSLICImageFilterICVD32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD32IUS2_cast


def itkSLICImageFilterICVD33IULL3_New():
    return itkSLICImageFilterICVD33IULL3.New()

class itkSLICImageFilterICVD33IULL3(itkSLICImageFilterICVD33IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD33IULL3

        Create a new object of the class itkSLICImageFilterICVD33IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD33IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD33IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD33IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD33IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_swigregister(itkSLICImageFilterICVD33IULL3)
itkSLICImageFilterICVD33IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3___New_orig__
itkSLICImageFilterICVD33IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IULL3_cast


def itkSLICImageFilterICVD33IUS3_New():
    return itkSLICImageFilterICVD33IUS3.New()

class itkSLICImageFilterICVD33IUS3(itkSLICImageFilterICVD33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD33IUS3

        Create a new object of the class itkSLICImageFilterICVD33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_swigregister(itkSLICImageFilterICVD33IUS3)
itkSLICImageFilterICVD33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3___New_orig__
itkSLICImageFilterICVD33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD33IUS3_cast


def itkSLICImageFilterICVD34IULL4_New():
    return itkSLICImageFilterICVD34IULL4.New()

class itkSLICImageFilterICVD34IULL4(itkSLICImageFilterICVD34IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD34IULL4

        Create a new object of the class itkSLICImageFilterICVD34IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD34IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD34IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD34IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD34IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_swigregister(itkSLICImageFilterICVD34IULL4)
itkSLICImageFilterICVD34IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4___New_orig__
itkSLICImageFilterICVD34IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IULL4_cast


def itkSLICImageFilterICVD34IUS4_New():
    return itkSLICImageFilterICVD34IUS4.New()

class itkSLICImageFilterICVD34IUS4(itkSLICImageFilterICVD34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD34IUS4

        Create a new object of the class itkSLICImageFilterICVD34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_swigregister(itkSLICImageFilterICVD34IUS4)
itkSLICImageFilterICVD34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4___New_orig__
itkSLICImageFilterICVD34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD34IUS4_cast


def itkSLICImageFilterICVD42IULL2_New():
    return itkSLICImageFilterICVD42IULL2.New()

class itkSLICImageFilterICVD42IULL2(itkSLICImageFilterICVD42IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD42IULL2

        Create a new object of the class itkSLICImageFilterICVD42IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD42IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD42IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD42IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD42IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_swigregister(itkSLICImageFilterICVD42IULL2)
itkSLICImageFilterICVD42IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2___New_orig__
itkSLICImageFilterICVD42IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IULL2_cast


def itkSLICImageFilterICVD42IUS2_New():
    return itkSLICImageFilterICVD42IUS2.New()

class itkSLICImageFilterICVD42IUS2(itkSLICImageFilterICVD42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD42IUS2

        Create a new object of the class itkSLICImageFilterICVD42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_swigregister(itkSLICImageFilterICVD42IUS2)
itkSLICImageFilterICVD42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2___New_orig__
itkSLICImageFilterICVD42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD42IUS2_cast


def itkSLICImageFilterICVD43IULL3_New():
    return itkSLICImageFilterICVD43IULL3.New()

class itkSLICImageFilterICVD43IULL3(itkSLICImageFilterICVD43IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD43IULL3

        Create a new object of the class itkSLICImageFilterICVD43IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD43IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD43IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD43IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD43IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_swigregister(itkSLICImageFilterICVD43IULL3)
itkSLICImageFilterICVD43IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3___New_orig__
itkSLICImageFilterICVD43IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IULL3_cast


def itkSLICImageFilterICVD43IUS3_New():
    return itkSLICImageFilterICVD43IUS3.New()

class itkSLICImageFilterICVD43IUS3(itkSLICImageFilterICVD43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD43IUS3

        Create a new object of the class itkSLICImageFilterICVD43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_swigregister(itkSLICImageFilterICVD43IUS3)
itkSLICImageFilterICVD43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3___New_orig__
itkSLICImageFilterICVD43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD43IUS3_cast


def itkSLICImageFilterICVD44IULL4_New():
    return itkSLICImageFilterICVD44IULL4.New()

class itkSLICImageFilterICVD44IULL4(itkSLICImageFilterICVD44IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD44IULL4

        Create a new object of the class itkSLICImageFilterICVD44IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD44IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD44IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD44IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD44IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_swigregister(itkSLICImageFilterICVD44IULL4)
itkSLICImageFilterICVD44IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4___New_orig__
itkSLICImageFilterICVD44IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IULL4_cast


def itkSLICImageFilterICVD44IUS4_New():
    return itkSLICImageFilterICVD44IUS4.New()

class itkSLICImageFilterICVD44IUS4(itkSLICImageFilterICVD44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVD44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVD44IUS4

        Create a new object of the class itkSLICImageFilterICVD44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVD44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVD44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVD44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVD44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_swigregister(itkSLICImageFilterICVD44IUS4)
itkSLICImageFilterICVD44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4___New_orig__
itkSLICImageFilterICVD44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVD44IUS4_cast


def itkSLICImageFilterICVF22IULL2_New():
    return itkSLICImageFilterICVF22IULL2.New()

class itkSLICImageFilterICVF22IULL2(itkSLICImageFilterICVF22IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF22IULL2

        Create a new object of the class itkSLICImageFilterICVF22IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF22IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF22IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF22IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF22IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_swigregister(itkSLICImageFilterICVF22IULL2)
itkSLICImageFilterICVF22IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2___New_orig__
itkSLICImageFilterICVF22IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IULL2_cast


def itkSLICImageFilterICVF22IUS2_New():
    return itkSLICImageFilterICVF22IUS2.New()

class itkSLICImageFilterICVF22IUS2(itkSLICImageFilterICVF22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF22IUS2

        Create a new object of the class itkSLICImageFilterICVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_swigregister(itkSLICImageFilterICVF22IUS2)
itkSLICImageFilterICVF22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2___New_orig__
itkSLICImageFilterICVF22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF22IUS2_cast


def itkSLICImageFilterICVF23IULL3_New():
    return itkSLICImageFilterICVF23IULL3.New()

class itkSLICImageFilterICVF23IULL3(itkSLICImageFilterICVF23IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF23IULL3

        Create a new object of the class itkSLICImageFilterICVF23IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF23IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF23IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF23IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF23IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_swigregister(itkSLICImageFilterICVF23IULL3)
itkSLICImageFilterICVF23IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3___New_orig__
itkSLICImageFilterICVF23IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IULL3_cast


def itkSLICImageFilterICVF23IUS3_New():
    return itkSLICImageFilterICVF23IUS3.New()

class itkSLICImageFilterICVF23IUS3(itkSLICImageFilterICVF23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF23IUS3

        Create a new object of the class itkSLICImageFilterICVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_swigregister(itkSLICImageFilterICVF23IUS3)
itkSLICImageFilterICVF23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3___New_orig__
itkSLICImageFilterICVF23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF23IUS3_cast


def itkSLICImageFilterICVF24IULL4_New():
    return itkSLICImageFilterICVF24IULL4.New()

class itkSLICImageFilterICVF24IULL4(itkSLICImageFilterICVF24IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF24IULL4

        Create a new object of the class itkSLICImageFilterICVF24IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF24IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF24IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF24IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF24IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_swigregister(itkSLICImageFilterICVF24IULL4)
itkSLICImageFilterICVF24IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4___New_orig__
itkSLICImageFilterICVF24IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IULL4_cast


def itkSLICImageFilterICVF24IUS4_New():
    return itkSLICImageFilterICVF24IUS4.New()

class itkSLICImageFilterICVF24IUS4(itkSLICImageFilterICVF24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF24IUS4

        Create a new object of the class itkSLICImageFilterICVF24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_swigregister(itkSLICImageFilterICVF24IUS4)
itkSLICImageFilterICVF24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4___New_orig__
itkSLICImageFilterICVF24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF24IUS4_cast


def itkSLICImageFilterICVF32IULL2_New():
    return itkSLICImageFilterICVF32IULL2.New()

class itkSLICImageFilterICVF32IULL2(itkSLICImageFilterICVF32IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF32IULL2

        Create a new object of the class itkSLICImageFilterICVF32IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF32IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF32IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF32IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF32IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_swigregister(itkSLICImageFilterICVF32IULL2)
itkSLICImageFilterICVF32IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2___New_orig__
itkSLICImageFilterICVF32IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IULL2_cast


def itkSLICImageFilterICVF32IUS2_New():
    return itkSLICImageFilterICVF32IUS2.New()

class itkSLICImageFilterICVF32IUS2(itkSLICImageFilterICVF32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF32IUS2

        Create a new object of the class itkSLICImageFilterICVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_swigregister(itkSLICImageFilterICVF32IUS2)
itkSLICImageFilterICVF32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2___New_orig__
itkSLICImageFilterICVF32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF32IUS2_cast


def itkSLICImageFilterICVF33IULL3_New():
    return itkSLICImageFilterICVF33IULL3.New()

class itkSLICImageFilterICVF33IULL3(itkSLICImageFilterICVF33IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF33IULL3

        Create a new object of the class itkSLICImageFilterICVF33IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF33IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF33IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF33IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF33IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_swigregister(itkSLICImageFilterICVF33IULL3)
itkSLICImageFilterICVF33IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3___New_orig__
itkSLICImageFilterICVF33IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IULL3_cast


def itkSLICImageFilterICVF33IUS3_New():
    return itkSLICImageFilterICVF33IUS3.New()

class itkSLICImageFilterICVF33IUS3(itkSLICImageFilterICVF33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF33IUS3

        Create a new object of the class itkSLICImageFilterICVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_swigregister(itkSLICImageFilterICVF33IUS3)
itkSLICImageFilterICVF33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3___New_orig__
itkSLICImageFilterICVF33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF33IUS3_cast


def itkSLICImageFilterICVF34IULL4_New():
    return itkSLICImageFilterICVF34IULL4.New()

class itkSLICImageFilterICVF34IULL4(itkSLICImageFilterICVF34IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF34IULL4

        Create a new object of the class itkSLICImageFilterICVF34IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF34IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF34IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF34IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF34IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_swigregister(itkSLICImageFilterICVF34IULL4)
itkSLICImageFilterICVF34IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4___New_orig__
itkSLICImageFilterICVF34IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IULL4_cast


def itkSLICImageFilterICVF34IUS4_New():
    return itkSLICImageFilterICVF34IUS4.New()

class itkSLICImageFilterICVF34IUS4(itkSLICImageFilterICVF34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF34IUS4

        Create a new object of the class itkSLICImageFilterICVF34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_swigregister(itkSLICImageFilterICVF34IUS4)
itkSLICImageFilterICVF34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4___New_orig__
itkSLICImageFilterICVF34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF34IUS4_cast


def itkSLICImageFilterICVF42IULL2_New():
    return itkSLICImageFilterICVF42IULL2.New()

class itkSLICImageFilterICVF42IULL2(itkSLICImageFilterICVF42IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF42IULL2

        Create a new object of the class itkSLICImageFilterICVF42IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF42IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF42IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF42IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF42IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_swigregister(itkSLICImageFilterICVF42IULL2)
itkSLICImageFilterICVF42IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2___New_orig__
itkSLICImageFilterICVF42IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IULL2_cast


def itkSLICImageFilterICVF42IUS2_New():
    return itkSLICImageFilterICVF42IUS2.New()

class itkSLICImageFilterICVF42IUS2(itkSLICImageFilterICVF42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF42IUS2

        Create a new object of the class itkSLICImageFilterICVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_swigregister(itkSLICImageFilterICVF42IUS2)
itkSLICImageFilterICVF42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2___New_orig__
itkSLICImageFilterICVF42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF42IUS2_cast


def itkSLICImageFilterICVF43IULL3_New():
    return itkSLICImageFilterICVF43IULL3.New()

class itkSLICImageFilterICVF43IULL3(itkSLICImageFilterICVF43IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF43IULL3

        Create a new object of the class itkSLICImageFilterICVF43IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF43IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF43IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF43IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF43IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_swigregister(itkSLICImageFilterICVF43IULL3)
itkSLICImageFilterICVF43IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3___New_orig__
itkSLICImageFilterICVF43IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IULL3_cast


def itkSLICImageFilterICVF43IUS3_New():
    return itkSLICImageFilterICVF43IUS3.New()

class itkSLICImageFilterICVF43IUS3(itkSLICImageFilterICVF43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF43IUS3

        Create a new object of the class itkSLICImageFilterICVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_swigregister(itkSLICImageFilterICVF43IUS3)
itkSLICImageFilterICVF43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3___New_orig__
itkSLICImageFilterICVF43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF43IUS3_cast


def itkSLICImageFilterICVF44IULL4_New():
    return itkSLICImageFilterICVF44IULL4.New()

class itkSLICImageFilterICVF44IULL4(itkSLICImageFilterICVF44IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF44IULL4

        Create a new object of the class itkSLICImageFilterICVF44IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF44IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF44IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF44IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF44IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_swigregister(itkSLICImageFilterICVF44IULL4)
itkSLICImageFilterICVF44IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4___New_orig__
itkSLICImageFilterICVF44IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IULL4_cast


def itkSLICImageFilterICVF44IUS4_New():
    return itkSLICImageFilterICVF44IUS4.New()

class itkSLICImageFilterICVF44IUS4(itkSLICImageFilterICVF44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterICVF44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterICVF44IUS4

        Create a new object of the class itkSLICImageFilterICVF44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterICVF44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterICVF44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterICVF44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterICVF44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_swigregister(itkSLICImageFilterICVF44IUS4)
itkSLICImageFilterICVF44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4___New_orig__
itkSLICImageFilterICVF44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterICVF44IUS4_cast


def itkSLICImageFilterID2IULL2_New():
    return itkSLICImageFilterID2IULL2.New()

class itkSLICImageFilterID2IULL2(itkSLICImageFilterID2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID2IULL2

        Create a new object of the class itkSLICImageFilterID2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_swigregister(itkSLICImageFilterID2IULL2)
itkSLICImageFilterID2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID2IULL2___New_orig__
itkSLICImageFilterID2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IULL2_cast


def itkSLICImageFilterID2IUS2_New():
    return itkSLICImageFilterID2IUS2.New()

class itkSLICImageFilterID2IUS2(itkSLICImageFilterID2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID2IUS2

        Create a new object of the class itkSLICImageFilterID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_swigregister(itkSLICImageFilterID2IUS2)
itkSLICImageFilterID2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2___New_orig__
itkSLICImageFilterID2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterID2IUS2_cast


def itkSLICImageFilterID3IULL3_New():
    return itkSLICImageFilterID3IULL3.New()

class itkSLICImageFilterID3IULL3(itkSLICImageFilterID3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID3IULL3

        Create a new object of the class itkSLICImageFilterID3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_swigregister(itkSLICImageFilterID3IULL3)
itkSLICImageFilterID3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID3IULL3___New_orig__
itkSLICImageFilterID3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IULL3_cast


def itkSLICImageFilterID3IUS3_New():
    return itkSLICImageFilterID3IUS3.New()

class itkSLICImageFilterID3IUS3(itkSLICImageFilterID3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID3IUS3

        Create a new object of the class itkSLICImageFilterID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_swigregister(itkSLICImageFilterID3IUS3)
itkSLICImageFilterID3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3___New_orig__
itkSLICImageFilterID3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterID3IUS3_cast


def itkSLICImageFilterID4IULL4_New():
    return itkSLICImageFilterID4IULL4.New()

class itkSLICImageFilterID4IULL4(itkSLICImageFilterID4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID4IULL4

        Create a new object of the class itkSLICImageFilterID4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_swigregister(itkSLICImageFilterID4IULL4)
itkSLICImageFilterID4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID4IULL4___New_orig__
itkSLICImageFilterID4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IULL4_cast


def itkSLICImageFilterID4IUS4_New():
    return itkSLICImageFilterID4IUS4.New()

class itkSLICImageFilterID4IUS4(itkSLICImageFilterID4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterID4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterID4IUS4

        Create a new object of the class itkSLICImageFilterID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterID4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_swigregister(itkSLICImageFilterID4IUS4)
itkSLICImageFilterID4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterID4IUS4___New_orig__
itkSLICImageFilterID4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterID4IUS4_cast


def itkSLICImageFilterIF2IULL2_New():
    return itkSLICImageFilterIF2IULL2.New()

class itkSLICImageFilterIF2IULL2(itkSLICImageFilterIF2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IULL2

        Create a new object of the class itkSLICImageFilterIF2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_swigregister(itkSLICImageFilterIF2IULL2)
itkSLICImageFilterIF2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2___New_orig__
itkSLICImageFilterIF2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IULL2_cast


def itkSLICImageFilterIF2IUS2_New():
    return itkSLICImageFilterIF2IUS2.New()

class itkSLICImageFilterIF2IUS2(itkSLICImageFilterIF2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF2IUS2

        Create a new object of the class itkSLICImageFilterIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_swigregister(itkSLICImageFilterIF2IUS2)
itkSLICImageFilterIF2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2___New_orig__
itkSLICImageFilterIF2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF2IUS2_cast


def itkSLICImageFilterIF3IULL3_New():
    return itkSLICImageFilterIF3IULL3.New()

class itkSLICImageFilterIF3IULL3(itkSLICImageFilterIF3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IULL3

        Create a new object of the class itkSLICImageFilterIF3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_swigregister(itkSLICImageFilterIF3IULL3)
itkSLICImageFilterIF3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3___New_orig__
itkSLICImageFilterIF3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IULL3_cast


def itkSLICImageFilterIF3IUS3_New():
    return itkSLICImageFilterIF3IUS3.New()

class itkSLICImageFilterIF3IUS3(itkSLICImageFilterIF3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF3IUS3

        Create a new object of the class itkSLICImageFilterIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_swigregister(itkSLICImageFilterIF3IUS3)
itkSLICImageFilterIF3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3___New_orig__
itkSLICImageFilterIF3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF3IUS3_cast


def itkSLICImageFilterIF4IULL4_New():
    return itkSLICImageFilterIF4IULL4.New()

class itkSLICImageFilterIF4IULL4(itkSLICImageFilterIF4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF4IULL4

        Create a new object of the class itkSLICImageFilterIF4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_swigregister(itkSLICImageFilterIF4IULL4)
itkSLICImageFilterIF4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4___New_orig__
itkSLICImageFilterIF4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IULL4_cast


def itkSLICImageFilterIF4IUS4_New():
    return itkSLICImageFilterIF4IUS4.New()

class itkSLICImageFilterIF4IUS4(itkSLICImageFilterIF4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIF4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIF4IUS4

        Create a new object of the class itkSLICImageFilterIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIF4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_swigregister(itkSLICImageFilterIF4IUS4)
itkSLICImageFilterIF4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4___New_orig__
itkSLICImageFilterIF4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIF4IUS4_cast


def itkSLICImageFilterIRGBUC2IULL2_New():
    return itkSLICImageFilterIRGBUC2IULL2.New()

class itkSLICImageFilterIRGBUC2IULL2(itkSLICImageFilterIRGBUC2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC2IULL2

        Create a new object of the class itkSLICImageFilterIRGBUC2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_swigregister(itkSLICImageFilterIRGBUC2IULL2)
itkSLICImageFilterIRGBUC2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2___New_orig__
itkSLICImageFilterIRGBUC2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IULL2_cast


def itkSLICImageFilterIRGBUC2IUS2_New():
    return itkSLICImageFilterIRGBUC2IUS2.New()

class itkSLICImageFilterIRGBUC2IUS2(itkSLICImageFilterIRGBUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC2IUS2

        Create a new object of the class itkSLICImageFilterIRGBUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_swigregister(itkSLICImageFilterIRGBUC2IUS2)
itkSLICImageFilterIRGBUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2___New_orig__
itkSLICImageFilterIRGBUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC2IUS2_cast


def itkSLICImageFilterIRGBUC3IULL3_New():
    return itkSLICImageFilterIRGBUC3IULL3.New()

class itkSLICImageFilterIRGBUC3IULL3(itkSLICImageFilterIRGBUC3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC3IULL3

        Create a new object of the class itkSLICImageFilterIRGBUC3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_swigregister(itkSLICImageFilterIRGBUC3IULL3)
itkSLICImageFilterIRGBUC3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3___New_orig__
itkSLICImageFilterIRGBUC3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IULL3_cast


def itkSLICImageFilterIRGBUC3IUS3_New():
    return itkSLICImageFilterIRGBUC3IUS3.New()

class itkSLICImageFilterIRGBUC3IUS3(itkSLICImageFilterIRGBUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC3IUS3

        Create a new object of the class itkSLICImageFilterIRGBUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_swigregister(itkSLICImageFilterIRGBUC3IUS3)
itkSLICImageFilterIRGBUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3___New_orig__
itkSLICImageFilterIRGBUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC3IUS3_cast


def itkSLICImageFilterIRGBUC4IULL4_New():
    return itkSLICImageFilterIRGBUC4IULL4.New()

class itkSLICImageFilterIRGBUC4IULL4(itkSLICImageFilterIRGBUC4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC4IULL4

        Create a new object of the class itkSLICImageFilterIRGBUC4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_swigregister(itkSLICImageFilterIRGBUC4IULL4)
itkSLICImageFilterIRGBUC4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4___New_orig__
itkSLICImageFilterIRGBUC4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IULL4_cast


def itkSLICImageFilterIRGBUC4IUS4_New():
    return itkSLICImageFilterIRGBUC4IUS4.New()

class itkSLICImageFilterIRGBUC4IUS4(itkSLICImageFilterIRGBUC4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIRGBUC4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIRGBUC4IUS4

        Create a new object of the class itkSLICImageFilterIRGBUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIRGBUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIRGBUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIRGBUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIRGBUC4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_swigregister(itkSLICImageFilterIRGBUC4IUS4)
itkSLICImageFilterIRGBUC4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4___New_orig__
itkSLICImageFilterIRGBUC4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIRGBUC4IUS4_cast


def itkSLICImageFilterISS2IULL2_New():
    return itkSLICImageFilterISS2IULL2.New()

class itkSLICImageFilterISS2IULL2(itkSLICImageFilterISS2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IULL2

        Create a new object of the class itkSLICImageFilterISS2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_swigregister(itkSLICImageFilterISS2IULL2)
itkSLICImageFilterISS2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2___New_orig__
itkSLICImageFilterISS2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IULL2_cast


def itkSLICImageFilterISS2IUS2_New():
    return itkSLICImageFilterISS2IUS2.New()

class itkSLICImageFilterISS2IUS2(itkSLICImageFilterISS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS2IUS2

        Create a new object of the class itkSLICImageFilterISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_swigregister(itkSLICImageFilterISS2IUS2)
itkSLICImageFilterISS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2___New_orig__
itkSLICImageFilterISS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS2IUS2_cast


def itkSLICImageFilterISS3IULL3_New():
    return itkSLICImageFilterISS3IULL3.New()

class itkSLICImageFilterISS3IULL3(itkSLICImageFilterISS3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IULL3

        Create a new object of the class itkSLICImageFilterISS3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_swigregister(itkSLICImageFilterISS3IULL3)
itkSLICImageFilterISS3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3___New_orig__
itkSLICImageFilterISS3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IULL3_cast


def itkSLICImageFilterISS3IUS3_New():
    return itkSLICImageFilterISS3IUS3.New()

class itkSLICImageFilterISS3IUS3(itkSLICImageFilterISS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS3IUS3

        Create a new object of the class itkSLICImageFilterISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_swigregister(itkSLICImageFilterISS3IUS3)
itkSLICImageFilterISS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3___New_orig__
itkSLICImageFilterISS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS3IUS3_cast


def itkSLICImageFilterISS4IULL4_New():
    return itkSLICImageFilterISS4IULL4.New()

class itkSLICImageFilterISS4IULL4(itkSLICImageFilterISS4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS4IULL4

        Create a new object of the class itkSLICImageFilterISS4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_swigregister(itkSLICImageFilterISS4IULL4)
itkSLICImageFilterISS4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4___New_orig__
itkSLICImageFilterISS4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IULL4_cast


def itkSLICImageFilterISS4IUS4_New():
    return itkSLICImageFilterISS4IUS4.New()

class itkSLICImageFilterISS4IUS4(itkSLICImageFilterISS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterISS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterISS4IUS4

        Create a new object of the class itkSLICImageFilterISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterISS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_swigregister(itkSLICImageFilterISS4IUS4)
itkSLICImageFilterISS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4___New_orig__
itkSLICImageFilterISS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterISS4IUS4_cast


def itkSLICImageFilterIUC2IULL2_New():
    return itkSLICImageFilterIUC2IULL2.New()

class itkSLICImageFilterIUC2IULL2(itkSLICImageFilterIUC2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IULL2

        Create a new object of the class itkSLICImageFilterIUC2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_swigregister(itkSLICImageFilterIUC2IULL2)
itkSLICImageFilterIUC2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2___New_orig__
itkSLICImageFilterIUC2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IULL2_cast


def itkSLICImageFilterIUC2IUS2_New():
    return itkSLICImageFilterIUC2IUS2.New()

class itkSLICImageFilterIUC2IUS2(itkSLICImageFilterIUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC2IUS2

        Create a new object of the class itkSLICImageFilterIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_swigregister(itkSLICImageFilterIUC2IUS2)
itkSLICImageFilterIUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2___New_orig__
itkSLICImageFilterIUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC2IUS2_cast


def itkSLICImageFilterIUC3IULL3_New():
    return itkSLICImageFilterIUC3IULL3.New()

class itkSLICImageFilterIUC3IULL3(itkSLICImageFilterIUC3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IULL3

        Create a new object of the class itkSLICImageFilterIUC3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_swigregister(itkSLICImageFilterIUC3IULL3)
itkSLICImageFilterIUC3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3___New_orig__
itkSLICImageFilterIUC3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IULL3_cast


def itkSLICImageFilterIUC3IUS3_New():
    return itkSLICImageFilterIUC3IUS3.New()

class itkSLICImageFilterIUC3IUS3(itkSLICImageFilterIUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC3IUS3

        Create a new object of the class itkSLICImageFilterIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_swigregister(itkSLICImageFilterIUC3IUS3)
itkSLICImageFilterIUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3___New_orig__
itkSLICImageFilterIUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC3IUS3_cast


def itkSLICImageFilterIUC4IULL4_New():
    return itkSLICImageFilterIUC4IULL4.New()

class itkSLICImageFilterIUC4IULL4(itkSLICImageFilterIUC4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC4IULL4

        Create a new object of the class itkSLICImageFilterIUC4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_swigregister(itkSLICImageFilterIUC4IULL4)
itkSLICImageFilterIUC4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4___New_orig__
itkSLICImageFilterIUC4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IULL4_cast


def itkSLICImageFilterIUC4IUS4_New():
    return itkSLICImageFilterIUC4IUS4.New()

class itkSLICImageFilterIUC4IUS4(itkSLICImageFilterIUC4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUC4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUC4IUS4

        Create a new object of the class itkSLICImageFilterIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUC4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_swigregister(itkSLICImageFilterIUC4IUS4)
itkSLICImageFilterIUC4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4___New_orig__
itkSLICImageFilterIUC4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUC4IUS4_cast


def itkSLICImageFilterIUS2IULL2_New():
    return itkSLICImageFilterIUS2IULL2.New()

class itkSLICImageFilterIUS2IULL2(itkSLICImageFilterIUS2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IULL2

        Create a new object of the class itkSLICImageFilterIUS2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_swigregister(itkSLICImageFilterIUS2IULL2)
itkSLICImageFilterIUS2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2___New_orig__
itkSLICImageFilterIUS2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IULL2_cast


def itkSLICImageFilterIUS2IUS2_New():
    return itkSLICImageFilterIUS2IUS2.New()

class itkSLICImageFilterIUS2IUS2(itkSLICImageFilterIUS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS2IUS2

        Create a new object of the class itkSLICImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_swigregister(itkSLICImageFilterIUS2IUS2)
itkSLICImageFilterIUS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2___New_orig__
itkSLICImageFilterIUS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS2IUS2_cast


def itkSLICImageFilterIUS3IULL3_New():
    return itkSLICImageFilterIUS3IULL3.New()

class itkSLICImageFilterIUS3IULL3(itkSLICImageFilterIUS3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IULL3

        Create a new object of the class itkSLICImageFilterIUS3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_swigregister(itkSLICImageFilterIUS3IULL3)
itkSLICImageFilterIUS3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3___New_orig__
itkSLICImageFilterIUS3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IULL3_cast


def itkSLICImageFilterIUS3IUS3_New():
    return itkSLICImageFilterIUS3IUS3.New()

class itkSLICImageFilterIUS3IUS3(itkSLICImageFilterIUS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS3IUS3

        Create a new object of the class itkSLICImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_swigregister(itkSLICImageFilterIUS3IUS3)
itkSLICImageFilterIUS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3___New_orig__
itkSLICImageFilterIUS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS3IUS3_cast


def itkSLICImageFilterIUS4IULL4_New():
    return itkSLICImageFilterIUS4IULL4.New()

class itkSLICImageFilterIUS4IULL4(itkSLICImageFilterIUS4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS4IULL4

        Create a new object of the class itkSLICImageFilterIUS4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_swigregister(itkSLICImageFilterIUS4IULL4)
itkSLICImageFilterIUS4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4___New_orig__
itkSLICImageFilterIUS4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IULL4_cast


def itkSLICImageFilterIUS4IUS4_New():
    return itkSLICImageFilterIUS4IUS4.New()

class itkSLICImageFilterIUS4IUS4(itkSLICImageFilterIUS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIUS4IUS4

        Create a new object of the class itkSLICImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIUS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_swigregister(itkSLICImageFilterIUS4IUS4)
itkSLICImageFilterIUS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4___New_orig__
itkSLICImageFilterIUS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIUS4IUS4_cast


def itkSLICImageFilterIVD22IULL2_New():
    return itkSLICImageFilterIVD22IULL2.New()

class itkSLICImageFilterIVD22IULL2(itkSLICImageFilterIVD22IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD22IULL2

        Create a new object of the class itkSLICImageFilterIVD22IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD22IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD22IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD22IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD22IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_swigregister(itkSLICImageFilterIVD22IULL2)
itkSLICImageFilterIVD22IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2___New_orig__
itkSLICImageFilterIVD22IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IULL2_cast


def itkSLICImageFilterIVD22IUS2_New():
    return itkSLICImageFilterIVD22IUS2.New()

class itkSLICImageFilterIVD22IUS2(itkSLICImageFilterIVD22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD22IUS2

        Create a new object of the class itkSLICImageFilterIVD22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_swigregister(itkSLICImageFilterIVD22IUS2)
itkSLICImageFilterIVD22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2___New_orig__
itkSLICImageFilterIVD22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD22IUS2_cast


def itkSLICImageFilterIVD23IULL3_New():
    return itkSLICImageFilterIVD23IULL3.New()

class itkSLICImageFilterIVD23IULL3(itkSLICImageFilterIVD23IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD23IULL3

        Create a new object of the class itkSLICImageFilterIVD23IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD23IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD23IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD23IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD23IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_swigregister(itkSLICImageFilterIVD23IULL3)
itkSLICImageFilterIVD23IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3___New_orig__
itkSLICImageFilterIVD23IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IULL3_cast


def itkSLICImageFilterIVD23IUS3_New():
    return itkSLICImageFilterIVD23IUS3.New()

class itkSLICImageFilterIVD23IUS3(itkSLICImageFilterIVD23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD23IUS3

        Create a new object of the class itkSLICImageFilterIVD23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_swigregister(itkSLICImageFilterIVD23IUS3)
itkSLICImageFilterIVD23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3___New_orig__
itkSLICImageFilterIVD23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD23IUS3_cast


def itkSLICImageFilterIVD24IULL4_New():
    return itkSLICImageFilterIVD24IULL4.New()

class itkSLICImageFilterIVD24IULL4(itkSLICImageFilterIVD24IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD24IULL4

        Create a new object of the class itkSLICImageFilterIVD24IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD24IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD24IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD24IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD24IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_swigregister(itkSLICImageFilterIVD24IULL4)
itkSLICImageFilterIVD24IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4___New_orig__
itkSLICImageFilterIVD24IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IULL4_cast


def itkSLICImageFilterIVD24IUS4_New():
    return itkSLICImageFilterIVD24IUS4.New()

class itkSLICImageFilterIVD24IUS4(itkSLICImageFilterIVD24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD24IUS4

        Create a new object of the class itkSLICImageFilterIVD24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_swigregister(itkSLICImageFilterIVD24IUS4)
itkSLICImageFilterIVD24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4___New_orig__
itkSLICImageFilterIVD24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD24IUS4_cast


def itkSLICImageFilterIVD32IULL2_New():
    return itkSLICImageFilterIVD32IULL2.New()

class itkSLICImageFilterIVD32IULL2(itkSLICImageFilterIVD32IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD32IULL2

        Create a new object of the class itkSLICImageFilterIVD32IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD32IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD32IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD32IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD32IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_swigregister(itkSLICImageFilterIVD32IULL2)
itkSLICImageFilterIVD32IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2___New_orig__
itkSLICImageFilterIVD32IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IULL2_cast


def itkSLICImageFilterIVD32IUS2_New():
    return itkSLICImageFilterIVD32IUS2.New()

class itkSLICImageFilterIVD32IUS2(itkSLICImageFilterIVD32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD32IUS2

        Create a new object of the class itkSLICImageFilterIVD32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_swigregister(itkSLICImageFilterIVD32IUS2)
itkSLICImageFilterIVD32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2___New_orig__
itkSLICImageFilterIVD32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD32IUS2_cast


def itkSLICImageFilterIVD33IULL3_New():
    return itkSLICImageFilterIVD33IULL3.New()

class itkSLICImageFilterIVD33IULL3(itkSLICImageFilterIVD33IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD33IULL3

        Create a new object of the class itkSLICImageFilterIVD33IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD33IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD33IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD33IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD33IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_swigregister(itkSLICImageFilterIVD33IULL3)
itkSLICImageFilterIVD33IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3___New_orig__
itkSLICImageFilterIVD33IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IULL3_cast


def itkSLICImageFilterIVD33IUS3_New():
    return itkSLICImageFilterIVD33IUS3.New()

class itkSLICImageFilterIVD33IUS3(itkSLICImageFilterIVD33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD33IUS3

        Create a new object of the class itkSLICImageFilterIVD33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_swigregister(itkSLICImageFilterIVD33IUS3)
itkSLICImageFilterIVD33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3___New_orig__
itkSLICImageFilterIVD33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD33IUS3_cast


def itkSLICImageFilterIVD34IULL4_New():
    return itkSLICImageFilterIVD34IULL4.New()

class itkSLICImageFilterIVD34IULL4(itkSLICImageFilterIVD34IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD34IULL4

        Create a new object of the class itkSLICImageFilterIVD34IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD34IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD34IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD34IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD34IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_swigregister(itkSLICImageFilterIVD34IULL4)
itkSLICImageFilterIVD34IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4___New_orig__
itkSLICImageFilterIVD34IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IULL4_cast


def itkSLICImageFilterIVD34IUS4_New():
    return itkSLICImageFilterIVD34IUS4.New()

class itkSLICImageFilterIVD34IUS4(itkSLICImageFilterIVD34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD34IUS4

        Create a new object of the class itkSLICImageFilterIVD34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_swigregister(itkSLICImageFilterIVD34IUS4)
itkSLICImageFilterIVD34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4___New_orig__
itkSLICImageFilterIVD34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD34IUS4_cast


def itkSLICImageFilterIVD42IULL2_New():
    return itkSLICImageFilterIVD42IULL2.New()

class itkSLICImageFilterIVD42IULL2(itkSLICImageFilterIVD42IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD42IULL2

        Create a new object of the class itkSLICImageFilterIVD42IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD42IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD42IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD42IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD42IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_swigregister(itkSLICImageFilterIVD42IULL2)
itkSLICImageFilterIVD42IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2___New_orig__
itkSLICImageFilterIVD42IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IULL2_cast


def itkSLICImageFilterIVD42IUS2_New():
    return itkSLICImageFilterIVD42IUS2.New()

class itkSLICImageFilterIVD42IUS2(itkSLICImageFilterIVD42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD42IUS2

        Create a new object of the class itkSLICImageFilterIVD42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_swigregister(itkSLICImageFilterIVD42IUS2)
itkSLICImageFilterIVD42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2___New_orig__
itkSLICImageFilterIVD42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD42IUS2_cast


def itkSLICImageFilterIVD43IULL3_New():
    return itkSLICImageFilterIVD43IULL3.New()

class itkSLICImageFilterIVD43IULL3(itkSLICImageFilterIVD43IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD43IULL3

        Create a new object of the class itkSLICImageFilterIVD43IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD43IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD43IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD43IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD43IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_swigregister(itkSLICImageFilterIVD43IULL3)
itkSLICImageFilterIVD43IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3___New_orig__
itkSLICImageFilterIVD43IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IULL3_cast


def itkSLICImageFilterIVD43IUS3_New():
    return itkSLICImageFilterIVD43IUS3.New()

class itkSLICImageFilterIVD43IUS3(itkSLICImageFilterIVD43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD43IUS3

        Create a new object of the class itkSLICImageFilterIVD43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_swigregister(itkSLICImageFilterIVD43IUS3)
itkSLICImageFilterIVD43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3___New_orig__
itkSLICImageFilterIVD43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD43IUS3_cast


def itkSLICImageFilterIVD44IULL4_New():
    return itkSLICImageFilterIVD44IULL4.New()

class itkSLICImageFilterIVD44IULL4(itkSLICImageFilterIVD44IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD44IULL4

        Create a new object of the class itkSLICImageFilterIVD44IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD44IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD44IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD44IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD44IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_swigregister(itkSLICImageFilterIVD44IULL4)
itkSLICImageFilterIVD44IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4___New_orig__
itkSLICImageFilterIVD44IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IULL4_cast


def itkSLICImageFilterIVD44IUS4_New():
    return itkSLICImageFilterIVD44IUS4.New()

class itkSLICImageFilterIVD44IUS4(itkSLICImageFilterIVD44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVD44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVD44IUS4

        Create a new object of the class itkSLICImageFilterIVD44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVD44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVD44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVD44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVD44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_swigregister(itkSLICImageFilterIVD44IUS4)
itkSLICImageFilterIVD44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4___New_orig__
itkSLICImageFilterIVD44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVD44IUS4_cast


def itkSLICImageFilterIVF22IULL2_New():
    return itkSLICImageFilterIVF22IULL2.New()

class itkSLICImageFilterIVF22IULL2(itkSLICImageFilterIVF22IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF22IULL2

        Create a new object of the class itkSLICImageFilterIVF22IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF22IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF22IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF22IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF22IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_swigregister(itkSLICImageFilterIVF22IULL2)
itkSLICImageFilterIVF22IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2___New_orig__
itkSLICImageFilterIVF22IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IULL2_cast


def itkSLICImageFilterIVF22IUS2_New():
    return itkSLICImageFilterIVF22IUS2.New()

class itkSLICImageFilterIVF22IUS2(itkSLICImageFilterIVF22IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF22IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF22IUS2

        Create a new object of the class itkSLICImageFilterIVF22IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF22IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF22IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF22IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF22IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_swigregister(itkSLICImageFilterIVF22IUS2)
itkSLICImageFilterIVF22IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2___New_orig__
itkSLICImageFilterIVF22IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF22IUS2_cast


def itkSLICImageFilterIVF23IULL3_New():
    return itkSLICImageFilterIVF23IULL3.New()

class itkSLICImageFilterIVF23IULL3(itkSLICImageFilterIVF23IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF23IULL3

        Create a new object of the class itkSLICImageFilterIVF23IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF23IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF23IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF23IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF23IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_swigregister(itkSLICImageFilterIVF23IULL3)
itkSLICImageFilterIVF23IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3___New_orig__
itkSLICImageFilterIVF23IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IULL3_cast


def itkSLICImageFilterIVF23IUS3_New():
    return itkSLICImageFilterIVF23IUS3.New()

class itkSLICImageFilterIVF23IUS3(itkSLICImageFilterIVF23IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF23IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF23IUS3

        Create a new object of the class itkSLICImageFilterIVF23IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF23IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF23IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF23IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF23IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_swigregister(itkSLICImageFilterIVF23IUS3)
itkSLICImageFilterIVF23IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3___New_orig__
itkSLICImageFilterIVF23IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF23IUS3_cast


def itkSLICImageFilterIVF24IULL4_New():
    return itkSLICImageFilterIVF24IULL4.New()

class itkSLICImageFilterIVF24IULL4(itkSLICImageFilterIVF24IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF24IULL4

        Create a new object of the class itkSLICImageFilterIVF24IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF24IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF24IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF24IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF24IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_swigregister(itkSLICImageFilterIVF24IULL4)
itkSLICImageFilterIVF24IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4___New_orig__
itkSLICImageFilterIVF24IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IULL4_cast


def itkSLICImageFilterIVF24IUS4_New():
    return itkSLICImageFilterIVF24IUS4.New()

class itkSLICImageFilterIVF24IUS4(itkSLICImageFilterIVF24IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF24IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF24IUS4

        Create a new object of the class itkSLICImageFilterIVF24IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF24IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF24IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF24IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF24IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_swigregister(itkSLICImageFilterIVF24IUS4)
itkSLICImageFilterIVF24IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4___New_orig__
itkSLICImageFilterIVF24IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF24IUS4_cast


def itkSLICImageFilterIVF32IULL2_New():
    return itkSLICImageFilterIVF32IULL2.New()

class itkSLICImageFilterIVF32IULL2(itkSLICImageFilterIVF32IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF32IULL2

        Create a new object of the class itkSLICImageFilterIVF32IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF32IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF32IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF32IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF32IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_swigregister(itkSLICImageFilterIVF32IULL2)
itkSLICImageFilterIVF32IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2___New_orig__
itkSLICImageFilterIVF32IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IULL2_cast


def itkSLICImageFilterIVF32IUS2_New():
    return itkSLICImageFilterIVF32IUS2.New()

class itkSLICImageFilterIVF32IUS2(itkSLICImageFilterIVF32IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF32IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF32IUS2

        Create a new object of the class itkSLICImageFilterIVF32IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF32IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF32IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF32IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF32IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_swigregister(itkSLICImageFilterIVF32IUS2)
itkSLICImageFilterIVF32IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2___New_orig__
itkSLICImageFilterIVF32IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF32IUS2_cast


def itkSLICImageFilterIVF33IULL3_New():
    return itkSLICImageFilterIVF33IULL3.New()

class itkSLICImageFilterIVF33IULL3(itkSLICImageFilterIVF33IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF33IULL3

        Create a new object of the class itkSLICImageFilterIVF33IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF33IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF33IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF33IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF33IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_swigregister(itkSLICImageFilterIVF33IULL3)
itkSLICImageFilterIVF33IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3___New_orig__
itkSLICImageFilterIVF33IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IULL3_cast


def itkSLICImageFilterIVF33IUS3_New():
    return itkSLICImageFilterIVF33IUS3.New()

class itkSLICImageFilterIVF33IUS3(itkSLICImageFilterIVF33IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF33IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF33IUS3

        Create a new object of the class itkSLICImageFilterIVF33IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF33IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF33IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF33IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF33IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_swigregister(itkSLICImageFilterIVF33IUS3)
itkSLICImageFilterIVF33IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3___New_orig__
itkSLICImageFilterIVF33IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF33IUS3_cast


def itkSLICImageFilterIVF34IULL4_New():
    return itkSLICImageFilterIVF34IULL4.New()

class itkSLICImageFilterIVF34IULL4(itkSLICImageFilterIVF34IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF34IULL4

        Create a new object of the class itkSLICImageFilterIVF34IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF34IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF34IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF34IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF34IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_swigregister(itkSLICImageFilterIVF34IULL4)
itkSLICImageFilterIVF34IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4___New_orig__
itkSLICImageFilterIVF34IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IULL4_cast


def itkSLICImageFilterIVF34IUS4_New():
    return itkSLICImageFilterIVF34IUS4.New()

class itkSLICImageFilterIVF34IUS4(itkSLICImageFilterIVF34IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF34IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF34IUS4

        Create a new object of the class itkSLICImageFilterIVF34IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF34IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF34IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF34IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF34IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_swigregister(itkSLICImageFilterIVF34IUS4)
itkSLICImageFilterIVF34IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4___New_orig__
itkSLICImageFilterIVF34IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF34IUS4_cast


def itkSLICImageFilterIVF42IULL2_New():
    return itkSLICImageFilterIVF42IULL2.New()

class itkSLICImageFilterIVF42IULL2(itkSLICImageFilterIVF42IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF42IULL2

        Create a new object of the class itkSLICImageFilterIVF42IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF42IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF42IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF42IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF42IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_swigregister(itkSLICImageFilterIVF42IULL2)
itkSLICImageFilterIVF42IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2___New_orig__
itkSLICImageFilterIVF42IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IULL2_cast


def itkSLICImageFilterIVF42IUS2_New():
    return itkSLICImageFilterIVF42IUS2.New()

class itkSLICImageFilterIVF42IUS2(itkSLICImageFilterIVF42IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF42IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF42IUS2

        Create a new object of the class itkSLICImageFilterIVF42IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF42IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF42IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF42IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF42IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_swigregister(itkSLICImageFilterIVF42IUS2)
itkSLICImageFilterIVF42IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2___New_orig__
itkSLICImageFilterIVF42IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF42IUS2_cast


def itkSLICImageFilterIVF43IULL3_New():
    return itkSLICImageFilterIVF43IULL3.New()

class itkSLICImageFilterIVF43IULL3(itkSLICImageFilterIVF43IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF43IULL3

        Create a new object of the class itkSLICImageFilterIVF43IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF43IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF43IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF43IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF43IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_swigregister(itkSLICImageFilterIVF43IULL3)
itkSLICImageFilterIVF43IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3___New_orig__
itkSLICImageFilterIVF43IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IULL3_cast


def itkSLICImageFilterIVF43IUS3_New():
    return itkSLICImageFilterIVF43IUS3.New()

class itkSLICImageFilterIVF43IUS3(itkSLICImageFilterIVF43IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF43IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF43IUS3

        Create a new object of the class itkSLICImageFilterIVF43IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF43IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF43IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF43IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF43IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_swigregister(itkSLICImageFilterIVF43IUS3)
itkSLICImageFilterIVF43IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3___New_orig__
itkSLICImageFilterIVF43IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF43IUS3_cast


def itkSLICImageFilterIVF44IULL4_New():
    return itkSLICImageFilterIVF44IULL4.New()

class itkSLICImageFilterIVF44IULL4(itkSLICImageFilterIVF44IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF44IULL4

        Create a new object of the class itkSLICImageFilterIVF44IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF44IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF44IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF44IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF44IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_swigregister(itkSLICImageFilterIVF44IULL4)
itkSLICImageFilterIVF44IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4___New_orig__
itkSLICImageFilterIVF44IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IULL4_cast


def itkSLICImageFilterIVF44IUS4_New():
    return itkSLICImageFilterIVF44IUS4.New()

class itkSLICImageFilterIVF44IUS4(itkSLICImageFilterIVF44IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterIVF44IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterIVF44IUS4

        Create a new object of the class itkSLICImageFilterIVF44IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterIVF44IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterIVF44IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterIVF44IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterIVF44IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_swigregister(itkSLICImageFilterIVF44IUS4)
itkSLICImageFilterIVF44IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4___New_orig__
itkSLICImageFilterIVF44IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterIVF44IUS4_cast


def itkSLICImageFilterVID2IULL2_New():
    return itkSLICImageFilterVID2IULL2.New()

class itkSLICImageFilterVID2IULL2(itkSLICImageFilterVID2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID2IULL2

        Create a new object of the class itkSLICImageFilterVID2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_swigregister(itkSLICImageFilterVID2IULL2)
itkSLICImageFilterVID2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2___New_orig__
itkSLICImageFilterVID2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IULL2_cast


def itkSLICImageFilterVID2IUS2_New():
    return itkSLICImageFilterVID2IUS2.New()

class itkSLICImageFilterVID2IUS2(itkSLICImageFilterVID2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID2IUS2

        Create a new object of the class itkSLICImageFilterVID2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_swigregister(itkSLICImageFilterVID2IUS2)
itkSLICImageFilterVID2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2___New_orig__
itkSLICImageFilterVID2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID2IUS2_cast


def itkSLICImageFilterVID3IULL3_New():
    return itkSLICImageFilterVID3IULL3.New()

class itkSLICImageFilterVID3IULL3(itkSLICImageFilterVID3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID3IULL3

        Create a new object of the class itkSLICImageFilterVID3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_swigregister(itkSLICImageFilterVID3IULL3)
itkSLICImageFilterVID3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3___New_orig__
itkSLICImageFilterVID3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IULL3_cast


def itkSLICImageFilterVID3IUS3_New():
    return itkSLICImageFilterVID3IUS3.New()

class itkSLICImageFilterVID3IUS3(itkSLICImageFilterVID3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID3IUS3

        Create a new object of the class itkSLICImageFilterVID3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_swigregister(itkSLICImageFilterVID3IUS3)
itkSLICImageFilterVID3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3___New_orig__
itkSLICImageFilterVID3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID3IUS3_cast


def itkSLICImageFilterVID4IULL4_New():
    return itkSLICImageFilterVID4IULL4.New()

class itkSLICImageFilterVID4IULL4(itkSLICImageFilterVID4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID4IULL4

        Create a new object of the class itkSLICImageFilterVID4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_swigregister(itkSLICImageFilterVID4IULL4)
itkSLICImageFilterVID4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4___New_orig__
itkSLICImageFilterVID4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IULL4_cast


def itkSLICImageFilterVID4IUS4_New():
    return itkSLICImageFilterVID4IUS4.New()

class itkSLICImageFilterVID4IUS4(itkSLICImageFilterVID4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVID4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVID4IUS4

        Create a new object of the class itkSLICImageFilterVID4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVID4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVID4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVID4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVID4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_swigregister(itkSLICImageFilterVID4IUS4)
itkSLICImageFilterVID4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4___New_orig__
itkSLICImageFilterVID4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVID4IUS4_cast


def itkSLICImageFilterVIF2IULL2_New():
    return itkSLICImageFilterVIF2IULL2.New()

class itkSLICImageFilterVIF2IULL2(itkSLICImageFilterVIF2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IULL2

        Create a new object of the class itkSLICImageFilterVIF2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_swigregister(itkSLICImageFilterVIF2IULL2)
itkSLICImageFilterVIF2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2___New_orig__
itkSLICImageFilterVIF2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IULL2_cast


def itkSLICImageFilterVIF2IUS2_New():
    return itkSLICImageFilterVIF2IUS2.New()

class itkSLICImageFilterVIF2IUS2(itkSLICImageFilterVIF2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF2IUS2

        Create a new object of the class itkSLICImageFilterVIF2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_swigregister(itkSLICImageFilterVIF2IUS2)
itkSLICImageFilterVIF2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2___New_orig__
itkSLICImageFilterVIF2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF2IUS2_cast


def itkSLICImageFilterVIF3IULL3_New():
    return itkSLICImageFilterVIF3IULL3.New()

class itkSLICImageFilterVIF3IULL3(itkSLICImageFilterVIF3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IULL3

        Create a new object of the class itkSLICImageFilterVIF3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_swigregister(itkSLICImageFilterVIF3IULL3)
itkSLICImageFilterVIF3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3___New_orig__
itkSLICImageFilterVIF3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IULL3_cast


def itkSLICImageFilterVIF3IUS3_New():
    return itkSLICImageFilterVIF3IUS3.New()

class itkSLICImageFilterVIF3IUS3(itkSLICImageFilterVIF3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF3IUS3

        Create a new object of the class itkSLICImageFilterVIF3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_swigregister(itkSLICImageFilterVIF3IUS3)
itkSLICImageFilterVIF3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3___New_orig__
itkSLICImageFilterVIF3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF3IUS3_cast


def itkSLICImageFilterVIF4IULL4_New():
    return itkSLICImageFilterVIF4IULL4.New()

class itkSLICImageFilterVIF4IULL4(itkSLICImageFilterVIF4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF4IULL4

        Create a new object of the class itkSLICImageFilterVIF4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_swigregister(itkSLICImageFilterVIF4IULL4)
itkSLICImageFilterVIF4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4___New_orig__
itkSLICImageFilterVIF4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IULL4_cast


def itkSLICImageFilterVIF4IUS4_New():
    return itkSLICImageFilterVIF4IUS4.New()

class itkSLICImageFilterVIF4IUS4(itkSLICImageFilterVIF4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIF4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIF4IUS4

        Create a new object of the class itkSLICImageFilterVIF4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIF4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIF4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIF4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIF4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_swigregister(itkSLICImageFilterVIF4IUS4)
itkSLICImageFilterVIF4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4___New_orig__
itkSLICImageFilterVIF4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIF4IUS4_cast


def itkSLICImageFilterVISS2IULL2_New():
    return itkSLICImageFilterVISS2IULL2.New()

class itkSLICImageFilterVISS2IULL2(itkSLICImageFilterVISS2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IULL2

        Create a new object of the class itkSLICImageFilterVISS2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_swigregister(itkSLICImageFilterVISS2IULL2)
itkSLICImageFilterVISS2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2___New_orig__
itkSLICImageFilterVISS2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IULL2_cast


def itkSLICImageFilterVISS2IUS2_New():
    return itkSLICImageFilterVISS2IUS2.New()

class itkSLICImageFilterVISS2IUS2(itkSLICImageFilterVISS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS2IUS2

        Create a new object of the class itkSLICImageFilterVISS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_swigregister(itkSLICImageFilterVISS2IUS2)
itkSLICImageFilterVISS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2___New_orig__
itkSLICImageFilterVISS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS2IUS2_cast


def itkSLICImageFilterVISS3IULL3_New():
    return itkSLICImageFilterVISS3IULL3.New()

class itkSLICImageFilterVISS3IULL3(itkSLICImageFilterVISS3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IULL3

        Create a new object of the class itkSLICImageFilterVISS3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_swigregister(itkSLICImageFilterVISS3IULL3)
itkSLICImageFilterVISS3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3___New_orig__
itkSLICImageFilterVISS3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IULL3_cast


def itkSLICImageFilterVISS3IUS3_New():
    return itkSLICImageFilterVISS3IUS3.New()

class itkSLICImageFilterVISS3IUS3(itkSLICImageFilterVISS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS3IUS3

        Create a new object of the class itkSLICImageFilterVISS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_swigregister(itkSLICImageFilterVISS3IUS3)
itkSLICImageFilterVISS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3___New_orig__
itkSLICImageFilterVISS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS3IUS3_cast


def itkSLICImageFilterVISS4IULL4_New():
    return itkSLICImageFilterVISS4IULL4.New()

class itkSLICImageFilterVISS4IULL4(itkSLICImageFilterVISS4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS4IULL4

        Create a new object of the class itkSLICImageFilterVISS4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_swigregister(itkSLICImageFilterVISS4IULL4)
itkSLICImageFilterVISS4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4___New_orig__
itkSLICImageFilterVISS4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IULL4_cast


def itkSLICImageFilterVISS4IUS4_New():
    return itkSLICImageFilterVISS4IUS4.New()

class itkSLICImageFilterVISS4IUS4(itkSLICImageFilterVISS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVISS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVISS4IUS4

        Create a new object of the class itkSLICImageFilterVISS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVISS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVISS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVISS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVISS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_swigregister(itkSLICImageFilterVISS4IUS4)
itkSLICImageFilterVISS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4___New_orig__
itkSLICImageFilterVISS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVISS4IUS4_cast


def itkSLICImageFilterVIUC2IULL2_New():
    return itkSLICImageFilterVIUC2IULL2.New()

class itkSLICImageFilterVIUC2IULL2(itkSLICImageFilterVIUC2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IULL2

        Create a new object of the class itkSLICImageFilterVIUC2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_swigregister(itkSLICImageFilterVIUC2IULL2)
itkSLICImageFilterVIUC2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2___New_orig__
itkSLICImageFilterVIUC2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IULL2_cast


def itkSLICImageFilterVIUC2IUS2_New():
    return itkSLICImageFilterVIUC2IUS2.New()

class itkSLICImageFilterVIUC2IUS2(itkSLICImageFilterVIUC2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC2IUS2

        Create a new object of the class itkSLICImageFilterVIUC2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_swigregister(itkSLICImageFilterVIUC2IUS2)
itkSLICImageFilterVIUC2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2___New_orig__
itkSLICImageFilterVIUC2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC2IUS2_cast


def itkSLICImageFilterVIUC3IULL3_New():
    return itkSLICImageFilterVIUC3IULL3.New()

class itkSLICImageFilterVIUC3IULL3(itkSLICImageFilterVIUC3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IULL3

        Create a new object of the class itkSLICImageFilterVIUC3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_swigregister(itkSLICImageFilterVIUC3IULL3)
itkSLICImageFilterVIUC3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3___New_orig__
itkSLICImageFilterVIUC3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IULL3_cast


def itkSLICImageFilterVIUC3IUS3_New():
    return itkSLICImageFilterVIUC3IUS3.New()

class itkSLICImageFilterVIUC3IUS3(itkSLICImageFilterVIUC3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC3IUS3

        Create a new object of the class itkSLICImageFilterVIUC3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_swigregister(itkSLICImageFilterVIUC3IUS3)
itkSLICImageFilterVIUC3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3___New_orig__
itkSLICImageFilterVIUC3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC3IUS3_cast


def itkSLICImageFilterVIUC4IULL4_New():
    return itkSLICImageFilterVIUC4IULL4.New()

class itkSLICImageFilterVIUC4IULL4(itkSLICImageFilterVIUC4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC4IULL4

        Create a new object of the class itkSLICImageFilterVIUC4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_swigregister(itkSLICImageFilterVIUC4IULL4)
itkSLICImageFilterVIUC4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4___New_orig__
itkSLICImageFilterVIUC4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IULL4_cast


def itkSLICImageFilterVIUC4IUS4_New():
    return itkSLICImageFilterVIUC4IUS4.New()

class itkSLICImageFilterVIUC4IUS4(itkSLICImageFilterVIUC4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUC4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUC4IUS4

        Create a new object of the class itkSLICImageFilterVIUC4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUC4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUC4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUC4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUC4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_swigregister(itkSLICImageFilterVIUC4IUS4)
itkSLICImageFilterVIUC4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4___New_orig__
itkSLICImageFilterVIUC4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUC4IUS4_cast


def itkSLICImageFilterVIUS2IULL2_New():
    return itkSLICImageFilterVIUS2IULL2.New()

class itkSLICImageFilterVIUS2IULL2(itkSLICImageFilterVIUS2IULL2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IULL2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IULL2

        Create a new object of the class itkSLICImageFilterVIUS2IULL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IULL2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IULL2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS2IULL2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS2IULL2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_swigregister(itkSLICImageFilterVIUS2IULL2)
itkSLICImageFilterVIUS2IULL2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2___New_orig__
itkSLICImageFilterVIUS2IULL2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IULL2_cast


def itkSLICImageFilterVIUS2IUS2_New():
    return itkSLICImageFilterVIUS2IUS2.New()

class itkSLICImageFilterVIUS2IUS2(itkSLICImageFilterVIUS2IUS2_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS2IUS2
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS2IUS2

        Create a new object of the class itkSLICImageFilterVIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS2IUS2 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_swigregister(itkSLICImageFilterVIUS2IUS2)
itkSLICImageFilterVIUS2IUS2___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2___New_orig__
itkSLICImageFilterVIUS2IUS2_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS2IUS2_cast


def itkSLICImageFilterVIUS3IULL3_New():
    return itkSLICImageFilterVIUS3IULL3.New()

class itkSLICImageFilterVIUS3IULL3(itkSLICImageFilterVIUS3IULL3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IULL3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IULL3

        Create a new object of the class itkSLICImageFilterVIUS3IULL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IULL3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IULL3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS3IULL3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS3IULL3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_swigregister(itkSLICImageFilterVIUS3IULL3)
itkSLICImageFilterVIUS3IULL3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3___New_orig__
itkSLICImageFilterVIUS3IULL3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IULL3_cast


def itkSLICImageFilterVIUS3IUS3_New():
    return itkSLICImageFilterVIUS3IUS3.New()

class itkSLICImageFilterVIUS3IUS3(itkSLICImageFilterVIUS3IUS3_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS3IUS3
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS3IUS3

        Create a new object of the class itkSLICImageFilterVIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS3IUS3 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_swigregister(itkSLICImageFilterVIUS3IUS3)
itkSLICImageFilterVIUS3IUS3___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3___New_orig__
itkSLICImageFilterVIUS3IUS3_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS3IUS3_cast


def itkSLICImageFilterVIUS4IULL4_New():
    return itkSLICImageFilterVIUS4IULL4.New()

class itkSLICImageFilterVIUS4IULL4(itkSLICImageFilterVIUS4IULL4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IULL4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS4IULL4

        Create a new object of the class itkSLICImageFilterVIUS4IULL4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS4IULL4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS4IULL4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS4IULL4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS4IULL4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_swigregister(itkSLICImageFilterVIUS4IULL4)
itkSLICImageFilterVIUS4IULL4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4___New_orig__
itkSLICImageFilterVIUS4IULL4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IULL4_cast


def itkSLICImageFilterVIUS4IUS4_New():
    return itkSLICImageFilterVIUS4IUS4.New()

class itkSLICImageFilterVIUS4IUS4(itkSLICImageFilterVIUS4IUS4_Superclass):
    r"""


    Simple Linear Iterative Clustering (SLIC) super-pixel segmentation.

    The Simple Linear Iterative Clustering (SLIC) algorithm groups pixels
    into a set of labeled regions or super-pixels. Super-pixels follow
    natural image boundaries, are compact, and are nearly uniform regions
    which can be used as a larger primitive for more efficient
    computation. The SLIC algorithm can be viewed as a spatially
    constrained iterative k-means method.

    The original algorithm was designed to cluster on the joint domain of
    the images index space and it's CIELAB color space. This
    implementation works with images of arbitrary dimension as well as
    scalar, single channel, images and most multi-component image types
    including ITK's arbitrary length VectorImage.

    The distance between a pixel and a cluster is the sum of squares of
    the difference between their joint range and domains ( index and value
    ). The computation is done in index space with scales provided by the
    SpatialProximityWeight parameters.

    The output is a label image with each label representing a superpixel
    cluster. Every pixel in the output is labeled, and the starting label
    id is zero.

    This code was contributed in the Insight Journal paper: "Scalable
    Simple Linear Iterative Clustering (SSLIC) Using a Generic and
    Parallel Approach" by Lowekamp B. C., Chen D. T., Yaniv Z., Yoo T.
    S.https://www.insight-journal.org/browse/publication/989 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_Clone)
    SetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetSpatialProximityWeight)
    GetSpatialProximityWeight = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetSpatialProximityWeight)
    SetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetMaximumNumberOfIterations)
    GetMaximumNumberOfIterations = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetMaximumNumberOfIterations)
    GetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetSuperGridSize)
    SetSuperGridSize = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetSuperGridSize)
    SetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetInitializationPerturbation)
    GetInitializationPerturbation = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetInitializationPerturbation)
    InitializationPerturbationOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_InitializationPerturbationOn)
    InitializationPerturbationOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_InitializationPerturbationOff)
    SetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_SetEnforceConnectivity)
    GetEnforceConnectivity = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetEnforceConnectivity)
    EnforceConnectivityOn = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_EnforceConnectivityOn)
    EnforceConnectivityOff = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_EnforceConnectivityOff)
    GetAverageResidual = _swig_new_instance_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_GetAverageResidual)
    __swig_destroy__ = _itkSLICImageFilterPython.delete_itkSLICImageFilterVIUS4IUS4
    cast = _swig_new_static_method(_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkSLICImageFilterVIUS4IUS4

        Create a new object of the class itkSLICImageFilterVIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSLICImageFilterVIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSLICImageFilterVIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSLICImageFilterVIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSLICImageFilterVIUS4IUS4 in _itkSLICImageFilterPython:
_itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_swigregister(itkSLICImageFilterVIUS4IUS4)
itkSLICImageFilterVIUS4IUS4___New_orig__ = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4___New_orig__
itkSLICImageFilterVIUS4IUS4_cast = _itkSLICImageFilterPython.itkSLICImageFilterVIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def slic_image_filter(*args, **kwargs):
    """Procedural interface for SLICImageFilter"""
    import itk

    instance = itk.SLICImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def slic_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKSuperPixel.SLICImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    slic_image_filter.__doc__ = filter_object.__doc__
    slic_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    slic_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        slic_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        slic_image_filter.__doc__ += "\n"
        slic_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        slic_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )

from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def image_to_image_filter(*args, **kwargs):
    """Procedural interface for ImageToImageFilter"""
    import itk

    instance = itk.ImageToImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def image_to_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKSuperPixel.ImageToImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    image_to_image_filter.__doc__ = filter_object.__doc__
    image_to_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    image_to_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        image_to_image_filter.__doc__ += "\n"
        image_to_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        image_to_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




