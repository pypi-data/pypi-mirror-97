# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKRegionGrowingPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkIsolatedConnectedImageFilterPython
else:
    import _itkIsolatedConnectedImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkIsolatedConnectedImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkIsolatedConnectedImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkIndexPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkOffsetPython
import itk.ITKCommonBasePython
import itk.itkImageToImageFilterAPython
import itk.itkImageSourcePython
import itk.itkImagePython
import itk.itkRGBAPixelPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.stdcomplexPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkVectorPython
import itk.itkRGBPixelPython
import itk.itkCovariantVectorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkImageRegionPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython
import itk.itkImageSourceCommonPython
import itk.itkImageToImageFilterCommonPython

def itkIsolatedConnectedImageFilterID2ID2_New():
    return itkIsolatedConnectedImageFilterID2ID2.New()

class itkIsolatedConnectedImageFilterID2ID2(itk.itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterID2ID2
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterID2ID2

        Create a new object of the class itkIsolatedConnectedImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterID2ID2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterID2ID2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterID2ID2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterID2ID2 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_swigregister(itkIsolatedConnectedImageFilterID2ID2)
itkIsolatedConnectedImageFilterID2ID2___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2___New_orig__
itkIsolatedConnectedImageFilterID2ID2_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID2ID2_cast


def itkIsolatedConnectedImageFilterID3ID3_New():
    return itkIsolatedConnectedImageFilterID3ID3.New()

class itkIsolatedConnectedImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterID3ID3
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterID3ID3

        Create a new object of the class itkIsolatedConnectedImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterID3ID3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterID3ID3 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_swigregister(itkIsolatedConnectedImageFilterID3ID3)
itkIsolatedConnectedImageFilterID3ID3___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3___New_orig__
itkIsolatedConnectedImageFilterID3ID3_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID3ID3_cast


def itkIsolatedConnectedImageFilterID4ID4_New():
    return itkIsolatedConnectedImageFilterID4ID4.New()

class itkIsolatedConnectedImageFilterID4ID4(itk.itkImageToImageFilterAPython.itkImageToImageFilterID4ID4):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterID4ID4
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterID4ID4

        Create a new object of the class itkIsolatedConnectedImageFilterID4ID4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterID4ID4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterID4ID4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterID4ID4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterID4ID4 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_swigregister(itkIsolatedConnectedImageFilterID4ID4)
itkIsolatedConnectedImageFilterID4ID4___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4___New_orig__
itkIsolatedConnectedImageFilterID4ID4_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterID4ID4_cast


def itkIsolatedConnectedImageFilterIF2IF2_New():
    return itkIsolatedConnectedImageFilterIF2IF2.New()

class itkIsolatedConnectedImageFilterIF2IF2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIF2IF2
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIF2IF2

        Create a new object of the class itkIsolatedConnectedImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIF2IF2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIF2IF2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIF2IF2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIF2IF2 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_swigregister(itkIsolatedConnectedImageFilterIF2IF2)
itkIsolatedConnectedImageFilterIF2IF2___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2___New_orig__
itkIsolatedConnectedImageFilterIF2IF2_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF2IF2_cast


def itkIsolatedConnectedImageFilterIF3IF3_New():
    return itkIsolatedConnectedImageFilterIF3IF3.New()

class itkIsolatedConnectedImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIF3IF3
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIF3IF3

        Create a new object of the class itkIsolatedConnectedImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIF3IF3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIF3IF3 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_swigregister(itkIsolatedConnectedImageFilterIF3IF3)
itkIsolatedConnectedImageFilterIF3IF3___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3___New_orig__
itkIsolatedConnectedImageFilterIF3IF3_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF3IF3_cast


def itkIsolatedConnectedImageFilterIF4IF4_New():
    return itkIsolatedConnectedImageFilterIF4IF4.New()

class itkIsolatedConnectedImageFilterIF4IF4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF4IF4):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIF4IF4
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIF4IF4

        Create a new object of the class itkIsolatedConnectedImageFilterIF4IF4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIF4IF4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIF4IF4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIF4IF4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIF4IF4 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_swigregister(itkIsolatedConnectedImageFilterIF4IF4)
itkIsolatedConnectedImageFilterIF4IF4___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4___New_orig__
itkIsolatedConnectedImageFilterIF4IF4_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIF4IF4_cast


def itkIsolatedConnectedImageFilterISS2ISS2_New():
    return itkIsolatedConnectedImageFilterISS2ISS2.New()

class itkIsolatedConnectedImageFilterISS2ISS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS2ISS2):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterISS2ISS2
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterISS2ISS2

        Create a new object of the class itkIsolatedConnectedImageFilterISS2ISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterISS2ISS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterISS2ISS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterISS2ISS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterISS2ISS2 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_swigregister(itkIsolatedConnectedImageFilterISS2ISS2)
itkIsolatedConnectedImageFilterISS2ISS2___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2___New_orig__
itkIsolatedConnectedImageFilterISS2ISS2_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS2ISS2_cast


def itkIsolatedConnectedImageFilterISS3ISS3_New():
    return itkIsolatedConnectedImageFilterISS3ISS3.New()

class itkIsolatedConnectedImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3ISS3):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterISS3ISS3
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterISS3ISS3

        Create a new object of the class itkIsolatedConnectedImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterISS3ISS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterISS3ISS3 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_swigregister(itkIsolatedConnectedImageFilterISS3ISS3)
itkIsolatedConnectedImageFilterISS3ISS3___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3___New_orig__
itkIsolatedConnectedImageFilterISS3ISS3_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS3ISS3_cast


def itkIsolatedConnectedImageFilterISS4ISS4_New():
    return itkIsolatedConnectedImageFilterISS4ISS4.New()

class itkIsolatedConnectedImageFilterISS4ISS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS4ISS4):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterISS4ISS4
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterISS4ISS4

        Create a new object of the class itkIsolatedConnectedImageFilterISS4ISS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterISS4ISS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterISS4ISS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterISS4ISS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterISS4ISS4 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_swigregister(itkIsolatedConnectedImageFilterISS4ISS4)
itkIsolatedConnectedImageFilterISS4ISS4___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4___New_orig__
itkIsolatedConnectedImageFilterISS4ISS4_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterISS4ISS4_cast


def itkIsolatedConnectedImageFilterIUC2IUC2_New():
    return itkIsolatedConnectedImageFilterIUC2IUC2.New()

class itkIsolatedConnectedImageFilterIUC2IUC2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUC2IUC2
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUC2IUC2

        Create a new object of the class itkIsolatedConnectedImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUC2IUC2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUC2IUC2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIUC2IUC2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIUC2IUC2 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_swigregister(itkIsolatedConnectedImageFilterIUC2IUC2)
itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2___New_orig__
itkIsolatedConnectedImageFilterIUC2IUC2_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC2IUC2_cast


def itkIsolatedConnectedImageFilterIUC3IUC3_New():
    return itkIsolatedConnectedImageFilterIUC3IUC3.New()

class itkIsolatedConnectedImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUC3IUC3
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUC3IUC3

        Create a new object of the class itkIsolatedConnectedImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIUC3IUC3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIUC3IUC3 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_swigregister(itkIsolatedConnectedImageFilterIUC3IUC3)
itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3___New_orig__
itkIsolatedConnectedImageFilterIUC3IUC3_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC3IUC3_cast


def itkIsolatedConnectedImageFilterIUC4IUC4_New():
    return itkIsolatedConnectedImageFilterIUC4IUC4.New()

class itkIsolatedConnectedImageFilterIUC4IUC4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC4IUC4):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUC4IUC4
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUC4IUC4

        Create a new object of the class itkIsolatedConnectedImageFilterIUC4IUC4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUC4IUC4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUC4IUC4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIUC4IUC4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIUC4IUC4 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_swigregister(itkIsolatedConnectedImageFilterIUC4IUC4)
itkIsolatedConnectedImageFilterIUC4IUC4___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4___New_orig__
itkIsolatedConnectedImageFilterIUC4IUC4_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUC4IUC4_cast


def itkIsolatedConnectedImageFilterIUS2IUS2_New():
    return itkIsolatedConnectedImageFilterIUS2IUS2.New()

class itkIsolatedConnectedImageFilterIUS2IUS2(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUS2IUS2
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUS2IUS2

        Create a new object of the class itkIsolatedConnectedImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUS2IUS2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUS2IUS2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIUS2IUS2.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIUS2IUS2 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_swigregister(itkIsolatedConnectedImageFilterIUS2IUS2)
itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2___New_orig__
itkIsolatedConnectedImageFilterIUS2IUS2_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS2IUS2_cast


def itkIsolatedConnectedImageFilterIUS3IUS3_New():
    return itkIsolatedConnectedImageFilterIUS3IUS3.New()

class itkIsolatedConnectedImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUS3IUS3
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUS3IUS3

        Create a new object of the class itkIsolatedConnectedImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIUS3IUS3.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIUS3IUS3 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_swigregister(itkIsolatedConnectedImageFilterIUS3IUS3)
itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3___New_orig__
itkIsolatedConnectedImageFilterIUS3IUS3_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS3IUS3_cast


def itkIsolatedConnectedImageFilterIUS4IUS4_New():
    return itkIsolatedConnectedImageFilterIUS4IUS4.New()

class itkIsolatedConnectedImageFilterIUS4IUS4(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS4IUS4):
    r"""


    Label pixels that are connected to one set of seeds but not another.

    IsolatedConnectedImageFilter finds the optimal threshold to separate
    two regions. It has two modes, one to separate dark regions surrounded
    by bright regions by automatically finding a minimum isolating upper
    threshold, and another to separate bright regions surrounded by dark
    regions by automatically finding a maximum lower isolating threshold.
    The mode can be chosen by setting FindUpperThresholdOn()/Off(). In
    both cases, the isolating threshold is retrieved with
    GetIsolatedValue().

    The algorithm labels pixels with ReplaceValue that are connected to
    Seeds1 AND NOT connected to Seeds2. When finding the threshold to
    separate two dark regions surrounded by bright regions, given a fixed
    lower threshold, the filter adjusts the upper threshold until the two
    sets of seeds are not connected. The algorithm uses a binary search to
    adjust the upper threshold, starting at Upper. The reverse is true for
    finding the threshold to separate two bright regions. Lower defaults
    to the smallest possible value for the InputImagePixelType, and Upper
    defaults to the largest possible value for the InputImagePixelType.

    The user can also supply the Lower and Upper values to restrict the
    search. However, if the range is too restrictive, it could happen that
    no isolating threshold can be found between the user specified Lower
    and Upper values. Therefore, unless the user is sure of the bounds to
    set, it is recommended that the user set these values to the lowest
    and highest intensity values in the image, respectively.

    The user can specify more than one seed for both regions to separate.
    The algorithm will try find the threshold that ensures that all of the
    first seeds are contained in the resulting segmentation and all of the
    second seeds are not contained in the segmentation.

    It is possible that the algorithm may not be able to find the
    isolating threshold because no such threshold exists. The user can
    check for this by querying the GetThresholdingFailed() flag. 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4___New_orig__)
    Clone = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_Clone)
    PrintSelf = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_PrintSelf)
    AddSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_AddSeed1)
    SetSeed1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetSeed1)
    ClearSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_ClearSeeds1)
    AddSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_AddSeed2)
    SetSeed2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetSeed2)
    ClearSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_ClearSeeds2)
    GetSeeds1 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetSeeds1)
    GetSeeds2 = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetSeeds2)
    SetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetLower)
    GetLower = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetLower)
    SetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetUpper)
    GetUpper = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetUpper)
    SetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetIsolatedValueTolerance)
    GetIsolatedValueTolerance = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetIsolatedValueTolerance)
    SetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetReplaceValue)
    GetReplaceValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetReplaceValue)
    GetIsolatedValue = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetIsolatedValue)
    SetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_SetFindUpperThreshold)
    FindUpperThresholdOn = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_FindUpperThresholdOn)
    FindUpperThresholdOff = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_FindUpperThresholdOff)
    GetFindUpperThreshold = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetFindUpperThreshold)
    GetThresholdingFailed = _swig_new_instance_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_GetThresholdingFailed)
    InputHasNumericTraitsCheck = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_InputHasNumericTraitsCheck
    
    __swig_destroy__ = _itkIsolatedConnectedImageFilterPython.delete_itkIsolatedConnectedImageFilterIUS4IUS4
    cast = _swig_new_static_method(_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_cast)

    def New(*args, **kargs):
        """New() -> itkIsolatedConnectedImageFilterIUS4IUS4

        Create a new object of the class itkIsolatedConnectedImageFilterIUS4IUS4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkIsolatedConnectedImageFilterIUS4IUS4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkIsolatedConnectedImageFilterIUS4IUS4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkIsolatedConnectedImageFilterIUS4IUS4.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkIsolatedConnectedImageFilterIUS4IUS4 in _itkIsolatedConnectedImageFilterPython:
_itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_swigregister(itkIsolatedConnectedImageFilterIUS4IUS4)
itkIsolatedConnectedImageFilterIUS4IUS4___New_orig__ = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4___New_orig__
itkIsolatedConnectedImageFilterIUS4IUS4_cast = _itkIsolatedConnectedImageFilterPython.itkIsolatedConnectedImageFilterIUS4IUS4_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def isolated_connected_image_filter(*args, **kwargs):
    """Procedural interface for IsolatedConnectedImageFilter"""
    import itk

    instance = itk.IsolatedConnectedImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def isolated_connected_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKRegionGrowing.IsolatedConnectedImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    isolated_connected_image_filter.__doc__ = filter_object.__doc__
    isolated_connected_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    isolated_connected_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        isolated_connected_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        isolated_connected_image_filter.__doc__ += "\n"
        isolated_connected_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        isolated_connected_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




