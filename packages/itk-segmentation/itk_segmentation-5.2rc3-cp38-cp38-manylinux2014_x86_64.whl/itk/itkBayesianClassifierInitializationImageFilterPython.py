# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 6, 0):
    raise RuntimeError("Python 3.6 or later required")


from . import _ITKClassifiersPython



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkBayesianClassifierInitializationImageFilterPython
else:
    import _itkBayesianClassifierInitializationImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkBayesianClassifierInitializationImageFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkBayesianClassifierInitializationImageFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkImageToImageFilterBPython
import itk.itkImageToImageFilterCommonPython
import itk.itkImageRegionPython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.itkImagePython
import itk.itkVectorPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkPointPython
import itk.itkRGBAPixelPython
import itk.itkCovariantVectorPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.itkRGBPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkVectorImagePython
import itk.itkVariableLengthVectorPython

def itkBayesianClassifierInitializationImageFilterID2D_New():
    return itkBayesianClassifierInitializationImageFilterID2D.New()

class itkBayesianClassifierInitializationImageFilterID2D(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2VID2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID2D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterID2D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterID2D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_swigregister(itkBayesianClassifierInitializationImageFilterID2D)
itkBayesianClassifierInitializationImageFilterID2D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D___New_orig__
itkBayesianClassifierInitializationImageFilterID2D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2D_cast


def itkBayesianClassifierInitializationImageFilterID2F_New():
    return itkBayesianClassifierInitializationImageFilterID2F.New()

class itkBayesianClassifierInitializationImageFilterID2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterID2VIF2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID2F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterID2F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterID2F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_swigregister(itkBayesianClassifierInitializationImageFilterID2F)
itkBayesianClassifierInitializationImageFilterID2F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F___New_orig__
itkBayesianClassifierInitializationImageFilterID2F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID2F_cast


def itkBayesianClassifierInitializationImageFilterID3D_New():
    return itkBayesianClassifierInitializationImageFilterID3D.New()

class itkBayesianClassifierInitializationImageFilterID3D(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3VID3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID3D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterID3D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterID3D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_swigregister(itkBayesianClassifierInitializationImageFilterID3D)
itkBayesianClassifierInitializationImageFilterID3D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D___New_orig__
itkBayesianClassifierInitializationImageFilterID3D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3D_cast


def itkBayesianClassifierInitializationImageFilterID3F_New():
    return itkBayesianClassifierInitializationImageFilterID3F.New()

class itkBayesianClassifierInitializationImageFilterID3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterID3VIF3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID3F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterID3F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterID3F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_swigregister(itkBayesianClassifierInitializationImageFilterID3F)
itkBayesianClassifierInitializationImageFilterID3F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F___New_orig__
itkBayesianClassifierInitializationImageFilterID3F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID3F_cast


def itkBayesianClassifierInitializationImageFilterID4D_New():
    return itkBayesianClassifierInitializationImageFilterID4D.New()

class itkBayesianClassifierInitializationImageFilterID4D(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4VID4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID4D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID4D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterID4D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterID4D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_swigregister(itkBayesianClassifierInitializationImageFilterID4D)
itkBayesianClassifierInitializationImageFilterID4D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D___New_orig__
itkBayesianClassifierInitializationImageFilterID4D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4D_cast


def itkBayesianClassifierInitializationImageFilterID4F_New():
    return itkBayesianClassifierInitializationImageFilterID4F.New()

class itkBayesianClassifierInitializationImageFilterID4F(itk.itkImageToImageFilterBPython.itkImageToImageFilterID4VIF4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterID4F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterID4F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterID4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterID4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterID4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterID4F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterID4F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_swigregister(itkBayesianClassifierInitializationImageFilterID4F)
itkBayesianClassifierInitializationImageFilterID4F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F___New_orig__
itkBayesianClassifierInitializationImageFilterID4F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterID4F_cast


def itkBayesianClassifierInitializationImageFilterIF2D_New():
    return itkBayesianClassifierInitializationImageFilterIF2D.New()

class itkBayesianClassifierInitializationImageFilterIF2D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2VID2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF2D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIF2D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIF2D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_swigregister(itkBayesianClassifierInitializationImageFilterIF2D)
itkBayesianClassifierInitializationImageFilterIF2D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D___New_orig__
itkBayesianClassifierInitializationImageFilterIF2D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2D_cast


def itkBayesianClassifierInitializationImageFilterIF2F_New():
    return itkBayesianClassifierInitializationImageFilterIF2F.New()

class itkBayesianClassifierInitializationImageFilterIF2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF2VIF2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF2F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIF2F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIF2F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_swigregister(itkBayesianClassifierInitializationImageFilterIF2F)
itkBayesianClassifierInitializationImageFilterIF2F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F___New_orig__
itkBayesianClassifierInitializationImageFilterIF2F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF2F_cast


def itkBayesianClassifierInitializationImageFilterIF3D_New():
    return itkBayesianClassifierInitializationImageFilterIF3D.New()

class itkBayesianClassifierInitializationImageFilterIF3D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3VID3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF3D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIF3D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIF3D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_swigregister(itkBayesianClassifierInitializationImageFilterIF3D)
itkBayesianClassifierInitializationImageFilterIF3D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D___New_orig__
itkBayesianClassifierInitializationImageFilterIF3D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3D_cast


def itkBayesianClassifierInitializationImageFilterIF3F_New():
    return itkBayesianClassifierInitializationImageFilterIF3F.New()

class itkBayesianClassifierInitializationImageFilterIF3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF3VIF3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF3F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIF3F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIF3F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_swigregister(itkBayesianClassifierInitializationImageFilterIF3F)
itkBayesianClassifierInitializationImageFilterIF3F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F___New_orig__
itkBayesianClassifierInitializationImageFilterIF3F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF3F_cast


def itkBayesianClassifierInitializationImageFilterIF4D_New():
    return itkBayesianClassifierInitializationImageFilterIF4D.New()

class itkBayesianClassifierInitializationImageFilterIF4D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4VID4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF4D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF4D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIF4D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIF4D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_swigregister(itkBayesianClassifierInitializationImageFilterIF4D)
itkBayesianClassifierInitializationImageFilterIF4D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D___New_orig__
itkBayesianClassifierInitializationImageFilterIF4D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4D_cast


def itkBayesianClassifierInitializationImageFilterIF4F_New():
    return itkBayesianClassifierInitializationImageFilterIF4F.New()

class itkBayesianClassifierInitializationImageFilterIF4F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIF4VIF4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIF4F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIF4F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIF4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIF4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIF4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIF4F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIF4F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_swigregister(itkBayesianClassifierInitializationImageFilterIF4F)
itkBayesianClassifierInitializationImageFilterIF4F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F___New_orig__
itkBayesianClassifierInitializationImageFilterIF4F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIF4F_cast


def itkBayesianClassifierInitializationImageFilterISS2D_New():
    return itkBayesianClassifierInitializationImageFilterISS2D.New()

class itkBayesianClassifierInitializationImageFilterISS2D(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2VID2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS2D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterISS2D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterISS2D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_swigregister(itkBayesianClassifierInitializationImageFilterISS2D)
itkBayesianClassifierInitializationImageFilterISS2D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D___New_orig__
itkBayesianClassifierInitializationImageFilterISS2D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2D_cast


def itkBayesianClassifierInitializationImageFilterISS2F_New():
    return itkBayesianClassifierInitializationImageFilterISS2F.New()

class itkBayesianClassifierInitializationImageFilterISS2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS2VIF2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS2F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterISS2F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterISS2F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_swigregister(itkBayesianClassifierInitializationImageFilterISS2F)
itkBayesianClassifierInitializationImageFilterISS2F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F___New_orig__
itkBayesianClassifierInitializationImageFilterISS2F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS2F_cast


def itkBayesianClassifierInitializationImageFilterISS3D_New():
    return itkBayesianClassifierInitializationImageFilterISS3D.New()

class itkBayesianClassifierInitializationImageFilterISS3D(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3VID3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS3D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterISS3D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterISS3D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_swigregister(itkBayesianClassifierInitializationImageFilterISS3D)
itkBayesianClassifierInitializationImageFilterISS3D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D___New_orig__
itkBayesianClassifierInitializationImageFilterISS3D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3D_cast


def itkBayesianClassifierInitializationImageFilterISS3F_New():
    return itkBayesianClassifierInitializationImageFilterISS3F.New()

class itkBayesianClassifierInitializationImageFilterISS3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS3VIF3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS3F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterISS3F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterISS3F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_swigregister(itkBayesianClassifierInitializationImageFilterISS3F)
itkBayesianClassifierInitializationImageFilterISS3F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F___New_orig__
itkBayesianClassifierInitializationImageFilterISS3F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS3F_cast


def itkBayesianClassifierInitializationImageFilterISS4D_New():
    return itkBayesianClassifierInitializationImageFilterISS4D.New()

class itkBayesianClassifierInitializationImageFilterISS4D(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4VID4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS4D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS4D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterISS4D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterISS4D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_swigregister(itkBayesianClassifierInitializationImageFilterISS4D)
itkBayesianClassifierInitializationImageFilterISS4D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D___New_orig__
itkBayesianClassifierInitializationImageFilterISS4D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4D_cast


def itkBayesianClassifierInitializationImageFilterISS4F_New():
    return itkBayesianClassifierInitializationImageFilterISS4F.New()

class itkBayesianClassifierInitializationImageFilterISS4F(itk.itkImageToImageFilterBPython.itkImageToImageFilterISS4VIF4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterISS4F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterISS4F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterISS4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterISS4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterISS4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterISS4F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterISS4F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_swigregister(itkBayesianClassifierInitializationImageFilterISS4F)
itkBayesianClassifierInitializationImageFilterISS4F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F___New_orig__
itkBayesianClassifierInitializationImageFilterISS4F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterISS4F_cast


def itkBayesianClassifierInitializationImageFilterIUC2D_New():
    return itkBayesianClassifierInitializationImageFilterIUC2D.New()

class itkBayesianClassifierInitializationImageFilterIUC2D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2VID2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC2D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC2D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUC2D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_swigregister(itkBayesianClassifierInitializationImageFilterIUC2D)
itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D___New_orig__
itkBayesianClassifierInitializationImageFilterIUC2D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2D_cast


def itkBayesianClassifierInitializationImageFilterIUC2F_New():
    return itkBayesianClassifierInitializationImageFilterIUC2F.New()

class itkBayesianClassifierInitializationImageFilterIUC2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC2VIF2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC2F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC2F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUC2F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_swigregister(itkBayesianClassifierInitializationImageFilterIUC2F)
itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F___New_orig__
itkBayesianClassifierInitializationImageFilterIUC2F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC2F_cast


def itkBayesianClassifierInitializationImageFilterIUC3D_New():
    return itkBayesianClassifierInitializationImageFilterIUC3D.New()

class itkBayesianClassifierInitializationImageFilterIUC3D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3VID3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC3D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC3D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUC3D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_swigregister(itkBayesianClassifierInitializationImageFilterIUC3D)
itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D___New_orig__
itkBayesianClassifierInitializationImageFilterIUC3D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3D_cast


def itkBayesianClassifierInitializationImageFilterIUC3F_New():
    return itkBayesianClassifierInitializationImageFilterIUC3F.New()

class itkBayesianClassifierInitializationImageFilterIUC3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC3VIF3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC3F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC3F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUC3F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_swigregister(itkBayesianClassifierInitializationImageFilterIUC3F)
itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F___New_orig__
itkBayesianClassifierInitializationImageFilterIUC3F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC3F_cast


def itkBayesianClassifierInitializationImageFilterIUC4D_New():
    return itkBayesianClassifierInitializationImageFilterIUC4D.New()

class itkBayesianClassifierInitializationImageFilterIUC4D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4VID4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC4D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC4D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC4D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUC4D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_swigregister(itkBayesianClassifierInitializationImageFilterIUC4D)
itkBayesianClassifierInitializationImageFilterIUC4D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D___New_orig__
itkBayesianClassifierInitializationImageFilterIUC4D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4D_cast


def itkBayesianClassifierInitializationImageFilterIUC4F_New():
    return itkBayesianClassifierInitializationImageFilterIUC4F.New()

class itkBayesianClassifierInitializationImageFilterIUC4F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUC4VIF4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUC4F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUC4F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUC4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUC4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUC4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUC4F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUC4F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_swigregister(itkBayesianClassifierInitializationImageFilterIUC4F)
itkBayesianClassifierInitializationImageFilterIUC4F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F___New_orig__
itkBayesianClassifierInitializationImageFilterIUC4F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUC4F_cast


def itkBayesianClassifierInitializationImageFilterIUS2D_New():
    return itkBayesianClassifierInitializationImageFilterIUS2D.New()

class itkBayesianClassifierInitializationImageFilterIUS2D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2VID2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS2D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS2D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS2D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS2D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS2D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUS2D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_swigregister(itkBayesianClassifierInitializationImageFilterIUS2D)
itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D___New_orig__
itkBayesianClassifierInitializationImageFilterIUS2D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2D_cast


def itkBayesianClassifierInitializationImageFilterIUS2F_New():
    return itkBayesianClassifierInitializationImageFilterIUS2F.New()

class itkBayesianClassifierInitializationImageFilterIUS2F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS2VIF2):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS2F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS2F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS2F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS2F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS2F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUS2F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_swigregister(itkBayesianClassifierInitializationImageFilterIUS2F)
itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F___New_orig__
itkBayesianClassifierInitializationImageFilterIUS2F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS2F_cast


def itkBayesianClassifierInitializationImageFilterIUS3D_New():
    return itkBayesianClassifierInitializationImageFilterIUS3D.New()

class itkBayesianClassifierInitializationImageFilterIUS3D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3VID3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS3D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS3D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS3D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS3D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS3D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUS3D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_swigregister(itkBayesianClassifierInitializationImageFilterIUS3D)
itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D___New_orig__
itkBayesianClassifierInitializationImageFilterIUS3D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3D_cast


def itkBayesianClassifierInitializationImageFilterIUS3F_New():
    return itkBayesianClassifierInitializationImageFilterIUS3F.New()

class itkBayesianClassifierInitializationImageFilterIUS3F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS3VIF3):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS3F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS3F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS3F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS3F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS3F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUS3F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_swigregister(itkBayesianClassifierInitializationImageFilterIUS3F)
itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F___New_orig__
itkBayesianClassifierInitializationImageFilterIUS3F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS3F_cast


def itkBayesianClassifierInitializationImageFilterIUS4D_New():
    return itkBayesianClassifierInitializationImageFilterIUS4D.New()

class itkBayesianClassifierInitializationImageFilterIUS4D(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4VID4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS4D
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS4D

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS4D and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS4D.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS4D.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS4D.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUS4D in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_swigregister(itkBayesianClassifierInitializationImageFilterIUS4D)
itkBayesianClassifierInitializationImageFilterIUS4D___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D___New_orig__
itkBayesianClassifierInitializationImageFilterIUS4D_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4D_cast


def itkBayesianClassifierInitializationImageFilterIUS4F_New():
    return itkBayesianClassifierInitializationImageFilterIUS4F.New()

class itkBayesianClassifierInitializationImageFilterIUS4F(itk.itkImageToImageFilterBPython.itkImageToImageFilterIUS4VIF4):
    r"""


    This filter is intended to be used as a helper class to initialize the
    BayesianClassifierImageFilter.

    The goal of this filter is to generate a membership image that
    indicates the membership of each pixel to each class. These membership
    images are fed as input to the Bayesian classifier filter. Parameters
    Number of classes: This defines the number of classes, which will
    determine the number of membership images that will be generated. The
    user must specify this.

    Membership functions: The user can optionally plugin in any membership
    function. The number of membership functions plugged in should be the
    same as the number of classes. If the user does not supply membership
    functions, the filter will generate membership functions for you.
    These functions are Gaussian density functions centered around 'n'
    pixel intensity values, $ I_k $. These 'n' values are obtained by
    running K-means on the image. In other words, the default behaviour of
    the filter is to generate Gaussian mixture model for the input image.
    Inputs and Outputs The filter takes a scalar Image as input and
    generates a VectorImage, each component $ c $ of which represents
    memberships of each pixel to the class $ c $. Template parameters This
    filter is templated over the input image type and the data type used
    to represent the probabilities (defaults to float).

    John Melonakos, Georgia Tech

    This work is part of the National Alliance for Medical Image Computing
    (NAMIC), funded by the National Institutes of Health through the NIH
    Roadmap for Medical Research, Grant U54 EB005149.

    See:   BayesianClassifierImageFilter

    See:  VectorImage 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F___New_orig__)
    Clone = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_Clone)
    SetMembershipFunctions = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_SetMembershipFunctions)
    GetModifiableMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_GetModifiableMembershipFunctionContainer)
    GetMembershipFunctionContainer = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_GetMembershipFunctionContainer)
    SetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_SetNumberOfClasses)
    GetNumberOfClasses = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_GetNumberOfClasses)
    GenerateOutputInformation = _swig_new_instance_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_GenerateOutputInformation)
    InputMultiplyOperatorCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_InputMultiplyOperatorCheck
    
    DoubleConvertibleToProbabilityCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_DoubleConvertibleToProbabilityCheck
    
    InputHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_InputHasNumericTraitsCheck
    
    ProbabilityHasNumericTraitsCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_ProbabilityHasNumericTraitsCheck
    
    DoublePlusInputCheck = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_DoublePlusInputCheck
    
    __swig_destroy__ = _itkBayesianClassifierInitializationImageFilterPython.delete_itkBayesianClassifierInitializationImageFilterIUS4F
    cast = _swig_new_static_method(_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_cast)

    def New(*args, **kargs):
        """New() -> itkBayesianClassifierInitializationImageFilterIUS4F

        Create a new object of the class itkBayesianClassifierInitializationImageFilterIUS4F and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkBayesianClassifierInitializationImageFilterIUS4F.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkBayesianClassifierInitializationImageFilterIUS4F.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkBayesianClassifierInitializationImageFilterIUS4F.__New_orig__()
        from itk.support import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkBayesianClassifierInitializationImageFilterIUS4F in _itkBayesianClassifierInitializationImageFilterPython:
_itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_swigregister(itkBayesianClassifierInitializationImageFilterIUS4F)
itkBayesianClassifierInitializationImageFilterIUS4F___New_orig__ = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F___New_orig__
itkBayesianClassifierInitializationImageFilterIUS4F_cast = _itkBayesianClassifierInitializationImageFilterPython.itkBayesianClassifierInitializationImageFilterIUS4F_cast


from itk.support import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def bayesian_classifier_initialization_image_filter(*args, **kwargs):
    """Procedural interface for BayesianClassifierInitializationImageFilter"""
    import itk

    instance = itk.BayesianClassifierInitializationImageFilter.New(*args, **kwargs)
    return instance.__internal_call__()


def bayesian_classifier_initialization_image_filter_init_docstring():
    import itk
    from itk.support import itkTemplate
    from itk.support import itkHelpers

    filter_class = itk.ITKClassifiers.BayesianClassifierInitializationImageFilter
    is_template = isinstance(filter_class, itkTemplate.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    bayesian_classifier_initialization_image_filter.__doc__ = filter_object.__doc__
    bayesian_classifier_initialization_image_filter.__doc__ += "\n args are input(s) to the filter.\n\n"
    bayesian_classifier_initialization_image_filter.__doc__ += "\n Available keyword arguments:\n"
    if is_template:
        bayesian_classifier_initialization_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[0]
        bayesian_classifier_initialization_image_filter.__doc__ += "\n"
        bayesian_classifier_initialization_image_filter.__doc__ += itkHelpers.filter_args(filter_object)[1]
    else:
        bayesian_classifier_initialization_image_filter.__doc__ += "".join(
            [
                "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
                for item in dir(filter_object)
                if item.startswith("Set")
            ]
        )




