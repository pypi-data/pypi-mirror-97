# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _reset
else:
    import _reset

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.entity
import libcellml.types

# libCellML generated wrapper code starts here.

class Reset(libcellml.entity.Entity):
    r"""The Reset class is for describing a CellML reset."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _reset.delete_Reset

    def setOrder(self, order):
        r"""Set the order for this reset.  The order value must be an integer."""
        return _reset.Reset_setOrder(self, order)

    def order(self):
        r"""Returns the order for this reset as an integer value."""
        return _reset.Reset_order(self)

    def unsetOrder(self):
        r"""Sets the state of the order to unset."""
        return _reset.Reset_unsetOrder(self)

    def isOrderSet(self):
        r"""Returns True if the order is set, False otherwise."""
        return _reset.Reset_isOrderSet(self)

    def setVariable(self, variable):
        r"""Sets the :class: variable for this reset."""
        return _reset.Reset_setVariable(self, variable)

    def variable(self):
        r"""Returns the :class: variable of this reset."""
        return _reset.Reset_variable(self)

    def setTestVariable(self, variable):
        r"""Sets the :class: test_variable for this reset."""
        return _reset.Reset_setTestVariable(self, variable)

    def testVariable(self):
        r"""Returns the :class: test_variable of this reset."""
        return _reset.Reset_testVariable(self)

    def appendTestValue(self, math):
        r"""Appends to the :class: test_value MathML string of this reset."""
        return _reset.Reset_appendTestValue(self, math)

    def testValue(self):
        r"""Returns the :class: test_value MathML string of this reset."""
        return _reset.Reset_testValue(self)

    def setTestValue(self, math):
        r"""Sets the :class: test_value MathML string of this reset."""
        return _reset.Reset_setTestValue(self, math)

    def removeTestValue(self):
        r"""Clears the :class: test_value MathML string of this reset."""
        return _reset.Reset_removeTestValue(self)

    def setTestValueId(self, id):
        r"""Sets the :class: test_value id string of this reset."""
        return _reset.Reset_setTestValueId(self, id)

    def removeTestValueId(self):
        r"""Clears the :class: test_value id string of this reset."""
        return _reset.Reset_removeTestValueId(self)

    def testValueId(self):
        r"""Returns the :class: test_value id string of this reset."""
        return _reset.Reset_testValueId(self)

    def appendResetValue(self, math):
        r"""Appends to the :class: reset_value MathML string of this reset."""
        return _reset.Reset_appendResetValue(self, math)

    def resetValue(self):
        r"""Returns the :class: reset_value MathML string of this reset."""
        return _reset.Reset_resetValue(self)

    def setResetValue(self, math):
        r"""Sets the :class: reset_value MathML string of this reset."""
        return _reset.Reset_setResetValue(self, math)

    def removeResetValue(self):
        r"""Clears the :class: reset_value MathML string of this reset."""
        return _reset.Reset_removeResetValue(self)

    def setResetValueId(self, id):
        r"""Sets the :class: reset_value id string of this reset."""
        return _reset.Reset_setResetValueId(self, id)

    def removeResetValueId(self):
        r"""Clears the :class: reset_value id string of this reset."""
        return _reset.Reset_removeResetValueId(self)

    def resetValueId(self):
        r"""Returns the :class: reset_value id string of this reset."""
        return _reset.Reset_resetValueId(self)

    def clone(self):
        r"""Create a copy of this reset."""
        return _reset.Reset_clone(self)

    def __init__(self):
        _reset.Reset_swiginit(self, _reset.new_Reset())

# Register Reset in _reset:
_reset.Reset_swigregister(Reset)



