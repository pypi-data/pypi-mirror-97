# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _issue
else:
    import _issue

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.enums
import libcellml.types

# libCellML generated wrapper code starts here.

from libcellml import CellmlElementType

class Issue(object):
    r"""Base class for issues used with logger derived classes."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _issue.delete_Issue
    Level_ERROR = _issue.Issue_Level_ERROR
    Level_WARNING = _issue.Issue_Level_WARNING
    Level_HINT = _issue.Issue_Level_HINT
    Level_MESSAGE = _issue.Issue_Level_MESSAGE
    ReferenceRule_UNDEFINED = _issue.Issue_ReferenceRule_UNDEFINED
    ReferenceRule_XML = _issue.Issue_ReferenceRule_XML
    ReferenceRule_DATA_REPR_IDENTIFIER_UNICODE = _issue.Issue_ReferenceRule_DATA_REPR_IDENTIFIER_UNICODE
    ReferenceRule_DATA_REPR_IDENTIFIER_LATIN_ALPHANUM = _issue.Issue_ReferenceRule_DATA_REPR_IDENTIFIER_LATIN_ALPHANUM
    ReferenceRule_DATA_REPR_IDENTIFIER_AT_LEAST_ONE_ALPHANUM = _issue.Issue_ReferenceRule_DATA_REPR_IDENTIFIER_AT_LEAST_ONE_ALPHANUM
    ReferenceRule_DATA_REPR_IDENTIFIER_BEGIN_EURO_NUM = _issue.Issue_ReferenceRule_DATA_REPR_IDENTIFIER_BEGIN_EURO_NUM
    ReferenceRule_DATA_REPR_IDENTIFIER_IDENTICAL = _issue.Issue_ReferenceRule_DATA_REPR_IDENTIFIER_IDENTICAL
    ReferenceRule_DATA_REPR_INT_BASE10 = _issue.Issue_ReferenceRule_DATA_REPR_INT_BASE10
    ReferenceRule_DATA_REPR_INT_SIGN = _issue.Issue_ReferenceRule_DATA_REPR_INT_SIGN
    ReferenceRule_DATA_REPR_INT_DIGIT = _issue.Issue_ReferenceRule_DATA_REPR_INT_DIGIT
    ReferenceRule_DATA_REPR_BASIC_REAL_BASE10 = _issue.Issue_ReferenceRule_DATA_REPR_BASIC_REAL_BASE10
    ReferenceRule_DATA_REPR_BASIC_REAL_SIGN = _issue.Issue_ReferenceRule_DATA_REPR_BASIC_REAL_SIGN
    ReferenceRule_DATA_REPR_BASIC_REAL_DECIMAL = _issue.Issue_ReferenceRule_DATA_REPR_BASIC_REAL_DECIMAL
    ReferenceRule_DATA_REPR_BASIC_REAL_DIGIT = _issue.Issue_ReferenceRule_DATA_REPR_BASIC_REAL_DIGIT
    ReferenceRule_DATA_REPR_REAL_BASE10 = _issue.Issue_ReferenceRule_DATA_REPR_REAL_BASE10
    ReferenceRule_DATA_REPR_REAL_SIGNIFICAND = _issue.Issue_ReferenceRule_DATA_REPR_REAL_SIGNIFICAND
    ReferenceRule_DATA_REPR_REAL_EXPONENT = _issue.Issue_ReferenceRule_DATA_REPR_REAL_EXPONENT
    ReferenceRule_MODEL_ELEMENT = _issue.Issue_ReferenceRule_MODEL_ELEMENT
    ReferenceRule_MODEL_NAME = _issue.Issue_ReferenceRule_MODEL_NAME
    ReferenceRule_MODEL_CHILD = _issue.Issue_ReferenceRule_MODEL_CHILD
    ReferenceRule_MODEL_MORE_THAN_ONE_ENCAPSULATION = _issue.Issue_ReferenceRule_MODEL_MORE_THAN_ONE_ENCAPSULATION
    ReferenceRule_IMPORT_ATTRIBUTE = _issue.Issue_ReferenceRule_IMPORT_ATTRIBUTE
    ReferenceRule_IMPORT_HREF = _issue.Issue_ReferenceRule_IMPORT_HREF
    ReferenceRule_IMPORT_CHILD = _issue.Issue_ReferenceRule_IMPORT_CHILD
    ReferenceRule_IMPORT_EQUIVALENT = _issue.Issue_ReferenceRule_IMPORT_EQUIVALENT
    ReferenceRule_IMPORT_UNITS_NAME = _issue.Issue_ReferenceRule_IMPORT_UNITS_NAME
    ReferenceRule_IMPORT_UNITS_NAME_UNIQUE = _issue.Issue_ReferenceRule_IMPORT_UNITS_NAME_UNIQUE
    ReferenceRule_IMPORT_UNITS_REF = _issue.Issue_ReferenceRule_IMPORT_UNITS_REF
    ReferenceRule_IMPORT_COMPONENT_NAME = _issue.Issue_ReferenceRule_IMPORT_COMPONENT_NAME
    ReferenceRule_IMPORT_COMPONENT_NAME_UNIQUE = _issue.Issue_ReferenceRule_IMPORT_COMPONENT_NAME_UNIQUE
    ReferenceRule_IMPORT_COMPONENT_COMPONENT_REF = _issue.Issue_ReferenceRule_IMPORT_COMPONENT_COMPONENT_REF
    ReferenceRule_UNITS_ATTRIBUTE = _issue.Issue_ReferenceRule_UNITS_ATTRIBUTE
    ReferenceRule_UNITS_NAME = _issue.Issue_ReferenceRule_UNITS_NAME
    ReferenceRule_UNITS_NAME_UNIQUE = _issue.Issue_ReferenceRule_UNITS_NAME_UNIQUE
    ReferenceRule_UNITS_STANDARD = _issue.Issue_ReferenceRule_UNITS_STANDARD
    ReferenceRule_UNITS_CHILD = _issue.Issue_ReferenceRule_UNITS_CHILD
    ReferenceRule_UNIT_ATTRIBUTE = _issue.Issue_ReferenceRule_UNIT_ATTRIBUTE
    ReferenceRule_UNIT_UNITS_REF = _issue.Issue_ReferenceRule_UNIT_UNITS_REF
    ReferenceRule_UNIT_CIRCULAR_REF = _issue.Issue_ReferenceRule_UNIT_CIRCULAR_REF
    ReferenceRule_UNIT_OPTIONAL_ATTRIBUTE = _issue.Issue_ReferenceRule_UNIT_OPTIONAL_ATTRIBUTE
    ReferenceRule_UNIT_PREFIX = _issue.Issue_ReferenceRule_UNIT_PREFIX
    ReferenceRule_UNIT_MULTIPLIER = _issue.Issue_ReferenceRule_UNIT_MULTIPLIER
    ReferenceRule_UNIT_EXPONENT = _issue.Issue_ReferenceRule_UNIT_EXPONENT
    ReferenceRule_COMPONENT_ATTRIBUTE = _issue.Issue_ReferenceRule_COMPONENT_ATTRIBUTE
    ReferenceRule_COMPONENT_NAME = _issue.Issue_ReferenceRule_COMPONENT_NAME
    ReferenceRule_COMPONENT_NAME_UNIQUE = _issue.Issue_ReferenceRule_COMPONENT_NAME_UNIQUE
    ReferenceRule_COMPONENT_CHILD = _issue.Issue_ReferenceRule_COMPONENT_CHILD
    ReferenceRule_VARIABLE_ATTRIBUTE = _issue.Issue_ReferenceRule_VARIABLE_ATTRIBUTE
    ReferenceRule_VARIABLE_CHILD = _issue.Issue_ReferenceRule_VARIABLE_CHILD
    ReferenceRule_VARIABLE_NAME = _issue.Issue_ReferenceRule_VARIABLE_NAME
    ReferenceRule_VARIABLE_NAME_UNIQUE = _issue.Issue_ReferenceRule_VARIABLE_NAME_UNIQUE
    ReferenceRule_VARIABLE_UNITS = _issue.Issue_ReferenceRule_VARIABLE_UNITS
    ReferenceRule_VARIABLE_INTERFACE = _issue.Issue_ReferenceRule_VARIABLE_INTERFACE
    ReferenceRule_VARIABLE_INITIAL_VALUE = _issue.Issue_ReferenceRule_VARIABLE_INITIAL_VALUE
    ReferenceRule_RESET_ATTRIBUTE = _issue.Issue_ReferenceRule_RESET_ATTRIBUTE
    ReferenceRule_RESET_VARIABLE_REF = _issue.Issue_ReferenceRule_RESET_VARIABLE_REF
    ReferenceRule_RESET_TEST_VARIABLE_REF = _issue.Issue_ReferenceRule_RESET_TEST_VARIABLE_REF
    ReferenceRule_RESET_ORDER = _issue.Issue_ReferenceRule_RESET_ORDER
    ReferenceRule_RESET_CHILD = _issue.Issue_ReferenceRule_RESET_CHILD
    ReferenceRule_RESET_TEST_VALUE = _issue.Issue_ReferenceRule_RESET_TEST_VALUE
    ReferenceRule_RESET_RESET_VALUE = _issue.Issue_ReferenceRule_RESET_RESET_VALUE
    ReferenceRule_MATH_MATHML = _issue.Issue_ReferenceRule_MATH_MATHML
    ReferenceRule_MATH_CHILD = _issue.Issue_ReferenceRule_MATH_CHILD
    ReferenceRule_MATH_CI_VARIABLE_REF = _issue.Issue_ReferenceRule_MATH_CI_VARIABLE_REF
    ReferenceRule_MATH_CN_UNITS = _issue.Issue_ReferenceRule_MATH_CN_UNITS
    ReferenceRule_MATH_CN_BASE10 = _issue.Issue_ReferenceRule_MATH_CN_BASE10
    ReferenceRule_MATH_CN_FORMAT = _issue.Issue_ReferenceRule_MATH_CN_FORMAT
    ReferenceRule_ENCAPSULATION_ATTRIBUTE = _issue.Issue_ReferenceRule_ENCAPSULATION_ATTRIBUTE
    ReferenceRule_ENCAPSULATION_CHILD = _issue.Issue_ReferenceRule_ENCAPSULATION_CHILD
    ReferenceRule_COMPONENT_REF_COMPONENT = _issue.Issue_ReferenceRule_COMPONENT_REF_COMPONENT
    ReferenceRule_COMPONENT_REF_CHILD = _issue.Issue_ReferenceRule_COMPONENT_REF_CHILD
    ReferenceRule_CONNECTION_ATTRIBUTE = _issue.Issue_ReferenceRule_CONNECTION_ATTRIBUTE
    ReferenceRule_CONNECTION_COMPONENT1 = _issue.Issue_ReferenceRule_CONNECTION_COMPONENT1
    ReferenceRule_CONNECTION_COMPONENT2 = _issue.Issue_ReferenceRule_CONNECTION_COMPONENT2
    ReferenceRule_CONNECTION_EXCLUDE_SELF = _issue.Issue_ReferenceRule_CONNECTION_EXCLUDE_SELF
    ReferenceRule_CONNECTION_UNIQUE = _issue.Issue_ReferenceRule_CONNECTION_UNIQUE
    ReferenceRule_CONNECTION_CHILD = _issue.Issue_ReferenceRule_CONNECTION_CHILD
    ReferenceRule_MAP_VARIABLES_ATTRIBUTE = _issue.Issue_ReferenceRule_MAP_VARIABLES_ATTRIBUTE
    ReferenceRule_MAP_VARIABLES_VARIABLE1 = _issue.Issue_ReferenceRule_MAP_VARIABLES_VARIABLE1
    ReferenceRule_MAP_VARIABLES_VARIABLE2 = _issue.Issue_ReferenceRule_MAP_VARIABLES_VARIABLE2
    ReferenceRule_MAP_VARIABLES_UNIQUE = _issue.Issue_ReferenceRule_MAP_VARIABLES_UNIQUE
    ReferenceRule_MAP_VARIABLES_AVAILABLE_INTERFACE = _issue.Issue_ReferenceRule_MAP_VARIABLES_AVAILABLE_INTERFACE
    ReferenceRule_MAP_VARIABLES_IDENTICAL_UNIT_REDUCTION = _issue.Issue_ReferenceRule_MAP_VARIABLES_IDENTICAL_UNIT_REDUCTION
    ReferenceRule_UNSPECIFIED = _issue.Issue_ReferenceRule_UNSPECIFIED

    def setDescription(self, description):
        r"""Sets a string description for why this issue was raised."""
        return _issue.Issue_setDescription(self, description)

    def description(self):
        r"""Get a string description for why this issue was raised."""
        return _issue.Issue_description(self)

    def setLevel(self, level):
        r"""Sets the ``level`` of this issue."""
        return _issue.Issue_setLevel(self, level)

    def level(self):
        r"""
        Get the ``level`` of this issue. If no level has been set for this issue,
        Level::ERROR will be returned.
        """
        return _issue.Issue_level(self)

    def setReferenceRule(self, referenceRule):
        r"""Sets the :class:`ReferenceRule` for this issue."""
        return _issue.Issue_setReferenceRule(self, referenceRule)

    def referenceRule(self):
        r"""Get the :class:`ReferenceRule` of this issue."""
        return _issue.Issue_referenceRule(self)

    def url(self):
        r"""Get the URL for more information about this issue."""
        return _issue.Issue_url(self)

    def referenceHeading(self):
        r"""
        Returns the CellML 2.0 Specification heading associated with the
        :class:`ReferenceRule` for this issue (empty string if not set).
        """
        return _issue.Issue_referenceHeading(self)

    def setComponent(self, component):
        r"""Sets the :class:`Component` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setComponent(self, component)

    def component(self):
        r"""Returns the :class:`Component` relevant to this issue (or ``None``)."""
        return _issue.Issue_component(self)

    def setImportSource(self, importSource):
        r"""Sets the :class:`ImportSource` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setImportSource(self, importSource)

    def importSource(self):
        r"""Returns the :class:`ImportSource` relevant to this issue (or ``None``)."""
        return _issue.Issue_importSource(self)

    def setModel(self, model):
        r"""Sets the :class:`Model` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setModel(self, model)

    def model(self):
        r"""Returns the :class:`Model` relevant to this issue (or ``None``)."""
        return _issue.Issue_model(self)

    def setUnits(self, units):
        r"""Sets the :class`Units` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setUnits(self, units)

    def units(self):
        r"""Get the :class:`Units` relevant to this issue (or ``None``)."""
        return _issue.Issue_units(self)

    def setVariable(self, variable):
        r"""Sets the :class:`Variable` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setVariable(self, variable)

    def variable(self):
        r"""Get the :class:`Variable` relevant to this issue (or ``None``)."""
        return _issue.Issue_variable(self)

    def setReset(self, reset):
        r"""Sets the :class:`Reset` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setReset(self, reset)

    def reset(self):
        r"""Get the :class:`Reset` relevant to this issue (or ``None``)."""
        return _issue.Issue_reset(self)

    def setMath(self, component):
        r"""Sets the :class:`Component` containing the MathML relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setMath(self, component)

    def math(self):
        r"""Get the :class:`Component` containing the MathML relevant to this issue (or ``None``)."""
        return _issue.Issue_math(self)

    def setConnection(self, *args):
        r"""Sets the :class:`VariablePair` representing the connection relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setConnection(self, *args)

    def connection(self):
        r"""Get the :class:`VariablePair` representing the connection relevant to this issue (or ``None``)."""
        return _issue.Issue_connection(self)

    def setMapVariables(self, *args):
        r"""Sets the :class:`VariablePair` representing the equivalence relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setMapVariables(self, *args)

    def mapVariables(self):
        r"""Get the :class:`VariablePair` representing the equivalence relevant to this issue (or ``None``)."""
        return _issue.Issue_mapVariables(self)

    def setResetValue(self, reset):
        r"""Sets the :class:`Reset` containing the reset value relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setResetValue(self, reset)

    def resetValue(self):
        r"""Get the :class:`Reset` containing the reset value relevant to this issue (or ``None``)."""
        return _issue.Issue_resetValue(self)

    def setTestValue(self, reset):
        r"""Sets the :class:`Reset` containing the test value relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setTestValue(self, reset)

    def testValue(self):
        r"""Get the :class:`Reset` containing the test value relevant to this issue (or ``None``)."""
        return _issue.Issue_testValue(self)

    def setUnit(self, unit):
        r"""Sets the :class`Unit` relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setUnit(self, unit)

    def unit(self):
        r"""Get the :class:`Unit` relevant to this issue (or ``None``)."""
        return _issue.Issue_unit(self)

    def setEncapsulation(self, model):
        r"""Sets the :class:`Model` whose encapsulation is relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setEncapsulation(self, model)

    def encapsulation(self):
        r"""Returns the :class:`Model` whose encapsulation is relevant to this issue (or ``None``)."""
        return _issue.Issue_encapsulation(self)

    def setComponentRef(self, component):
        r"""Sets the :class:`Component` whose encapsulation is relevant to this issue (``None`` to unset)."""
        return _issue.Issue_setComponentRef(self, component)

    def componentRef(self):
        r"""Returns the :class:`Component` whose encapsulation is relevant to this issue (or ``None``)."""
        return _issue.Issue_componentRef(self)

    def cellmlElementType(self):
        r"""Get the type of this issue."""
        return _issue.Issue_cellmlElementType(self)

    def clear(self):
        r"""Clear the issue to its empty state."""
        return _issue.Issue_clear(self)

    def __init__(self, *args):
        _issue.Issue_swiginit(self, _issue.new_Issue(*args))

    def setItem(self, cellmlElementType, item):
        r"""Set the item by item type related to this issue."""

        if cellmlElementType == CellmlElementType.COMPONENT:
            _issue.Issue_setComponent(self, item)
        elif cellmlElementType == CellmlElementType.COMPONENT_REF:
            _issue.Issue_setComponentRef(self, item)
        elif cellmlElementType == CellmlElementType.CONNECTION:
            _issue.Issue_setConnection(self, item)
        elif cellmlElementType == CellmlElementType.ENCAPSULATION:
            _issue.Issue_setEncapsulation(self, item)
        elif cellmlElementType == CellmlElementType.IMPORT:
            _issue.Issue_setImportSource(self, item)
        elif cellmlElementType == CellmlElementType.MAP_VARIABLES:
            _issue.Issue_setMapVariables(self, item)
        elif cellmlElementType == CellmlElementType.MODEL:
            _issue.Issue_setModel(self, item)
        elif cellmlElementType == CellmlElementType.RESET:
            _issue.Issue_setReset(self, item)
        elif cellmlElementType == CellmlElementType.RESET_VALUE:
            _issue.Issue_setResetValue(self, item)
        elif cellmlElementType == CellmlElementType.TEST_VALUE:
            _issue.Issue_setTestValue(self, item)
        elif cellmlElementType == CellmlElementType.UNIT:
            _issue.Issue_setUnit(self, item)
        elif cellmlElementType == CellmlElementType.UNITS:
            _issue.Issue_setUnits(self, item)
        elif cellmlElementType == CellmlElementType.VARIABLE:
            _issue.Issue_setVariable(self, item)

    def item(self):
        r"""Get the item relevant to this issue by item type (or ``None``)."""

        cellmlElementType = _issue.Issue_cellmlElementType(self)
        if cellmlElementType == CellmlElementType.COMPONENT:
            return (cellmlElementType, _issue.Issue_component(self))
        elif cellmlElementType == CellmlElementType.COMPONENT_REF:
            return (cellmlElementType, _issue.Issue_componentRef(self))
        elif cellmlElementType == CellmlElementType.CONNECTION:
            return (cellmlElementType, _issue.Issue_connection(self))
        elif cellmlElementType == CellmlElementType.ENCAPSULATION:
            return (cellmlElementType, _issue.Issue_encapsulation(self))
        elif cellmlElementType == CellmlElementType.IMPORT:
            return (cellmlElementType, _issue.Issue_importSource(self))
        elif cellmlElementType == CellmlElementType.MAP_VARIABLES:
            return (cellmlElementType, _issue.Issue_mapVariables(self))
        elif cellmlElementType == CellmlElementType.MODEL:
            return (cellmlElementType, _issue.Issue_model(self))
        elif cellmlElementType == CellmlElementType.RESET:
            return (cellmlElementType, _issue.Issue_reset(self))
        elif cellmlElementType == CellmlElementType.RESET_VALUE:
            return (cellmlElementType, _issue.Issue_resetValue(self))
        elif cellmlElementType == CellmlElementType.TEST_VALUE:
            return (cellmlElementType, _issue.Issue_testValue(self))
        elif cellmlElementType == CellmlElementType.UNIT:
            return (cellmlElementType, _issue.Issue_unit(self))
        elif cellmlElementType == CellmlElementType.UNITS:
            return (cellmlElementType, _issue.Issue_units(self))
        elif cellmlElementType == CellmlElementType.VARIABLE:
            return (cellmlElementType, _issue.Issue_variable(self))
        return (CellmlElementType.UNDEFINED, None)


# Register Issue in _issue:
_issue.Issue_swigregister(Issue)



