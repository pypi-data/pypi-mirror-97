# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _analyserequationast
else:
    import _analyserequationast

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.types

# libCellML generated wrapper code starts here.

class AnalyserEquationAst(object):
    r"""Creates an :class:`AnalyserEquationAst` object."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    Type_ASSIGNMENT = _analyserequationast.AnalyserEquationAst_Type_ASSIGNMENT
    Type_EQ = _analyserequationast.AnalyserEquationAst_Type_EQ
    Type_NEQ = _analyserequationast.AnalyserEquationAst_Type_NEQ
    Type_LT = _analyserequationast.AnalyserEquationAst_Type_LT
    Type_LEQ = _analyserequationast.AnalyserEquationAst_Type_LEQ
    Type_GT = _analyserequationast.AnalyserEquationAst_Type_GT
    Type_GEQ = _analyserequationast.AnalyserEquationAst_Type_GEQ
    Type_AND = _analyserequationast.AnalyserEquationAst_Type_AND
    Type_OR = _analyserequationast.AnalyserEquationAst_Type_OR
    Type_XOR = _analyserequationast.AnalyserEquationAst_Type_XOR
    Type_NOT = _analyserequationast.AnalyserEquationAst_Type_NOT
    Type_PLUS = _analyserequationast.AnalyserEquationAst_Type_PLUS
    Type_MINUS = _analyserequationast.AnalyserEquationAst_Type_MINUS
    Type_TIMES = _analyserequationast.AnalyserEquationAst_Type_TIMES
    Type_DIVIDE = _analyserequationast.AnalyserEquationAst_Type_DIVIDE
    Type_POWER = _analyserequationast.AnalyserEquationAst_Type_POWER
    Type_ROOT = _analyserequationast.AnalyserEquationAst_Type_ROOT
    Type_ABS = _analyserequationast.AnalyserEquationAst_Type_ABS
    Type_EXP = _analyserequationast.AnalyserEquationAst_Type_EXP
    Type_LN = _analyserequationast.AnalyserEquationAst_Type_LN
    Type_LOG = _analyserequationast.AnalyserEquationAst_Type_LOG
    Type_CEILING = _analyserequationast.AnalyserEquationAst_Type_CEILING
    Type_FLOOR = _analyserequationast.AnalyserEquationAst_Type_FLOOR
    Type_MIN = _analyserequationast.AnalyserEquationAst_Type_MIN
    Type_MAX = _analyserequationast.AnalyserEquationAst_Type_MAX
    Type_REM = _analyserequationast.AnalyserEquationAst_Type_REM
    Type_DIFF = _analyserequationast.AnalyserEquationAst_Type_DIFF
    Type_SIN = _analyserequationast.AnalyserEquationAst_Type_SIN
    Type_COS = _analyserequationast.AnalyserEquationAst_Type_COS
    Type_TAN = _analyserequationast.AnalyserEquationAst_Type_TAN
    Type_SEC = _analyserequationast.AnalyserEquationAst_Type_SEC
    Type_CSC = _analyserequationast.AnalyserEquationAst_Type_CSC
    Type_COT = _analyserequationast.AnalyserEquationAst_Type_COT
    Type_SINH = _analyserequationast.AnalyserEquationAst_Type_SINH
    Type_COSH = _analyserequationast.AnalyserEquationAst_Type_COSH
    Type_TANH = _analyserequationast.AnalyserEquationAst_Type_TANH
    Type_SECH = _analyserequationast.AnalyserEquationAst_Type_SECH
    Type_CSCH = _analyserequationast.AnalyserEquationAst_Type_CSCH
    Type_COTH = _analyserequationast.AnalyserEquationAst_Type_COTH
    Type_ASIN = _analyserequationast.AnalyserEquationAst_Type_ASIN
    Type_ACOS = _analyserequationast.AnalyserEquationAst_Type_ACOS
    Type_ATAN = _analyserequationast.AnalyserEquationAst_Type_ATAN
    Type_ASEC = _analyserequationast.AnalyserEquationAst_Type_ASEC
    Type_ACSC = _analyserequationast.AnalyserEquationAst_Type_ACSC
    Type_ACOT = _analyserequationast.AnalyserEquationAst_Type_ACOT
    Type_ASINH = _analyserequationast.AnalyserEquationAst_Type_ASINH
    Type_ACOSH = _analyserequationast.AnalyserEquationAst_Type_ACOSH
    Type_ATANH = _analyserequationast.AnalyserEquationAst_Type_ATANH
    Type_ASECH = _analyserequationast.AnalyserEquationAst_Type_ASECH
    Type_ACSCH = _analyserequationast.AnalyserEquationAst_Type_ACSCH
    Type_ACOTH = _analyserequationast.AnalyserEquationAst_Type_ACOTH
    Type_PIECEWISE = _analyserequationast.AnalyserEquationAst_Type_PIECEWISE
    Type_PIECE = _analyserequationast.AnalyserEquationAst_Type_PIECE
    Type_OTHERWISE = _analyserequationast.AnalyserEquationAst_Type_OTHERWISE
    Type_CI = _analyserequationast.AnalyserEquationAst_Type_CI
    Type_CN = _analyserequationast.AnalyserEquationAst_Type_CN
    Type_DEGREE = _analyserequationast.AnalyserEquationAst_Type_DEGREE
    Type_LOGBASE = _analyserequationast.AnalyserEquationAst_Type_LOGBASE
    Type_BVAR = _analyserequationast.AnalyserEquationAst_Type_BVAR
    Type_TRUE = _analyserequationast.AnalyserEquationAst_Type_TRUE
    Type_FALSE = _analyserequationast.AnalyserEquationAst_Type_FALSE
    Type_E = _analyserequationast.AnalyserEquationAst_Type_E
    Type_PI = _analyserequationast.AnalyserEquationAst_Type_PI
    Type_INF = _analyserequationast.AnalyserEquationAst_Type_INF
    Type_NAN = _analyserequationast.AnalyserEquationAst_Type_NAN
    __swig_destroy__ = _analyserequationast.delete_AnalyserEquationAst

    def type(self):
        r"""Returns the :enum:`AnalyserEquationAst::Type` for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_type(self)

    def setType(self, type):
        r"""Sets the :enum:`AnalyserEquationAst::Type` for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_setType(self, type)

    def value(self):
        r"""Returns the value string for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_value(self)

    def setValue(self, value):
        r"""Sets the value string for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_setValue(self, value)

    def variable(self):
        r"""Returns the :class:`Variable` for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_variable(self)

    def setVariable(self, variable):
        r"""Sets the :class:`Variable` for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_setVariable(self, variable)

    def parent(self):
        r"""Returns the :class:`AnalyserEquationAst` parent for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_parent(self)

    def setParent(self, parent):
        r"""Sets the :class:`AnalyserEquationAst` parent for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_setParent(self, parent)

    def leftChild(self):
        r"""Returns the :class:`AnalyserEquationAst` left child for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_leftChild(self)

    def setLeftChild(self, leftChild):
        r"""Sets the :class:`AnalyserEquationAst` left child for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_setLeftChild(self, leftChild)

    def rightChild(self):
        r"""Returns the :class:`AnalyserEquationAst` right child for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_rightChild(self)

    def setRightChild(self, rightChild):
        r"""Sets the :class:`AnalyserEquationAst` right child for this :class:`AnalyserEquationAst` object."""
        return _analyserequationast.AnalyserEquationAst_setRightChild(self, rightChild)

    def __init__(self):
        _analyserequationast.AnalyserEquationAst_swiginit(self, _analyserequationast.new_AnalyserEquationAst())

# Register AnalyserEquationAst in _analyserequationast:
_analyserequationast.AnalyserEquationAst_swigregister(AnalyserEquationAst)



