# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _analysermodel
else:
    import _analysermodel

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SHARED_PTR_DISOWN = _analysermodel.SHARED_PTR_DISOWN
class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _analysermodel.delete_SwigPyIterator

    def value(self):
        return _analysermodel.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _analysermodel.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _analysermodel.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _analysermodel.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _analysermodel.SwigPyIterator_equal(self, x)

    def copy(self):
        return _analysermodel.SwigPyIterator_copy(self)

    def next(self):
        return _analysermodel.SwigPyIterator_next(self)

    def __next__(self):
        return _analysermodel.SwigPyIterator___next__(self)

    def previous(self):
        return _analysermodel.SwigPyIterator_previous(self)

    def advance(self, n):
        return _analysermodel.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _analysermodel.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _analysermodel.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _analysermodel.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _analysermodel.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _analysermodel.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _analysermodel.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _analysermodel:
_analysermodel.SwigPyIterator_swigregister(SwigPyIterator)

import libcellml.types
class AnalyserEquationVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analysermodel.AnalyserEquationVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analysermodel.AnalyserEquationVector___nonzero__(self)

    def __bool__(self):
        return _analysermodel.AnalyserEquationVector___bool__(self)

    def __len__(self):
        return _analysermodel.AnalyserEquationVector___len__(self)

    def __getslice__(self, i, j):
        return _analysermodel.AnalyserEquationVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analysermodel.AnalyserEquationVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analysermodel.AnalyserEquationVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analysermodel.AnalyserEquationVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analysermodel.AnalyserEquationVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analysermodel.AnalyserEquationVector___setitem__(self, *args)

    def pop(self):
        return _analysermodel.AnalyserEquationVector_pop(self)

    def append(self, x):
        return _analysermodel.AnalyserEquationVector_append(self, x)

    def empty(self):
        return _analysermodel.AnalyserEquationVector_empty(self)

    def size(self):
        return _analysermodel.AnalyserEquationVector_size(self)

    def swap(self, v):
        return _analysermodel.AnalyserEquationVector_swap(self, v)

    def begin(self):
        return _analysermodel.AnalyserEquationVector_begin(self)

    def end(self):
        return _analysermodel.AnalyserEquationVector_end(self)

    def rbegin(self):
        return _analysermodel.AnalyserEquationVector_rbegin(self)

    def rend(self):
        return _analysermodel.AnalyserEquationVector_rend(self)

    def clear(self):
        return _analysermodel.AnalyserEquationVector_clear(self)

    def get_allocator(self):
        return _analysermodel.AnalyserEquationVector_get_allocator(self)

    def pop_back(self):
        return _analysermodel.AnalyserEquationVector_pop_back(self)

    def erase(self, *args):
        return _analysermodel.AnalyserEquationVector_erase(self, *args)

    def __init__(self, *args):
        _analysermodel.AnalyserEquationVector_swiginit(self, _analysermodel.new_AnalyserEquationVector(*args))

    def push_back(self, x):
        return _analysermodel.AnalyserEquationVector_push_back(self, x)

    def front(self):
        return _analysermodel.AnalyserEquationVector_front(self)

    def back(self):
        return _analysermodel.AnalyserEquationVector_back(self)

    def assign(self, n, x):
        return _analysermodel.AnalyserEquationVector_assign(self, n, x)

    def resize(self, *args):
        return _analysermodel.AnalyserEquationVector_resize(self, *args)

    def insert(self, *args):
        return _analysermodel.AnalyserEquationVector_insert(self, *args)

    def reserve(self, n):
        return _analysermodel.AnalyserEquationVector_reserve(self, n)

    def capacity(self):
        return _analysermodel.AnalyserEquationVector_capacity(self)
    __swig_destroy__ = _analysermodel.delete_AnalyserEquationVector

# Register AnalyserEquationVector in _analysermodel:
_analysermodel.AnalyserEquationVector_swigregister(AnalyserEquationVector)

class AnalyserVariableVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _analysermodel.AnalyserVariableVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _analysermodel.AnalyserVariableVector___nonzero__(self)

    def __bool__(self):
        return _analysermodel.AnalyserVariableVector___bool__(self)

    def __len__(self):
        return _analysermodel.AnalyserVariableVector___len__(self)

    def __getslice__(self, i, j):
        return _analysermodel.AnalyserVariableVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _analysermodel.AnalyserVariableVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _analysermodel.AnalyserVariableVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _analysermodel.AnalyserVariableVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _analysermodel.AnalyserVariableVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _analysermodel.AnalyserVariableVector___setitem__(self, *args)

    def pop(self):
        return _analysermodel.AnalyserVariableVector_pop(self)

    def append(self, x):
        return _analysermodel.AnalyserVariableVector_append(self, x)

    def empty(self):
        return _analysermodel.AnalyserVariableVector_empty(self)

    def size(self):
        return _analysermodel.AnalyserVariableVector_size(self)

    def swap(self, v):
        return _analysermodel.AnalyserVariableVector_swap(self, v)

    def begin(self):
        return _analysermodel.AnalyserVariableVector_begin(self)

    def end(self):
        return _analysermodel.AnalyserVariableVector_end(self)

    def rbegin(self):
        return _analysermodel.AnalyserVariableVector_rbegin(self)

    def rend(self):
        return _analysermodel.AnalyserVariableVector_rend(self)

    def clear(self):
        return _analysermodel.AnalyserVariableVector_clear(self)

    def get_allocator(self):
        return _analysermodel.AnalyserVariableVector_get_allocator(self)

    def pop_back(self):
        return _analysermodel.AnalyserVariableVector_pop_back(self)

    def erase(self, *args):
        return _analysermodel.AnalyserVariableVector_erase(self, *args)

    def __init__(self, *args):
        _analysermodel.AnalyserVariableVector_swiginit(self, _analysermodel.new_AnalyserVariableVector(*args))

    def push_back(self, x):
        return _analysermodel.AnalyserVariableVector_push_back(self, x)

    def front(self):
        return _analysermodel.AnalyserVariableVector_front(self)

    def back(self):
        return _analysermodel.AnalyserVariableVector_back(self)

    def assign(self, n, x):
        return _analysermodel.AnalyserVariableVector_assign(self, n, x)

    def resize(self, *args):
        return _analysermodel.AnalyserVariableVector_resize(self, *args)

    def insert(self, *args):
        return _analysermodel.AnalyserVariableVector_insert(self, *args)

    def reserve(self, n):
        return _analysermodel.AnalyserVariableVector_reserve(self, n)

    def capacity(self):
        return _analysermodel.AnalyserVariableVector_capacity(self)
    __swig_destroy__ = _analysermodel.delete_AnalyserVariableVector

# Register AnalyserVariableVector in _analysermodel:
_analysermodel.AnalyserVariableVector_swigregister(AnalyserVariableVector)


# libCellML generated wrapper code starts here.

class AnalyserModel(object):
    r"""Creates an :class:`AnalyserModel` object."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Type_UNKNOWN = _analysermodel.AnalyserModel_Type_UNKNOWN
    Type_ALGEBRAIC = _analysermodel.AnalyserModel_Type_ALGEBRAIC
    Type_ODE = _analysermodel.AnalyserModel_Type_ODE
    Type_INVALID = _analysermodel.AnalyserModel_Type_INVALID
    Type_UNDERCONSTRAINED = _analysermodel.AnalyserModel_Type_UNDERCONSTRAINED
    Type_OVERCONSTRAINED = _analysermodel.AnalyserModel_Type_OVERCONSTRAINED
    Type_UNSUITABLY_CONSTRAINED = _analysermodel.AnalyserModel_Type_UNSUITABLY_CONSTRAINED
    __swig_destroy__ = _analysermodel.delete_AnalyserModel

    def isValid(self):
        r"""Tests if this :class:`AnalyserModel` object is valid."""
        return _analysermodel.AnalyserModel_isValid(self)

    def type(self):
        r"""Returns the :enum:`AnalyserModel::Type`."""
        return _analysermodel.AnalyserModel_type(self)

    def voi(self):
        r"""Returns the :class:`AnalyserVariable` for the variable of integration."""
        return _analysermodel.AnalyserModel_voi(self)

    def stateCount(self):
        r"""Returns the number of states contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_stateCount(self)

    def states(self):
        r"""Returns the states contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_states(self)

    def state(self, index):
        r"""Returns the state, specified by index, contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_state(self, index)

    def variableCount(self):
        r"""Returns the number of variables contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_variableCount(self)

    def variables(self):
        r"""Returns the variables contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_variables(self)

    def variable(self, index):
        r"""Returns the variable, specified by index, contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_variable(self, index)

    def equationCount(self):
        r"""Returns the number of equations contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_equationCount(self)

    def equations(self):
        r"""Returns the equations contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_equations(self)

    def equation(self, index):
        r"""Returns the equation, specified by index, contained by this :class:`AnalyserModel` object."""
        return _analysermodel.AnalyserModel_equation(self, index)

    def needEqFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "equal to" function."""
        return _analysermodel.AnalyserModel_needEqFunction(self)

    def needNeqFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "not equal to" function."""
        return _analysermodel.AnalyserModel_needNeqFunction(self)

    def needLtFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "less than" function."""
        return _analysermodel.AnalyserModel_needLtFunction(self)

    def needLeqFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "less than or equal to" function."""
        return _analysermodel.AnalyserModel_needLeqFunction(self)

    def needGtFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "greater than" function."""
        return _analysermodel.AnalyserModel_needGtFunction(self)

    def needGeqFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "greater than or equal to" function."""
        return _analysermodel.AnalyserModel_needGeqFunction(self)

    def needAndFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "and" function."""
        return _analysermodel.AnalyserModel_needAndFunction(self)

    def needOrFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "or" function."""
        return _analysermodel.AnalyserModel_needOrFunction(self)

    def needXorFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "exclusive or" function."""
        return _analysermodel.AnalyserModel_needXorFunction(self)

    def needNotFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "not" function."""
        return _analysermodel.AnalyserModel_needNotFunction(self)

    def needMinFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "minimum" function."""
        return _analysermodel.AnalyserModel_needMinFunction(self)

    def needMaxFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "maximum" function."""
        return _analysermodel.AnalyserModel_needMaxFunction(self)

    def needSecFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "secant" function."""
        return _analysermodel.AnalyserModel_needSecFunction(self)

    def needCscFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "cosecant" function."""
        return _analysermodel.AnalyserModel_needCscFunction(self)

    def needCotFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "cotangent" function."""
        return _analysermodel.AnalyserModel_needCotFunction(self)

    def needSechFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "hyperbolic secant" function."""
        return _analysermodel.AnalyserModel_needSechFunction(self)

    def needCschFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "hyperbolic cosecant" function."""
        return _analysermodel.AnalyserModel_needCschFunction(self)

    def needCothFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs a "hyperbolic cotangent" function."""
        return _analysermodel.AnalyserModel_needCothFunction(self)

    def needAsecFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "arc secant" function."""
        return _analysermodel.AnalyserModel_needAsecFunction(self)

    def needAcscFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "arc cosecant" function."""
        return _analysermodel.AnalyserModel_needAcscFunction(self)

    def needAcotFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "arc cotangent" function."""
        return _analysermodel.AnalyserModel_needAcotFunction(self)

    def needAsechFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "arc hyperbolic secant" function."""
        return _analysermodel.AnalyserModel_needAsechFunction(self)

    def needAcschFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "arc hyperbolic cosecant" function."""
        return _analysermodel.AnalyserModel_needAcschFunction(self)

    def needAcothFunction(self):
        r"""Tests if this :class:`AnalyserModel` object needs an "arc hyperbolic cotangent" function."""
        return _analysermodel.AnalyserModel_needAcothFunction(self)

# Register AnalyserModel in _analysermodel:
_analysermodel.AnalyserModel_swigregister(AnalyserModel)



