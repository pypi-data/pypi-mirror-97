# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _units
else:
    import _units

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import libcellml.importedentity
import libcellml.namedentity
import libcellml.entity
import libcellml.types

# libCellML generated wrapper code starts here.

class Units(libcellml.namedentity.NamedEntity, libcellml.importedentity.ImportedEntity):
    r"""Represents a CellML Units definition."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    __swig_destroy__ = _units.delete_Units
    Prefix_YOTTA = _units.Units_Prefix_YOTTA
    Prefix_ZETTA = _units.Units_Prefix_ZETTA
    Prefix_EXA = _units.Units_Prefix_EXA
    Prefix_PETA = _units.Units_Prefix_PETA
    Prefix_TERA = _units.Units_Prefix_TERA
    Prefix_GIGA = _units.Units_Prefix_GIGA
    Prefix_MEGA = _units.Units_Prefix_MEGA
    Prefix_KILO = _units.Units_Prefix_KILO
    Prefix_HECTO = _units.Units_Prefix_HECTO
    Prefix_DECA = _units.Units_Prefix_DECA
    Prefix_DECI = _units.Units_Prefix_DECI
    Prefix_CENTI = _units.Units_Prefix_CENTI
    Prefix_MILLI = _units.Units_Prefix_MILLI
    Prefix_MICRO = _units.Units_Prefix_MICRO
    Prefix_NANO = _units.Units_Prefix_NANO
    Prefix_PICO = _units.Units_Prefix_PICO
    Prefix_FEMTO = _units.Units_Prefix_FEMTO
    Prefix_ATTO = _units.Units_Prefix_ATTO
    Prefix_ZEPTO = _units.Units_Prefix_ZEPTO
    Prefix_YOCTO = _units.Units_Prefix_YOCTO
    StandardUnit_AMPERE = _units.Units_StandardUnit_AMPERE
    StandardUnit_BECQUEREL = _units.Units_StandardUnit_BECQUEREL
    StandardUnit_CANDELA = _units.Units_StandardUnit_CANDELA
    StandardUnit_COULOMB = _units.Units_StandardUnit_COULOMB
    StandardUnit_DIMENSIONLESS = _units.Units_StandardUnit_DIMENSIONLESS
    StandardUnit_FARAD = _units.Units_StandardUnit_FARAD
    StandardUnit_GRAM = _units.Units_StandardUnit_GRAM
    StandardUnit_GRAY = _units.Units_StandardUnit_GRAY
    StandardUnit_HENRY = _units.Units_StandardUnit_HENRY
    StandardUnit_HERTZ = _units.Units_StandardUnit_HERTZ
    StandardUnit_JOULE = _units.Units_StandardUnit_JOULE
    StandardUnit_KATAL = _units.Units_StandardUnit_KATAL
    StandardUnit_KELVIN = _units.Units_StandardUnit_KELVIN
    StandardUnit_KILOGRAM = _units.Units_StandardUnit_KILOGRAM
    StandardUnit_LITRE = _units.Units_StandardUnit_LITRE
    StandardUnit_LUMEN = _units.Units_StandardUnit_LUMEN
    StandardUnit_LUX = _units.Units_StandardUnit_LUX
    StandardUnit_METRE = _units.Units_StandardUnit_METRE
    StandardUnit_MOLE = _units.Units_StandardUnit_MOLE
    StandardUnit_NEWTON = _units.Units_StandardUnit_NEWTON
    StandardUnit_OHM = _units.Units_StandardUnit_OHM
    StandardUnit_PASCAL = _units.Units_StandardUnit_PASCAL
    StandardUnit_RADIAN = _units.Units_StandardUnit_RADIAN
    StandardUnit_SECOND = _units.Units_StandardUnit_SECOND
    StandardUnit_SIEMENS = _units.Units_StandardUnit_SIEMENS
    StandardUnit_SIEVERT = _units.Units_StandardUnit_SIEVERT
    StandardUnit_STERADIAN = _units.Units_StandardUnit_STERADIAN
    StandardUnit_TESLA = _units.Units_StandardUnit_TESLA
    StandardUnit_VOLT = _units.Units_StandardUnit_VOLT
    StandardUnit_WATT = _units.Units_StandardUnit_WATT
    StandardUnit_WEBER = _units.Units_StandardUnit_WEBER

    def isBaseUnit(self):
        r"""Tests if this is a base unit."""
        return _units.Units_isBaseUnit(self)

    def addUnit(self, *args):
        r"""
        Lets users add a Unit to this definition.

        Possible signatures:

         - addUnit(reference, prefix, exponent=1, multiplier=1)
         - addUnit(reference, exponent)
         - addUnit(reference)

        where `reference` can be a string or a StandardUnits. And `prefix` can be a
        string or an integer.
        """
        return _units.Units_addUnit(self, *args)

    def unitAttributes(self, *args):
        r"""
        Returns the attributes of the unit specified by index, reference, or
        StandardUnit.
        """
        return _units.Units_unitAttributes(self, *args)

    def removeAllUnits(self):
        r"""Remove all units stored in this Units object. """
        return _units.Units_removeAllUnits(self)

    def setSourceUnits(self, importSource, name):
        r"""
        Makes this Units an imported units by defining an `ImportSource` from which to
        extract the units with the given `name`.
        """
        return _units.Units_setSourceUnits(self, importSource, name)

    def unitCount(self):
        r"""Returns the number of units contained by this units object."""
        return _units.Units_unitCount(self)

    def requiresImports(self):
        r"""
        Returns `True` when this Units object depends on an imported child
        Units object, or `False` otherwise.
        """
        return _units.Units_requiresImports(self)

    @staticmethod
    def scalingFactor(units1, units2, checkCompatibility=True):
        r"""Returns the scaling factor between two Units objects."""
        return _units.Units_scalingFactor(units1, units2, checkCompatibility)

    @staticmethod
    def compatible(units1, units2):
        r"""Tests if two Units have the same dimensional basis."""
        return _units.Units_compatible(units1, units2)

    @staticmethod
    def equivalent(units1, units2):
        r"""Tests if two Units are equivalent in base units as well as scaling factor."""
        return _units.Units_equivalent(units1, units2)

    def clone(self):
        r"""Create a copy of this units."""
        return _units.Units_clone(self)

    def setUnitId(self, index, id):
        r"""Sets the id string of the Unit item at the given index."""
        return _units.Units_setUnitId(self, index, id)

    def unitId(self, index):
        r"""Returns the id string of the Unit item at the given index."""
        return _units.Units_unitId(self, index)

    def removeUnit(self, *args):
        r"""
        Removes the unit specified by index, reference, or StandardUnit.

        Only the first matching unit is removed.

        `True` is returned on success.
        """
        return _units.Units_removeUnit(self, *args)

    def __init__(self, *args):
        _units.Units_swiginit(self, _units.new_Units(*args))

# Register Units in _units:
_units.Units_swigregister(Units)

def Units_scalingFactor(units1, units2, checkCompatibility=True):
    r"""Returns the scaling factor between two Units objects."""
    return _units.Units_scalingFactor(units1, units2, checkCompatibility)

def Units_compatible(units1, units2):
    r"""Tests if two Units have the same dimensional basis."""
    return _units.Units_compatible(units1, units2)

def Units_equivalent(units1, units2):
    r"""Tests if two Units are equivalent in base units as well as scaling factor."""
    return _units.Units_equivalent(units1, units2)



