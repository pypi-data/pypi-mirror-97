/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { IDocument } from "./types/Document";
import { IListItem } from "./types/ListItem";
import { ICustomField } from "./types/CustomField";
import { IError } from "./types/Error";
import { EnumViews } from "./models/EnumViews";
import { IDocumentPage } from "./types/DocumentPage";
import { ISession } from "./types/Session";
import { LimeWebComponentContext, LimeWebComponentPlatform } from "@limetech/lime-web-components-interfaces";
import { IRecipient } from "./types/Recipient";
import { IEntity } from "./types/Entity";
import { IMenuItem } from "./types/MenuItem";
import { IVideo } from "./types/Video";
export namespace Components {
    interface CreateEmail {
        "document": IDocument;
    }
    interface CustomFields {
        "customFields": ICustomField[];
        "isLoading": boolean;
        "template": IListItem;
    }
    interface DocumentError {
        "error": IError;
    }
    interface DocumentErrorFeedback {
        "document": IDocument;
        "errorList": IError[];
    }
    interface DocumentList {
        "documents": IDocument[];
    }
    interface DocumentListItem {
        "document": IDocument;
    }
    interface DocumentPageInfo {
        "documentId": string;
        "page": IDocumentPage;
        "session": ISession;
        "totalTime": number;
    }
    interface DocumentValidateInfo {
        "document": IDocument;
    }
    interface EmptyState {
        "icon": string;
        "text": string;
    }
    interface ErrorMessage {
        "error": string;
        "timeout": number;
    }
    interface GaLoader {
    }
    interface GaLoaderWithText {
        "showText": boolean;
        "text": string;
    }
    interface GaLogin {
        "platform": LimeWebComponentPlatform;
    }
    interface GaSignup {
        "platform": LimeWebComponentPlatform;
    }
    interface LayoutDocumentDetails {
        "documentId": string;
        "platform": LimeWebComponentPlatform;
        "session": ISession;
    }
    interface LayoutHelp {
    }
    interface LayoutLogin {
        "platform": LimeWebComponentPlatform;
    }
    interface LayoutMenu {
        "activeView": EnumViews;
        "isSending": boolean;
    }
    interface LayoutOverview {
        "documents": IDocument[];
        "externalId": string;
        "platform": LimeWebComponentPlatform;
        "sentDocuments": IDocument;
        "session": ISession;
    }
    interface LayoutSelectFile {
        "context": LimeWebComponentContext;
        "customFields": ICustomField[];
        "platform": LimeWebComponentPlatform;
        "selectedLimeDocument": IListItem;
        "selectedTemplate": IListItem;
        "session": ISession;
    }
    interface LayoutSelectRecipient {
        "document": IDocument;
        "platform": LimeWebComponentPlatform;
    }
    interface LayoutSendDocument {
        "document": IDocument;
        "limeDocument": IListItem;
        "template": IListItem;
    }
    interface LayoutSettings {
        "entities": IEntity[];
        "platform": LimeWebComponentPlatform;
        "session": ISession;
        "user": any;
    }
    interface LayoutValidateDocument {
        "document": IDocument;
        "fields": ICustomField[];
        "isSealed": boolean;
        "isSending": boolean;
        "limeDocument": IListItem;
        "platform": LimeWebComponentPlatform;
        "session": ISession;
        "template": IListItem;
    }
    interface LayoutVideoLibrary {
        "platform": LimeWebComponentPlatform;
        "session": ISession;
    }
    interface LimeDocumentList {
        "documents": any[];
        "isLoading": boolean;
    }
    interface LwcGetacceptLoader {
        /**
          * The context this component belongs to
         */
        "context": LimeWebComponentContext;
        /**
          * Reference to the platform
         */
        "platform": LimeWebComponentPlatform;
    }
    interface LwcGetacceptRoot {
        /**
          * The context this component belongs to
         */
        "context": LimeWebComponentContext;
        /**
          * Reference to the platform
         */
        "platform": LimeWebComponentPlatform;
    }
    interface MenuButton {
        "menuItem": IMenuItem;
    }
    interface ProfilePicture {
        "thumbUrl": string;
    }
    interface RecipientItem {
        "recipient": IRecipient;
        "showAdd": boolean;
    }
    interface RecipientItemAdded {
        "isSigning": boolean;
        "recipient": IRecipient;
    }
    interface SelectedRecipientList {
        "document": IDocument;
        "recipients": IRecipient[];
    }
    interface SendDocumentButtonGroup {
    }
    interface SendNewDocumentButton {
        "isSigning": boolean;
    }
    interface ShareDocumentLink {
        "recipient": IRecipient;
    }
    interface TemplateList {
        "isLoading": boolean;
        "selectedTemplate": IListItem;
        "templates": IListItem[];
    }
    interface TemplatePreview {
        "isLoading": boolean;
        "session": ISession;
        "template": IListItem;
    }
    interface VideoThumb {
        "video": IVideo;
    }
    interface WorkflowProgressBar {
        "activeView": EnumViews;
        "isVisible": boolean;
    }
}
declare global {
    interface HTMLCreateEmailElement extends Components.CreateEmail, HTMLStencilElement {
    }
    var HTMLCreateEmailElement: {
        prototype: HTMLCreateEmailElement;
        new (): HTMLCreateEmailElement;
    };
    interface HTMLCustomFieldsElement extends Components.CustomFields, HTMLStencilElement {
    }
    var HTMLCustomFieldsElement: {
        prototype: HTMLCustomFieldsElement;
        new (): HTMLCustomFieldsElement;
    };
    interface HTMLDocumentErrorElement extends Components.DocumentError, HTMLStencilElement {
    }
    var HTMLDocumentErrorElement: {
        prototype: HTMLDocumentErrorElement;
        new (): HTMLDocumentErrorElement;
    };
    interface HTMLDocumentErrorFeedbackElement extends Components.DocumentErrorFeedback, HTMLStencilElement {
    }
    var HTMLDocumentErrorFeedbackElement: {
        prototype: HTMLDocumentErrorFeedbackElement;
        new (): HTMLDocumentErrorFeedbackElement;
    };
    interface HTMLDocumentListElement extends Components.DocumentList, HTMLStencilElement {
    }
    var HTMLDocumentListElement: {
        prototype: HTMLDocumentListElement;
        new (): HTMLDocumentListElement;
    };
    interface HTMLDocumentListItemElement extends Components.DocumentListItem, HTMLStencilElement {
    }
    var HTMLDocumentListItemElement: {
        prototype: HTMLDocumentListItemElement;
        new (): HTMLDocumentListItemElement;
    };
    interface HTMLDocumentPageInfoElement extends Components.DocumentPageInfo, HTMLStencilElement {
    }
    var HTMLDocumentPageInfoElement: {
        prototype: HTMLDocumentPageInfoElement;
        new (): HTMLDocumentPageInfoElement;
    };
    interface HTMLDocumentValidateInfoElement extends Components.DocumentValidateInfo, HTMLStencilElement {
    }
    var HTMLDocumentValidateInfoElement: {
        prototype: HTMLDocumentValidateInfoElement;
        new (): HTMLDocumentValidateInfoElement;
    };
    interface HTMLEmptyStateElement extends Components.EmptyState, HTMLStencilElement {
    }
    var HTMLEmptyStateElement: {
        prototype: HTMLEmptyStateElement;
        new (): HTMLEmptyStateElement;
    };
    interface HTMLErrorMessageElement extends Components.ErrorMessage, HTMLStencilElement {
    }
    var HTMLErrorMessageElement: {
        prototype: HTMLErrorMessageElement;
        new (): HTMLErrorMessageElement;
    };
    interface HTMLGaLoaderElement extends Components.GaLoader, HTMLStencilElement {
    }
    var HTMLGaLoaderElement: {
        prototype: HTMLGaLoaderElement;
        new (): HTMLGaLoaderElement;
    };
    interface HTMLGaLoaderWithTextElement extends Components.GaLoaderWithText, HTMLStencilElement {
    }
    var HTMLGaLoaderWithTextElement: {
        prototype: HTMLGaLoaderWithTextElement;
        new (): HTMLGaLoaderWithTextElement;
    };
    interface HTMLGaLoginElement extends Components.GaLogin, HTMLStencilElement {
    }
    var HTMLGaLoginElement: {
        prototype: HTMLGaLoginElement;
        new (): HTMLGaLoginElement;
    };
    interface HTMLGaSignupElement extends Components.GaSignup, HTMLStencilElement {
    }
    var HTMLGaSignupElement: {
        prototype: HTMLGaSignupElement;
        new (): HTMLGaSignupElement;
    };
    interface HTMLLayoutDocumentDetailsElement extends Components.LayoutDocumentDetails, HTMLStencilElement {
    }
    var HTMLLayoutDocumentDetailsElement: {
        prototype: HTMLLayoutDocumentDetailsElement;
        new (): HTMLLayoutDocumentDetailsElement;
    };
    interface HTMLLayoutHelpElement extends Components.LayoutHelp, HTMLStencilElement {
    }
    var HTMLLayoutHelpElement: {
        prototype: HTMLLayoutHelpElement;
        new (): HTMLLayoutHelpElement;
    };
    interface HTMLLayoutLoginElement extends Components.LayoutLogin, HTMLStencilElement {
    }
    var HTMLLayoutLoginElement: {
        prototype: HTMLLayoutLoginElement;
        new (): HTMLLayoutLoginElement;
    };
    interface HTMLLayoutMenuElement extends Components.LayoutMenu, HTMLStencilElement {
    }
    var HTMLLayoutMenuElement: {
        prototype: HTMLLayoutMenuElement;
        new (): HTMLLayoutMenuElement;
    };
    interface HTMLLayoutOverviewElement extends Components.LayoutOverview, HTMLStencilElement {
    }
    var HTMLLayoutOverviewElement: {
        prototype: HTMLLayoutOverviewElement;
        new (): HTMLLayoutOverviewElement;
    };
    interface HTMLLayoutSelectFileElement extends Components.LayoutSelectFile, HTMLStencilElement {
    }
    var HTMLLayoutSelectFileElement: {
        prototype: HTMLLayoutSelectFileElement;
        new (): HTMLLayoutSelectFileElement;
    };
    interface HTMLLayoutSelectRecipientElement extends Components.LayoutSelectRecipient, HTMLStencilElement {
    }
    var HTMLLayoutSelectRecipientElement: {
        prototype: HTMLLayoutSelectRecipientElement;
        new (): HTMLLayoutSelectRecipientElement;
    };
    interface HTMLLayoutSendDocumentElement extends Components.LayoutSendDocument, HTMLStencilElement {
    }
    var HTMLLayoutSendDocumentElement: {
        prototype: HTMLLayoutSendDocumentElement;
        new (): HTMLLayoutSendDocumentElement;
    };
    interface HTMLLayoutSettingsElement extends Components.LayoutSettings, HTMLStencilElement {
    }
    var HTMLLayoutSettingsElement: {
        prototype: HTMLLayoutSettingsElement;
        new (): HTMLLayoutSettingsElement;
    };
    interface HTMLLayoutValidateDocumentElement extends Components.LayoutValidateDocument, HTMLStencilElement {
    }
    var HTMLLayoutValidateDocumentElement: {
        prototype: HTMLLayoutValidateDocumentElement;
        new (): HTMLLayoutValidateDocumentElement;
    };
    interface HTMLLayoutVideoLibraryElement extends Components.LayoutVideoLibrary, HTMLStencilElement {
    }
    var HTMLLayoutVideoLibraryElement: {
        prototype: HTMLLayoutVideoLibraryElement;
        new (): HTMLLayoutVideoLibraryElement;
    };
    interface HTMLLimeDocumentListElement extends Components.LimeDocumentList, HTMLStencilElement {
    }
    var HTMLLimeDocumentListElement: {
        prototype: HTMLLimeDocumentListElement;
        new (): HTMLLimeDocumentListElement;
    };
    interface HTMLLwcGetacceptLoaderElement extends Components.LwcGetacceptLoader, HTMLStencilElement {
    }
    var HTMLLwcGetacceptLoaderElement: {
        prototype: HTMLLwcGetacceptLoaderElement;
        new (): HTMLLwcGetacceptLoaderElement;
    };
    interface HTMLLwcGetacceptRootElement extends Components.LwcGetacceptRoot, HTMLStencilElement {
    }
    var HTMLLwcGetacceptRootElement: {
        prototype: HTMLLwcGetacceptRootElement;
        new (): HTMLLwcGetacceptRootElement;
    };
    interface HTMLMenuButtonElement extends Components.MenuButton, HTMLStencilElement {
    }
    var HTMLMenuButtonElement: {
        prototype: HTMLMenuButtonElement;
        new (): HTMLMenuButtonElement;
    };
    interface HTMLProfilePictureElement extends Components.ProfilePicture, HTMLStencilElement {
    }
    var HTMLProfilePictureElement: {
        prototype: HTMLProfilePictureElement;
        new (): HTMLProfilePictureElement;
    };
    interface HTMLRecipientItemElement extends Components.RecipientItem, HTMLStencilElement {
    }
    var HTMLRecipientItemElement: {
        prototype: HTMLRecipientItemElement;
        new (): HTMLRecipientItemElement;
    };
    interface HTMLRecipientItemAddedElement extends Components.RecipientItemAdded, HTMLStencilElement {
    }
    var HTMLRecipientItemAddedElement: {
        prototype: HTMLRecipientItemAddedElement;
        new (): HTMLRecipientItemAddedElement;
    };
    interface HTMLSelectedRecipientListElement extends Components.SelectedRecipientList, HTMLStencilElement {
    }
    var HTMLSelectedRecipientListElement: {
        prototype: HTMLSelectedRecipientListElement;
        new (): HTMLSelectedRecipientListElement;
    };
    interface HTMLSendDocumentButtonGroupElement extends Components.SendDocumentButtonGroup, HTMLStencilElement {
    }
    var HTMLSendDocumentButtonGroupElement: {
        prototype: HTMLSendDocumentButtonGroupElement;
        new (): HTMLSendDocumentButtonGroupElement;
    };
    interface HTMLSendNewDocumentButtonElement extends Components.SendNewDocumentButton, HTMLStencilElement {
    }
    var HTMLSendNewDocumentButtonElement: {
        prototype: HTMLSendNewDocumentButtonElement;
        new (): HTMLSendNewDocumentButtonElement;
    };
    interface HTMLShareDocumentLinkElement extends Components.ShareDocumentLink, HTMLStencilElement {
    }
    var HTMLShareDocumentLinkElement: {
        prototype: HTMLShareDocumentLinkElement;
        new (): HTMLShareDocumentLinkElement;
    };
    interface HTMLTemplateListElement extends Components.TemplateList, HTMLStencilElement {
    }
    var HTMLTemplateListElement: {
        prototype: HTMLTemplateListElement;
        new (): HTMLTemplateListElement;
    };
    interface HTMLTemplatePreviewElement extends Components.TemplatePreview, HTMLStencilElement {
    }
    var HTMLTemplatePreviewElement: {
        prototype: HTMLTemplatePreviewElement;
        new (): HTMLTemplatePreviewElement;
    };
    interface HTMLVideoThumbElement extends Components.VideoThumb, HTMLStencilElement {
    }
    var HTMLVideoThumbElement: {
        prototype: HTMLVideoThumbElement;
        new (): HTMLVideoThumbElement;
    };
    interface HTMLWorkflowProgressBarElement extends Components.WorkflowProgressBar, HTMLStencilElement {
    }
    var HTMLWorkflowProgressBarElement: {
        prototype: HTMLWorkflowProgressBarElement;
        new (): HTMLWorkflowProgressBarElement;
    };
    interface HTMLElementTagNameMap {
        "create-email": HTMLCreateEmailElement;
        "custom-fields": HTMLCustomFieldsElement;
        "document-error": HTMLDocumentErrorElement;
        "document-error-feedback": HTMLDocumentErrorFeedbackElement;
        "document-list": HTMLDocumentListElement;
        "document-list-item": HTMLDocumentListItemElement;
        "document-page-info": HTMLDocumentPageInfoElement;
        "document-validate-info": HTMLDocumentValidateInfoElement;
        "empty-state": HTMLEmptyStateElement;
        "error-message": HTMLErrorMessageElement;
        "ga-loader": HTMLGaLoaderElement;
        "ga-loader-with-text": HTMLGaLoaderWithTextElement;
        "ga-login": HTMLGaLoginElement;
        "ga-signup": HTMLGaSignupElement;
        "layout-document-details": HTMLLayoutDocumentDetailsElement;
        "layout-help": HTMLLayoutHelpElement;
        "layout-login": HTMLLayoutLoginElement;
        "layout-menu": HTMLLayoutMenuElement;
        "layout-overview": HTMLLayoutOverviewElement;
        "layout-select-file": HTMLLayoutSelectFileElement;
        "layout-select-recipient": HTMLLayoutSelectRecipientElement;
        "layout-send-document": HTMLLayoutSendDocumentElement;
        "layout-settings": HTMLLayoutSettingsElement;
        "layout-validate-document": HTMLLayoutValidateDocumentElement;
        "layout-video-library": HTMLLayoutVideoLibraryElement;
        "lime-document-list": HTMLLimeDocumentListElement;
        "lwc-getaccept-loader": HTMLLwcGetacceptLoaderElement;
        "lwc-getaccept-root": HTMLLwcGetacceptRootElement;
        "menu-button": HTMLMenuButtonElement;
        "profile-picture": HTMLProfilePictureElement;
        "recipient-item": HTMLRecipientItemElement;
        "recipient-item-added": HTMLRecipientItemAddedElement;
        "selected-recipient-list": HTMLSelectedRecipientListElement;
        "send-document-button-group": HTMLSendDocumentButtonGroupElement;
        "send-new-document-button": HTMLSendNewDocumentButtonElement;
        "share-document-link": HTMLShareDocumentLinkElement;
        "template-list": HTMLTemplateListElement;
        "template-preview": HTMLTemplatePreviewElement;
        "video-thumb": HTMLVideoThumbElement;
        "workflow-progress-bar": HTMLWorkflowProgressBarElement;
    }
}
declare namespace LocalJSX {
    interface CreateEmail {
        "document"?: IDocument;
        "onSetEmailMessage"?: (event: CustomEvent<any>) => void;
        "onSetEmailSubject"?: (event: CustomEvent<any>) => void;
    }
    interface CustomFields {
        "customFields"?: ICustomField[];
        "isLoading"?: boolean;
        "onUpdateFieldValue"?: (event: CustomEvent<any>) => void;
        "template"?: IListItem;
    }
    interface DocumentError {
        "error"?: IError;
        "onChangeView"?: (event: CustomEvent<EnumViews>) => void;
    }
    interface DocumentErrorFeedback {
        "document"?: IDocument;
        "errorList"?: IError[];
    }
    interface DocumentList {
        "documents"?: IDocument[];
    }
    interface DocumentListItem {
        "document"?: IDocument;
        "onOpenDocument"?: (event: CustomEvent<IDocument>) => void;
    }
    interface DocumentPageInfo {
        "documentId"?: string;
        "page"?: IDocumentPage;
        "session"?: ISession;
        "totalTime"?: number;
    }
    interface DocumentValidateInfo {
        "document"?: IDocument;
    }
    interface EmptyState {
        "icon"?: string;
        "text"?: string;
    }
    interface ErrorMessage {
        "error"?: string;
        "timeout"?: number;
    }
    interface GaLoader {
    }
    interface GaLoaderWithText {
        "showText"?: boolean;
        "text"?: string;
    }
    interface GaLogin {
        "onSetSession"?: (event: CustomEvent<ISession>) => void;
        "platform"?: LimeWebComponentPlatform;
    }
    interface GaSignup {
        "onErrorHandler"?: (event: CustomEvent<string>) => void;
        "onSetSession"?: (event: CustomEvent<ISession>) => void;
        "platform"?: LimeWebComponentPlatform;
    }
    interface LayoutDocumentDetails {
        "documentId"?: string;
        "onChangeView"?: (event: CustomEvent<any>) => void;
        "platform"?: LimeWebComponentPlatform;
        "session"?: ISession;
    }
    interface LayoutHelp {
    }
    interface LayoutLogin {
        "platform"?: LimeWebComponentPlatform;
    }
    interface LayoutMenu {
        "activeView"?: EnumViews;
        "isSending"?: boolean;
        "onChangeView"?: (event: CustomEvent<any>) => void;
    }
    interface LayoutOverview {
        "documents"?: IDocument[];
        "externalId"?: string;
        "platform"?: LimeWebComponentPlatform;
        "sentDocuments"?: IDocument;
        "session"?: ISession;
    }
    interface LayoutSelectFile {
        "context"?: LimeWebComponentContext;
        "customFields"?: ICustomField[];
        "onErrorHandler"?: (event: CustomEvent<string>) => void;
        "onSetCustomFields"?: (event: CustomEvent<any>) => void;
        "platform"?: LimeWebComponentPlatform;
        "selectedLimeDocument"?: IListItem;
        "selectedTemplate"?: IListItem;
        "session"?: ISession;
    }
    interface LayoutSelectRecipient {
        "document"?: IDocument;
        "onErrorHandler"?: (event: CustomEvent<string>) => void;
        "onUpdateDocumentRecipient"?: (event: CustomEvent<IRecipient[]>) => void;
        "platform"?: LimeWebComponentPlatform;
    }
    interface LayoutSendDocument {
        "document"?: IDocument;
        "limeDocument"?: IListItem;
        "onChangeView"?: (event: CustomEvent<any>) => void;
        "onRemoveVideo"?: (event: CustomEvent<any>) => void;
        "onSetDocumentValue"?: (event: CustomEvent<number>) => void;
        "onSetIsSmsSending"?: (event: CustomEvent<boolean>) => void;
        "onSetNewDocumentName"?: (event: CustomEvent<string>) => void;
        "onSetSmartReminder"?: (event: CustomEvent<boolean>) => void;
        "template"?: IListItem;
    }
    interface LayoutSettings {
        "entities"?: IEntity[];
        "onSetSession"?: (event: CustomEvent<ISession>) => void;
        "platform"?: LimeWebComponentPlatform;
        "session"?: ISession;
        "user"?: any;
    }
    interface LayoutValidateDocument {
        "document"?: IDocument;
        "fields"?: ICustomField[];
        "isSealed"?: boolean;
        "isSending"?: boolean;
        "limeDocument"?: IListItem;
        "onDocumentCompleted"?: (event: CustomEvent<boolean>) => void;
        "onErrorHandler"?: (event: CustomEvent<string>) => void;
        "onIsSendingDocument"?: (event: CustomEvent<boolean>) => void;
        "platform"?: LimeWebComponentPlatform;
        "session"?: ISession;
        "template"?: IListItem;
    }
    interface LayoutVideoLibrary {
        "onChangeView"?: (event: CustomEvent<any>) => void;
        "platform"?: LimeWebComponentPlatform;
        "session"?: ISession;
    }
    interface LimeDocumentList {
        "documents"?: any[];
        "isLoading"?: boolean;
        "onSetLimeDocument"?: (event: CustomEvent<any>) => void;
    }
    interface LwcGetacceptLoader {
        /**
          * The context this component belongs to
         */
        "context"?: LimeWebComponentContext;
        /**
          * Reference to the platform
         */
        "platform"?: LimeWebComponentPlatform;
    }
    interface LwcGetacceptRoot {
        /**
          * The context this component belongs to
         */
        "context"?: LimeWebComponentContext;
        "onErrorHandler"?: (event: CustomEvent<string>) => void;
        /**
          * Reference to the platform
         */
        "platform"?: LimeWebComponentPlatform;
    }
    interface MenuButton {
        "menuItem"?: IMenuItem;
        "onChangeView"?: (event: CustomEvent<any>) => void;
        "onCloseMenu"?: (event: CustomEvent<any>) => void;
    }
    interface ProfilePicture {
        "thumbUrl"?: string;
    }
    interface RecipientItem {
        "recipient"?: IRecipient;
        "showAdd"?: boolean;
    }
    interface RecipientItemAdded {
        "isSigning"?: boolean;
        "onChangeRecipientRole"?: (event: CustomEvent<IRecipient>) => void;
        "onRemoveRecipient"?: (event: CustomEvent<IRecipient>) => void;
        "recipient"?: IRecipient;
    }
    interface SelectedRecipientList {
        "document"?: IDocument;
        "recipients"?: IRecipient[];
    }
    interface SendDocumentButtonGroup {
        "onValidateDocument"?: (event: CustomEvent<boolean>) => void;
    }
    interface SendNewDocumentButton {
        "isSigning"?: boolean;
        "onChangeView"?: (event: CustomEvent<any>) => void;
        "onSetDocumentType"?: (event: CustomEvent<boolean>) => void;
    }
    interface ShareDocumentLink {
        "recipient"?: IRecipient;
    }
    interface TemplateList {
        "isLoading"?: boolean;
        "onSetTemplate"?: (event: CustomEvent<any>) => void;
        "selectedTemplate"?: IListItem;
        "templates"?: IListItem[];
    }
    interface TemplatePreview {
        "isLoading"?: boolean;
        "session"?: ISession;
        "template"?: IListItem;
    }
    interface VideoThumb {
        "onChangeView"?: (event: CustomEvent<any>) => void;
        "onSetVideo"?: (event: CustomEvent<any>) => void;
        "video"?: IVideo;
    }
    interface WorkflowProgressBar {
        "activeView"?: EnumViews;
        "isVisible"?: boolean;
        "onChangeView"?: (event: CustomEvent<EnumViews>) => void;
    }
    interface IntrinsicElements {
        "create-email": CreateEmail;
        "custom-fields": CustomFields;
        "document-error": DocumentError;
        "document-error-feedback": DocumentErrorFeedback;
        "document-list": DocumentList;
        "document-list-item": DocumentListItem;
        "document-page-info": DocumentPageInfo;
        "document-validate-info": DocumentValidateInfo;
        "empty-state": EmptyState;
        "error-message": ErrorMessage;
        "ga-loader": GaLoader;
        "ga-loader-with-text": GaLoaderWithText;
        "ga-login": GaLogin;
        "ga-signup": GaSignup;
        "layout-document-details": LayoutDocumentDetails;
        "layout-help": LayoutHelp;
        "layout-login": LayoutLogin;
        "layout-menu": LayoutMenu;
        "layout-overview": LayoutOverview;
        "layout-select-file": LayoutSelectFile;
        "layout-select-recipient": LayoutSelectRecipient;
        "layout-send-document": LayoutSendDocument;
        "layout-settings": LayoutSettings;
        "layout-validate-document": LayoutValidateDocument;
        "layout-video-library": LayoutVideoLibrary;
        "lime-document-list": LimeDocumentList;
        "lwc-getaccept-loader": LwcGetacceptLoader;
        "lwc-getaccept-root": LwcGetacceptRoot;
        "menu-button": MenuButton;
        "profile-picture": ProfilePicture;
        "recipient-item": RecipientItem;
        "recipient-item-added": RecipientItemAdded;
        "selected-recipient-list": SelectedRecipientList;
        "send-document-button-group": SendDocumentButtonGroup;
        "send-new-document-button": SendNewDocumentButton;
        "share-document-link": ShareDocumentLink;
        "template-list": TemplateList;
        "template-preview": TemplatePreview;
        "video-thumb": VideoThumb;
        "workflow-progress-bar": WorkflowProgressBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "create-email": LocalJSX.CreateEmail & JSXBase.HTMLAttributes<HTMLCreateEmailElement>;
            "custom-fields": LocalJSX.CustomFields & JSXBase.HTMLAttributes<HTMLCustomFieldsElement>;
            "document-error": LocalJSX.DocumentError & JSXBase.HTMLAttributes<HTMLDocumentErrorElement>;
            "document-error-feedback": LocalJSX.DocumentErrorFeedback & JSXBase.HTMLAttributes<HTMLDocumentErrorFeedbackElement>;
            "document-list": LocalJSX.DocumentList & JSXBase.HTMLAttributes<HTMLDocumentListElement>;
            "document-list-item": LocalJSX.DocumentListItem & JSXBase.HTMLAttributes<HTMLDocumentListItemElement>;
            "document-page-info": LocalJSX.DocumentPageInfo & JSXBase.HTMLAttributes<HTMLDocumentPageInfoElement>;
            "document-validate-info": LocalJSX.DocumentValidateInfo & JSXBase.HTMLAttributes<HTMLDocumentValidateInfoElement>;
            "empty-state": LocalJSX.EmptyState & JSXBase.HTMLAttributes<HTMLEmptyStateElement>;
            "error-message": LocalJSX.ErrorMessage & JSXBase.HTMLAttributes<HTMLErrorMessageElement>;
            "ga-loader": LocalJSX.GaLoader & JSXBase.HTMLAttributes<HTMLGaLoaderElement>;
            "ga-loader-with-text": LocalJSX.GaLoaderWithText & JSXBase.HTMLAttributes<HTMLGaLoaderWithTextElement>;
            "ga-login": LocalJSX.GaLogin & JSXBase.HTMLAttributes<HTMLGaLoginElement>;
            "ga-signup": LocalJSX.GaSignup & JSXBase.HTMLAttributes<HTMLGaSignupElement>;
            "layout-document-details": LocalJSX.LayoutDocumentDetails & JSXBase.HTMLAttributes<HTMLLayoutDocumentDetailsElement>;
            "layout-help": LocalJSX.LayoutHelp & JSXBase.HTMLAttributes<HTMLLayoutHelpElement>;
            "layout-login": LocalJSX.LayoutLogin & JSXBase.HTMLAttributes<HTMLLayoutLoginElement>;
            "layout-menu": LocalJSX.LayoutMenu & JSXBase.HTMLAttributes<HTMLLayoutMenuElement>;
            "layout-overview": LocalJSX.LayoutOverview & JSXBase.HTMLAttributes<HTMLLayoutOverviewElement>;
            "layout-select-file": LocalJSX.LayoutSelectFile & JSXBase.HTMLAttributes<HTMLLayoutSelectFileElement>;
            "layout-select-recipient": LocalJSX.LayoutSelectRecipient & JSXBase.HTMLAttributes<HTMLLayoutSelectRecipientElement>;
            "layout-send-document": LocalJSX.LayoutSendDocument & JSXBase.HTMLAttributes<HTMLLayoutSendDocumentElement>;
            "layout-settings": LocalJSX.LayoutSettings & JSXBase.HTMLAttributes<HTMLLayoutSettingsElement>;
            "layout-validate-document": LocalJSX.LayoutValidateDocument & JSXBase.HTMLAttributes<HTMLLayoutValidateDocumentElement>;
            "layout-video-library": LocalJSX.LayoutVideoLibrary & JSXBase.HTMLAttributes<HTMLLayoutVideoLibraryElement>;
            "lime-document-list": LocalJSX.LimeDocumentList & JSXBase.HTMLAttributes<HTMLLimeDocumentListElement>;
            "lwc-getaccept-loader": LocalJSX.LwcGetacceptLoader & JSXBase.HTMLAttributes<HTMLLwcGetacceptLoaderElement>;
            "lwc-getaccept-root": LocalJSX.LwcGetacceptRoot & JSXBase.HTMLAttributes<HTMLLwcGetacceptRootElement>;
            "menu-button": LocalJSX.MenuButton & JSXBase.HTMLAttributes<HTMLMenuButtonElement>;
            "profile-picture": LocalJSX.ProfilePicture & JSXBase.HTMLAttributes<HTMLProfilePictureElement>;
            "recipient-item": LocalJSX.RecipientItem & JSXBase.HTMLAttributes<HTMLRecipientItemElement>;
            "recipient-item-added": LocalJSX.RecipientItemAdded & JSXBase.HTMLAttributes<HTMLRecipientItemAddedElement>;
            "selected-recipient-list": LocalJSX.SelectedRecipientList & JSXBase.HTMLAttributes<HTMLSelectedRecipientListElement>;
            "send-document-button-group": LocalJSX.SendDocumentButtonGroup & JSXBase.HTMLAttributes<HTMLSendDocumentButtonGroupElement>;
            "send-new-document-button": LocalJSX.SendNewDocumentButton & JSXBase.HTMLAttributes<HTMLSendNewDocumentButtonElement>;
            "share-document-link": LocalJSX.ShareDocumentLink & JSXBase.HTMLAttributes<HTMLShareDocumentLinkElement>;
            "template-list": LocalJSX.TemplateList & JSXBase.HTMLAttributes<HTMLTemplateListElement>;
            "template-preview": LocalJSX.TemplatePreview & JSXBase.HTMLAttributes<HTMLTemplatePreviewElement>;
            "video-thumb": LocalJSX.VideoThumb & JSXBase.HTMLAttributes<HTMLVideoThumbElement>;
            "workflow-progress-bar": LocalJSX.WorkflowProgressBar & JSXBase.HTMLAttributes<HTMLWorkflowProgressBarElement>;
        }
    }
}
