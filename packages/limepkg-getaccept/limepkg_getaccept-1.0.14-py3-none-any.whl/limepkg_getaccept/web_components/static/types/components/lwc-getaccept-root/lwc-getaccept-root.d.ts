import { EventEmitter } from '../../stencil-public-runtime';
import { LimeWebComponent, LimeWebComponentContext, LimeWebComponentPlatform } from '@limetech/lime-web-components-interfaces';
import { EnumViews } from '../../models/EnumViews';
import { IDocument } from '../../types/Document';
import { IRecipient } from '../../types/Recipient';
import { ISession } from '../../types/Session';
import { IEntity } from '../../types/Entity';
import { ICustomField } from '../../types/CustomField';
import { IListItem } from '../../types/ListItem';
export declare class Root implements LimeWebComponent {
    element: HTMLElement;
    platform: LimeWebComponentPlatform;
    context: LimeWebComponentContext;
    private externalId;
    private isOpen;
    private session;
    private user;
    entities: IEntity[];
    documentId: string;
    activeView: EnumViews;
    documentData: IDocument;
    isSealed: boolean;
    template: IListItem;
    limeDocument: IListItem;
    templateFields: ICustomField[];
    errorMessage: string;
    documents: IDocument[];
    isLoadingDocuments: boolean;
    isSending: boolean;
    errorHandler: EventEmitter<string>;
    constructor();
    componentWillLoad(): void;
    private loadInitialData;
    private loadEntityDetails;
    render(): any[];
    private renderDocumentCount;
    private renderLogo;
    private showWorkflow;
    private renderLayout;
    private logout;
    private openDialog;
    private handleLogoClick;
    private loadSentDocuments;
    changeViewHandler(view: CustomEvent): void;
    setTemplate(event: any): void;
    setLimeDocument(event: any): void;
    setCustomFields(event: any): void;
    updateDocumentRecipientHandler(recipients: CustomEvent<IRecipient[]>): void;
    documentTypeHandler(isSigning: CustomEvent<boolean>): void;
    setSessionHandler(sessionData: CustomEvent<ISession>): void;
    setDocumentName(documentName: CustomEvent<string>): void;
    setDocumentValue(value: CustomEvent<number>): void;
    setDocumentSmartReminder(smartReminder: CustomEvent<boolean>): void;
    setDocumentIsSmsSending(isSmsSending: CustomEvent<boolean>): void;
    setDocumentEmailSubject(emailSendSubject: CustomEvent<string>): void;
    setDocumentEmailMessage(emailSendMessage: CustomEvent<string>): void;
    validateDocumentHandler(): void;
    openDocumentDetails(document: CustomEvent<IDocument>): void;
    setDocumentVideo(videoId: CustomEvent<string>): void;
    removeDocumentVideo(): void;
    setIsSending(isSending: CustomEvent<boolean>): void;
    documentCompleted(isSealed: CustomEvent<boolean>): void;
    onError(event: CustomEvent<string>): void;
    get checkIfSessionExists(): boolean;
    validateToken(session: ISession): Promise<boolean>;
    private setSessionData;
    setDefaultDocumentData(): void;
}
