Metadata-Version: 1.2
Name: maml
Version: 2021.3.2
Summary: maml is a machine learning library for materials science.
Home-page: http://maml.ai/
Author: Materials Virtual Lab
Author-email: ongsp@eng.ucsd.edu
Maintainer: Shyue Ping Ong
Maintainer-email: ongsp@eng.ucsd.edu
License: BSD
Description: 
        maml (MAterials Machine Learning) is a Python package that aims to provide useful high-level interfaces that make ML
        for materials science as easy as possible.
        
        The goal of maml is not to duplicate functionality already available in other packages. maml relies on well-established
        packages such as scikit-learn and tensorflow for implementations of ML algorithms, as well as other materials science
        packages such as `pymatgen <http://pymatgen.org>`_ and `matminer <http://hackingmaterials.lbl.gov/matminer/>`_ for
        crystal/molecule manipulation and feature generation.
        
        Official documentation at http://maml.ai/
        
        Features
        --------
        
        1. Convert materials (crystals and molecules) into features. In addition to common compositional, site and structural
           features, we provide the following fine-grain local environment features.
        
         a) Bispectrum coefficients
         b) Behler Parrinello symmetry functions
         c) Smooth Overlap of Atom Position (SOAP)
         d) Graph network features (composition, site and structure)
        
        2. Use ML to learn relationship between features and targets. Currently, the `maml` supports `sklearn` and `keras`
           models.
        
        3. Applications:
        
         a) `pes` for modelling the potential energy surface, constructing surrogate models for property prediction.
        
          i) Neural Network Potential (NNP)
          ii) Gaussian approximation potential (GAP) with SOAP features
          iii) Spectral neighbor analysis potential (SNAP)
          iv) Moment Tensor Potential (MTP)
        
         b) `rfxas` for random forest models in predicting atomic local environments from X-ray absorption spectroscopy.
        
        Installation
        ------------
        
        Pip install via PyPI::
        
            pip install maml
        
        To run the potential energy surface (pes), lammps installation is required you can install from source or from `conda`::
        
            conda install -c conda-forge/label/cf202003 lammps
        
        The SNAP potential comes with this lammps installation. The GAP package for GAP and MLIP package for MTP are needed to run the corresponding potentials. For fitting NNP potential, the `n2p2` package is needed.
        
        Install all the libraries from requirement.txt file::
        
            pip install -r requirements.txt
        
        For all the requirements above::
        
            pip install -r requirements-ci.txt
            pip install -r requirements-optional.txt
            pip install -r requirements-tf.txt
            pip install -r requirements.txt
        
        Citing
        ------
        ::
        
            @misc{maml,
                author = {Chen, Chi and Zuo, Yunxing and Ye, Weike and Ong, Shyue Ping},
                title = {{Maml - materials machine learning package}},
                year = {2020},
                publisher = {GitHub},
                journal = {GitHub repository},
                howpublished = {https://github.com/materialsvirtuallab/maml},
            }
        
        For the ML-IAP package (`maml.pes`), please cite::
        
            Zuo, Y.; Chen, C.; Li, X.; Deng, Z.; Chen, Y.; Behler, J.; Csányi, G.; Shapeev, A. V.; Thompson, A. P.;
            Wood, M. A.; Ong, S. P. Performance and Cost Assessment of Machine Learning Interatomic Potentials.
            J. Phys. Chem. A 2020, 124 (4), 731–745. https://doi.org/10.1021/acs.jpca.9b08723.
        
Keywords: materials,science,deep,learning
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Topic :: Scientific/Engineering :: Chemistry
Classifier: Topic :: Software Development :: Libraries :: Python Modules
