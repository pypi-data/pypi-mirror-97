# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['mdformat', 'mdformat.renderer', 'mdformat.renderer._codepoints']

package_data = \
{'': ['*']}

install_requires = \
['markdown-it-py>=0.5.5,<0.7.0']

extras_require = \
{':python_version < "3.8"': ['importlib-metadata>=0.12',
                             'typing-extensions>=3.7.4']}

entry_points = \
{'console_scripts': ['mdformat = mdformat.__main__:run']}

setup_kwargs = {
    'name': 'mdformat',
    'version': '0.6.1',
    'description': 'CommonMark compliant Markdown formatter',
    'long_description': '[![Build Status](https://github.com/executablebooks/mdformat/workflows/Tests/badge.svg?branch=master)](https://github.com/executablebooks/mdformat/actions?query=workflow%3ATests+branch%3Amaster+event%3Apush)\n[![codecov.io](https://codecov.io/gh/executablebooks/mdformat/branch/master/graph/badge.svg)](https://codecov.io/gh/executablebooks/mdformat)\n[![PyPI version](https://img.shields.io/pypi/v/mdformat)](https://pypi.org/project/mdformat)\n\n# mdformat\n\n> CommonMark compliant Markdown formatter\n\nMdformat is an opinionated Markdown formatter\nthat can be used to enforce a consistent style in Markdown files.\nMdformat is a Unix-style command-line tool as well as a Python library.\n\nThe features/opinions of the formatter include:\n\n- Consistent indentation and whitespace across the board\n- Always use ATX style headings\n- Move all link references to the bottom of the document (sorted by label)\n- Reformat indented code blocks as fenced code blocks\n- Use `1.` as the ordered list marker if possible, also for noninitial list items\n\nMdformat by default will not change word wrapping.\nThe rationale for this is to support [Semantic Line Breaks](https://sembr.org/).\n\nFor a comprehensive description and rationalization of the style,\nread [the style guide](https://github.com/executablebooks/mdformat/blob/master/STYLE.md).\n\n**NOTE:**\nThe formatting style produced by mdformat may change in each version.\nIt is recommended to pin mdformat dependency version.\n\nMdformat offers an extensible plugin system for both code fence content formatting and parser extensions (like tables).\n\n## Installing\n\n```bash\npip install mdformat\n```\n\n## Command line usage\n\n### Format files\n\nFormat files `README.md` and `CHANGELOG.md` in place\n\n```bash\nmdformat README.md CHANGELOG.md\n```\n\nFormat `.md` files in current working directory recursively\n\n```bash\nmdformat .\n```\n\nRead Markdown from standard input until `EOF`.\nWrite formatted Markdown to standard output.\n\n```bash\nmdformat -\n```\n\n### Check formatting\n\n```bash\nmdformat --check README.md CHANGELOG.md\n```\n\nThis will not apply any changes to the files.\nIf a file is not properly formatted, the exit code will be non-zero.\n\n### Options\n\n```console\nfoo@bar:~$ mdformat --help\nusage: mdformat [-h] [--check] [--version] [--number]\n                [--wrap {keep,no,INTEGER}]\n                [paths [paths ...]]\n\nCommonMark compliant Markdown formatter\n\npositional arguments:\n  paths                 files to format\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --check               do not apply changes to files\n  --version             show program\'s version number and exit\n  --number              apply consecutive numbering to ordered lists\n  --wrap {keep,no,INTEGER}\n                        paragraph word wrap mode (default: keep)\n```\n\n## Python API usage\n\n### Format text\n\n```python\nimport mdformat\n\nunformatted = "\\n\\n# A header\\n\\n"\nformatted = mdformat.text(unformatted)\nassert formatted == "# A header\\n"\n```\n\n### Format a file\n\nFormat file `README.md` in place:\n\n```python\nimport mdformat\n\n# Input filepath as a string...\nmdformat.file("README.md")\n\n# ...or a pathlib.Path object\nimport pathlib\n\nfilepath = pathlib.Path("README.md")\nmdformat.file(filepath)\n```\n\n### Options\n\nAny options available in the CLI are also available in the Python API,\nwith equivalent option names.\n\nFor instance, to switch on consecutive numbering of ordered lists,\nand set a word wrap target width of 60 characters, do\n\n```python\nimport mdformat\nmdformat.file("FILENAME.md", options={"number": True, "wrap": 60})\n```\n\n## Usage as a pre-commit hook\n\n`mdformat` can be used as a [pre-commit](https://github.com/pre-commit/pre-commit) hook.\nAdd the following to your project\'s `.pre-commit-config.yaml` to enable this:\n\n```yaml\n- repo: https://github.com/executablebooks/mdformat\n  rev: 0.6.1  # Use the ref you want to point at\n  hooks:\n  - id: mdformat\n    # optional\n    additional_dependencies:\n    - mdformat-tables\n    - mdformat-black\n```\n\n## Code formatter plugins\n\nMdformat features a plugin system to support formatting of Markdown code blocks where the coding language has been labeled.\nFor instance, if [`mdformat-black`](https://github.com/hukkinj1/mdformat-black) plugin is installed in the environment,\nmdformat CLI will automatically format Python code blocks with [Black](https://github.com/psf/black).\n\nFor stability, mdformat Python API behavior will not change simply due to a plugin being installed.\nCode formatters will have to be explicitly enabled in addition to being installed:\n\n````python\nimport mdformat\n\nunformatted = "```python\\n\'\'\'black converts quotes\'\'\'\\n```\\n"\n# Pass in `codeformatters` here! It is an iterable of coding languages\n# that should be formatted\nformatted = mdformat.text(unformatted, codeformatters={"python"})\nassert formatted == \'```python\\n"""black converts quotes"""\\n```\\n\'\n````\n\nRead the\n[contribution guide](https://github.com/executablebooks/mdformat/blob/master/CONTRIBUTING.md#developing-code-formatter-plugins)\nif you wish to implement a new code formatter plugin.\n\n### Existing plugins\n\n<table>\n  <tr>\n    <th>Plugin</th>\n    <th>Supported languages</th>\n    <th>Notes</th>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-beautysh">mdformat-beautysh</a></td>\n    <td><code>bash</code>, <code>sh</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-black">mdformat-black</a></td>\n    <td><code>python</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-config">mdformat-config</a></td>\n    <td><code>json</code>, <code>toml</code>, <code>yaml</code></td>\n    <td></td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-gofmt">mdformat-gofmt</a></td>\n    <td><code>go</code></td>\n    <td>Requires <a href="https://golang.org/doc/install">Go</a> installation</td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-rustfmt">mdformat-rustfmt</a></td>\n    <td><code>rust</code></td>\n    <td>Requires <a href="https://github.com/rust-lang/rustfmt#quick-start">rustfmt</a> installation</td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-shfmt">mdformat-shfmt</a></td>\n    <td><code>bash</code>, <code>sh</code></td>\n    <td>Requires either <a href="https://github.com/mvdan/sh#shfmt">shfmt</a> or <a href="https://docs.docker.com/get-docker/">Docker</a> installation</td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-web">mdformat-web</a></td>\n    <td><code>javascript</code>, <code>js</code>, <code>css</code>, <code>html</code>, <code>xml</code></td>\n    <td></td>\n  </tr>\n</table>\n\n## Parser extension plugins\n\nMarkdown-it-py offers a range of useful extensions to the base CommonMark parser (see the [documented list](https://markdown-it-py.readthedocs.io/en/latest/plugins.html)).\n\nMdformat features a plugin system to support the loading and rendering of such extensions.\n\nFor stability, mdformat Python API behavior will not change simply due to a plugin being installed.\nExtensions will have to be explicitly enabled in addition to being installed:\n\n```python\nimport mdformat\n\nunformatted = "content...\\n"\n# Pass in `extensions` here! It is an iterable of extensions that should be loaded\nformatted = mdformat.text(unformatted, extensions={"tables"})\n```\n\nRead the\n[contribution guide](https://github.com/executablebooks/mdformat/blob/master/CONTRIBUTING.md#developing-code-formatter-plugins)\nif you wish to implement a new parser extension plugin.\n\n### Existing plugins\n\n<table>\n  <tr>\n    <th>Plugin</th>\n    <th>Syntax Extensions</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-gfm">mdformat-gfm</a></td>\n    <td><code>gfm</code></td>\n    <td>Changes target specification to GitHub Flavored Markdown (GFM)</td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/executablebooks/mdformat-tables">mdformat-tables</a></td>\n    <td><code>tables</code></td>\n    <td>Adds support for GitHub Flavored Markdown style tables</td>\n  </tr>\n  <tr>\n    <td><a href="https://github.com/hukkinj1/mdformat-toc">mdformat-toc</a></td>\n    <td><code>toc</code></td>\n    <td>Adds the capability to auto-generate a table of contents</td>\n  </tr>\n</table>\n',
    'author': 'Taneli Hukkinen',
    'author_email': 'hukkinj1@users.noreply.github.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/executablebooks/mdformat',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'extras_require': extras_require,
    'entry_points': entry_points,
    'python_requires': '>=3.6.1,<4.0.0',
}


setup(**setup_kwargs)
