# Example config file for the development cli, dev-cli.
# The format of this file is pretty straightforward, and documented at
# http://www.hyperrealm.com/libconfig/libconfig_manual.html#Configuration-Files

# WARNING! Floating point values _must_ be specified as (e.g.) 10.0 and not 10.
# If the decimal point is omitted, parsing may fail silently and use the value 0.

random_seed = 878638576;
num_labels = 2;

# The simulation model to run. The model definition must have a
# 'name' attribute and may have others.
model = {
    # The standard coalescent
    name = "hudson",

    # The SMC and SMC' variant.
    # name = "smc",
    # name = "smc_prime",

    # The 'Dirac' multiple mergers coalescent
    # name = "dirac",
    # psi = 0.99;
    # c = 0.1;

    # The 'Beta' multiple mergers coalescent
    #name = "beta";
    #alpha = 1.5;
    #truncation_point = 1.0;

    # The discrete time Wright Fisher
    # name = "dtwf"; 
    # name = "wf_ped";

    # The genic selection sweep model
    # name = "sweep_genic_selection"; 
    # position = 50; # The site at which the sweep occurs 
    # start_frequency = 0.1; 
    # end_frequency = 0.8; 
    # alpha = 0.1; 
    # dt = 0.01; 
};

recombination_map = (
    # Each element in this array is a tuple (x, rate), where x is the
    # start of a segment and rate is the recombination rate within that
    # until the next breakpoint. This specifies a rate of 0.1 along
    # the interval 0-10.
    [0.0, 0.0],
    [100.0, 0.0]
);

gene_conversion_rate = 1.1;
gene_conversion_tract_length = 1.0;

# The mutation rate per generation.
mutation_rate = 0.02;
# Alphabet used in infinite sites mutations. 0 for binary and 1 for ACGT
mutation_alphabet = 1;

# The samples. Each sample has a time and a population.
samples  = (
    # { population = 0; time = 0.0; },
    # { population = 0; time = 0.0; },
    # { population = 0; time = 0.0; },
    # { population = 0; time = 2.0; },
    # { population = 0; time = 1.0; },
    # { population = 0; time = 0.0; }
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # /* { population = 0; time = 0.0; }, */
    # { population = 0; time = 0.0; }
);

# The tree sequence file to initialise the simulation when recapitating.
from = "./headless.trees"; 

########################
# Population structure.
########################

# The number and initial state of the populations is specified in the
# following group. We must specify a growth_rate and initial_size for
# each population. These parameters may not be relevant for all simulation
# models.
population_configuration = (
    {
        growth_rate = 0.0;
        initial_size = 1.0;
    }
);
# The flattened migration matrix. Diagonal entries must be 0. For example,
# for a three population symmetric system we might have
#migration_matrix = [0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0];
migration_matrix = [0.0];

# Pedigree arrays. 'parents' gives index of parents in
# 'individual' array, 'times' gives times in units of generations in the past,
# and 'is_sample' is 1 for individuals to be simulated, and 0 otherwise.
#
time = [];
is_sample = [];
individual = [];
parents = ([]);

# time = [0.0, 0.0, 1.0, 1.0];
# is_sample = [1, 1, 0, 0];
# parents = (
#         [ 2,  3],
#         [ 2,  3],
#         [-1, -1],
#         [-1, -1]
# );

# parents = (
# 	   [ 3,   4],
#        [ 7,   6],
#        [ 7,   6],
#        [14,  13],
#        [-1,  -1],
#        [14,  13],
#        [-1,  -1],
#        [15,  16],
#        [15,  16],
#        [17,  18],
#        [17,  18],
#        [19,  20],
#        [19,  20],
#        [-1,  -1],
#        [22,  21],
#        [-1,  -1],
#        [22,  21],
#        [22,  21],
#        [-1,  -1],
#        [22,  21],
#        [-1,  -1],
#        [-1,  -1],
#        [-1,  -1]
# );
# time = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 2, 2];
# is_sample = [0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];

# All supported demographic events are supported in the following list.
# Some examples:
#
#    {
#        type = "population_parameters_change",
#        time = 0.2;
#        population_id = 1;
#        growth_rate = 3.0;
#    }
#
#    {
#        type = "migration_rate_change";
#        time = 0.3;
#        source = -1;
#        dest = -1;
#        migration_rate = 0.0;
#    }
#
#    {
#        type = "mass_migration";
#        time = 0.3;
#        source = 1;
#        dest = 0;
#        proportion = 1.0;
#    }
# These examples are not complete, but should be sufficient to get started.
# Please see the source of dev-cli.c for details on these events.

demographic_events = ();

########################
# Miscellaneous options
########################

start_time = 0.1;

# Set to 1 if migration records should be stored.
store_migrations = 0;

# Set to 1 to store the full ARG. This keeps track of all 
# recombination and common ancestor nodes, as well as migration events.
store_full_arg = 0;

# The remaining configuration items are low-level performance tuning levers.
# They should have no impact on the outcome of the simulation.

# Number of items that we allocate at once for each type.
avl_node_block_size = 1000;
node_mapping_block_size = 1000;
segment_block_size = 1000;
