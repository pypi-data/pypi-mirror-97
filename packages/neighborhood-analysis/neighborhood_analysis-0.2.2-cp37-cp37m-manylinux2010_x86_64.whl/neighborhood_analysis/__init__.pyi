from typing import List, Tuple, Dict, Optional


def get_bbox(points_collections: List[List[Tuple[float, float]]]) -> List[Tuple[float, float, float, float]]: ...

def get_point_neighbors(points: List[Tuple[float, float]], r: float, labels: Optional[List[int]] = None) -> List[List[int]]: ...

def get_bbox_neighbors(bbox_list: List[Tuple[float, float, float, float]],
                       expand: float = 1.0, scale: float = 1.0, labels: Optional[List[int]] = None) -> List[List[int]]: ...

def comb_bootstrap(x_status: List[bool], y_status: List[bool], neighbors: Dict[int, List[int]],
                   times: int = 500, ignore_self: bool = False) -> float: ...

class CellCombs:
    def __init__(self, types: List[str], order: bool = False): ...

    def bootstrap(self, types: List[str], neighbors: List[List[int]], times: int = 500, pval: float = 0.05,
                  method: str = 'pval', ignore_self: bool = False) -> List[Tuple[Tuple[str, str], float]]: ...
