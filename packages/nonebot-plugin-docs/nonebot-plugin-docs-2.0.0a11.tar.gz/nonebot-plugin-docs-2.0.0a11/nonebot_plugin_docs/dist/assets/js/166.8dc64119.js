(window.webpackJsonp=window.webpackJsonp||[]).push([[166],{429:function(s,t,e){"use strict";e.r(t);var a=e(21),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"跨插件访问"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#跨插件访问"}},[s._v("#")]),s._v(" 跨插件访问")]),s._v(" "),e("p",[s._v("由于 "),e("code",[s._v("nonebot2")]),s._v(" 独特的插件加载机制，在使用 python 原有的 import 机制来进行插件之间的访问时，很可能会有奇怪的或者意料以外的情况发生。为了避免这种情况的发生，您可以有两种方法来实现跨插件访问：")]),s._v(" "),e("ol",[e("li",[s._v("将插件间的要使用的公共代码剥离出来，作为公共文件或者文件夹，提供给插件加以调用。")]),s._v(" "),e("li",[s._v("使用 "),e("code",[s._v("nonebot2")]),s._v(" 提供的 "),e("code",[s._v("export")]),s._v(" 和 "),e("code",[s._v("require")]),s._v(" 机制，来实现插件间的互相调用。")])]),s._v(" "),e("p",[s._v("第一种方法比较容易理解和实现，这里不再赘述，但需要注意的是，请不要将公共文件或者公共文件夹作为"),e("strong",[s._v("插件")]),s._v("被 "),e("code",[s._v("nonebot2")]),s._v(" 加载。")]),s._v(" "),e("p",[s._v("下面将介绍第二种方法—— "),e("code",[s._v("export")]),s._v(" 和 "),e("code",[s._v("require")]),s._v(" 机制：")]),s._v(" "),e("h2",{attrs:{id:"使用-export-和-require"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-export-和-require"}},[s._v("#")]),s._v(" 使用 export 和 require")]),s._v(" "),e("p",[s._v("现在，假定有两个插件 "),e("code",[s._v("pluginA")]),s._v(" 和 "),e("code",[s._v("pluginB")]),s._v("，需要在 "),e("code",[s._v("pluginB")]),s._v(" 中调用 "),e("code",[s._v("pluginA")]),s._v(" 中的一个变量 "),e("code",[s._v("varA")]),s._v(" 和一个函数 "),e("code",[s._v("funcA")]),s._v("。")]),s._v(" "),e("p",[s._v("在上面的条件中涉及到了两种操作：一种是在 "),e("code",[s._v("pluginA")]),s._v(" 的 "),e("code",[s._v("导出对象")]),s._v(" 操作；而另一种是在 "),e("code",[s._v("pluginB")]),s._v(" 的 "),e("code",[s._v("导入对象")]),s._v(" 操作。在 "),e("code",[s._v("nonebot2")]),s._v(" 中，"),e("code",[s._v("导出对象")]),s._v(" 的操作用 "),e("code",[s._v("export")]),s._v(" 机制来实现，"),e("code",[s._v("导入对象")]),s._v(" 的操作用 "),e("code",[s._v("require")]),s._v(" 机制来实现。下面，我们将逐一进行介绍。")]),s._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[s._v("警告")]),s._v(" "),e("p",[s._v("使用这个方法进行跨插件访问时，"),e("strong",[s._v("需要先加载"),e("code",[s._v("导出对象")]),s._v("的插件，再加载"),e("code",[s._v("导入对象")]),s._v("的插件。")])])]),s._v(" "),e("h3",{attrs:{id:"使用-export"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-export"}},[s._v("#")]),s._v(" 使用 export")]),s._v(" "),e("p",[s._v("在 "),e("code",[s._v("pluginA")]),s._v(" 中，我们调用 "),e("code",[s._v("export")]),s._v(" 机制 "),e("code",[s._v("导出对象")]),s._v("。")]),s._v(" "),e("p",[s._v("在 "),e("code",[s._v("export")]),s._v(" 机制调用前，我们需要保证导出的对象已经被定义，比如：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("varA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"varA"')]),s._v("\n\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("funcA")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"funcA"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("在确保定义之后，我们可以从 "),e("code",[s._v("nonebot.plugin")]),s._v(" 导入 "),e("code",[s._v("export()")]),s._v(" 方法, "),e("code",[s._v("export()")]),s._v(" 方法会返回一个特殊的字典 "),e("code",[s._v("export")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" nonebot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("plugin "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" export\n\nexport"),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("export"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这个字典可以用来装载导出的对象，它的 key 是对象导出后的命名，value 是对象本身，我们可以直接创建新的 "),e("code",[s._v("key")]),s._v(" - "),e("code",[s._v("value")]),s._v(" 对导出对象：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("export"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" varA\nexport"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" funcA\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("除此之外，也支持 "),e("code",[s._v("嵌套")]),s._v(" 导出对象：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("export"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" varA\nexport"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" funcA\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("特别地，对于 "),e("code",[s._v("函数对象")]),s._v(" 而言，"),e("code",[s._v("export")]),s._v(" 支持用 "),e("code",[s._v("装饰器")]),s._v(" 的方法来导出，因此，我们可以这样定义 "),e("code",[s._v("funcA")]),s._v("：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@export"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sub")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("funcA")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"funcA"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("或者:")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@export")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("funcA")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"funcA"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("通过 "),e("code",[s._v("装饰器")]),s._v(" 的方法导出函数时，命名固定为函数的命名，也就是说，上面的两个例子等同于：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("export"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("funcA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" funcA\n\nexport"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("funcA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" funcA\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("这样，我们就成功导出 "),e("code",[s._v("varA")]),s._v(" 和 "),e("code",[s._v("funcA")]),s._v(" 对象了。")]),s._v(" "),e("p",[s._v("下面我们将介绍如何在 "),e("code",[s._v("pluginB")]),s._v(" 中导入这些对象。")]),s._v(" "),e("h3",{attrs:{id:"使用-require"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-require"}},[s._v("#")]),s._v(" 使用 require")]),s._v(" "),e("p",[s._v("在 "),e("code",[s._v("pluginB")]),s._v(" 中，我们调用 "),e("code",[s._v("require")]),s._v(" 机制 "),e("code",[s._v("导入对象")]),s._v("。")]),s._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[s._v("警告")]),s._v(" "),e("p",[s._v("在导入来自其他插件的对象时, 请确保导出该对象的插件在引用该对象的插件之前加载。如果该插件并未被加载，则会尝试加载，加载失败则会返回 "),e("code",[s._v("None")]),s._v("。")])]),s._v(" "),e("p",[s._v("我们可以从 "),e("code",[s._v("nonebot.plugin")]),s._v(" 中导入 "),e("code",[s._v("require()")]),s._v(" 方法：")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" nonebot"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("plugin "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" require\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("require()")]),s._v(" 方法的参数是插件名, 它会返回在指定插件中，用 "),e("code",[s._v("export()")]),s._v(" 方法创建的字典。")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("require_A "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" require"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'pluginA'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("在之前，这个字典已经存入了 "),e("code",[s._v("'vA'")]),s._v(" - "),e("code",[s._v("varA")]),s._v(", "),e("code",[s._v("'fA'")]),s._v(" - "),e("code",[s._v("funcA")]),s._v(" 或 "),e("code",[s._v("'funcA'")]),s._v(" - "),e("code",[s._v("funcA")]),s._v(" 这样的 "),e("code",[s._v("key")]),s._v(" - "),e("code",[s._v("value")]),s._v(" 对。因此在这里我们直接用 "),e("code",[s._v("属性")]),s._v(" 的方法来获取导入对象:")]),s._v(" "),e("div",{staticClass:"language-python line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-python"}},[e("code",[s._v("varA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" require_A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("vA\nfuncA "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" require_A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fA "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" require_A"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("funcA\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("这样，我们就在 "),e("code",[s._v("pluginB")]),s._v(" 中成功导入了 "),e("code",[s._v("varA")]),s._v(" 和 "),e("code",[s._v("funcA")]),s._v(" 对象了。")])])}),[],!1,null,null,null);t.default=n.exports}}]);