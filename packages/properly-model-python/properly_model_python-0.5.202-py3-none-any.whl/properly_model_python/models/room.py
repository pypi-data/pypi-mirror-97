# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from properly_model_python.models.base_model_ import Model
from properly_model_python import util


class Room(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, level: str=None, dimensions: str=None, area: float=None, area_square_feet: float=None, length: float=None, length_feet: int=None, length_inches: int=None, width: float=None, width_feet: int=None, width_inches: int=None):  # noqa: E501
        """Room - a model defined in Swagger

        :param name: The name of this Room.  # noqa: E501
        :type name: str
        :param level: The level of this Room.  # noqa: E501
        :type level: str
        :param dimensions: The dimensions of this Room.  # noqa: E501
        :type dimensions: str
        :param area: The area of this Room.  # noqa: E501
        :type area: float
        :param area_square_feet: The area_square_feet of this Room.  # noqa: E501
        :type area_square_feet: float
        :param length: The length of this Room.  # noqa: E501
        :type length: float
        :param length_feet: The length_feet of this Room.  # noqa: E501
        :type length_feet: int
        :param length_inches: The length_inches of this Room.  # noqa: E501
        :type length_inches: int
        :param width: The width of this Room.  # noqa: E501
        :type width: float
        :param width_feet: The width_feet of this Room.  # noqa: E501
        :type width_feet: int
        :param width_inches: The width_inches of this Room.  # noqa: E501
        :type width_inches: int
        """
        self.swagger_types = {
            'name': str,
            'level': str,
            'dimensions': str,
            'area': float,
            'area_square_feet': float,
            'length': float,
            'length_feet': int,
            'length_inches': int,
            'width': float,
            'width_feet': int,
            'width_inches': int
        }

        self.attribute_map = {
            'name': 'name',
            'level': 'level',
            'dimensions': 'dimensions',
            'area': 'area',
            'area_square_feet': 'areaSquareFeet',
            'length': 'length',
            'length_feet': 'lengthFeet',
            'length_inches': 'lengthInches',
            'width': 'width',
            'width_feet': 'widthFeet',
            'width_inches': 'widthInches'
        }

        self._name = name
        self._level = level
        self._dimensions = dimensions
        self._area = area
        self._area_square_feet = area_square_feet
        self._length = length
        self._length_feet = length_feet
        self._length_inches = length_inches
        self._width = width
        self._width_feet = width_feet
        self._width_inches = width_inches

    @classmethod
    def from_dict(cls, dikt) -> 'Room':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Room of this Room.  # noqa: E501
        :rtype: Room
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Room.


        :return: The name of this Room.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Room.


        :param name: The name of this Room.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def level(self) -> str:
        """Gets the level of this Room.


        :return: The level of this Room.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level: str):
        """Sets the level of this Room.


        :param level: The level of this Room.
        :type level: str
        """

        self._level = level

    @property
    def dimensions(self) -> str:
        """Gets the dimensions of this Room.


        :return: The dimensions of this Room.
        :rtype: str
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions: str):
        """Sets the dimensions of this Room.


        :param dimensions: The dimensions of this Room.
        :type dimensions: str
        """

        self._dimensions = dimensions

    @property
    def area(self) -> float:
        """Gets the area of this Room.


        :return: The area of this Room.
        :rtype: float
        """
        return self._area

    @area.setter
    def area(self, area: float):
        """Sets the area of this Room.


        :param area: The area of this Room.
        :type area: float
        """

        self._area = area

    @property
    def area_square_feet(self) -> float:
        """Gets the area_square_feet of this Room.


        :return: The area_square_feet of this Room.
        :rtype: float
        """
        return self._area_square_feet

    @area_square_feet.setter
    def area_square_feet(self, area_square_feet: float):
        """Sets the area_square_feet of this Room.


        :param area_square_feet: The area_square_feet of this Room.
        :type area_square_feet: float
        """

        self._area_square_feet = area_square_feet

    @property
    def length(self) -> float:
        """Gets the length of this Room.


        :return: The length of this Room.
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length: float):
        """Sets the length of this Room.


        :param length: The length of this Room.
        :type length: float
        """

        self._length = length

    @property
    def length_feet(self) -> int:
        """Gets the length_feet of this Room.


        :return: The length_feet of this Room.
        :rtype: int
        """
        return self._length_feet

    @length_feet.setter
    def length_feet(self, length_feet: int):
        """Sets the length_feet of this Room.


        :param length_feet: The length_feet of this Room.
        :type length_feet: int
        """

        self._length_feet = length_feet

    @property
    def length_inches(self) -> int:
        """Gets the length_inches of this Room.


        :return: The length_inches of this Room.
        :rtype: int
        """
        return self._length_inches

    @length_inches.setter
    def length_inches(self, length_inches: int):
        """Sets the length_inches of this Room.


        :param length_inches: The length_inches of this Room.
        :type length_inches: int
        """

        self._length_inches = length_inches

    @property
    def width(self) -> float:
        """Gets the width of this Room.


        :return: The width of this Room.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width: float):
        """Sets the width of this Room.


        :param width: The width of this Room.
        :type width: float
        """

        self._width = width

    @property
    def width_feet(self) -> int:
        """Gets the width_feet of this Room.


        :return: The width_feet of this Room.
        :rtype: int
        """
        return self._width_feet

    @width_feet.setter
    def width_feet(self, width_feet: int):
        """Sets the width_feet of this Room.


        :param width_feet: The width_feet of this Room.
        :type width_feet: int
        """

        self._width_feet = width_feet

    @property
    def width_inches(self) -> int:
        """Gets the width_inches of this Room.


        :return: The width_inches of this Room.
        :rtype: int
        """
        return self._width_inches

    @width_inches.setter
    def width_inches(self, width_inches: int):
        """Sets the width_inches of this Room.


        :param width_inches: The width_inches of this Room.
        :type width_inches: int
        """

        self._width_inches = width_inches
