///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                 CTA_Messages protocol buffer definitions                  //      
//             Everything needed to handle actual CTA messages               //  
//   Based on prototype implementation in deprecated project CamereasToACTL  //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

syntax = "proto2";

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//    Message message: wrapper to send other message through the network     //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////

enum MessageType
{
	//DEFAULT MESSAGE TYPES
	EMPTY_MESSAGE       = -2;
	END_OF_STREAM       = -1;
	NO_TYPE             =  0;
	ANY_ARRAY           =  1;

	//RAW DATA TYPES
	TELESCOPE_DATA_STREAM =  2;
	CAMERA_CONFIG         =  3;
	R1_EVENT              =  4;
	TRIGGER_BUNCH         =  5;
	TRIGGER               =  6;
	SUBARRAY_DATA_STREAM  =  7;
	EVENT_REQUEST_BUNCH   =  8;
	EVENT_REQUEST         =  9;
	CALIB_COEFFS_SET      = 10;
	CALIB_COEFFS_UPDATE   = 11;

	//OLDER PROTOTYPES MESSAGES TYPES
	WAVEFORM_DATA       = 100;
	INTEGRAL_DATA       = 101;
	PIXELS_CHANNEL      = 102;
	CAMERA_TRIGGER      = 103;
	ARRAY_TRIGGER       = 104;
	CAMERA_RUN_HEADER   = 105;
	CAMERA_EVENT        = 106;
	ARRAY_EVENT         = 107;
	THROUGHPUT_STATS    = 108;
	SERVER_ANNOUNCEMENT = 109;
	MESSAGE_WRAPPER     = 110;
	RAW_CAMERA_DATA     = 111;
	PACKETLIB_DATA      = 112;
	NECTAR_CAM_COUNTERS = 113;
	R1_CAMERA_EVENT     = 114;
	R1_CAMERA_CONFIG    = 115;
	DUMMY_AUX_DATA      = 116;
}

message CTAMessage {

  	repeated MessageType payload_type  = 1;              // type of the message contained in the payload
  	optional string      source_name   = 2 [default=""]; // name of the originating node. Useful to create appropriately named outputs (files...)
  	optional sfixed32    message_count = 3 [default=-1]; // as we use TCP/IP, this can most probably be ignored
  	repeated bytes       payload_data  = 4; 		     // actual payload data
}

///////////////////////////////////////////////////////////////////////////////
//                                                                           //    
// Optimized arrays, to store any kind of non-formatted data much faster     //
//                      than protobuf repeated fields                        //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
message AnyArray
{
	enum ItemType
	{
		NONE   = 0;
		S8     = 1;
		U8     = 2;
		S16    = 3;
		U16    = 4;
		S32    = 5;
		U32    = 6;
		S64    = 7;
		U64    = 8;
		FLOAT  = 9;
		DOUBLE = 10;
		BOOL   = 11;
	}

    optional ItemType type = 1 [default=NONE];
    optional bytes    data = 2;
}

// Enum to keep track of any change in the any array fields
// Their number is used in the code for performance reasons
// So instead of using their number directly we go through this enum
enum AnyArrayFieldsNumber
{
	ANYARRAY_TYPE = 1;
	ANYARRAY_DATA = 2;
}

///////////////////////////////////////////////////////////////////////////////
//                                                                           //    
//         Monitoring messages. Might be discarded as ACS takes over         //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
message ThroughputStats
 {
   	optional string origin     = 1; // hostname or ip of the sending node
 	optional int32  port       = 2; // port used for the connection, if any
 	optional string dest       = 3; // component name of the receiving node
 	optional int32  num_bytes  = 4; // number of transfered bytes
 	optional int32  elapsed_us = 5; // time elapsed since last update
 	optional string comment    = 6; // any text to be displayed with the node
 }

 message ServerAnnouncement
 {
 	optional string name = 1; //component name related to this server 
 	optional string host = 2; //hostname for resolving the source of the stats received by the client(s)
 	optional int32  port = 3; //port used for the connection, if any
 }

///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//   Helper message to easily unit-test the handling of various data types   //
//                                using AnyArray                             //   
//                                                                           //
///////////////////////////////////////////////////////////////////////////////
message UnitTestAtomicTypes
{
	enum UnitEnum
	{
		ZERO  = 0;
		ONE   = 1;
		TWO   = 2;
		THREE = 3;
		FOUR  = 4;
		FIVE  = 5;
	}

	optional UnitEnum enumerate   = 1 [default = ZERO];
	optional AnyArray int8_array   = 2;
	optional AnyArray uint8_array  = 3;
	optional AnyArray int16_array  = 4;
	optional AnyArray uint16_array = 5;
	optional AnyArray int32_array  = 6;
	optional AnyArray uint32_array = 7;
	optional AnyArray int64_array  = 8;
	optional AnyArray uint64_array = 9;
	optional AnyArray float_array  = 10;
	optional AnyArray double_array  = 11;
	optional string   string_value = 12;
}

