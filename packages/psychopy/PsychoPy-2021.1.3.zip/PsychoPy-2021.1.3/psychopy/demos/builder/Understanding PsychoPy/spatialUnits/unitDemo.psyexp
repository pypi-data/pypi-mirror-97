<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2020.2.10">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data file delimiter" updates="None" val="auto" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant': '', 'session': '001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="False" valType="bool"/>
    <Param name="HTML path" updates="None" val="" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Resources" updates="None" val="[]" valType="fileList"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="False" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="[1080, 720]" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="unitDemo2" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="debug" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="rectMover">
      <CodeComponent name="code">
        <Param name="Before Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Before JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Experiment" updates="constant" val="mags = {&amp;#10;    'height': 0.1,&amp;#10;    'norm': 0.1,&amp;#10;    'pix': 100,&amp;#10;    'cm': 1,&amp;#10;    'deg': pi/10,&amp;#10;}&amp;#10;unitCodes = {&amp;#10;    'h': 'height',&amp;#10;    'n': 'norm',&amp;#10;    'p': 'pix',&amp;#10;    'c': 'cm',&amp;#10;    'd': 'deg'&amp;#10;}" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="mags = {&quot;height&quot;: 0.1, &quot;norm&quot;: 0.1, &quot;pix&quot;: 100, &quot;cm&quot;: 1, &quot;deg&quot;: (pi / 10)};&amp;#10;unitCodes = {&quot;h&quot;: &quot;height&quot;, &quot;n&quot;: &quot;norm&quot;, &quot;p&quot;: &quot;pix&quot;, &quot;c&quot;: &quot;cm&quot;, &quot;d&quot;: &quot;deg&quot;};&amp;#10;" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Auto-&gt;JS" valType="str"/>
        <Param name="Each Frame" updates="constant" val="keys = event.getKeys()&amp;#10;if keys:&amp;#10;    # Get key&amp;#10;    if 'escape' in keys:&amp;#10;        continueRoutine = False&amp;#10;        break&amp;#10;    key = keys.pop()&amp;#10;    pol = (key in ['right', 'up', 'equal'])*2-1  # Polarity: Whatever dimension, move up or down?&amp;#10;    mag = mags[stim.units]  # Magnitude to move by&amp;#10;    if key in ['left', 'right']:&amp;#10;        # Move along the x axis&amp;#10;        stim.pos = (stim.pos[0] + mag*pol, &amp;#10;                    stim.pos[1])&amp;#10;    if key in ['up', 'down']:&amp;#10;        # Move along the y axis&amp;#10;        stim.pos = (stim.pos[0], &amp;#10;                    stim.pos[1] + mag*pol)&amp;#10;    if key in ['equal', 'minus']:&amp;#10;        # Move along the size axis&amp;#10;        if stim.size[0] + mag*pol&gt;=0: # only if size greater than 0&amp;#10;            stim.size = (stim.size[0] + mag*pol,&amp;#10;                        stim.size[1] + mag*pol)&amp;#10;    if key in ['h', 'p', 'n', 'c', 'd']:&amp;#10;        # Set units&amp;#10;        stim.units = unitCodes[key]&amp;#10;        poslog.units = unitCodes[key]&amp;#10;    if key in ['r']:&amp;#10;        # Reset&amp;#10;        stim.units = 'height'&amp;#10;        stim.size = (0.1, 0.1)&amp;#10;        stim.pos = (0, 0)" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;keys = event.getKeys();&amp;#10;if (keys) {&amp;#10;    if (_pj.in_es6(&quot;escape&quot;, keys)) {&amp;#10;        continueRoutine = false;&amp;#10;        break;&amp;#10;    }&amp;#10;    key = keys.pop();&amp;#10;    pol = ((_pj.in_es6(key, [&quot;right&quot;, &quot;up&quot;, &quot;equal&quot;]) * 2) - 1);&amp;#10;    mag = mags[stim.units];&amp;#10;    if (_pj.in_es6(key, [&quot;left&quot;, &quot;right&quot;])) {&amp;#10;        stim.pos = [(stim.pos[0] + (mag * pol)), stim.pos[1]];&amp;#10;    }&amp;#10;    if (_pj.in_es6(key, [&quot;up&quot;, &quot;down&quot;])) {&amp;#10;        stim.pos = [stim.pos[0], (stim.pos[1] + (mag * pol))];&amp;#10;    }&amp;#10;    if (_pj.in_es6(key, [&quot;equal&quot;, &quot;minus&quot;])) {&amp;#10;        if (((stim.size[0] + (mag * pol)) &gt;= 0)) {&amp;#10;            stim.size = [(stim.size[0] + (mag * pol)), (stim.size[1] + (mag * pol))];&amp;#10;        }&amp;#10;    }&amp;#10;    if (_pj.in_es6(key, [&quot;h&quot;, &quot;p&quot;, &quot;n&quot;, &quot;c&quot;, &quot;d&quot;])) {&amp;#10;        stim.units = unitCodes[key];&amp;#10;        poslog.units = unitCodes[key];&amp;#10;    }&amp;#10;    if (_pj.in_es6(key, [&quot;r&quot;])) {&amp;#10;        stim.units = &quot;height&quot;;&amp;#10;        stim.size = [0.1, 0.1];&amp;#10;        stim.pos = [0, 0];&amp;#10;    }&amp;#10;}&amp;#10;" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
      <PolygonComponent name="stim">
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="fillColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="fillColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="interpolate" updates="constant" val="linear" valType="str"/>
        <Param name="lineColor" updates="constant" val="$[1,1,1]" valType="str"/>
        <Param name="lineColorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="lineWidth" updates="constant" val="1" valType="code"/>
        <Param name="nVertices" updates="constant" val="4" valType="int"/>
        <Param name="name" updates="None" val="stim" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, 0)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="shape" updates="constant" val="rectangle" valType="str"/>
        <Param name="size" updates="constant" val="(0.5, 0.5)" valType="code"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
      </PolygonComponent>
      <TextComponent name="inst">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.025" valType="code"/>
        <Param name="name" updates="None" val="inst" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="constant" val="(0, -0.4)" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="constant" val="Move: up, down, left, right&amp;#10;Scale: minus = shrink, equals = grow&amp;#10;Units: p = pix, h = height, n = norm, c = cm, d = deg&amp;#10;Reset: r" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
      <TextComponent name="poslog">
        <Param name="color" updates="constant" val="black" valType="str"/>
        <Param name="colorSpace" updates="constant" val="rgb" valType="str"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="durationEstim" updates="None" val="" valType="code"/>
        <Param name="flip" updates="constant" val="" valType="str"/>
        <Param name="font" updates="constant" val="Arial" valType="str"/>
        <Param name="languageStyle" updates="None" val="LTR" valType="str"/>
        <Param name="letterHeight" updates="constant" val="0.05" valType="code"/>
        <Param name="name" updates="None" val="poslog" valType="code"/>
        <Param name="opacity" updates="constant" val="1" valType="code"/>
        <Param name="ori" updates="constant" val="0" valType="code"/>
        <Param name="pos" updates="set every frame" val="stim.pos" valType="code"/>
        <Param name="saveStartStop" updates="None" val="True" valType="bool"/>
        <Param name="startEstim" updates="None" val="" valType="code"/>
        <Param name="startType" updates="None" val="time (s)" valType="str"/>
        <Param name="startVal" updates="None" val="0.0" valType="code"/>
        <Param name="stopType" updates="None" val="duration (s)" valType="str"/>
        <Param name="stopVal" updates="constant" val="" valType="code"/>
        <Param name="syncScreenRefresh" updates="None" val="True" valType="bool"/>
        <Param name="text" updates="set every frame" val="$f&quot;pos: ({stim.pos[0]:.2f}, {stim.pos[1]:.2f})\nsize: ({stim.size[0]:.2f}, {stim.size[1]:.2f})\nunits: {stim.units}&quot;" valType="extendedStr"/>
        <Param name="units" updates="None" val="from exp settings" valType="str"/>
        <Param name="wrapWidth" updates="constant" val="" valType="code"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="rectMover"/>
  </Flow>
</PsychoPy2experiment>
