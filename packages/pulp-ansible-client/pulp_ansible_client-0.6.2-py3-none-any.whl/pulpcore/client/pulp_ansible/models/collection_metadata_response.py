# coding: utf-8

"""
    Pulp 3 API

    Fetch, Upload, Organize, and Distribute Software Packages  # noqa: E501

    The version of the OpenAPI document: v3
    Contact: pulp-list@redhat.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pulpcore.client.pulp_ansible.configuration import Configuration


class CollectionMetadataResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'authors': 'list[str]',
        'contents': 'object',
        'dependencies': 'object',
        'description': 'str',
        'documentation': 'str',
        'homepage': 'str',
        'issues': 'str',
        'license': 'list[str]',
        'repository': 'str',
        'tags': 'list[str]'
    }

    attribute_map = {
        'authors': 'authors',
        'contents': 'contents',
        'dependencies': 'dependencies',
        'description': 'description',
        'documentation': 'documentation',
        'homepage': 'homepage',
        'issues': 'issues',
        'license': 'license',
        'repository': 'repository',
        'tags': 'tags'
    }

    def __init__(self, authors=None, contents=None, dependencies=None, description=None, documentation=None, homepage=None, issues=None, license=None, repository=None, tags=None, local_vars_configuration=None):  # noqa: E501
        """CollectionMetadataResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._authors = None
        self._contents = None
        self._dependencies = None
        self._description = None
        self._documentation = None
        self._homepage = None
        self._issues = None
        self._license = None
        self._repository = None
        self._tags = None
        self.discriminator = None

        if authors is not None:
            self.authors = authors
        if contents is not None:
            self.contents = contents
        if dependencies is not None:
            self.dependencies = dependencies
        if description is not None:
            self.description = description
        if documentation is not None:
            self.documentation = documentation
        if homepage is not None:
            self.homepage = homepage
        if issues is not None:
            self.issues = issues
        if license is not None:
            self.license = license
        if repository is not None:
            self.repository = repository
        self.tags = tags

    @property
    def authors(self):
        """Gets the authors of this CollectionMetadataResponse.  # noqa: E501


        :return: The authors of this CollectionMetadataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this CollectionMetadataResponse.


        :param authors: The authors of this CollectionMetadataResponse.  # noqa: E501
        :type: list[str]
        """

        self._authors = authors

    @property
    def contents(self):
        """Gets the contents of this CollectionMetadataResponse.  # noqa: E501


        :return: The contents of this CollectionMetadataResponse.  # noqa: E501
        :rtype: object
        """
        return self._contents

    @contents.setter
    def contents(self, contents):
        """Sets the contents of this CollectionMetadataResponse.


        :param contents: The contents of this CollectionMetadataResponse.  # noqa: E501
        :type: object
        """

        self._contents = contents

    @property
    def dependencies(self):
        """Gets the dependencies of this CollectionMetadataResponse.  # noqa: E501


        :return: The dependencies of this CollectionMetadataResponse.  # noqa: E501
        :rtype: object
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies):
        """Sets the dependencies of this CollectionMetadataResponse.


        :param dependencies: The dependencies of this CollectionMetadataResponse.  # noqa: E501
        :type: object
        """

        self._dependencies = dependencies

    @property
    def description(self):
        """Gets the description of this CollectionMetadataResponse.  # noqa: E501


        :return: The description of this CollectionMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionMetadataResponse.


        :param description: The description of this CollectionMetadataResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def documentation(self):
        """Gets the documentation of this CollectionMetadataResponse.  # noqa: E501


        :return: The documentation of this CollectionMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._documentation

    @documentation.setter
    def documentation(self, documentation):
        """Sets the documentation of this CollectionMetadataResponse.


        :param documentation: The documentation of this CollectionMetadataResponse.  # noqa: E501
        :type: str
        """

        self._documentation = documentation

    @property
    def homepage(self):
        """Gets the homepage of this CollectionMetadataResponse.  # noqa: E501


        :return: The homepage of this CollectionMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._homepage

    @homepage.setter
    def homepage(self, homepage):
        """Sets the homepage of this CollectionMetadataResponse.


        :param homepage: The homepage of this CollectionMetadataResponse.  # noqa: E501
        :type: str
        """

        self._homepage = homepage

    @property
    def issues(self):
        """Gets the issues of this CollectionMetadataResponse.  # noqa: E501


        :return: The issues of this CollectionMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._issues

    @issues.setter
    def issues(self, issues):
        """Sets the issues of this CollectionMetadataResponse.


        :param issues: The issues of this CollectionMetadataResponse.  # noqa: E501
        :type: str
        """

        self._issues = issues

    @property
    def license(self):
        """Gets the license of this CollectionMetadataResponse.  # noqa: E501


        :return: The license of this CollectionMetadataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this CollectionMetadataResponse.


        :param license: The license of this CollectionMetadataResponse.  # noqa: E501
        :type: list[str]
        """

        self._license = license

    @property
    def repository(self):
        """Gets the repository of this CollectionMetadataResponse.  # noqa: E501


        :return: The repository of this CollectionMetadataResponse.  # noqa: E501
        :rtype: str
        """
        return self._repository

    @repository.setter
    def repository(self, repository):
        """Sets the repository of this CollectionMetadataResponse.


        :param repository: The repository of this CollectionMetadataResponse.  # noqa: E501
        :type: str
        """

        self._repository = repository

    @property
    def tags(self):
        """Gets the tags of this CollectionMetadataResponse.  # noqa: E501


        :return: The tags of this CollectionMetadataResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CollectionMetadataResponse.


        :param tags: The tags of this CollectionMetadataResponse.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and tags is None:  # noqa: E501
            raise ValueError("Invalid value for `tags`, must not be `None`")  # noqa: E501

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionMetadataResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CollectionMetadataResponse):
            return True

        return self.to_dict() != other.to_dict()
