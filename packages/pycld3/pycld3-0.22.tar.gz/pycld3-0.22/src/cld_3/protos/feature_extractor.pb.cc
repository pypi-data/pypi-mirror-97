// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: feature_extractor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "feature_extractor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace chrome_lang_id {

void protobuf_ShutdownFile_feature_5fextractor_2eproto() {
  delete Parameter::default_instance_;
  delete FeatureFunctionDescriptor::default_instance_;
  delete FeatureExtractorDescriptor::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_feature_5fextractor_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_feature_5fextractor_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_feature_5fextractor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Parameter::default_instance_ = new Parameter();
  FeatureFunctionDescriptor::default_instance_ = new FeatureFunctionDescriptor();
  FeatureExtractorDescriptor::default_instance_ = new FeatureExtractorDescriptor();
  Parameter::default_instance_->InitAsDefaultInstance();
  FeatureFunctionDescriptor::default_instance_->InitAsDefaultInstance();
  FeatureExtractorDescriptor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_feature_5fextractor_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_feature_5fextractor_2eproto_once_);
void protobuf_AddDesc_feature_5fextractor_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_feature_5fextractor_2eproto_once_,
                 &protobuf_AddDesc_feature_5fextractor_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_feature_5fextractor_2eproto {
  StaticDescriptorInitializer_feature_5fextractor_2eproto() {
    protobuf_AddDesc_feature_5fextractor_2eproto();
  }
} static_descriptor_initializer_feature_5fextractor_2eproto_;
#endif

// ===================================================================

static ::std::string* MutableUnknownFieldsForParameter(
    Parameter* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Parameter::kNameFieldNumber;
const int Parameter::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Parameter::Parameter()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.Parameter)
}

void Parameter::InitAsDefaultInstance() {
}

Parameter::Parameter(const Parameter& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.Parameter)
}

void Parameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Parameter::~Parameter() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.Parameter)
  SharedDtor();
}

void Parameter::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Parameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Parameter& Parameter::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_feature_5fextractor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_feature_5fextractor_2eproto();
#endif
  return *default_instance_;
}

Parameter* Parameter::default_instance_ = NULL;

Parameter* Parameter::New(::google::protobuf::Arena* arena) const {
  Parameter* n = new Parameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.Parameter)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Parameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForParameter, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.Parameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // optional string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.Parameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.Parameter)
  return false;
#undef DO_
}

void Parameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.Parameter)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.Parameter)
}

int Parameter::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.Parameter)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Parameter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Parameter*>(&from));
}

void Parameter::MergeFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.Parameter)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void Parameter::CopyFrom(const Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Parameter::IsInitialized() const {

  return true;
}

void Parameter::Swap(Parameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Parameter::InternalSwap(Parameter* other) {
  name_.Swap(&other->name_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Parameter::GetTypeName() const {
  return "chrome_lang_id.Parameter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Parameter

// optional string name = 1;
bool Parameter::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Parameter::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Parameter::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Parameter::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Parameter::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Parameter.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Parameter.name)
}
 void Parameter::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Parameter.name)
}
 void Parameter::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Parameter.name)
}
 ::std::string* Parameter::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Parameter.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Parameter::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Parameter.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Parameter.name)
}

// optional string value = 2;
bool Parameter::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Parameter::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Parameter::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Parameter::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Parameter::value() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.Parameter.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.Parameter.value)
}
 void Parameter::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.Parameter.value)
}
 void Parameter::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.Parameter.value)
}
 ::std::string* Parameter::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.Parameter.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Parameter::release_value() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.Parameter.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Parameter::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.Parameter.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFeatureFunctionDescriptor(
    FeatureFunctionDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureFunctionDescriptor::kTypeFieldNumber;
const int FeatureFunctionDescriptor::kNameFieldNumber;
const int FeatureFunctionDescriptor::kArgumentFieldNumber;
const int FeatureFunctionDescriptor::kParameterFieldNumber;
const int FeatureFunctionDescriptor::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureFunctionDescriptor::FeatureFunctionDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.FeatureFunctionDescriptor)
}

void FeatureFunctionDescriptor::InitAsDefaultInstance() {
}

FeatureFunctionDescriptor::FeatureFunctionDescriptor(const FeatureFunctionDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.FeatureFunctionDescriptor)
}

void FeatureFunctionDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  argument_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureFunctionDescriptor::~FeatureFunctionDescriptor() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.FeatureFunctionDescriptor)
  SharedDtor();
}

void FeatureFunctionDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FeatureFunctionDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeatureFunctionDescriptor& FeatureFunctionDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_feature_5fextractor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_feature_5fextractor_2eproto();
#endif
  return *default_instance_;
}

FeatureFunctionDescriptor* FeatureFunctionDescriptor::default_instance_ = NULL;

FeatureFunctionDescriptor* FeatureFunctionDescriptor::New(::google::protobuf::Arena* arena) const {
  FeatureFunctionDescriptor* n = new FeatureFunctionDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureFunctionDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.FeatureFunctionDescriptor)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_type()) {
      type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    argument_ = 0;
  }
  parameter_.Clear();
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FeatureFunctionDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForFeatureFunctionDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.FeatureFunctionDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_argument;
        break;
      }

      // optional int32 argument = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_argument:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &argument_)));
          set_has_argument();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_parameter;
        break;
      }

      // repeated .chrome_lang_id.Parameter parameter = 4;
      case 4: {
        if (tag == 34) {
         parse_parameter:
          DO_(input->IncrementRecursionDepth());
         parse_loop_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_parameter()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_parameter;
        if (input->ExpectTag(58)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
      case 7: {
        if (tag == 58) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.FeatureFunctionDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.FeatureFunctionDescriptor)
  return false;
#undef DO_
}

void FeatureFunctionDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.FeatureFunctionDescriptor)
  // required string type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional int32 argument = 3 [default = 0];
  if (has_argument()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->argument(), output);
  }

  // repeated .chrome_lang_id.Parameter parameter = 4;
  for (unsigned int i = 0, n = this->parameter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->parameter(i), output);
  }

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->feature(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.FeatureFunctionDescriptor)
}

int FeatureFunctionDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.FeatureFunctionDescriptor)
  int total_size = 0;

  // required string type = 1;
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }
  if (_has_bits_[1 / 32] & 6u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 argument = 3 [default = 0];
    if (has_argument()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->argument());
    }

  }
  // repeated .chrome_lang_id.Parameter parameter = 4;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureFunctionDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeatureFunctionDescriptor*>(&from));
}

void FeatureFunctionDescriptor::MergeFrom(const FeatureFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.FeatureFunctionDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  parameter_.MergeFrom(from.parameter_);
  feature_.MergeFrom(from.feature_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_argument()) {
      set_argument(from.argument());
    }
  }
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void FeatureFunctionDescriptor::CopyFrom(const FeatureFunctionDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.FeatureFunctionDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureFunctionDescriptor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->feature())) return false;
  return true;
}

void FeatureFunctionDescriptor::Swap(FeatureFunctionDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureFunctionDescriptor::InternalSwap(FeatureFunctionDescriptor* other) {
  type_.Swap(&other->type_);
  name_.Swap(&other->name_);
  std::swap(argument_, other->argument_);
  parameter_.UnsafeArenaSwap(&other->parameter_);
  feature_.UnsafeArenaSwap(&other->feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FeatureFunctionDescriptor::GetTypeName() const {
  return "chrome_lang_id.FeatureFunctionDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureFunctionDescriptor

// required string type = 1;
bool FeatureFunctionDescriptor::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FeatureFunctionDescriptor::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
void FeatureFunctionDescriptor::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void FeatureFunctionDescriptor::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
 const ::std::string& FeatureFunctionDescriptor::type() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureFunctionDescriptor::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.FeatureFunctionDescriptor.type)
}
 void FeatureFunctionDescriptor::set_type(const char* value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.FeatureFunctionDescriptor.type)
}
 void FeatureFunctionDescriptor::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.FeatureFunctionDescriptor.type)
}
 ::std::string* FeatureFunctionDescriptor::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureFunctionDescriptor::release_type() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.FeatureFunctionDescriptor.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureFunctionDescriptor::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.FeatureFunctionDescriptor.type)
}

// optional string name = 2;
bool FeatureFunctionDescriptor::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FeatureFunctionDescriptor::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
void FeatureFunctionDescriptor::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
void FeatureFunctionDescriptor::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& FeatureFunctionDescriptor::name() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureFunctionDescriptor::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chrome_lang_id.FeatureFunctionDescriptor.name)
}
 void FeatureFunctionDescriptor::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chrome_lang_id.FeatureFunctionDescriptor.name)
}
 void FeatureFunctionDescriptor::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chrome_lang_id.FeatureFunctionDescriptor.name)
}
 ::std::string* FeatureFunctionDescriptor::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* FeatureFunctionDescriptor::release_name() {
  // @@protoc_insertion_point(field_release:chrome_lang_id.FeatureFunctionDescriptor.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void FeatureFunctionDescriptor::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chrome_lang_id.FeatureFunctionDescriptor.name)
}

// optional int32 argument = 3 [default = 0];
bool FeatureFunctionDescriptor::has_argument() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FeatureFunctionDescriptor::set_has_argument() {
  _has_bits_[0] |= 0x00000004u;
}
void FeatureFunctionDescriptor::clear_has_argument() {
  _has_bits_[0] &= ~0x00000004u;
}
void FeatureFunctionDescriptor::clear_argument() {
  argument_ = 0;
  clear_has_argument();
}
 ::google::protobuf::int32 FeatureFunctionDescriptor::argument() const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.argument)
  return argument_;
}
 void FeatureFunctionDescriptor::set_argument(::google::protobuf::int32 value) {
  set_has_argument();
  argument_ = value;
  // @@protoc_insertion_point(field_set:chrome_lang_id.FeatureFunctionDescriptor.argument)
}

// repeated .chrome_lang_id.Parameter parameter = 4;
int FeatureFunctionDescriptor::parameter_size() const {
  return parameter_.size();
}
void FeatureFunctionDescriptor::clear_parameter() {
  parameter_.Clear();
}
const ::chrome_lang_id::Parameter& FeatureFunctionDescriptor::parameter(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return parameter_.Get(index);
}
::chrome_lang_id::Parameter* FeatureFunctionDescriptor::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return parameter_.Mutable(index);
}
::chrome_lang_id::Parameter* FeatureFunctionDescriptor::add_parameter() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return parameter_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >*
FeatureFunctionDescriptor::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return &parameter_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::Parameter >&
FeatureFunctionDescriptor::parameter() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.FeatureFunctionDescriptor.parameter)
  return parameter_;
}

// repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 7;
int FeatureFunctionDescriptor::feature_size() const {
  return feature_.size();
}
void FeatureFunctionDescriptor::clear_feature() {
  feature_.Clear();
}
const ::chrome_lang_id::FeatureFunctionDescriptor& FeatureFunctionDescriptor::feature(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return feature_.Get(index);
}
::chrome_lang_id::FeatureFunctionDescriptor* FeatureFunctionDescriptor::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return feature_.Mutable(index);
}
::chrome_lang_id::FeatureFunctionDescriptor* FeatureFunctionDescriptor::add_feature() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
FeatureFunctionDescriptor::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
FeatureFunctionDescriptor::feature() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.FeatureFunctionDescriptor.feature)
  return feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

static ::std::string* MutableUnknownFieldsForFeatureExtractorDescriptor(
    FeatureExtractorDescriptor* ptr) {
  return ptr->mutable_unknown_fields();
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FeatureExtractorDescriptor::kFeatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FeatureExtractorDescriptor::FeatureExtractorDescriptor()
  : ::google::protobuf::MessageLite(), _arena_ptr_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:chrome_lang_id.FeatureExtractorDescriptor)
}

void FeatureExtractorDescriptor::InitAsDefaultInstance() {
}

FeatureExtractorDescriptor::FeatureExtractorDescriptor(const FeatureExtractorDescriptor& from)
  : ::google::protobuf::MessageLite(),
    _arena_ptr_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:chrome_lang_id.FeatureExtractorDescriptor)
}

void FeatureExtractorDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  _unknown_fields_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FeatureExtractorDescriptor::~FeatureExtractorDescriptor() {
  // @@protoc_insertion_point(destructor:chrome_lang_id.FeatureExtractorDescriptor)
  SharedDtor();
}

void FeatureExtractorDescriptor::SharedDtor() {
  _unknown_fields_.DestroyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FeatureExtractorDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FeatureExtractorDescriptor& FeatureExtractorDescriptor::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_feature_5fextractor_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_feature_5fextractor_2eproto();
#endif
  return *default_instance_;
}

FeatureExtractorDescriptor* FeatureExtractorDescriptor::default_instance_ = NULL;

FeatureExtractorDescriptor* FeatureExtractorDescriptor::New(::google::protobuf::Arena* arena) const {
  FeatureExtractorDescriptor* n = new FeatureExtractorDescriptor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FeatureExtractorDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:chrome_lang_id.FeatureExtractorDescriptor)
  feature_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  _unknown_fields_.ClearToEmptyNoArena(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FeatureExtractorDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(
          &MutableUnknownFieldsForFeatureExtractorDescriptor, this));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:chrome_lang_id.FeatureExtractorDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_feature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_feature()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_feature;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chrome_lang_id.FeatureExtractorDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chrome_lang_id.FeatureExtractorDescriptor)
  return false;
#undef DO_
}

void FeatureExtractorDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chrome_lang_id.FeatureExtractorDescriptor)
  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  for (unsigned int i = 0, n = this->feature_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->feature(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:chrome_lang_id.FeatureExtractorDescriptor)
}

int FeatureExtractorDescriptor::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:chrome_lang_id.FeatureExtractorDescriptor)
  int total_size = 0;

  // repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
  total_size += 1 * this->feature_size();
  for (int i = 0; i < this->feature_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->feature(i));
  }

  total_size += unknown_fields().size();

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FeatureExtractorDescriptor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FeatureExtractorDescriptor*>(&from));
}

void FeatureExtractorDescriptor::MergeFrom(const FeatureExtractorDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chrome_lang_id.FeatureExtractorDescriptor)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  feature_.MergeFrom(from.feature_);
  if (!from.unknown_fields().empty()) {
    mutable_unknown_fields()->append(from.unknown_fields());
  }
}

void FeatureExtractorDescriptor::CopyFrom(const FeatureExtractorDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chrome_lang_id.FeatureExtractorDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeatureExtractorDescriptor::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->feature())) return false;
  return true;
}

void FeatureExtractorDescriptor::Swap(FeatureExtractorDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FeatureExtractorDescriptor::InternalSwap(FeatureExtractorDescriptor* other) {
  feature_.UnsafeArenaSwap(&other->feature_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _unknown_fields_.Swap(&other->_unknown_fields_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FeatureExtractorDescriptor::GetTypeName() const {
  return "chrome_lang_id.FeatureExtractorDescriptor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FeatureExtractorDescriptor

// repeated .chrome_lang_id.FeatureFunctionDescriptor feature = 1;
int FeatureExtractorDescriptor::feature_size() const {
  return feature_.size();
}
void FeatureExtractorDescriptor::clear_feature() {
  feature_.Clear();
}
const ::chrome_lang_id::FeatureFunctionDescriptor& FeatureExtractorDescriptor::feature(int index) const {
  // @@protoc_insertion_point(field_get:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return feature_.Get(index);
}
::chrome_lang_id::FeatureFunctionDescriptor* FeatureExtractorDescriptor::mutable_feature(int index) {
  // @@protoc_insertion_point(field_mutable:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return feature_.Mutable(index);
}
::chrome_lang_id::FeatureFunctionDescriptor* FeatureExtractorDescriptor::add_feature() {
  // @@protoc_insertion_point(field_add:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return feature_.Add();
}
::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >*
FeatureExtractorDescriptor::mutable_feature() {
  // @@protoc_insertion_point(field_mutable_list:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return &feature_;
}
const ::google::protobuf::RepeatedPtrField< ::chrome_lang_id::FeatureFunctionDescriptor >&
FeatureExtractorDescriptor::feature() const {
  // @@protoc_insertion_point(field_list:chrome_lang_id.FeatureExtractorDescriptor.feature)
  return feature_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace chrome_lang_id

// @@protoc_insertion_point(global_scope)
